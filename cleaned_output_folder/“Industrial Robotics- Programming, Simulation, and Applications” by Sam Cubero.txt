Industrial Robotics Theory, Modelling and Control Industrial Robotics Theory, Modelling and Control Edited by Sam Cubero pro literatur Verlag Published by the plV pro literatur Verlag Robert Mayer-Scholz plV pro literatur Verlag Robert Mayer-Scholz Mammendorf Germany Abstracting and non-profit use of the materi al is permitted with credit to the source. State- ments and opinions expressed in the chapters are these of the individual contributors and not necessarily those of the editors or publisher. No responsibility is accepted for the accuracy of information contained in the published articles. Publisher assumes no responsibility liability for any damage or injury to persons or property arising out of the use of any materials, in- structions, methods or ideas contained inside. After this work has been published by the Ad-vanced Robotic Systems International, authors have the right to republish it, in whole or part, in any publication of which they are an author or editor, and the make other personal use of the work. © 2007 Advanced Robotic Systems International www.ars-journal.com Additional copies can be obtained from:publication@ars-journal.com First published January 2007 Typeface Palatino Linotype 10/11/12 pt Printed in Croatia A catalog record for this book is available from the German Library. Industrial Robotics: Theory, Modelling and Control / Edited by Sam Cubero. p. cm. ISBN 3-86611-285-8 Manipulators. 2. Kinematic. 3. Design I. Title. V Contents Preface ............................................................................................................................... ........................... IX Robotic Body-Mind Integration: Next Grand Challenge in Robotics .................. 1 K. Kawamura, S. M. Gordon and P. Ratanaswasd Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice ........................................................................................................................... 43 I-M. Chen, G. Yang and S. H. Yeo Kinematic Design and Description of Industrial Robotic Chains ....................... 83 P. Mitrouchev Robot Kinematics: Forward and Inverse Kinematics ............................................... 117 S. Kucuk and Z. Bingul Structure Based Classification and Kinematic Analysis of Six-Joint Industrial Robotic Manipulators ...................................................................... 149 T. Balkan, M. K. Özgören and M. A. S. Arıkan Inverse Position Procedure for Manipulators with Rotary Joints .................... 185 I. A. Sultan Cable-based Robot Manipulators with Translational Degrees of Freedom ......................................................................................................................... 211 S. Behzadipour and A. Khajepour A Complete Family of Kinematically-Simple Joint Layouts: Layout Models, Associated Displacement Problem Solutions and Applications ......................................................................................................... 237 S. Nokleby and R. Podhorodeski On the Analysis and Kinematic Design of a Novel 2-DOF Translational Parallel Robot ....................................................................................................... 265 J. Wang, X-J. Liu and C. Wu Industrial and Mobile Robot Collision–Free Motion Planning Using Fuzzy Logic Algorithms ................................................................................................ 301 S. G. Tzafestas and P. Zavlangas Trajectory Planning and Control of Industrial Robot Manipulators ................ 335 S. R. Munasinghe and M. NakamuraVI Collision free Path Planning for Multi-DoF Manipulators ...................................... 349 S. Lahouar, S. Zeghloul and L. Romdhane Determination of Location and Path Planning Algorithms for Industrial Robots ........................................................................................................................ 379 Y. Ting and H.-C. Jar Homogeneous Approach for Output Feedback Tracking Control of Robot Manipulators ................................................................................................. 393 L. T. Aguilar Design and Implementation of FuzzyControl for Industrial Robot .................. 409 M. S. Hitam Modelling of Parameter and Bound Estimation Laws for Adaptive-Robust Control of Mechanical ManipulatorsUsing Variable Function Approach ....................................................................................... 439 R. Burkan Soft Computing Based Mobile Manipulator Controller Design .......................... 467 A. Foudil and B. Khier Control of Redundant Robotic Manipulators with State Constraints ............ 499 M. Galicki Model-Based Control for Industrial Robots: Uniform Approaches for Serial and Parallel Structures .......................................................................................... 523 H. Abdellatif and B. Heimann Parallel Manipulators with Lower Mobility ....................................................................... 557 R. Di Gregorio Error Modeling and Accuracy of Parallel Industrial Robots ................................ 573 H. Cui and Z. Zhu Networking Multiple Robots for Cooperative Manipulation ................................. 647 M. Moallem Web-Based Remote Manipulation of Parallel Robot in Advanced Manufacturing Systems ................................................................................................................. 659 D. Zhang, L. Wang and E. Esmailzadeh Human-Robot Interaction Control for Industrial Robot Arm through Software Platform for Agents and Knowledge Management ............................................................................................................................... ........... 677 T. Zhang, V. Ampornaramveth and H. Ueno Spatial Vision-Based Control of High-Speed Robot Arms .................................... 693 F. Lange and G. Hirzinger Visual Control System for Robotic Welding .................................................................... 713 D. Xu, M. Tan and Y. Li VII Visual Conveyor Tracking in High-speed Robotics Tasks .................................... 745 T. Borangiu Learning-Based Visual Feedback Control of an Industrial Robot ................... 779 X. Nan-Feng and S. Nahavandi Joystick Teaching System for Industrial Robots Using Fuzzy Compliance Control ......................................................................................................................... 799 F. Nagata, K. Watanabe and K. Kiguchi Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms ............................................................................................................................... ............. 813 S. Goto Predictive Force Control of Robot Manipulators in Nonrigid Environments .................................................................................................................. 841 L. F. Baptista, J. M. C. Sousa and J. M. G. Sa da Costa Friction Compensation in Hybrid Force/Velocity Control for Contour Tracking Tasks ..................................................................................... 875 A. Visioli, G. Ziliani and G. Legnani Industrial Robot Control System Parametric Design on the Base of Methods for Uncertain Systems Robustness ............................................. 895 A. A. Nesenchuk and V. A. Nesenchuk Stochastic Analysis of a System containing One Robot and (n-1) Standby Safety Units with an Imperfect Switch ............................................... 927 B. S. Dhillon and S. Cheng Corresponding Author List ......................................................................................................... 951 IX Preface Robotics is the applied science of motion control for multi-axis manipulators and is a large subset of the field of "mechatronics" (Mechanical, Electronic and Software engineering for product or systems development, particularly for motion control applications). Mechatronics is a more general term that includes robotic arms, positioning systems, sensors and machines that are controlled by electronics and/or software, such as automated machinery, mobile ro-bots and even your computer controlled washing machine and DVD movie player. Most of the information taught in mechatronic engineering courses around the world stems from indus-trial robotics research, since most of the ear liest actuator and sensor technologies were first developed and designed for indoor factory applications. Robotics, sensors, actuators and controller technologies continue to improve and evolve at an amazing rate. Automation syst ems and robots today are performing motion control and real- time decision making tasks that were considered impossible just 40 years ago. It can truly be said that we are now living in a time where alm ost any form of physical work that a human being can do can be replicated or performed faster, more accurately, cheaper and more consis-tently using computer controlled robots and mechanisms. Many highly skilled jobs are now completely automated. Manufacturing jobs such as metal milling, lathe turning, pattern mak- ing and welding are now being performed more easily, cheaper and faster using CNC ma-chines and industrial robots controlled by easy-to-use 3D CAD/CAM software. Designs for mechanical components can be quickly created on a computer screen and converted to real-world solid material prototypes in under one hour, thus saving a great deal of time and costly material that would normally be wasted due to human error. Industrial robots and machines are being used to assemble, manufacture or paint most of the products we take for granted and use on a daily basis, such as computer mo therboards and peripheral hardware, automo- biles, household appliances and all kinds of useful whitegoods found in a modern home. In the 20th century, engineers have mastered almost all forms of motion control and have proven that robots and machines can perform almost any job that is considered too heavy, too tiring, too boring or too dangerous and harmful for human beings. Human decision making tasks are now being automated using advanced sensor technologies such as machine vision, 3D scanning and a large variety of non-contact proximity sensors. The areas of technology relating to sensors and control are still at a fairly primitive stage of devel- opment and a great deal of work is required to get sensors to perform as well as human sen-sors (vision, hearing, touch/tactile, pressure and temperature) and make quick visual and auditory recognitions and decisions like the human brain. Almost all machine controllers are very limited in their capabilities and still need to be programmed or taught what to do using an esoteric programming language or a limited set of commands that are only understood by highly trained and experienced technicians or engineers with years of experience. Most ma- chines and robots today are still relatively "dumb" copiers of human intelligence, unable to learn and think for themselves due to the procedural nature of most software control code. X In essence, almost all robots today require a great deal of human guidance in the form of soft- ware code that is played back over and over again. The majority of machine vision and object recognition applications today apply some form of mechanistic or deterministic property-matching, edge detection or colour scanning approach for identifying and distinguishing dif- ferent objects in a field of view. In reality, machine vision systems today can mimic human vi- sion, perception and identification to a ra ther crude degree of complexity depending on the human instructions provided in the software code, however, almost all vision systems today are slow and are quite poor at identification, recognition, learning and adapting to bad images and errors, compared to the human brain. Also, most vision systems require objects to have a colour that provides a strong contrast with a background colour, in order to detect edges relia-bly. In summary, today's procedural-software-driven computer controllers are limited by the amount of programming and decision-making "intelligence" passed onto it by a human pro-grammer or engineer, usually in the form of a single-threaded application or a complex list of step-by-step instructions executed in a continuous loop or triggered by sensor or communica- tion "interrupts". This method of control is suitable for most repetitive applications, however, new types of computer architecture based on how the human brain works and operates is un-chartered research area that needs exploration, modelling and experimentation in order to speed up shape or object recognition times and try to minimize the large amount of human ef- fort currently required to program, set up and commission "intelligent" machines that are ca-pable of learning new tasks and responding to errors or emergencies as competently as a hu- man being. The biggest challenge for the 21st century is to make robots and machines "intelligent" enough to learn how to perform tasks automatically an d adapt to unforeseen operating conditions or errors in a robust and predictable manner, without the need for human guidance, instructions or programming. In other words: "Create robot controllers that are fast learners, able to learn and perform new tasks as easily and competently as a human being just by showing it how to do something only once. It should also learn from its own experiences, just like a young child learning and trying new skills." Note that a new-born baby knows practically nothing but is able to learn so many new things automatically, such as sounds, language, objects and names. This is a "tall order" and sounds very much like what you would expect to see in a "Star Wars" or "Star Trek" science fiction film, but who would have thought, 40 years ago, that most people could be instantly contacted from almost anywhere with portable mobile phones, or that you could send photos and letters to friends and family members instantly to almost anywhere in the world, or that programmable computers would be smaller than your fingernails? Who ever thought that a robot can automatically perform Cochlear surgery and detect miniscule force and torque changes as a robotic drill makes contact with a thin soft tissue membrane which must not be penetrated? (A task that even the best human surgeons cannot achieve con-sistently with manual drilling tools) Who would have imagined that robots would be assem- bling and creating most of the products we use every day, 40 years ago? At the current accel-erating rate of knowledge growth in the areas of robotics and mechatronics, it is not unreasonable to believe that "the best is yet to come" and that robotics technology will keep on improving to the point where almost all physical jobs will be completely automated and at very low cost. Mobile or "field" robotics is also a rapidly growing field of research, as more XI applications for robotic and mechatronic engineering technology are found outside the well- structured and carefully controlled environments of indoor factories and production lines. Technological development is now at the stage where robots can be programmed to automati- cally plant and harvest food at low cost to end world hunger, engage in cooperative construc- tion work to erect buildings and low-cost modular homes to house the poor, perform remote surveying and video surveillance (land, sea, air & on other planets), automatically build space stations or bases on the Moon or on Mars, perform fully automated mining operations deep underground, safely transport people in flying aerial vehicles to avoid slow road traffic, mow your lawn and recharge itself, guide blind people to their destinations using GPS or machine vision and save human beings from the strain and boredom of highly repetitive production work in factories. In fact, there is no limit to where practical robotic technologies may be used to improve how people work and live. Rather than destroying factory and production jobs, ro-bots are providing more opportunities for people to upgrade their skills to become technicians or robot operators who are spared the difficulties of strenuous, repetitive and often boring manual labour. We are not yet at the level of robotic automation depicted in films like "iRobot" or cartoons like "The Jetsons", where humanoid robots roam the streets freely, however, mod-ern society appears to be headed in that direction and robots of all types could play an increas-ingly important role in our daily lives, perhaps improving the way we work, shop and play. The one truth that faces us all is that life is short and it is important to do as much "good" as possible in the limited time that we are alive. It is important to leave behind a better world for future generations to inherit and enjoy so that they do not suffer unnecessary burdens, physi- cal hardships, expensive education, poor employment opportunities or very high costs of liv-ing that leave them with little or no savings or financial incentives to work. Robotic and mechatronic engineers, researchers and educators are in an excellent position to help leaders in education, business and politics to understand and realize the benefits of promoting robotic applications. All it takes is the desire to do good for others and the kind of burning enthusi-asm and zeal that makes it difficult to sleep at night! Unfortunately, most Universities do not teach engineers how to be effective at developing, selling, promoting and commercializing new technologies, good ideas and useful inventions that could change the world. Many educa- tion systems today still value "rote learning" and memorization skills over "Problem Based Learning" projects or design-and-build activities that promote creativi ty. It is this kind of "in- ventor's mindset" and "entrepreneurial spirit" which motivated the great inventors and scien-tists of the past to keep tinkering, exploring and experimenting with new ideas and concepts which showed good potential for being useful and practical in the real world. In the "spirit of discovery", robotic and mechatronic engineers and researchers around the world are working hard, relentlessly pursuing their research goals in order to discover, develop and test a new great idea or a new technological breakthrough that could make a significant impact or im-provement to the world of robotics and mechat ronics. Sometimes this work is arduous and difficult, requiring a great deal of patience and perseverance, especially when dealing with many failures. In fact, good results cannot always be guaranteed in new "cutting edge" re- search work. XII Despite much frustration, the veteran researcher be comes adept at learning from past mis- takes, viewing each failure as a necessary, vital "learning experience" and an opportunity to make progress towards different goals which may present more interesting questions. This kind of research and investigative work brings great joy when things are going well as planned. I have laughed many times when very conservative research engineers jump and even yell with joy when their experiments finally work for the first time after many failures. The truth is, robotics and mechatronic engineering is very addictive and enjoyable because continuous learning and solving challenging problems with a variety of intelligent people makes every day different, unpredictable and fun. Is technological change happening too fast? Advances in tools and devices are now happening at such a rapid pace that often, by the time students learn a particular type of software or piece of hardware, it is probably already obso- lete and something new and better has replaced it already. Today, it is now virtually impossi-ble for an engineer to be an expert in all areas of robotics and mechatronics engineering, how- ever, it is possible to grasp the fundamentals and become an effective system integrator, able to bring together many different forms of technology to solve problems, and you will see plenty of evidence of this type of problem solving in this book. Mechatronic and robotic auto-mation engineers are becoming increasingly dependent on using "off the shelf" devices, com- ponents and controllers. Using such commercially available components saves a great deal of development time and cost, allowing system developers to focus on accomplishing the tasks of designing, building and testing complete automation systems or manipulators customized for specific applications. Perhaps the most important learning skill for a mechatronic or robotics engineer is the ability to ask the right questions which could lead to the right answers. This book covers a wide range of topics relating to advanced industrial robotics, sensors and automation technologies. Although bei ng highly technical and complex in nature, the papers presented in this book represent some of the latest "cutting edge" technologies and advance-ments in industrial robotics technology. This book covers topics such as networking, proper-ties of manipulators, forward and inverse robot arm kinematics, motion path-planning, ma- chine vision and many other practical topics too numerous to list here. The authors and editors of this book wish to inspire people, especially young ones, to get involved with robotic and mechatronic engineering technology and to develop new and exciting practical applications, perhaps using the ideas and concepts presented herein. On behalf of all the authors and edi-tors who have displayed a great deal of passion, tenacity and unyielding diligence to have this book completed on time, I wish you all the best in your endeavours and hope that you find this book helpful and useful in your research and development activities. Please feel free to contact the publishers and let us know your thoughts. Editor Dr. Sam Cubero Head & Course Coordinator Mechatronic Engineering Curtin University of Technology Australia11 Robotic Body-Mind Integration: Next Grand Challenge in Robotics K. Kawamura, S. M. Gordon and P. Ratanaswasd Introduction During the last thirty years, the fields of robotics, cognitive science and neuro- science made steady progress fairly independently with each other. However, in a quest to understand human cognition and to develop embedded cognitive artifacts like humanoid robots, we now realize that all three fields will benefit immensely by collaboration. For example, recent efforts to develop so-called intelligent robots by integrating robotic body, sensors and AI software led to many robots exhibiting sensorimotor skills in routine task execution. However, most robots still lack robustness. What, then, would be the next challenge for the robotics community? In order to shed light on this question, let’s briefly review the recent history of robotic development from design philosophy point of view. In recent years, design philosophies in the field of robotics have followed the classic dialectic. Initial efforts to build machines capable of perceiving and in- teracting with the world around them involved explicit knowledge representa- tion schemes and formal techniques for manipulating internal representations. Tractability issues gave rise to antithetical approaches, in which deliberation was eschewed in favor of dynamic interactions between primitive reactive processes and the world [Arkin, 1998] [Brooks, 1991]. Many studies have shown the need for both, motivating work towards hybrid architectures [Gat, 1998]. The success of hybrid architecture-based robot con- trol led to wide-ranging commercial applications of robotics technologies. In 1996, a panel discussion was held at the IEEE International Conference on Ro- botic and Automation (ICRA) Conference to identify the grand research chal- lenges for The Robotics and Automation Society for the next decade. Figure 1 shows three grand challenges identified by the panel and the progress made in the last decade in each area. Such an integration of robotic body, sensor and AI software led to a wide vari- ety of robotic systems. For example, Sony’s QRIO (see Figure 1) can dance and play a trumpet. The da Vinci robotic surgical system by Intuitive Surgical Inc. (www.intuitivesurgical.com) can assist surgeon in laparoscopic (abdominal) surgery.2 Industrial Robotics: Theory, Modelling and Control •The 1996 ICRA panel discussion Much progress has been made since thenHuman-Robot Interface (HRI) Modularity System Integration Modular / Evolutionary ÎMulti-Agent Systems, BBDs System Integration ÎIntegration of Body and SensorHuman-Robot Interface ÎVision, Voice, Gesture, Haptic, EMG, etc. BBDs - Brain-Based Devices(IEEE Robotics and Automation Magazine, 3(4), Dec 10-16,1996) Sony’s QRIO Figure 1. Grand Challenges for Robotics and Automation. Such robots are fluent in routine operations and capable of adjusting behavior in similar situations. We hypothesize, however, that robustness and flexibly responding to the full range of contingencies often present in complex task en- vironments will require something more than the combination of these design approaches. Specifically, we see human’s perception and cognitive flexibility and adaptability should be incorporated in the next generation of intelligent robots. We call this “robotic body-mind integration” in this paper. Thus, a fully cognitive robot should be able to recognize situations in which its reac- tive and reasoning abilities fall short of meeting task demands, and it should be able to make modifications to those abilities in hopes of improving the situation. These robots can be classified as cognitive robots . Recently several national and international research programs were initiated to focus on “cognitive agents” [EU, 2004; DARPA, 2005; Asada, et al., 2006]. At ICAR2003 in Coimbra, Portugal, we proposed a cognitive robotic system framework (Figure 2) [Kawamura, et al, 2003a]. In this chapter, we will give details of our cognitive robot architecture with three distinctive memory systems: short-term and long-term memories and an adaptive working memory system will be described. Short-term and long-term memories are used primarily for routine task execution. A working memory system (MWS) allows the robot to focus attention on the most relevant features of the current task and provide robust operation in the presence of distracting or irrelevant events.Robotic Body-Mind Integration: Next Grand Challenge in Robotics 3 Reflective Process Deliberative Process Reactive ProcessSensor Event BaseState of Mind Knowledge base External EnvironmentSTM LTM PerceptionActionATTENTION EMOTION Figure 2. Framework for a cognitive robotic system. Representative Cognitive Architectures in the US Field of cognitive science has been interested in modeling human cognition for some time. Cognitive scientists study human cognition by building models that help explain brain functions in psychological and neuroscience studies. Over the last decades, many different cognitive architectures and systems have been developed by US cognitive scientists to better understand human cogni- tion. In the following, we will briefly describe three of them. The first two were chosen for their popularity in the US and their generality. The third was chosen as an exemplary system to incorporate human perceptual and motor aspects in more specific ways to analyze complex cognitive tasks such as air- craft cockpit operation. All three have inspired our work. 2.1 ACT-R ACT-R (Adaptive Character of Thought-Rational) [Anderson and Liebiere, 1998] is a cognitive architecture using production rules to be applied to prob-lems of human cognitive and behavior modeling. It is based on The ACT-R theory of cognition. Within this architecture, one can develop ACT-R models for different cognitive tasks [Lovett, et al, 1999]. It includes multiple modules that correspond to different human cognitive functions, i.e. perception, motor and memory. Figure 3 shows (a) the functional structure of ACT-R and (b) how it works. "One important feature of ACT-R that distinguishes it from 4 Industrial Robotics: Theory, Modelling and Control other theories in the field is that it allows researchers to collect quantitative measures that can be directly compared with the quantitative measures ob- tained from human participants." [ACT-R, 2006] Successive versions of ACT-R have seen wide-spread applications to problems of cognitive and behavioral modeling. Anderson’s group is extending the ACT-R architecture to show how visual imagery, language, emotion, and meta-cognition affect learning, mem- ory and reasoning under the DARPA BICA (Biologically Inspired Cognitive Architecture) Program [DARPA, 2005]. (a) (b) Figure 3(a). ACT-R architecture (b) How ACT-R works [ACT-R, 2006]. 2.2 SOAR Soar is a general purpose architecture designed as an unified theory of cogni- tion by John Laird, et al [Laird, et al, 1987]. It is a production rule-based system based on the simple decision cycle – elaboration of state, selection of operator, and actions. Soar represents all cognitive activity by states. It has been applied commercially by Soar Technology Inc. Like the working memory system in our robot architecture, Soar's functional account of working memory empha- sizes the important role of learning. Figure 4 shows the high-level description of the Soar Cognitive Architecture. Laird’s group is now enhancing the Soar architecture by incorporating a comprehensive memory and learning system that includes the three types of human memory: procedural, semantic and epi- sodic and emotion under the DARPA BICA (Biologically inspired Cognitive Architecture) Program [SOAR, 2006]. Learning in Soar is a by-product of impasse resolution. When an impasse is encountered, Soar creates a state space in which the goal is to resolve the im-passe. Once the impasse is resolved, information about the resolution is trans-Robotic Body-Mind Integration: Next Grand Challenge in Robotics 5 formed into a new production rule. This new rule can then be applied when- ever Soar encounters the situation again. The process of encoding and storing the newly learned rules is called “chunking”. However, Soar’s chunking is dif-ferent from the term “chunk” used by cognitive neuroscientists when referring to human working memory. Soar's chunking is a learning method used to process information already present in the working memory for storage in the long-term memory. On the other hand in our architecture, as in human work- ing memory, chunks refer to the arbitrary pieces of information stored in the long-term memory. (See Section 5.3.2 for details) Figure 4. SOAR architecture adopted from [Wray, 2005]. 2.3 EPIC EPIC (Executive-Process/Interactive-Control) is a cognitive architecture de- signed to address the perceptual and motor aspects of human cognition [Kieras and Meyer, 1995]. It is designed to model human cognitive information processing and motor-perceptual capabilities. EPIC also uses a production sys- tem. EPIC has three types of simulated sensory organs: visual, auditory and tactile. Long-term memory consists of declarative and procedural memories. The cognitive processor populates working memory with procedural memory and actions are executed according to the production rules whose conditions are met. EPIC (Figure 5) was especially constructed for modeling complex cognitive activities associated with skilled perceptual-motor performance in task situations such as aircraft-cockpit operation and air-traffic control [Kieras, et al, 1999].6 Industrial Robotics: Theory, Modelling and Control Figure 5. EPIC architecture [Meyer & Kieras, 1997]. 3.Multiagent Systems 3.1 Multiagent Systems In robotics, the term ‘agent’ is commonly used to mean an autonomous entity that is capable of acting in an environment and with other agents. It can be a robot, a human or even a software module. Since Minsky used the term ‘agent’ inSociety of Mind [Minsky, 1985], the term ‘multi-agent system’ (MAS) – a sys- tem with many agents - is becoming more and more popular in artificial intel- ligence (where is better known as distributed artificial intelligence) [Ferber, 1999] and mobile robot communities (where it is often called multi-robot sys- tem). We adopted a multi-agent based system for our humanoid in the 1990s for its ease of modular development as we added more sensors and actuators and the need to integrate both the human and the robot in a unified human- robot interaction framework [Kawamura, et al, 2000]. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 7 3.2 Holons and Holonic Manufacturing Systems In 1989, Japanese Government proposed a global collaborative program called the Intelligent Manufacturing Systems (IMS) [IMS, 1996] IMS was designed to advance a technical and organizational agenda in manufacturing to meet the challenges of global manufacturing in the 21st century. In 1996, we joined the Holonic Manufacturing System (HMS) project as a member of the US team within IMS. A holonic manufacturing system is a system having autonomous but cooperative components called holons [Koestler, 1967]. A holon can com-prise other holons while, at the same time, being part of another holon. This gives rise to a holarchy where all holons automatically manage their compo- nent holons and simultaneously allow themselves to be managed within the holarchy [van Leeuwen, 1998]. The concept of holon and holarchy is similar to that of agent and agency [Minsky 1985]. Our goals within the HMS project were to develop a holonic system for batch manufacturing tasks [Saad, 1996] and to develop a control architecture for an prototype assembly holon (Figure 6), i.e. a humanoid robot [Shu, et al, 2000] using the Intelligent Machine Archi- tecture described below. Unfortunately due to the lack of support from the US Government, we withdrew from IMS in 1999. Figure 6. An assembly holon [Christensen, 1996] 3.3 Intelligent Machine Architecture A humanoid robot is an example of a machine that requires intelligent behav- ior to act with generality in its environment. Especially in interactions with humans, the robot must be able to adapt its behaviors to accomplish goals safely. As grows the complexity of interaction, so grows the complexity of the software necessary to process sensory information and to control action pur-8 Industrial Robotics: Theory, Modelling and Control posefully. The development and maintenance of complex or large-scale soft- ware systems can benefit from domain-specific guidelines that promote code reuse and integration. The Intelligent Machine Architecture (IMA) was de-signed to provide such guidelines in the domain of robot control [Kawamura, et al, 1986; Pack, 1998]. It is currently used to control ISAC. [Olivares, 2004; Olivares, 2003; Kawamura, et al, 2002]. IMA consists of a set of design criteria and software tools that supports the de- velopment of software objects that we call “agents”. An agent is designed to encapsulate all aspects of a single element (logical or physical) of a robot con- trol system. A single hardware component, computational task, or data set is represented by an agent if that resource is to be shared or if access to the re- source requires arbitration. Agents communicate through message passing. IMA facilitates coarse-grained parallel processing. The resulting asynchronous, parallel operation of decision-making agents simplifies the system model at a high level. IMA has sufficient generality to permit the simultaneous deploy- ment of multiple control architectures. behavior can be designed using any control strategy that most simplifies its implementation. For example, a sim-ple pick and place operation may be most easily implemented using a stan- dard Sense-Plan-Act approach, whereas visual saccade is more suited to sub- sumption, and object avoidance to motion schema. IMA works very well to promote software reuse and dynamic reconfiguration. However, the large systems built with it have experienced scalability problems on two fronts. First, as the system exceeds a certain level of complexity it is difficult for any programmer to predict the interactions that could occur be-tween agents during actual operation. This level seems to be higher than for a direct, sequential program. But that level has been reached in the develop- ment of ISAC. The other scalability problem may or may not be a problem with IMA itself but may be an inevitable consequence of increasing complexity in a system based on message passing. The asynchronous nature of message passing over communications channels with finite bandwidth leads to system “lock-ups”. These occur with a frequency that apparently depends on the number of agents in the system. It may be possible to minimize this problem through the use of system-self monitoring or through a process of automatic macro formation. For example, the system could, through a statistical analysis, recognize the logical hierarchies of agents that form repeatedly within certain tasks or under certain environmental conditions. A structure so discerned could be used to “spin off” copies of the participating agents. These could be encapsulated into a macro, a compound agent that optimizes the execution and inter-process communications of the agents involved. For such an ap-proach to be most useful, it should be automatic and subject to modification over time frames that encompass several executions of a macro. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 9 ISAC Cognitive Architecture IMA encapsulates the functions of hardware, low-level controllers, and basic sensory processing into independent, reusable units. This abstraction of de- tails away from control loops, image operators, signal processing algorithms, and the like, enables programming to occur at the level of purposeful actions and environmental features. Actuators are supplanted by actions. Raw sen- sory data are replaced by features. These abstractions are the keys of ISAC’s abilities and are implemented using IMA agents. The functions of actuators are encapsulated within control agents. Each agent interfaces to its corre- sponding hardware resource and provides control interface to other agents. In the current system, there are two arm agents, two hand agents, and a head agent. ISAC’s perceptual system includes a number of sensors. Each sensor is assigned an IMA agent that processes the sensory inputs and stores the infor- mation based on the type of perception. For visual inputs, there are visual agents that perform perception encoding, such as color segmentation, object localization and recognition, motion detection, or face recognition. Other in- puts include sound localizations and sound recognition agents. Each of the individual tasks is encapsulated by an atomic agent, such as find-colored- object, reach-to-point, and grasp-object agents. At the higher level, ISAC’s cognitive abilities are implemented using two compound agents: the Self Agent which represents ISAC’s sense of self, and is responsible mostly for task execution, and the Human Agent which represents the human who ISAC is currently interacting. Memory structures are utilized to help maintain the information necessary for immediate tasks and to store experiences that can be used during decision making processes. Sensory processing agents write data to the Sensory EgoSphere (SES) which acts as a short-term memory (STM) and interface to the high-level agents [Peters, et al., 2001]. The long-term memory (LTM) stores in- formation such as learned skills, semantic knowledge, and past experience (episodes) for retrieval in the future. As a part of LTM, Procedural Memory (PM) holds motion primitives and behaviors needed for actions, such as how toreach to a point [Erol et al, 2003]. Behaviors are derived using the Spatio- Temporal Isomap method proposed by Jenkins and Matari þ [Jenkins & Mataric, 2003]. Semantic Memory (SM) is a data structure about objects in the environment. Episodic Memory (EM) stores past experience including goals, percepts, and actions that ISAC has performed in the past. The Working Memory System (WMS) is modeled after the working memory in humans, which holds a limited number of “chunks” of information needed to perform a task, such as a phone number during a phone- dialing task. It allows the robot to focus attention on the most relevant features of the current task, which is closely tied to the learning and execution of tasks. Figure 7 depicts the key IMA agents and the memory structure within the ISAC cognitive architecture. 10 Industrial Robotics: Theory, Modelling and Control Action StimuliActuators Sensors Behavior 1 …Behavior N … BehaviorsLegend SES= Sensory EgoSphere PM= Procedural Memory SM=Semantic MemoryEM=Episodic Memory CEA=Central Executive Agent STM Attention NetworkSES SM EM LTMPMSelf AgentCEAHuman AgentAtomic Agents Perception EncodingsHead Agent Hand AgentsArm Agents Working Memory System Figure 7. Multiagent-based cognitive robot architecture. 4.1 Self agent According to Hollnagel and Woods, a cognitive system is defines as “ an adaptive system which functions using knowledge about itself and the environment in the planning and modification of actions ” [Hollnagel, 1999]. Key words here are knowledge about itself . In our architecture, the Self Agent (SA) represents robot itself. It is responsible for ISAC’s cognitive activities ranging from sensor signal monitoring to cognitive or executive control (see Section 6.1 for detail discussions on cognitive control) and self reflection. “Cognitive control is needed in tasks that require the active maintenance and updating of context representations and relations to guide the flow of information processing and bias actions.” [Braver, et al, 2002] Figure 8 is a diagram of the Self Agent and the associated memory structure. The Description Agent provides the description of atomic agents available in the system in terms of what it can or cannot do and what is it doing. The First-order Response Agent (FRA) selects the humanoid’s actions according to (1) the percepts in the environment and (2) the commands/intentions of the person with whom the robot is currently interacting. The intentions are supplied by the Human Agent (see Section 4.2 for details) and interpreted by the Intention Agent. The Emotion Agent keeps Robotic Body-Mind Integration: Next Grand Challenge in Robotics 11 track of robot internal variables that will be used during action selection, attention and learning. The Activator Agent invokes atomic agents to handle temporal integration for the selected actions. The Central Executive Agent (CEA) working closely with the Working Memory System and the other SA agents provides cognitive control functions for ISAC. CEA is described in detail in Section 6.2. Behavior 1 …Behavior N … BehaviorsSESSM EMPMSelf Agent STM LTMHuman Agent Legend SES= Sensory EgoSphere PM= Procedural Memory SM=Semantic MemoryEM=Episodic MemoryCEA=Central Executive AgentCentral Executive AgentDescription Agent Anomaly Detection Agent Mental Experiment AgentIntention Agent Activator Agent Emotion AgentAtomic Agents First-order Response Agent Working Memory System Figure 8. Self Agent and associated memory structure. A key function of any cognitive robot must be is self-reflection . Self reflection will allow the robot to reason its own abilities, cognitive processes, and knowledge [Kawamura, et al, 2003b]. As part of an initial effort to incorporate self-reflective process into ISAC, we are proposing two agents: the Anomaly Detection Agent (ADA) and the Mental Experimentation Agent (MEA) within the Self Agent. ADA will monitor the inputs and outputs of the atomic agents in the system for fault detection. And when an impasse is raised and if the CEA fails to find an alternative solution, MEA will conduct a search through the space of control parameters to accomplish the task in “simulated mode” The concept of self reflection is closely related to that of self awareness (Fig. 9) and machine consciousness [Holland, 2003]. 12 Industrial Robotics: Theory, Modelling and Control Cognition RoboticsLower Cognition Higher Reactive Deliberative Self-Awareness Self-Conscious Behavior-based Sense-Plan-Act Cognitive Conscious Robot Robot Robot Robot Figure 9. Spectrum of cognition in robotics. 4.2 Human agent The Human Agent (HA) comprises a set of agents that detect and keep track of human features and estimate the intentions of a person within the current task context. It estimates the current state of people interacting with the robot based on observations and from explicit interactions (Figure 10 a and b) [Rogers, 2004]. The HA receives input from various atomic agents that detects physical aspects of a human (e.g., the location and identity of a face). The HA receives procedural information about interactions from the SA that employs a rule set for social interaction. The HA integrates the physical and social information with certain inferred aspects of the cognitive states of interacting humans, such as a person’s current intention. The HA processes two types of human intentions. An expressed intention is derived from speech directed toward ISAC, e.g., greetings and requests from a human. Inferred intentions are derived through reasoning about the actions of a person. For example, if a person leaves the room, ISAC assumes it means that the person no longer intends to interact, therefore, it can reset its internal expectations. The Human Agent’s assessment of how to interact is passed on to the SA. The SA interprets the context of its own current state, e.g. current intention, status, tasks, etc. This processing guides ISAC in the selection of socially appropriate behaviors that lead towards the ultimate goal of completing tasks with (or for) humans.Robotic Body-Mind Integration: Next Grand Challenge in Robotics 13 (a) (b) Figure 10. (a) ISAC interacting with humans and (b) Human Agent and associated atomic agents. Memory Structure ISAC's memory structure is divided into three classes: Short-Term Memory (STM), Long-Term Memory (LTM), and the Working Memory System (WMS). The STM holds information about the current environment while the LTM holds learned behaviors, semantic knowledge, and past experience, i.e., epi- sodes. The WMS holds task-specific STM and LTM information and stream- lines the information flow to the cognitive processes during the task. 14 Industrial Robotics: Theory, Modelling and Control 5.1 Short-term memory: The Sensory EgoSphere Currently, we are using a structure called the Sensory EgoSphere (SES) to hold STM data. The SES is a data structure inspired by the egosphere concept as de- fined by Albus [Albus, 1991] and serves as a spatio-temporal short-term mem- ory for a robot [Peters, et al, 2001; Hambuchen, 2004]. The SES is structured as a geodesic sphere that is centered at a robot's origin and is indexed by azimuth and elevation. The objective of the SES is to temporarily store exteroceptive sensory informa-tion produced by the sensory processing modules operating on the robot. Each vertex of the geodesic sphere can contain a database node detailing a detected stimulus at the corresponding angle (Figure 11). Figure 11. Mapping of the Sensory EgoSphere and topological mapping of object loca- tions. M e m o r i e s i n t h e S E S c a n b e r e t r i e v e d b y a n g l e , s t i m u l u s c o n t e n t , o r t i m e o f posting. This flexibility in searching allows for easy memory management, posting, and retrieval. The SES is currently being used on ISAC (Figure 12a), and was installed on Robonaut (Figure 12b) at NASA’s Johnson Space Center in Houston several years ago by members of our research group. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 15 (a) (b) Figure 12(a). ISAC showing SES screen, (b) NASA’s Robonaut. 5.2 Long-Term Memory: Procedural, Semantic and Episodic Memories LTM is divided into three types: Procedural Memory, Semantic Memory, and Episodic Memory. Representing information such as skills, facts learned as well asexperiences gained (i.e. episodes ) for future retrieval. The part of the LTM called the Procedural Memory (PM) holds behavior in- formation . Behaviors are stored in one of two ways: as motion primitives used to construct behaviors or as full behavior exemplars used to derive variant mo-tions. Using the first method, stored behaviors are derived using the spatio-temporal Isomap method proposed by Jenkins and Mataric [Jenkins, et al, 2003]. With this technique motion data are collected from the teleoperation of ISAC. The motion streams collected are then segmented into a set of motion primitives. The central idea in the derivation of behaviors from motion segments is to dis- cover the spatio-temporal structure of a motion stream. This structure can be estimated by extending a nonlinear dimension reduction method called Isomap [Tenenbaum, 2000] to handle motion data. Spatio-temporal Isomap dimension reduction, clustering and interpolation methods are applied to the motion segments to produce Motion Primitives (Figure 13a). Behaviors are formed by further application of the spatio-temporal Isomap method and link- ing Motion Primitives with transition probabilities [Erol, et al, 2003]. Motions recorded using spatio-temporal Isomap are stored in a separate man- ner as shown in Figure 13(b). At the top of this structure, behavior descriptions will be stored which will allow us to identify what each behavior can contrib- ute to solving a given motor task. Each entry in the behavior table will contain pointers to the underlying motion primitives. 16 Industrial Robotics: Theory, Modelling and Control (a) Behaviors Raw DataMotion Primitives (b) Figure 13(a). Derivation of Procedural Memory through human-guided motion stream and (b) Structure of Procedural Memory data unit. The latter method stores behaviors using the Verbs and Adverbs technique developed in [Rose, et al, 1998]. In this technique, exemplar behavior motions are used to construct verbs while parameters of the motions are termed adverbs . An important aspect in storing and re-using a motion for a verb is the identifi- cation of the keytimes [Spratley, 2006; Rose, et al, 1998] of the motion. The keytimes represent significant structural breaks in the particular motion. For the Verbs and Adverbs technique to function properly individual motions for the same verb must have the same number of keytimes and each keytime must have the same significance across each motion. Figure 14(a) shows keytimes for three example motions. The example motions are recording of the same motion, three different times. This information is used to create the verb, hand-Robotic Body-Mind Integration: Next Grand Challenge in Robotics 17 shake . The keytimes in this example are derived by analyzing the motions us- ing a technique called Kinematic Centroid [Jenkins, et al, 2003]. The x-axis represents the normalized point index for each motion. The y-axis represents the Euclidian distance of the kinematic centroid of the arm from the base of the arm. (a) (b) Figure 14 (a). Example motions and their keytimes [Spratley, 2006], (b) Structure of PM data representation for Verbs and Adverbs. 18 Industrial Robotics: Theory, Modelling and Control Each verb can have any number of adverbs, each of which relate to a particular space of the motion. For example, the verb reach could have two adverbs: the first related to the direction of the reach and the second related to the distance from ISAC’s origin that the particular motion is to extend. Extending this ex- ample, adverbs could be added to include features from any other conceivable space of the motion, such as the strength of the motion or the speed of the mo- tion. Stored in the LTM are the verb exemplars and the adverb parameters for each verb. New motions such as reaching , or handshaking are interpolated by ISAC at run time using the new (desired) adverb values. Figure 14(b) depicts the manner in which behaviors are stored in LTM using Verbs and Adverbs. For each entry in PM, the motion and storage types are re- corded. The next entry holds pointers to the verb information and the final en- tries hold the adverb values. 5.3 Attention and the Working Memory System 5.3.1 Attention Attention is a sensory/cognitive mechanism to limit the amount of informa- tion needed to be manipulated by the brain for task execution. It “allows the brain to concentrate only on particular information by filtering out distracters from a desired target object or spatial location by amplification of the target representations.” [Taylor and Fragopanagos, 2004] Attention can be goal-oriented during task execution such as searching for an object or it can be reac- tive in salience events such as when hearing a loud sound. Attentional function in ISAC is implemented using the Attention Network which monitors both task relevant sensory data and unexpected yet salient sensory data on the Sensory EgoSphere (SES) [Hambuchen, 2004]. As sensory processors report all exteroceptive events to the SES, the direction of attention to external sensory events are also available through SES nodes (Figure 15). As multiple events are registered in a common area, activation increases around a central node. Nodes that receive registration from task- or context-related events have their activations increased by the Attention Network. The Atten- tion Network selects the node with the highest activation as the focus of atten- tion. Sensory events that contributed to this activation are selected and those that fall within a specified time range of each other are passed into the work- ing memory. Besides level of activation, the Attention Network also pays attention to per-cepts on SES with high emotional salience. When a percept is assigned high emotional salience, the Attention Network selects the percept as the focus of attention. Emotional salience is provided by the Emotion Agent, a part of the Self Agent. Its implementation, including attention based on emotional sali-ence is described in Section 7.2. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 19 Figure 15. The attention network’s assignment of FOA at the center node among events registered in a common area on SES [Hambuchen, 2004] . 5.3.2 Working memory system There is much evidence for the existence of working memory in primates [Fu- nahashi, et al, 1994; Miller, et al, 1996]. Such a memory system is closely tied to the learning and execution of tasks, as it contributes to attention, learning and decision-making capabilities by focusing on task-related information and by discarding distractions [O’Reilly, et al, 1999; Baddeley, 1986; Baddeley, 1990]. The working memory in humans is considered to hold a small number of “chunks” of information needed to perform a task such as retaining a phone number during dialing. Inspired by the working memory models developed in cognitive science and neuroscience, the Working Memory System (WMS) in robots was designed to provide the embodiment necessary for robust task learning and execution by allowing ISAC to focus attention on the most relevant features of the current task [Gordon & Hall, 2006]. WMS in our cognitive architecture was implemented using the Working Memory Toolkit (WMtk) based on the computational neuroscience model of working memory [Phillips, 2005]. This toolkit models the function of dopa-mine cells in human brains using a neural net-based temporal difference (TD) learning algorithm [Sutton, 1988]. The toolkit has a function to learn to select and hold on to “chunks” of information that are relevant to the current task based on future expected reward from processing these chunks. These chunks include behaviors, current percepts, and past episodes. Figure 16 illustrates the current WMS structure and associated system components. A simulated de- layed saccade task using WMtk was reported by Philips and Noelle [Philips, 20 Industrial Robotics: Theory, Modelling and Control 2006]. Section 7.1 in this chapter details working memory training and task learning conducted on ISAC. LTMSES WM Memory chunksCandidate Chunks List . . . .Learned NetworkWeightsPercepts Figure 16. Structure of the working memory system. Cognitive Control and Central Executive Agent 6.1 Cognitive Control Cognitive control in humans is a part of executive functions (such as planning and abstract thinking) within the frontal lobes in the human brain [Stuss, 2002]. Cognitive control is “the ability to consciously manipulate thoughts and behaviors using attention to deal with conflicting goals and demands” [O’Reilly, et al, 1999] [MacLeod and Sheehan, 2003]. As levels of human activi- ties range from reactive to full deliberation, cognitive control allows humans to inhibit distractions and focus on the task at hand including task switching. According to researchers in neuroscience, human cognitive control is per- formed through the working memory in the pre-frontal cortex (PFC) [O’Reilly, et al, 1999; Braver and Cohen, 2000; MacDonald et al., 2000]. Cognitive control during task execution/switching requires the brain to perform executive func- tions including: •Focus attention on task-related information •Maintain and update goal information •Inhibit distractions •Shift between different level of cognition ranging from routine actions to complex deliberation •Learn new responses in novel situations Cognitive robots, then, should have the ability to handle unexpected situations and learn to perform new tasks. Also, cognitive control is expected to give Robotic Body-Mind Integration: Next Grand Challenge in Robotics 21 flexibility to the robot to reason and act according to stimuli under conflicting goals in dynamic environment. Realization of cognitive control functions for ISAC is currently pursued through the maintenance of task-related informa-tion in the working memory system through gating of information that could be passed into the decision-making mechanism called the Central Executive Agent discussed in Section 6.2. Attention and emotions are known to play an important role in human’ deci- sion and task execution[Arbib, 2004]. Therefore, we are now adding attention and emotion networks to realize cognitive control for robots as shown in Fig- ure 17 modified from [Miller, 2003]. Sensor Actuator Experience and Working MemoryStimuli ActionExecutive Functions and goal-related informationCognitive Control Figure 17. Concept of cognitive control modified from [Miller, 2003]. 6.2 Central Executive Agent ISAC’s cognitive control function is modeled and implemented based on Baddeley and Hitch’s psychological human working memory model [Baddeley, 1986]. Their model consists of the “central executive” which con- trols two working memory systems, i.e., phonological loop and visuo-spatial sketch pad (Figure 18). 22 Industrial Robotics: Theory, Modelling and Control Central ExecutivePhonological Loop Visuo-Spatial Sketch Pad Figure18. A schematic Diagram of a multi-component model of working memory [Baddeley & Hitch, 1974]. In our cognitive architecture, an IMA agent called the Central Executive Agent (CEA) is responsible for providing cognitive control function to the rest of the system. It interfaces to the Working Memory System (WMS) to maintain task-related information ( or “chunks”) during task execution. Under the cur- rent design, CEA will have the four key functions: 1) situation-based action se- lection, 2) episode-based action selection, 3) control of task execution, and 4) learning sensory-motor actions. Each function will be realized through inter- action between CEA, other IMA agents, and various memory systems as shown in Figure 19. Update Mapping Intervention CEAFirst-order Response Agent (Stimuli-Response Mapping) Activator Agent Emotion Agent Intention Agent Episodic MemoryEmotion Goal Past EpisodesUpdate EpisodePercepts Action Execution ResultSelected Action Figure 19. CEA’s interactions with other processes. Sensory inputs, stimuli and/or task commands, are encoded into percepts and posted on the SES. Only those percepts that have high emotional salience will Robotic Body-Mind Integration: Next Grand Challenge in Robotics 23 receive attention from the Attention Network and will be passed to WMS. These percepts, if not intervened, will cause corresponding actions to be se- lected according to embedded stimuli-response mapping. On the other hand, CEA selects actions using the combination of two paradigms. CEA will re- trieve past episodes that are relevant to these percepts from the Episodic Memory. These past episodes contain actions used in past execution and re- sults. The results of invoked actions from stimuli-response mapping could be a part of these episodes. CEA determines if the action to be executed is likely to produce a negative result. If so, CEA will intervene by suggesting a different action based on the current state of ISAC, current percepts, and action. Once the action is executed, CEA will update the stimulus-response mapping ac- cording to the execution result and the current task is then stored as a new epi- sode in the Episodic Memory. Experimental Results 7.1 Working Memory Training Experiment for Percept-Behavior Learning Tasks The working memory system (WMS) is used to manage ISAC's memory focus during task execution. For simple tasks, WMS holds a small number of chunks of information related to the task. Typically on ISAC, the number of chunks loaded into WMS ranges from 2 to 4. For example, if ISAC were to be asked to “reach to the red bean bag”, WMS would be responsible for loading two chunks of information: one chunk for the reach behavior and another chunk for the red bean bag percept. For more complex tasks (i.e. those that require more than 4 chunks of information) the tasks must be broken into simpler tasks and WMS is responsible for handling each simple task in turn as well as maintain- ing ISAC's focus on the long-term goal, the completion of the complex task. WMS is not the tool that decomposes complex tasks into simple tasks. In the future, another agent such as CEA (section 6.2) must do this job. WMS, given the current state of ISAC, solely determines which chunks from LTM and STM to load into the system, in essence focusing ISAC on those pieces of informa- tion. Experiments utilizing WMS in this manner have already been conducted [Gordon, et al, 2006].Current work with ISAC’s WMS is centered on training a variety of different WMS for different types of tasks, such as:: •Object Interaction – Simple object interactions such as reaching ,pointing ,track- ing, etc. •Human Interaction – Performing such behaviors as face tracking ,greeting , handshaking ,waiting for commands , etc.24 Industrial Robotics: Theory, Modelling and Control Figure 20 shows the architecture being used to train each these WMS. Figure 20. Control architecture used during working memory training. During training, a reward rule is used to inform WMS how well it is perform- ing. The reward rule captures whether or not the current chunks could be used to accomplish the task and how well the task has been accomplished. 7.1.1 Experimentation and Trials Using the architecture shown in Figure 20, an initial experiment was designed for to test object interaction using working memory. Steps for this experiment are as follows: ISAC is given certain initial knowledge (i.e. embedded ability and/or in- formation) a) ISAC’s perceptual system is trained to recognize specific objects. The in- formation is stored in the semantic memory section of the LTM. b) Using the Verbs and Adverbs algorithm, ISAC is taught a small set of motion behaviors including how to reach ,wave , and handshake . c) Figure 21 demonstrates ISAC performing these behaviors. This informa- tion is stored in the procedural memory section of the LTM. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 25 Reach Wave Handshake Figure 21. Sample configurations for reach, wave, and handshake. Two bean bags are placed on a table as shown next in Figure 22.a. ISAC is asked to “reach to the bean bag”, although a specific bean bag is not specified. ISAC’s perceptual system will recognize the bean bags and post the in- formation to SES. WMS will focus on “chunks” of information necessary for accomplishing the task. A reward is given based upon how well the action is completed. Over time, ISAC learns the appropriate chunks to focus on from the SES and LTM. Once ISAC has demonstrated that it has learned the most appropriate chunks to load into WMS (Figure 22.a), bean bags are rearranged (Figure 22.b) and ISAC is given the command “reach to the bean bag”. Real-time experiments were conducted after initial simulation trials (Figu- re 22.c). When the bean bags are rearranged, ISAC should not necessarily reach to the same bean bag as before but should choose the bean bag percept from the SES that is the most appropriate. For this task the most appropriate bean bag is the nearest one. The combination of percept and behavior, or “chunks”, will be loaded into the working memory and used to execute the action. (a) (b) (c) Figure 22 (a, b). Sample configurations for reaching and (c) actual experiment view. 26 Industrial Robotics: Theory, Modelling and Control The reward rule for this experiment is based on three criteria: What is the degree of success for the behavior WMS chose to load? How well did the object chosen by WMS meet the task criteria? e.g., focu- sing on any bean bag vs. focusing on another object. How well is SAC able to act upon the object? e.g., in this experiment, could ISAC reach the bean bag? In order to measure Reward Criterion #3, the reward was given based on the inverse proportion of the distance from ISAC’s hand to the object. Reward Cri- teria #1 and #2 gave a discrete positive valued reward if the system chose ap-propriately. No preference (i.e., reward of 0) was the result if the system did not choose correctly. The values for the overall reward typically fell in the range of 0 – 400. Since it was desired to give negative reward to the system when it did not act appropriately, a negative weighting factor of –200 was added to the final reward to “tilt” the low values into the negative range.Note that when using these reward criteria, it is possible to incorrectly reward the system for performing the task in less than an optimal manner. For exam- ple, if the system performs the behavior handshake or wave while focusing on the appropriate bean bag and if this action happens to bring the hand very close to the bean bag, then the system would receive a positive reward. In or-der to avoid this undesirable situation, more rules or knowledge are needed. Initial trials for this experiment were performed off-line, in simulation, to speed-up the initial testing phase of the system. This simulation was set-up to remove the time-bottleneck of generating and performing motions. For the simulation, when ISAC needed to act on an object within the workspace, the motion was assumed to have been performed properly (Reward Criterion 3). The action taken by ISAC was determined by what WMS currently believed was the best choice. In other words the action that WMS believed would yield the greatest reward. This system also contained an exploration percentage, specified as a part of initial knowledge that determined the percentage of trials that WMS chose a new or different action. This enabled WMS to always con- tinue learning and exploring. During initial research trials, simulation was not allowed to choose the same action more than twice. This constraint enabled a much quicker simulation time. Once the system finished exploration, the system was restarted with the learned information and given the task to “ reach to the bean bag”. For each ar- rangement (Figures 22a,b) the system chose appropriately to reach towards the correct bean bag, i.e. the nearest one. Table 1 shows the contents of ISAC’s short-term and long-term memory systems during the training portion of the simulation.Robotic Body-Mind Integration: Next Grand Challenge in Robotics 27 SES LTM bean bag: location = (Figure 22.b), type = A 1.reach bean bag: location = (Figure 22.a), type = B 2.handshake blank 3. wave Table 1. Memory contents duri ng simulation training. Working Memory Contents Trial # 1 2 3 4 Chunk 1 bean bag A bean bag B wave handshake Chunk 2 reach bean bag A bean bag Bbean bag A Random NA handshake NA NA Reward 203.4 -20.5 -197.7 2.3 Table 2. Working memory contents during simulation training. In these trials, WMS was allowed to choose two “chunks” from the short- and long-term memory systems to accomplish the task. However, the working memory was not restricted to choosing exactly one object and one behavior. If the working memory chose to focus on two objects or two behaviors, then re- spectively a behavior or object was chosen at random. This ensured that an ac- tion was still performed. The reasoning behind this was so that the system did not learn to simply choose combinations that lead to no reward, a situation that could be preferred if WMS was consistently getting negative reward for its choices. Table 2 shows samples of the contents in the working memory in these trials. To evaluate system performance further, a third task was developed. For this task ISAC was again given the command to “ reach to the red bag”, however this time the reach behavior was deleted from the initial knowledge limiting the behavior choices to handshake and wave . The working memory had to choose the next best behavior. For each of the arrangements shown previously (Figures 22a,.b), WMS chose to perform the handshake behavior. This behavior was chosen because it allowed the arm to get closest (Reward Criterion 3) to the bean bag (Reward Criterion 2) and thus, best accomplished the goal task. 7.1.2 Trials on ISAC After the initial training and experimentation, ISAC was allowed to perform the generated motions (Figure 22.c). Two new objects (a green Lego toy, and a purple Barney doll) were added to the table, at random positions. ISAC’s vi- sion system was trained (Step 1) to recognize each new object and recorded the type of object as well as some simple descriptive information (color=green, 28 Industrial Robotics: Theory, Modelling and Control purple; toy type=Barney doll, Lego). ISAC was given tasks (Step 3) such as “reach to the bean bag” or “ reach to the toy”. Each of these tasks did not specify to which bean bag or toy ISAC was to reach . ISAC recognized the objects (Step 4). WMS focused on “chunks” of information from the SES and LTM in order to accomplish the task (Step 5). ISAC was allowed to explore the space of pos- sible actions receiving reward each time (Steps 6 and 7). After this was accom- plished, the objects were rearranged in a variety of different positions (Step 8) and ISAC was given a command. The results (set of 20 commands) were that ISAC successfully performed the correct action on the nearest (easiest to reach) requested object. For this system to properly choose the correct set of chunks to focus on, the system currently has to explore all the possibilities during training. Figure 23, shows an example learning curve for this system for the reach command. The graph shows the number of times each of the trained behaviors (see Figure 23) was chosen during each ten trial segment. When the system first begins train- ing, it is required to explore each of the possible behaviors as well as try differ- ent percept/behavior combinations. As can be seen from this graph, it took approximately 20 trials to learn reach before the system determined that the reach behavior was the definite best. Attempting to explore all possibilities in the future will lead to a combinatorial explosion if a large number of behaviors or percepts are added to the system. In order for this system to continue to operate properly in the future, im- provements need to be made to the representational structures for behaviors and percepts used by the system. One method of improving this representa- tional structure that we are considering is to store intentionality along with percepts (i.e. chairs are for sitting , tables are for placing , and bean bags are for reaching and grabbing ). This, along with a method discussed in section 7.1.3 of pre-filtering chunks using Episodic Memory, will aid WMS to perform quick and accurate chunk selection and retrieval. 012345678910 0 1 02 03 04 05 06 07 08 09 0 1 0 0 Trial# Behavior Selections per 10 TrialsReach Handshake Wave Figure 23. Learning Curve for Reaching Action. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 29 7.1.3 Learning New Tasks Using Multiple WMS A single WMS, if it were large enough and if it were trained extensively enough, could theoretically handle most, if not all, of the simple situations ISAC could encounter. However, due to the size of the state and chunk repre- sentations the computation time to select appropriate chunks and the training time to train a single WMS over all possibilities would be enormous. For this reason, separate WMS are being trained to handle different types of situations that ISAC may encounter. As stated earlier in this section, two differently WMS are currently in development: Object Interaction working memory (WM1) and Human Interaction (WM2).When training WM1, the “Task Info” is set to the current command, such as “reach to the bean bag”. When training WM2, however, the “Task Info” is kept blank. WMS in each case is responsible for learning which behavior chunks from LTM and which percept chunks from STM are appropriate for each situa- tion. WMS is also responsible for learning “how well” certain chunks accom-plish particular tasks. It is important that WMS learn which memory chunks best accomplish tasks and which other chunks could be used when, for some reason, the “best” ones are not available. Using multiple WMS to accomplish the task of one monolithic WMS speeds up training time and decreases computation time. The idea behind training these separate systems is to enable ISAC the ability to continuously, smoothly, and appropriately interact with its environment. Each of these WMS, once trained, will be stored in the LTM and linked with the particular episode (see Episodic Memory, section 5.2 and 5.3). Upon entering a new state, ISAC will pull from the Episodic Memory an epi-sode that most closely matches the current state. Along with this episodic in- formation will be the trained WMS that enabled ISAC to act appropriately in that situation. This WMS will be loaded into the system and used throughout the duration of the current state. Episodic information also helps filter the list of candidate chunks presented to WMS. Figure 24 shows how Episodic Memory can be used to filter the candi- date chunks list. Pre-filtering the candidate chunks list also speeds up computation and selec- tion time for WMS. This feature is especially important as ISAC’s knowledge base grows. When no appropriately matching episode can be retrieved, ISAC can rely on the current state information (such as the presence of a task com- mand, people to interact with, etc.) to determine which trained WMS is likely the most appropriate. No appropriate feature is in place to filter the candidate chunk list for ISAC for this scenario. 30 Industrial Robotics: Theory, Modelling and Control Figure 24. Pre-selection of candidate chunks based on past experience. ISAC will be responsible for pouring through all stored, memorable informa- tion to complete the task. As ISAC’s experience grows, however, the chunk list will begin to shrink as ISAC learns what types of information are most rele- vant. Once ISAC learns the information, an episode can be created and used to filter chunks for future scenarios. 7.2 Situation-based Stimuli Response Experiment In order to test ISAC’s decision-making functions under conflicting goals, a simulation experiment was conducted [Ratanaswasd, et. al., 2006]. In this ex-periment, ISAC first selects a set of percepts to pay attention to based on the emotional salience. ISAC then decides how to respond to each percept accord- ing to a situational change. 7.2.1 Experiment setup System components use are Central Executive Agent, Attention Network, and Emotion Agent. Sound stimuli (i.e., music and alarm) are captured through a microphone and processed in Matlab. Mozart’s Symphony No. 40 is used for “music,” and a recorded sound of an actual fire alarm is used for “alarm.” The initial state of ISAC’s emotional level is to dislike the alarm sound while liking the music . This is accomplished through the emotion vectors shown in Table 3. ISAC is also trained to perform three actions, i.e., performing the requested task to fixate on the Barney doll, yelling “Alarm!”, and performing a free-style dance. Two types of situations were tested as shown in Figure 25: Robotic Body-Mind Integration: Next Grand Challenge in Robotics 31 Situation 1 : (Salience-based Reactive Action Experiment)) Various sounds (a short piece of music, an alarm sound, human voices, and background noises) were presented to the system at different times while ISAC was idle, i.e. no task was conducted. Situation 2 : (Situation-Based Task Switching Experiment) A task to fixate on the Barney doll was first given to the model. Then, the same sounds were presented during the task execution. A feedback on the action selected was given by a human teacher as a part of supervisory learning.. The process was repeated until the model learned the proper response. Music -pleasure Alarm -annoyance perform task? dance? alarmed? ignore? Barney -Task Figure 25. Overview of the experiment 7.2.2 Attention and Emotion In our cognitive architecture, emotions are handled by the Emotion Agent (EA) [Dodd, 2005]. EA provides the emotional responses to the percepts in the environment. This response is currently represented in a pre-defined form of a vector called the Emotion Vector . Each element of the vector holds the level of a basis emotion that ISAC possesses toward the percept . Table 3 shows the Emotion Vector used in the experiment. The magnitude of this vector is sent to the Attention Network as the level of emotional salience for the given stimu- lus. The Attention Network then acts as a gating by allowing only the percepts with high emotional salience to go through and become candidate chunks for WM as shown in Figure 26. 32 Industrial Robotics: Theory, Modelling and Control Emotion Vector Stimulus/Task- responsehappy- sadlove- hatealert- uninterestedEmotional salience Alarm sound 0.1 -0.8 -0.6 1.01 Musical piece 0.7 0.5 0.1 0.86 Task command 0.1 0 0.6 0.61 Other human words0.1 0.1 0.1 0.17 Table 3. Stimuli vs. Corresponding emotion vectors. (chunks)SES to WMS StimuliAttention Network (Gating)Perception Encodings Emotional SalienceTask command Figure 26. Focus of attention using the Attention Network. 7.2.3 Situation-Based Decision Making If two or more percepts and/or commands are given to ISAC at the same time, ISAC must resolve the conflict. The Central Executive Agent (CEA) described in Section 6.2 is responsible for conflict resolution. For example, if a percept with a high emotional salience is detected while a task is being executed, CEA must make a decision how to respond to the newly acquired percept. The cur- rent situation is used by CEA for decision making. For this experiment, “a situation” can be translated from the change in perceptual information as fol- lows: Let the set of all percepts in the Focus of Attention (FOA) at a given time be denoted by X. Members of X then comprise a combination of some known percepts from LTM. In a perceptual event, either a percept disappears or a new percept attracts the robot’s attention, and the original set of percepts in FOA will change. For this experiment, “a situation” was considered to be any change of specific members of X as illustrated in Figure 24. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 33 Focus of Attention Percept A Percept BFocus of Attention Percept APercept B Focus of Attention Percept APercept C Situation S2Situation S1 Perceptual event Perceptual event Figure 24. Relationship between changes in percepts in FOA and situations. The probabilities ] [)(i jAP , j= 1,2,…, N, associated with the actions )( 1iA,)( 2iA…,)(i NAand subjected to the constraint ¦ ==N ji jAP 1)(1] [ , were computed by CEA using past history of the number of times the appropriate action was provided through supervised learning. That is, during the teaching phase, the human teacher provided the appropriate action )(i jA. CEA then kept track of the frequency that )(i jAhad been provided for Si, and used it to update ] [)(i jAP ac- cordingly. During the execution phase, when Situation Si occurred, CEA se- lected an action as follows: The unit interval [0,1] is partitioned into N regions, each with a width of ] [)(i jAP . A uniform random number on the unit interval is generated, and the region j, 1 j N, in which it falls is determined. The associated action )(i jAis then se- lected. Action A1 Action A2 Selected action (execution phase) …Update probabilitiesAppropriate action provided by human teacher (teaching phase) ] [)(i jAPSituation Si P1 P2P1 P2P1 P2 P3P1 P2 P3 FOAFOA P1,P2,P3 = perceptsPerceptual event Figure 25. Decision making and learning. By selecting an action probabilistically, the actions having higher probabilities are more likely to be selected. This enables continual exploration so that the 34 Industrial Robotics: Theory, Modelling and Control robot may respond to dynamic situations. The decision-making process is il- lustrated in Figure 25. 7.2.4 System Evaluation In the first situation, only the musical piece and alarm sound caused the Emo-tion Agent to create the emotion vectors with a high emotional salience. Be- cause no task (goal) was given, CEA selected the action based on the initial emotional state. This situation demonstrated the system’s ability to focus at- tention to those percepts that cause a high emotional salience In the second situation, a task to fixate on the Barney doll was given to the sys- tem prior to the presence of other stimuli. The changes in FOA then created two situations, i.e. “Music was heard during the task execution” and “Alarm was heard during the task execution”. Using the probabilistic model of the situation as discussed above, CEA decided if it should pay attention to the stimuli or keep focusing on the task based on prior knowledge of the stimuli and situation. “Situation 2 (before learning)” in Table 4 summarizes the system responses. FOA Situation 1 Situation 2 (before learning) Situation 2 (after learning) Music “Dancing” Ignored the music Ignored the music AlarmYelled “Alarm!”Yelled “Alarm!” Ignored the alarm Table 4. Stimuli Response Results. Finally, the model was later taught to respond to Situation 2 differently from the initial knowledge. That is, the model entered the teaching phase again to learn a new appropriate response, which in this case was to ignore the alarm for Situation 2. 100 trials of teaching were performed and the results from learning are shown in Figure 26. This figure shows the number of times the model chose to ignore the alarm for every ten trials. In the beginning, the model did not ignore the alarm right away because of the strong association between the percepts and actions initially embedded in the model. After about 20 trials, the supervised learning changed the associated probabilities in the model enough so the model started to learn to ignore the alarm. With in- creasing trials, the system learned to select the correct response. However, as the selection was performed using a probabilistic method, it was still possible that the system selected incorrect action occasionally as seen in the graph. This allows the system to explore other possible actions in dynamic situations. Be- cause the probabilistic model was updated for every teaching trial, the system was more likely to select the correct action as the number of trials increased. If Robotic Body-Mind Integration: Next Grand Challenge in Robotics 35 this number reached infinity, the system would then select the correct action 100% of the time. 012345678910 0 1 02 03 04 05 06 07 08 09 0 1 0 0 Trial# Correct selections per 10 trials Figure 26. Learning curve for the response to the alarm in Situation 2. This simple experiment was conducted to verify that the system did learn to select the appropriate action under supervisory learning [Mitchell, 1997] using attention and a set of “snapshot” state of emotions. As the next step, we are now working to develop a more realistic, dynamic model of emotion which will reflect the change in ISAC’s internal states over time. The details of how this time-varying event-based model of emotion will influence action-selection process will be described in Section 8. Future Integrated Experiment Any cognitive robot should be able to use both external and internal stimuli to consciously organize their behaviors such as action selection, attention and learning. According to this, emotion could be one of main factors to mediate decision-making process. In order to make the attention- and emotion-based action selection process more realistic, we are now working to develop a time- varying event-based model of emotion reflecting the change in ISAC’s internal states over time. In this type of action-selection process, the system does not necessarily perform the same action every time for the same set of external stimuli. In ISAC’s cognitive architecture, the Self Agent is responsible for meta- management of its internal states similar to that proposed by Sloman [Sloman, et al., 2005] as shown in Figure 30. We have used the fixed, embedded emo-tion level as a part of the Self Agent in the experiment. The Emotion Agent will 36 Industrial Robotics: Theory, Modelling and Control be modified to be more dynamic to better keep track of ISAC’s internal state. The details of this work are described now. Figure 30. H-CogAff Architecture [Sloman, et al, p. 227, 2005] 8.1 System Integration The incorporation of both internal and external stimuli in the architecture en- ables the system to be as dynamic as possible, gearing responses so that they are not a function of the external inputs alone. This creates a robot that can re- spond differently to the same situation based solely on the internal state of the robot. The internal stimulus that will be used for this experiment is the level of excitement of the robot. The excitement level will be a product of both ISAC’s external environment and ISAC’s other internal states (such as presence of command, joint activity, etc.) It is important that ISAC’s excitement or arousal to a given situation not be a static function, but rather a dynamic function of time. For the time being, ISAC’s level of excitement is calculated using a first-order exponential decay function: tSeS Excitement⋅ −⋅ =)()(βαRobotic Body-Mind Integration: Next Grand Challenge in Robotics 37 The terms α(S) and β(S) are functions of the state, S, of ISAC and are designed in such a way that they can be learned or modified over time using standard reinforcement learning techniques. Therefore, a particular situation (or a change in state) S i which may initially be embedded in ISAC as “very exciting” (i.e.α(Si) returns a high value and β(Si) returns a low value) can, over time, ad- just to reflect ISAC’s experience with that particular state. Conversely, states initially embedded as “not exciting” can, based on experience, become exciting states. One final point to add is that the decay nature of the excitement func-tion ensures that no state continues to excite ISAC indefinitely (i.e. ISAC will eventually get bored with even the most exciting event). As ISAC’s other cognitive processes learn, these processes in turn will utilize the current state of excitement when making decisions. This utilization will be a function of the excitement level as well as the internal and external states that have caused the current excitement level. As the stimuli that excite ISAC change over time, ISAC’s decision-making process should reflect this change and summarily, ISAC should make different choices. The experiment is de- signed to teach ISAC this ability and then put ISAC in a situation in which multiple possibilities exist forcing the robot to make a decision. It is hoped that ISAC’s cognitive architecture will allow it to make this decision. 8.2 Experimental Design To demonstrate the use and effectiveness of utilizing both internal and exter- nal stimuli during action selection and task switching, an experiment has been designed that requires the principles of cognitive robotics discussed in this chapter. During this experiment, ISAC will be presented with a range of dif- ferent scenarios and be forced to decide whether to continue with the present task or switch to another task. Close monitoring of ISAC’s internal level of ex- citement or arousal will be the mechanism that that aids in making this deci- sion. Through habituation and learning, ISAC will develop an association between excitement levels and different percepts or tasks. In other words, based on ex-perience, certain percepts will excite ISAC more than other percepts, and cer- tain tasks will excite ISAC more than other tasks. These associations will begin as embedded knowledge, based on novelty, within ISAC. Over time and through experience and habituation, these correlations will change and ISAC will begin to develop its own sense of excitement/boredom. he experiment steps are as follows: Embed ISAC with knowledge that certain percepts and tasks are more ex- citing than others (i.e. faces are more exciting than bean bags, dancing is more exciting than reaching , etc.) 38 Industrial Robotics: Theory, Modelling and Control Train a small set of WMS to react to certain situations (see WM1 and WM2 from section 7.1) a) WM1 is trained to enable ISAC to interact with simple objects. b) WM2 is trained for interaction with people. c) WM3 is trained to enable ISAC to respond appropriately to sound stimuli. Have a person enter the room and give ISAC a task. Repeat step 3 several times in order to cause a change in ISAC’s embedded excitement function (Section 8.1) Have a person enter the room and give ISAC a task. During the task exe- cution have music begin playing in the room. Continue playing the music for several minutes. Steps 1 and 2 of this experiment are the initial embedding of knowledge into the system. When a person enters the room and gives ISAC a command, this interaction should excite ISAC causing it to desire to engage with the person and complete the task. Through repetition of Step 3, this excitement level should continue to decrease with each repeated command. Over time, the ex- citement level associated with Step 3 should degrade to such an extent that ISAC essentially becomes unmotivated to perform the task. At this point, when ISAC hears music during the execution of the task (Step 5), the robot should choose to ignore the person and pay attention to the music instead. Af- ter the music plays for several minutes (Step 6), ISAC should eventually be-come bored with this as well (as discussed in section 8.1.). Once bored with the music, ISAC should transition back to the commanded task. Conclusions In the last forty years, industrial robots have progressed from the Plan-Sense- Act paradigm to more robust, adaptive/intelligent control paradigm [Kawa- mura, 2006]. In particular, the integration of body, sensor and AI-based soft-ware has produced not only advanced industrial robots, but non-industrial robots ranging from entertainment and home to a variety of health-related ro- bots, we expect this trend to continue. This chapter introduced the next grand challenge in robotics, i.e. the integration of body and mind. In particular, the chapter described our efforts towards this challenge through the realization of a cognitive robot using cognitive control, attention, emotion, and an adaptive working memory system. In the last forty years, the field of industrial robotics and automation has also seen many innovations. As manufacturing becomes more distributed and sophisticated, realization of human-like robotic cowork-ers with cognitive skills will be a challenge not only to academia, but to manu- facturing engineers as well. Robotic Body-Mind Integration: Next Grand Challenge in Robotics 39 References ACT-R (2006). http://act-r.psy.cmu.edu/about/ Albus, J.S. (1991). Outline for a theory of intelligence, IEEE Trans Systems, Man, and Cybernetics, vol.21, no.3, pp. 473–509. Anderson, J. & Lebiere, C. (1998). The Atomic Components of Thought , Lawrence Erlbaum Associates, Mahwah,, NJ. Arbib, M.A. & Fellous, J-M. (2004). Emotions: From brain to robot, Trends in Cognitive Science s, vol. 8, no. 12, pp. 554-561, December 2004. Arkin, R. (1998). Behavior-Based Robotics . MIT Press, Boston, MA. Asada,M.(2002). Japan’sSynergisticIntelligenceProject ,http://www.jeap.org/web/ Baddeley, A.D. (1990). Human Memory: Theory and Practice, Oxford University Press, Oxford, UK. Baddeley, A.D. (1986). Working Memory , Clarendon Press, Oxford, UK. Baddeley, A.D. & Hitch, G.J. (1974). Working Memory , In G.A. Bower (Ed.), Recent Advances in Learning and Motivation , Vol. 8, pp. 47-90, Academic Press, New York, NY. Braver, T.S. & Barch, D.M. (2002). A theory of cognitive control, aging cogni- tion, and neuromodulation, Neuroscience and Behavioral Reviews, vol. 26, pp. 809-817, Elsevier Science Ltd., St. Louis, MO. Braver, T.S. & Cohen, J.D. (2000). On the control of control: The role of dopa- mine in regulating prefrontal function and working memory, In S. Mon- sell and J. Driver, eds., Control of Cognitive Processes: Attention and Per- formance XVIII, pp. 713-738, MIT Press, Cambridge, MA. Brooks, R.A.(1991). Intelligence without representation, Artificial Intelligence, vol.47, no.1-3, pp.139-160. Christensen, J.H. (1996). Rockwell Automation Advanced Technology. A Handout, Presentation of Holonic Manufacturing Systems (HMS): Partnering Opportunities, Harrisburg, PA, February 6, 1996. DARPA IPTO. (2005). Biologically-Inspired Cognitive Architecture (BICA) Program; http://www.darpa.mil/ipto/programs/bica/index.htm Dodd, W. & Gutierrez, R. (2005). Episodic Memory and Emotion for Cognitive Robot ,14th IEEE Int’l Workshop on Robot and Human Interactive Communi- cation (RO-MAN2005) , Nashville, TN, Aug 13-15, 2005. Erol, D.; Park, J., Turkay, E., Kawamura, K., Jenkins, O.C. & Mataric, M.J. (2003). Motion Generation for Humanoid Robots with Automatically De-rived Behaviors, Proc. of IEEE Int’l. Conf. on Systems, Man, and Cybernetics , Washington, DC, October 2003. EU UnitE5 Cotion.(2004).http://cordis.europa.eu/ist/cognition/index.html Ferber, J. (1999). Multi-Agent Systems: An introduction to distributed artificial in- telligence , Addison-Wesley Professional. Funahashi, S. & Kubota, K. (1994). Working memory and prefrontal cortex, Neuroscience Research, vol. 21, pp. 1-11. 40 Industrial Robotics: Theory, Modelling and Control Gat, E. (1998). Three Level Architectures, Chapter 8, in Artificial Intelligence and Mobile Robots: Case Studies of Successful Robot Systems,( E. Kortenkamp, R.P. Barasso, & R. Murphy, eds.), AAAI Press, pp. 195-210. Gordon, S. & Hall, J. (2006). System Integration with Working Memory Man- agement for Robotic Behavior Learning, ICDL , Bloomington, IN. Greeno, J.G. (1984). Gibson’s Affordances, Psychological Review , Vol. 101, No. 2, pp.336-342. Hambuchen, K.A. (2004). Multi-Modal Attention and Binding using a Sensory EgoSphere , Ph.D. Dissertation, Vanderbilt University, Nashville, TN, May Holland, O., ed. (2003). Machine Consciousness , Imprint Academic, Charlottes- ville, VA. Hollnagel, E. & Woods, D.D., (1999). Cognitive Systems Engineering, Int’l Jo. of Human-Computer Studies , Vol. 18, pp. 339-356. IMS. (1996). http://ksi.cpsc.ucalgary.ca/IMS/IMS.html Jenkins, O.C. & Matari þ, M.J. (2003). Automated derivation of behavior vo- cabularies for autonomous humanoid motion,” 2nd Int’l Joint Conf. on Autonomous Agents and Multiagent Systems ,LOCATION. Kawamura, K.; Rogers, T.E., Hambuchen, K.A., & Erol, D. (2003a). Towards a Human-Robot Symbiotic System, pp.555 – 565, Robotics and Computer In- tegrated Manufacturing , vol. 19. Kawamura, K.; Noelle, D.C., Hambuchen, K.A. & Rogers, T.E. (2003b). A Multi-agent Approach to Self-reflection for Cognitive Robots", Proc. of 11th Int’l Conf. on Advanced Robotics , pp.568-575, Coimbra, Portugal, Jun 30-Jul 3, 2003. Kawamura, K.; Rogers, T., & Ao, X. (2002). Development of a cognitive model of humans in a multi-agent framework for human-robot interaction,” 1st Int’l Joint Conf. on Autonomous Agents and Multi-Agent System s (AAMAS), pp. 1379-1386, Bologna, Italy, July 25-27, 2002. Kawamura, K.; Peters II, R.A., Wilkes, D.M., Alford, W.A., & Rogers, T.E. (2000). ISAC: Foundations in human-humanoid interaction,” IEEE Intelli- gent Systems, July/August, pp. 38-45. Kawamura, K.; Bagchi, S., Iskarous, M., Bishay, M. & Peters II, R.A. (1995). Intelligent Robotic Systems in Service of the Disabled,” IEEE Trans. on Rehabilitation Engineering , Vol. 3, No.1, pp.14-21. Kawamura, K.; Pack, R.T., Bishay, M., & Iskarous, M. (1986). Design Philoso- phy for Service Robots, Robotics and Autonomous Systems ,Int’l Workshop on Biorobotics: Human-Robot Symbiosis, ( eds. K. Kawamura and T.E. Davis), Elsevier, pp.109-116. Kieras, D.E.; Mueller, M.S., & Seymour, T. (1999). Insights into Working Mem- ory from the Perspective of the EPIC Architecture for Modeling Skilled Perceptual-Motor and Cognitive Human Performance, in Models of Working Memory. Mechanisms of Active Maintenance and Executive Robotic Body-Mind Integration: Next Grand Challenge in Robotics 41 Control, A. Miyake and P. Shah, Eds., Cambridge University Press, Cambridge. Kieras, D. & Meyer, D. (1995). An Overview of the EPIC Architecture for Cog- nition and Performance with Application to Human-Computer Interac- tion, EPIC Report No. 5 (TR-95/ONR-EPIC-5) , University of Michigan. Koestler, A. (1967). The Ghost on the Machines, Arkana Books, London. Laird, J.E.; Newell, A. & Rosenblum, P.S. (1987). SOAR: An architecture for general intelligence, Artificial Intelligence , Vol. 33, pp. 1-64. Lovett, M.C.; Reder, L.M., & Lebiere, C. (1999). Modeling Working Memory in a Unified Architecture. An ACT-R Perspective, in Models of Working Memory. Mechanisms of Active Maintenance and Executive Control, (A. Miyake and P. Shah, Eds.), Cambridge University Press, Cambridge. MacDonald, A.W.I.; Cohen, J., Stegner, V., & Carter, C.S. (2000). Dissociating the Role of Dorsolateral Prefrontal and Anterior Cingulated Cortex in Cognitive Control,” Science, Vol. 288 (5472), pp.1935-1838. MacLeod, C.M. & Sheehan, P.W. (2003). Hypnotic Control of Attention in the Stroop Task: A historic footnote, Consciousness and Cognition , vol. 12, pp. 347-353. Meyer, D.E. & Kieras, D.E. (1997) A computational theory of executive cogni- tive processes and multiple-task performance: I. Basic mechanisms. Psy- chological Review , Vol. 10, No. 41, pp. 3-65. Miller, E.K. (2003). Cognitive Control: Understanding the brain’s executive, in Fun- damentals of the Brain and Mind , Lecture 8, June 11-13, 2003, MIT Press, Cambridge, MA. Miller, E.K.; Erickson, C.A. & Desimone, R. (1996). Neural Mechanisms of Vis- ual Working Memory in Prefrontal Cortex of the Macaque,” Jo. of Neuro- science, vol.16, pp.5154-6. Minsky, M. (1985). The Society of Mind, Simon & Schuster, New York, NY, pp. Mitchell, Tom M. (1997), Machine Learning , McGraw-Hill, New York, NY. Olivares, R.E. (2004). The Intelligent Machine Architecture 2.5: A revised develop- ment environment and software architecture, Master Thesis, Vanderbilt Uni- versity, Nashville, TN, May 2004. Olivares, R.E. (2003). Intelligent Machine Architecture 1.0: Introduction and system overview, CIS / Cognitive Robotics Laboratory Technical Report, Vander- bilt University, Nashville, TN, May 2003. O’Reilly, R.; Braver, T. & Cohen, J. (1999). A Biologically Based Computational Model of Working Memory, In Models of Working Memory: Mechanisms of Ac- tive Maintenance and Executive Control , (A. Miyake and P. Shah, Eds.), Cambridge University Press, Cambridge, UK. Pack, R.T. (1998). IMA: The Intelligent Machine Architecture , PhD Dissertation, Vanderbilt University, Nashville, TN, May 1998. Peters II, R.A.; Hambuchen, K.A., Kawamura, K. & Wilkes, D.M. (2001). The 42 Industrial Robotics: Theory, Modelling and Control sensory egosphere as a short-term memory for humanoids,” Proc. of the IEEE-RAS Int’l Conf. on Humanoid Robots , Waseda University, Tokyo, Nov. 22-24, 2001, pp 451-459. Phillips, J. & Noelle, D. (2006). Working Memory for Robots: Inspirations from Computational Neuroscience, Proc. from 5th Int’l Conf on Development and Learning, Bloomington, IN, June 2006. Phillips, J. & Noelle, D. (2005). A Biologically Inspired Working Memory Framework for Robots, 14th IEEE Int’l Workshop on Robot and Human Interactive Communication , Nashville, TN, Aug 13-15, 2005, pp 599-601. Ratanaswasd, P., Garber, C. & Lauf, A. (2006). Situation-Based Stimuli Response in a Humanoid Robot, Proc. from 5th Int’l Conf on Development and Learning, , Bloomington, IN, June 2006. Rogers, T.E. (2003). The Human Agent: A model for human-robot interaction , PhD Dissertation, Vanderbilt University, Nashville, TN, August 2003. Rose, C.; Cohen, M.F. & Bodenheimer, B. (1998). Verbs and Adverbs: Multidimensional motion interpolation,” IEEE Computer Graphics and Applications, vol. 18, no. 5, September– October, pp. 32-40. Saad, A. (1996). Agent-Based Dynamic Decentraliz ed Scheduling for Flexible Manufacturing Systems , Ph.D. Dissertation, Vanderbilt University, Nashville, TN, August 1996. Shu, S., Wilkes, M. & Kawamura, K. (2000). Development of Reusable, Config- urable, Extensible Holonic Manufacturing System, Proceedings of IEEE Systems, Man & Cybernetics (SMC 2000), Washington, D.C., Vol.3, pp. 1679-1684. Sloman, A., Chrisley, R.I. & Scheutz, M.(2005). The Architectural Basis of Af- fective States & Processes. In M. Arbib and J. M. Fellous, eds, Who Needs Emotions?: The Brain Meets the Machine. Oxford Univ. Press, Oxford. SOAR BICA Research Project. (2006). http://sitemaker.umich.edu/soar/soar_bica_research-project Spratley II, A.W., Verbs and Adverbs as the Basis for Motion Generation in Human- oid Robots, M.S. Thesis, Vanderbilt University, Nashville, TN, August Stuss, D.T. & Knight, R.T. (2002). Principles of Frontal Lobe Function , Oxford University Press, Oxford. Sutton, R.S. (1988). Learning to predict by the method of temporal differences, Machine Learning, vol.3, pp. 9-44. Taylor, J.G. & Fragopanagos, N. (2004). Modeling the Interaction of Attention and Emotion, Brain-Inspired Cognitive Systems, University of Stirling, UK. Tenenbaum, J.B.; de Silva, V. & Langford, J.C. (2000). A global geometric framework for nonlinear dimensionality reduction,” Science , vol. 290 (5500), pp. 2319–2323. van Leeuwen, E.H. & Norrie, D. (1998). Holonic Manufacturing Systems, Handout, HMS8 Plenary Meeting, Vancouver, BC, February 11-17, 1998. 432 Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice I-Ming Chen, Guilin Yang and Song Huat Yeo Introduction A modular reconfigurable robot consists of a collection of individual link and joint components that can be assembled into a number of different robot ge-ometries. Compared to a conventional industrial robot with fixed geometry, such a system can provide flexibility to the user to cope with a wide spectrum of tasks through proper selection and reconfiguration of a large inventory of functional components. Several prototyping systems have been demonstrated in various research institutions (Cohen et al. 1992; Fukuda & Nakagawa 1988; Schmitz, et al. 1988; Wurst 1986). Applications of modular systems have been proposed in rapid deployable robot systems for hazardous material handling (Paredis et al. 1995), in space stationed autonomous systems (Ambrose 1995), and in manufacturing systems (Chen 2000; 2001). In the control and simulation of a modular reconfigurable robot system, pre- cise kinematic and dynamic models of the robot are necessary. However, clas- sical kinematic and dynamic modelling techniques for robot manipulators are meant for robot with fixed geometry. These models have to be derived manu- ally and individually stored in the robot controller prior to simulating and con- trolling the robot. Commercial robot simulation software usually provides end users with a library of predefined models of existing robots. The models of any new robot not in the library have to be derived exclusively from the given pa- rameters and commands in the package. For a modular robot system built upon standard modular components, the possible robot geometries and de- grees of freedom become huge. As shown by Chen (1994), the number of ro-bot-assembly configurations grows exponentially when the module set be- comes large and the module design becomes complicated. To derive all of these models and store them as library functions require not only tremendous effort but also very large amount of disk storage space. In such cases, it is im- practical and almost impossible to obtain the kinematic and dynamic models of a robot based on the fixed-geometry approach. Hence, there is a need to develop an automatic model-generation technique for modular robot applica- tions.44 Industrial Robotics: Theory, Modelling and Control In this chapter, we introduce a framework to facilitate the model-generation procedure for the control and simulation of modular robots. The framework consists of three parts: a component database; a representation of modular ro- bot geometry; and geometry-independent modelling techniques for kinemat- ics, dynamics, and calibration. The component database maintains the descrip- tion and specifications of standard robot components, such as actuators, rigid links, sensors, and end effectors. The robot representation indicates the types and orders of the robot components being connected. The geometry- independent modelling algorithms then generate the proper models based on the robot description. A graph based technique, termed the kinematic graph , is introduced to repre- sent the module-assembly sequence and robot geometry. In this graph, a node represents a connected joint module and an edge represents a connected link module. Modules attached to or detached from the robot can be indicated by adding or removing nodes or edges from the graph. The realization of this graph is through an Assembly Incidence Matrix (AIM) (Chen 1994; Chen & Bur- dick 1998). A modular robot can be conceived according to the given AIM without knowing the other parameters, such as joint angles and initial posi- tions. Here, we assume the generic structure of a modular robot is branch- type. The serial type modular robot is a special case of the branch-type struc- ture. Previous attempt to deal with automatic model generation for modular robots employed Denavit-Hartenburg (D-H) parameterization of the robot (Kelmar & Khosla 1988; Benhabib et al. 1989). However, the D-H method does not pro- vide a clear distinction between the arranging sequence of the modules in the robot chain and their spatial relationship. Also, it depends on the initial posi- tion of the robot: the same robot may have different sets of D-H parameters just because of the different initial or zero positions. When evaluating the task performance of a modular robot with respect to its corresponding geometry, complicated equivalence relationships must be defined on the sets of parame- ters to identify the uniqueness of the robot geometry (Chen & Burdick 1998). The formulation of the kinematics and dynamics is based on the theory of Lie groups and Lie algebras. The robot kinematics follows a local representation of the product-of-exponential (POE) formula, in which the joints, regardless of the types, are defined as members of se(3) , the Lie algebra of the Euclidean group SE(3) . The associated Lie algebraic structure can simplify the construc- tion of the differentials of the forward-kinematic function required for numeri- cal inverse solutions. The POE representation can also avoid the singularity conditions that frequently occur in the kinematic calibration formulated by the D-H method (Chen & Yang 1997; Chen et al. 2001). Thus, it provides us with a uniform and well-behaved method for handling the inverse kinematics of both calibrated and uncalibrated robot systems. Since the joint axes are described in the local module (body) coordinate systems, it is convenient for progressive Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 45 construction of the kinematic models of a modular robot, as it resembles the assembling action of the physical modular robot components. The formulation of the dynamic model is started with a recursive Newton-Euler algorithm (Hollerbach 1980; Rodriguez et al. 1991). The generalized velocity, acceleration, and forces are expressed in terms of linear operations on se(3) (Murray et al. 1994). Based on the relationship between the recursive formulation and the closed-form Lagrangian formulation for serial-robot dynamics discussed in (Featherstone 1987; Park et al. 1995), we use an accessibility matrix (Deo 1974) to assist in the construction of the closed-form equation of motion of a branch- type modular robot, which we assume is the generic topology of a modular robot. Note that all the proposed modelling techniques can contend with re- dundant and nonredundant modular robot configurations. This chapter is organized as follows. Section 2 introduces the basic features of the hardware and software of a newly conceived modular robotic workcell. Section 3 briefly reviews the definitions of the AIM presentation and the asso- ciated accessibility matrix and path matrix. Section 4 concerns the formulation and implementation of geometry-independent kinematic, dynamic, and cali- bration models for modular robots. In addition to automated model genera- tion, identification of the optimal modular robot assembly geometry for a spe- cific task from the vast candidate database is also important. The AIM representation facilitates the search/optimization process by using the genetic algorithms approach. Section 5 investigates the task-oriented optimal geome- try issues in modular reconfigurable robots and the advantage of using AIM to solve this type of problem. The proposed automatic model-generation method implemented in a Windows Based application for modular robotic automation system, termed SEMORS (Simulation Environment for MOdular Robot Sys- tem) is introduced in Section 6. Prototypes of the modular robotic automation systems configured in both serial and parallel geometries for positioning and machining purposes based on the operation of SEMORS are illustrated in Sec- tion 7. This chapter is concluded in Section 8. System Architecture Figure 1 illustrates the system layout of a reconfigurable robotic workcell pro- posed by Nanyang Technological University and Singapore Institute of Manu- facturing Technology (Chen 2001). The objective of this project is to develop a reconfigurable modular robotic workcell which is capable of performing a va- riety of tasks, such as part assembly, material transfer, and light machining (grinding, polishing and deburring), through rapid change of reusable work- cell components. In this system, workcells are made of standard interchange- able modular components, such as actuators, rigid links, end-of-arm tooling, fixtures, and sensors. These components can be rapidly assembled and config-46 Industrial Robotics: Theory, Modelling and Control ured to form robots with various structures and degrees of freedom. The ro- bots, together with other peripheral devices, will form a complete robotic workcell to execute a specific manufacturing task or process. The correspond- ing intelligent control and simulation software components are then reconfig- ured according to the change of the workcell configuration. The maintenance and upgrade of the system are simplified by replacing the malfunctioned or outdated components. Converting a manufacturing line from one product to another can be very fast in order to keep up with the rapidly changing mar- ketplace. Figure 1. Deployment of a reconfigurable robotic workcell In this system, the workcell software is designed in reusable- and reconfigur- able-object fashion for ease of maintenance and development. Figure 2 illus- trates the overall software architecture of the modular workcell. The user envi- ronment will provide all the necessary functions to facilitate the end user in controlling, monitoring and simulating the workcell. It consists of the follow- ing parts: Component browser –- for viewing and editing the components available in the component database; Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 47 •Simulator --- for generating a computer-simulation model of a modular robot and the entire workcell; additionally, the simulator may be employed as the core function for future virtual manufacturing capabilities; •Task level planner --- for determining the optimal geometry of a modular ro- bot for a given task and the overall layout of the workcell for a particular manufacturing process; •Programming interface --- for providing command and control of the system; and •Controller --- for commanding the low-level individual controllers located in the components, and identifying the robot’s geometry from the local com-ponent controllers. Figure 2. Software architecture for reconfigurable workcell The system kernel, which is hidden from the user, provides automated model- generation functions and the configuration-optimization function (a compo- nent database is also associated with it): •Object-oriented component database ----manages the specification of all the components, such as the dimensions and weights of the links, maximum ki- nematic and dynamic performance of the actuators, etc. It can be accessed by the user for browsing and editing purposes. 48 Industrial Robotics: Theory, Modelling and Control •Geometry-independent kernel functions ---generates kinematic and dynamic models of the robots shared by the simulators and the controller. Using iden- tical models in the simulation and control of the workcell insures the reliabil- ity and integration of the system, and enables physically based simulations through the workcell controller. The configuration-optimization function can enumerate all possible robot geometry from an inventory of module components in the database, and select the most suitable one for a pre- scribed task. This information will pass back to the task-level planner to de- termine the optimal layout and locations of the robots in the workcell. The information passing from the component database to the modeling func- tions is through the assembly incidence matrix. Robot geometries (serial, branch, or hybrid) and detailed connection information, such as the connecting orientation and the types of adjacent modules, are all indicated in the matrix. This matrix is then passed to the geometry-independent functions for model generation. In such a system, the need to maintain a huge library of robot models is elimi- nated; instead, we maintain a small selection of the component-database and kernel functions for automated model generation, reducing the overall foot- print of the system software. Modular Robot Representation 3.1 Module Representation To make the automatic model-generation algorithms work on a variety of module components, we introduce a conceptual set of modules whose features are extracted from those of real implementations. The modular systems devel- oped to date have several common mechanical and structural features: (1) only 1-DOF revolute and 1-DOF prismatic joints; (2) symmetric link geometries for interchangeability; and (3) multiple connection ports on a link. Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 49 Figure 3. Modular robot components 3.1.1 Joint Modules A modular robot joint module is an ``active'' joint, which allows the generation of a prescribed motion between connected links. Two types of joint modules, the revolute joints (rotary motion) and the prismatic joints (linear or translational motion), are considered. Rotary and linear actuators must reside in the modules to produce the required motions and maintain the modularity of the system. Multi-DOF motions can be synthesized with several 1-DOF joints. Joint modules are attached to link modules through standardized connecting interfaces for mechanical, power, and control connections. 3.1.2 Link Modules The place on a link module where the joint is connected is called a connecting port. Without loss of generality, we assume that a link module is capable of multiple joint connections, and the link module has symmetrical geometry. Such a design allows modules to be attached in various orientations, and the robot geometry to be altered by simple reassembling. The modular robot com- ponents developed in our university are shown in Figure 3. This design fol- lows the building-block principle whereby modules can be stacked together in various orientations through connecting points on all six faces of the cubes. 50 Industrial Robotics: Theory, Modelling and Control 3.2 Assembly Incidence Matrix Definition 1. (Graph) A graph =( , ) . consists of a vertex set, 0={ , , }n vv". , and an edge set, 0={ , , }m ee" , such that every edge in is associated with a pair of vertices, i.e., =( , )ij kev v . (a) (b) Figure 4. (a) A branching modular robot; (b) kinematic graphs of the robot In mechanism design theory, a kinematic chain of links and joints is often represented by a graph, termed a kinematic graph (Dobrjanskyj & Freudenstein 1967), in which vertices represent the links and edges represent the joints. Using this graph representation, we are able to categorize the underlying structure (or geometry) of a linkage mechanism and apply the result from the graph theory to enumerate and classify linkage mechanisms. A robot Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 51 manipulator is also a kinematic chain, thus, admitting a kinematic graph representation. For example, an 8-module 7-DOF branch-type modular robot and its kinematic graphs are shown in Figure 4(a) and 4(b). It is also known that a graph can be represented numerically as a vertex-edge incidence matrix in which the entries contain only 0s and 1s (Deo 1974). Entry (, )ij is equal to 1 if edgeje is incident on vertex iv, otherwise, it is equal to zero. This incidence relationship defines the connectivity of the link and joint modules. Because link modules may have multiple connecting points, we can assign labels to the connecting points to identify the module connection. To further identify those connections in the incidence matrix, we can replace those entries of 1 by the labels of the connected ports being identified on the link modules, and keep those entries of 0 unchanged. This modified matrix, termed an assembly incidence matrix , provides us the necessary connection information of the modules and also the basic geometry of the modular robot. Definition 2. (Assembly incidence matrix) Let be a kinematic graph of a modular robot and ()% be its incidence matrix. Let port be the set of labels assigned to the connecting ports on the link modules. The assembly incidence matrix of the robot () is formed by substituting the 1s in ()% with labels in port on respective modules. One extra column and row are augmented to () to show the types of link and joint modules. Note that the representation and assignment of the labels are nonunique. The labels of the connecting ports may be numerical values (Chen 1994) or may be derived from the module coordinates (Chen & Yang 1996). In this case, the module-component database should use consistent bookkeeping for this in- formation. The AIM of the modular robot (8 link modules and 7 joint modules) shown in Fig. 4 is a 98× matrix: 1350000 6000000 1 0106000 1 0020600 1 () = . 0005020 2 0000503 2 0000010 2 0000002 2 0B C C C CC C C PRRRRPPªº «»«» «» «» «» «» «» «» «» «» «» «»¬¼ (1) Note that there are three types of link modules in the robot: the base ( B), the large cubic module ( 1C), and the small cubic module ( 2C). Cubic modules have six connecting interfaces labeled 1 – 6; i.e., port ={ 1 , ,6 }" , which follows the labeling scheme on dice. The revolute joints and prismatic joints are denoted by R and P respectively. 52 Industrial Robotics: Theory, Modelling and Control 3.3 Accessibility Matrix and Path Matrix Two matrices, namely the accessibility matrix and the path matrix, derived from a given AIM are defined in this section to provide the accessibility information from the base module to every pendant module in a branch-type modular robot. The accessibility information enables us to formulate the kinematics and dynamics of a general branch-type robot in a uniform way. 3.3.1 Module traversing order The links and joints of a serial-type robot can follow a natural order from the base to the tip. A branch-type robot has more than one tips, and no loops. The- refore, the order of the links of a branch-type robot depends on the graph tra- versing algorithms (Cormen et al. 1990). Let (V , )=   represent the kine- matic graph of a branch-type modular robot with 1n+ link modules, where { }01vv vn V, , . . .= represents the set of modules. The fixed base module is de- noted by 0v and is always the starting point for the traversing algorithm. The rest modules are labeled by their traversing orders i. The traversing orders of the links in the robot of Figure 4(a) are indicated by the numbers on the verti- ces of the graph of Figure 4(b). This order is obtained by the depth-first-search algorithm. Note that the farther the module is away from the base, the larger its traversing order. 3.2.2 Directed graphs A branch-type robot with 1n+ modules has n joints. Let 1={ , , }n ee" represents the set of joints, where joint ie is designated as the connector preceding link module iv. With a given traversing order, the robot graph can be converted to a directed graph (or digraph) G , which is an outward tree for a branch-type manipulator in the following manner. Let =( , )ji jev v be an edge of the graph G and <ij . An arrow is drawn from iv to jv as edge je leaves vertex iv and enters vertex jv. Suffice to say, link iv precedes link jv. An example of the directed graph is shown in Figure 4(b). From an outward tree with n vertices, an nn× accessibility matrix can be defined to show the accessibility among the vertices. Definition 3. (Accessibility matrix) The accessibility matrix of a directed kinematic graph G of a modular robot with 1n+ modules (vertices) is an (1 ) (1 )nn+×+ matrix, () = []ijrG * (, =0 , , )ij n" such that =1ijr , if there is a directed path of length one or more from iv to jv;=0ijr , otherwise. Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 53 The accessibility matrix can be derived from the AIM once the traversing order on the link modules is determined. For example, the accessibility matrix of G in Figure 4(b) is 0 1234567 0 1 2 3 456 701111111 0011000000010000 () = . 00000000 00000000000000110000000100000000ªº «» «» «» «»«» «» «» «» «» «» ¬¼v vvvvvvv v v v v v v vv G * (2) From ()G * , we can obtain the shortest route from the base to the pendant link. This route is called a path . The pendant links are the rows of ()G * with all 0s. The number of paths in a branching robot is equal to the number of pendant links. Let link iv be a pendant link. All link modules on the path from the base to iv are shown in the nonzero entries of column i of (1 ) (1 ) (( ) )T nnI+× ++G * . Collecting all the paths, we obtain the path matrix: Definition 4. (Path matrix) The path matrix i()( of a directed kinematic graph i of a branch-type robot with 1n+ link modules (vertices) and m paths is an (1 )mn×+ matrix, () =ij[p ]G ( , (=1 ,2 , ,im! ;=0 , 1 , ,j n! ) such that =1ijp , if path i contains vertex j, and =0ijp otherwise. For instance, the robot of Figure 4(a) contains three branches (paths). The three paths can be represented as a 38× path matrix: 012 3 4 5 6 7 1 1110000() = .10001000 10000111ªº «» «»«»¬¼v vvvvvvv G ( (3) 54 Industrial Robotics: Theory, Modelling and Control Row 1 represents the branch of the robot containing link modules 0v,1v,2v, 3v; Row 2 represents the branch of 0v and 4v; Row 3 represents the branch of 0v,5v,6v, and 7v. It can be seen that the rows of ()G ( are identical to Col- umns 3, 4, and 7 of (1 ) (1 ) (( ) )nnI+× ++G * respectively. Geometry-Independent Models 4.1 Forward Kinematics The forward kinematics of a general branch-type modular robot starts with a given AIM and a dyad kinematic model that relates the motion of two connected modules under a joint displacement. A dyad is a pair of connected links in a kinematic chain. Using dyad kinematics recursively with a prescribed graph-traversing order assigned to the robot modules, we may obtain the forward transformation of every branch with respect to the base frame, having a prescribed set of joint displacements. Note that a branch-type robot is one without any closed loop geometry. The kinematics of a closed loop type robot mechanism requires additional constraints, and is not considered here. 4.1.1 Dyad kinematics Letiv and jv be two adjacent links connected by a joint je, as shown in Fig- ure 5. Denote joint je and link jv as link assembly j and the module- coordinate frame on link iv as frame i. The relative position (including the o- rientation) of the dyad, iv and jv, with respect to frame i with a joint angle jq, can be described by a 44× homogeneous matrix, ˆ() = ( 0 )jjsq ij j ijqeTT , (4) where ˆ (3)jss e∈ is the twist of joint je expressed in frame j,()ij ijqT and (0) (3)ij SE∈ T .(0)ijT is the initial pose of frame j relative to frame i. Note that in the following context, the pose of a coordinate frame is referred to the 44× homogeneous matrix of the orientation and position of a coordinate frame: (0) (0)(0) = ,1ij ij ijªº «»¬¼RdT0 (5) Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 55 where (0) (3)ij SO∈ R and 3(0)ij R∈ d are the initial orientation and position of link frame j relative to frame i respectively. The twist ˆjs of link assembly j is the skew-symmetric matrix representation of the 6-vector line coordinate of the joint axis, =( , )jj js qp ;3,jj R∈ pq . =( , , )jj x j y j zppp p is the unit-directional vector of the joint axis relative to frame j, and =( , , )=jj x j y j z j jqqq × qp r , where jr is the position vector of a point along the joint axis relative to frame j. For revolute joints, =( 0 , )jjsp ,and for prismatic joints, =( , 0 )jjsq . Figure 5. Link-assembly j connected to link i 4.1.2 Recursive forward kinematics Based on eq. (4), we propose a recursive algorithm for a general branch-type modular robot, termed TreeRobotKinematics . This algorithm can derive the forward transformations of the base link to all pendant links based on graph- traversing algorithms. The procedure is illustrated in Figure 6. Implementation details can be found in an earlier work (Chen & Yang 1996). The algorithm takes three inputs: the AIM of the robot () , the base link location 0T, and a set of joint angles {}q. The forward-kinematics calculation follows the breath- first-search (BFS) traversing algorithm to travel on the connected robot modules.56 Industrial Robotics: Theory, Modelling and Control Figure 6. The TreeRobotKinematics algorithm 4.1.3 Path-by-path forward kinematics A tree-type robot consists of several paths that give the shortest routes from the base to the respective pendant links. Each path can be considered as a serially connected submanipulator so that the forward transformation can be derived as conventional industrial manipulator. The sequence of the connected modules in a path is indicated in a row of the path matrix ()G ( . Let 012={ , , , , }n aa a a a " represent the links of path k. The base is 00 a≡ and the number of links in the path k is defined to be || = 1an +. For instance, path 1 of the robot in Figure 4(a) is = {0,1,2,3}a . The forward kinematics from the base to the pendant link na of path k is given by 00 1 1 1 2 2 1 1 =1=( ) ( ) ( ) =( ( 0 ) )nn n n aaii iiaa aa a aa a a a a nsq aa iTT q T q T q Te− −∏! . (6) For a branch-type modular robot with several paths, the forward kinematics is 1 0 011 12 1(( 0 )) (, , , ) = ( ( 0 ) )aaii ii n bbii mi isq n ia aaa sq m nb b i b bTeT qq q T T e− −= =ªº∏ªº«»«»«»=∏«»«»«»«»¬¼«»¬¼T ! ##, (7) where12(, , , )n qq qT! represents the vector of 44× homogeneous matrices of the poses of all the pendant end-effectors. Since many paths in the branch-type robot share many common modules, there will be repetitive calculations using the model of eq. (7). In actual implementation, we prefer the recursive ap-proach, which introduces no repetitive calculations. Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 57 4.2 Inverse Kinematics The purpose of an inverse kinematics algorithm is to determine the joint angles that cause the end-effector of a manipulator to reach a desired pose. Current robot inverse kinematics algorithms can be categorized into two types: closed- form and numerical. Closed-form-type inverse kinematics requires a complete parameterization of the solution space, usually in terms of simultaneous polynomial equations. Solutions to such a set of simultaneous polynomial solutions exist for a few types of robots with revolute joints or simple geometry. It is very difficult to obtain the inverse kinematics for an arbitrary modular reconfigurable robot in this manner. Here we adopt the numerical approach to solve the inverse kinematics of modular robots. The inverse- kinematics algorithm will construct the differential kinematic model using the local POE formula. The differential kinematic equation of a single branch of a branch-type robot is considered first. Based on the AIM of the robot, one can extend this differential kinematics model to include multiple branch structures. Then the Newton-Raphson iteration method is used to obtain the numerical inverse kinematics solutions. The differential kinematic model can be easily modified to solve the pure position, pure orientation, and hybrid inverse kinematics problems (Chen & Yang 1999). 4.2.1 A Single branch Let 0naaT be the forward transformation of path k as indicated in eq. (6). The differential change in the position of the end-link na can be given by 0 0 1 01 0||1 =1 ||1 =1 ||1 =1= (( 0 ))= =n ni i aaii ii ii n i i iii n ia aa aa a i a sqa aa aa a a a i a a aaa a a a iTdT dqq TeTT d qq Ts T d q− −− − −∂ ∂ ªº ∂«» ∂ «»¬¼ ªº¬¼¦ ¦ ¦  (8) Left-multiplying 01 naaT−, eq. (8) becomes, 00||1 11 =1=inn i ni n ia aa a a a aa aa a iTd T Ts Td q− −−¦. (9) Equation (9) is the differential kinematic equation of a path. Let 0nd aaT denote the desired position of the end-effector. When it is in the neighborhood of a nominal position of the end-effector 0naaT, we have 58 Industrial Robotics: Theory, Modelling and Control 00 0= nn nd aa aa aadT T T − . (10) Left-multiplying 01 naaT− to eq. (9), and using the matrix logarithm, 00 00 00 0012 13 11() ()log( ) = ( )23nn nn nn nndd aa aa aa aa dd aa aa aa aaTT I TT ITT TT I−− −−−−−− + − " (11) We can obtain the following equation by first order approximation: 00 0 011=l o g ( ) nn n nd aa aa aa aaTd T TT−−. (12) Substituting eq. (12) into eq. (9), we obtain 00 0 0||1 11 =1log( ) =inn n nia d aaa aa aa aa a iTT T s Td q− −−¦. (13) Explicit formulae for calculating the logarithm of elements of (3)SO and (3)SE were derived by Park and Bobrow (1994). Definitely, 001log( ) nnd aa aaTT− is an element of (3)se s o t h a t i t c a n b e i d e n t i f i e d b y a 61× vector denoted by 001log( ) nnd aa aaTT−∨ in which the first and later three elements represent the positional and orientational differences between 0naaT and 0nd aaT. Converting eq. (13) into the adjoint representation, we get 100 00||1 1 =1log( ) = nn a a ii i aana d aa aa T a a T iTT A d A d s d q−− −∨¦ . (14) Conveniently, eq. (14) can also be expressed as the following form: = kTk kDJ d q , (15) where 0016 1=l o g ( ) kn nd Ta a a aDT T R−∨ ×∈ is referred as the pose difference vector for path k; 6( ||1 )=a kk k kJA B S R×−∈ , is termed as body manipulator Jacobian matrix (Murray et al. 1994); 1 066= aank TAA d R−×∈ ;Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 59 01 02 066 ( ||1 )=r o w [ , , , ] aa aa aa na kT T TBA d A d A d R×−∈ ! ; 126(| | 1) (| | 1)=d i a g [ , , , ] ] naa ka a aSs s s R−× −∈! ; and 12(| | 1) 1= column[ , , , ] . na ka a adq dq dq dq R−×∈! Equation (15) defines the differential kinematics for path k. It can be utilized in the Newton-Raphson iteration to obtain an inverse kinematics solution for a given pose. 4.2.2 Entire manipulator The paths of a branch-type manipulator may not be independently driven, because of the common sharing modules. This forbids us to treat each path as independent serial-type manipulators. Hence, with a given set of the pendant end-effectors's poses for all branches, the inverse kinematics must be solved simultaneously. With the assistance of the path matrix, we are able to identify the connected and related modules in a path. Then, we can orderly combine the differential kinematic equations (eq. (15)) ofall constituting paths into a single matrix equation of the following form: =TDJ d q , (16) where 1261=c o l u m n [ , , , ] mm TT T TDD D D R×∈! ,is termedthe generalized pose difference vector ; 6=mnJ ABS R×∈ , is termed the generalized body manipulator Jacobian matrix ; 66 12 =d i a g [ , , , ]mm m AA A A R×∈! ; and 01 02 0 01 02 0 01 02 011 12 1 21 22 2 66 12=n n nTT n T TT n T mn mT m T m n TpA d pA d pA d pA d pA d pA d BR pA d pA d pA d×ªº «»«» ∈«»«»«»¬¼! ! ## % # ! The coefficient, ( = 1,2, , ; = 0,1,2, , )ijpim j n!! is entry (, )ij of the path matrix (, and m is the total number of paths; 6 12 =d i a g [ , , , ]nn n Ss s s R×∈! ;1 12 = column[ , , , ]n n dq dq dq dq R×∈! . Rewriting this equation in an iterative form, we get 60 Industrial Robotics: Theory, Modelling and Control 1*=i T dq J D+ (17) 11=ii iqq d q+++ , (18) where i represents the number of iterations and *J is the Moore-Penrose pseudoinverse of J. Using the Newton-Raphson method, a close-loop iterative algorithm similar to that of Khosla, Newman and Prinz (1985) is employed (Fig. 7). The iterative algorithm determines the necessary changes in the joint angles to achieve a differential change in the position and orientation of the end-effector. Given a complete robot assembly (or the AIM) and a set of desired poses dT, this algorithm starts from an initial guess, 0q, somewhere in the neighborhood of the desired solution. It is terminated when a prescribed termination criteria is reached. As one can see, the structure of J depends on the path matrix, which is implied in the kinematic graph of the robot. Therefore, once the assembly configuration of a modular robot is determined and all module parameters are obtained, the differential kinematic model (eq. (16)) can be generated automatically. Computational examples of the inverse kinematics algorithms for branch-type and serial modular robots are given by Chen & Yang (1999) to illustrate the algorithm’s applicability and effectiveness. When compared to the other numerical inverse kinematics algorithm using D-H parameters, our method always use less number of iterations and computing time for the same given pose. This is due to the use of the pose difference vector computed from the matrix logarithm in eq. (16), and not the difference of homogeneous transformation matrices. Actual implementation of the algorithm using C++ codes shows that the computation time for each solution can take less than 20 msec on a Pentium II 300MHz PC, which satisfies the basic requirement for real-time control and simulation. Figure 7. Inverse kinematics algorithm Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 61 4.3 Kinematic Calibration The machining tolerance, compliance, and wear of the connected mechanism and mis-alignment of the connected module components may introduce errors in positioning the end-effector of a modular robot. Hence, calibrating the kinematic parameters of a modular robot to enhance is positioning accuracy is important, especially in high precision application such as hard-disk assembly. Current kinematic calibration algorithms for industrial robots that are designed for certain types of serial manipulators are not suitable for modular robots with arbitrary geometry. Here we propose a general singularity-free calibration-modeling method for modular reconfigurable robots, based on the forward kinematics discussed in previous section. This method follows local POE formulae. The robot errors are assumed to be in the initial positions of the consecutive modules. Based on linear superposition and differential transformation, a six-parameter model is derived. This model can be generated automatically once the AIM of the robot is given. An iterative least-square algorithm is then employed to find the error parameters to be corrected. The calibration starts with a serial-type manipulator kinematics model: 11 2 200 1 1 1 2 2 1 , ˆ ˆˆ 01 12 1,() = ( ) ( ) ( ) = (0) (0) (0)nnnn n n sq sq sq nnTT q T q T q Te Te T e− −q " "(19) (20) Extension to a general branch-type modular robot is similar to the treatment of the inverse-kinematics model in previous section. Basically, eq. (20) can be treated as a function of the joint angles, 1=( , , )n qq q" , locations of the joint axes,1ˆˆˆ=( , , )n sss" , and the relative initial positions of the dyads, 00 1 1 ,=( ( 0 ) , , ( 0 ) )nn TT T−" : 00ˆ =(, , )nTf T sq. (21) Written in differential form, we have 00 0ˆ =ˆnff fdT dT d dT∂∂ ∂++∂∂ ∂sqsq. (22) The differential 0ndT can be interpreted as the difference between the nominal position and the measured position. 4.3.1 Error model of a dyad Our kinematic calibration is based on the local frame representation of a dyad 62 Industrial Robotics: Theory, Modelling and Control described in eq. (4). Two assumptions are made in the dyad of link 1i−v and iv of a modular robot chain: first, small geometric errors only exist in the initial position1,(0)iiT− ; second, the twist and joint angle iq assume the nominal values through out the calibration analysis. Hence, instead of identifying the module’s actual initial positions, joint twists and angle offsets, we look for a new set of local initial positions (local frames, called calibrated initial positions), in the calibration model, so that the twist of the joint remains the nominal value. In other words, the errors in a dyad are lumped with the initial position. Therefore, ˆds and dq can be set to 0. Because SE(3) has the dimension of six---three for positions and three for orientations---there can be only six independent quantities in 1,(0)iiT− , and there will be six independent error parameters in a dyad. Denote the small error in the initial position of dyad1(, )ii−vv as 1,(0)iidT− , then l l1, 1,(0) = (0) 0 0=,0 000 0iii ii ii i ii i i ii idT T zy d x zx d y yx d zδδ δδ δδ−− Δ −ªº «»−«» Δ−«» «»¬¼ (23) whereidx,idy, and idz are infinitesimal displacements along x- , y- , and z- axes of link frame i respectively, and ixδ,iyδ and izδ are infinitesimal rotations about x-,y-, and z-axes of link frame i respectively. 4.3.2 Gross error model of a robot Similar to the error model of a dyad, the gross-geometric error, 0ndT between the actual end-effector position the nominal position can be described as: l000= nnndT T Δ (24) and l 1 000 00 0 00 0 00 0= 0 0=,0 000 0nnn nn n nn n nn ndT T zy d x zx d y yx d zδδ δδ δδ−Δ − ªº «»−«» −«» «»¬¼(25) (26) where0nxδ ,0nyδ ,0nzδ are the rotations about the axes of the base frame, and Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 63 0ndx,0ndy, and 0ndz are the displacements along the axes of base frame respectively. Note that the gross error, 0ndT, is expressed in the base frame. Equation (25) follows the left multiplicative differential transformation of 0nT. The calibrated position of the end-effector becomes 00 0'( ) = .nn nTq T d T + (27) 4.3.3 Linear superposition Based on the assumptions, the errors in the dyads will contribut to the gross error in the end-effector's position 0ndT. Since the geometric errors are all very small, the principle of linear superposition can be applied. We assume that the gross errors 0ndT are the linear combination of the errors in the dyads 1,(0)iidT− , ( = 1,2,..., )in ; then ˆ 00 , 1 1 , , =1=( 0 )iin sq ni i i i n idT T dT e T−−¦ . (28) Equation (28) converts and sums the initial position errors of the dyads in the base-frame coordinates. The forward kinematics of link-frame j relative to link-frame i (ij≤) is represented by ijT. Especially, 44=ijTI× when =ij . Substituting eq. (23) into eq. (28), and right-multiplying 1 0nT−, l 1 000 11 0, 1 1, 1, 0, 1 =1= ˆ =( 0 )nnn n ii i i i i i idT T TT TT− −− −− − −Δ Δ¦(29) (30) From the first order approximation, we have l 11 000 0 0=l o g ( ' )nnn n ndT T T T−−Δ≈ . (31) Converting eq. (31) into the adjoint representation, we have 0, 1 1,1 00 ( 0 ) =1(' ) = ( ( ) )log ii in nn T T i iT T Ad Ad −−∨ −Δ ¦ . (32) Equation (32) can also be expressed in the following matrix form =,y xA (33) 64 Industrial Robotics: Theory, Modelling and Control where 16 1 00 =( ' )lognn yT T R∨ −×∈ ; 61 12 =c o l u m n [ , , , ]n n xR×ΔΔ Δ ∈" ; and 0,1 0,1 1,2 0, 1 1,66 (0) (0) (0) =r o w [ , ( ) , , ( ) ] nn nn TT T T TAd Ad Ad Ad Ad R −−×∈ A " . In Equation (33), x represents the error parameters to be identified in a modular robot assembly. The quantities in matrix A and 1 0nT− are determined from the nominal model. 0'nT comes from the actual measured data. To improve the accuracy of the calibration model, the kinematic calibration procedure usually requires the position of the end-effector to be measured in several different robot postures. For the thi measurement, we obtain iy and iA. After taking m measurements, =x YA , (34) Where 61 12 =c o l u m n [ , , , ]m m yy y R×∈ Y " ; and 66 12 =c o l u m n [ , , , ]mn mR×∈ AA A A " . The least-squares solution for x can be obtained by †=xAY, (35) where†A is the pseudo-inverse of A and †1=( )TT −AA A A   for >mn ; †1=( )TT −AA A A   for <mn ;†1=−AA for =mn . The calibration procedure is illustrated in the diagram of Figure 8(a). Com- puter simulation and actual experiment on the modular robot systems de- scribed by Chen & Yang (1997) and Chen et al. (2001) have shown that this calibration method can improve the accuracy in end-effector positioning by up to two orders of magnitudes. Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 65 (a) (b) Figure 8. (a) Calibration algorithm for modular robots; (b) Dynamic model generation 4.4 Dynamics The dynamic model of a robot can be formulated with an iterative method through a recursive Newton-Euler equation. This method can be generally applied to branch-type robots without modification. Here we present a method to generate the closed-form dynamic models of modular robots using the AIM and the recursive algorithm. 4.4.1 Newton-Euler Equation for link assembly Assume that the mass center of link assembly j is coincident with the origin of the link module frame j. The Newton-Euler equation of this rigid link assembly with respect to frame j is (Murray et al 1994) 0 ==0jj jj j j j jj j j j jf mI v w mv Jw w J w τ× ªºª º ªºª º+ «»« » «»« »×¬¼¬ ¼ ¬¼¬ ¼F , (36) 66 Industrial Robotics: Theory, Modelling and Control where61 jR×∈F is the resultant wrench applied to the center of mass relative to frame j. The total mass of link assembly j is jm (which is equal to the sum of linkjv and joint je). The inertia tensor of the link assembly about frame j isjJ. Transforming eq. (36) into the adjoint representation,we have =( ) jT jj j V j jMV a d MV − F . (37) The following notations are adopted: •660 =0j j jm MRJ× ªº∈ «» ¬¼ is the generalized mass matrix; •61=j j jv VRw× ªº∈«» ¬¼ is the generalized body velocity, where jv and jw are 31× vectors de- fining body translational velocity, =( , , )T jx y zvv v v , and the angular velocity, =( , , )T jx y zww w w , respectively; •66 jT Vad R×∈ is the transpose of adjoint matrix jVad related to jV ˆˆ ˆ 0 =( ) = =ˆˆ ˆ 0jjT jj j TT VV jj jwv w ad adwv w− ªº ª º «» « »−−¬¼ ¬ ¼; (38) •ˆjv and 33ˆjwR×∈ are skew-symmetric matrices related to jv and jw respectively; and61=j j jv VRw× ªº∈«» ¬¼  is the generalized body acceleration. 4.4.2 Recursive Newton-Euler algorithm The recursive algorithm is a two-step iteration process. For a branch-type ro- bot, the generalized velocity and acceleration of each link are propagated from the base to the tips of all branches. The generalized force of each link is propa- gated backward from the tips of the branches to the base. At the branching module, generalized forces transmitted back from all branches are summed. FORWARD ITERATION The generalized velocity and acceleration of the base link are given initially, 0 0= = (0,0,0,0,0,0) = = (0,0, ,0,0,0)T b T bVV VV g(39) (40)Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 67 wherebV and bV are expressed in the base frame 0. We assume that the base frame coincides with the spatial reference frame. The generalized acceleration (eq. (40)) is initialized with the gravitation acceleration g to compensate for the effect of gravity. Referring to Figure 6, the recursive body velocity and acceleration equations can be written as 1 11()=( ) =( ) ( )ij iij Tijji j j T ji A d V j j j j TVA d V s q V A d V a d sq sq− −−+ ++   (41) (42) where all the quantities, if not specified, are expressed in link frame j. •jV and jV are the generalized velocity and acceleration of link-assembly j; •jq and jq are the velocity and acceleration of joint je respectively; •1 ijTAd− is the adjoint representation of 1()ij jTq−, where () ( 3 )ij jTq S E ∈ is the posi- tion of frame j relative to frame i with joint angle jq and 11=( ) ijijT TAd Ad−−; and •61 jsR×∈ is the twist coordinates of joint je. BACKWARD ITERATION The backward iteration of the branch-type robot starts simultaneously from all the pendant link assembly. Let PD⊂.. be set of the pendant links of the branch-type robot. For every pendant link assembly id (dP Di∈v.), the Newton-Euler equation (eq. (37)) can be written as =( ) ii i i d i i ieT dd d d V d dF F MV a d MV −+ −  , (43) where idF is the wrench exerted on link-assembly idv by its parent (preceding) link relative to frame id; and ie dF is the external wrench exerted on idv. Note that the total wrench is = ii ie dd dFF+ F . Now traverse the links in the robot backward from the pendant links. Let Hi. be the set of successors of link iv. For every link assembly i, the Newton-Euler equation (eq. (37)) can be written in the following form: 1 =( ) ( ) iij HiTe T ij i i i V i i T jVFA d F F M V a d M V− ∈−+ −¦ , (44) 68 Industrial Robotics: Theory, Modelling and Control where all quantities, if not specified, are expressed in link-frame i;61 iFR×∈ is the wrench exerted to link-assembly i by its predecessor; 61 jFR×∈ is the wrench exerted by link-assembly i to the successor jH i∈v. expressed in link- frame j;e iF is the external wrench applied to link-assembly i. The total wrench is 1 =( ) ij HiTe ii j i T jVFA d F F−∈−+¦ F . The applied torque/force to link assembly i by the actuator at its input joint ie, can be calculated by =T ii isFτ . (45) 4.4.3 Closed-Form Equations of Motion By iteratively expanding the recursive Newton-Euler equations (eqs. (39)-(44)) in the body coordinates, we obtain the generalized velocity, generalized acceleration, and generalized force equations in matrix form: 0= = = =TT T T++ ++T0 1 E 2VG S q VG V G S q G A V F G F G MV G A MV tS F   (46) (47) (48) (49) where -61 12 =c o l u m n [ , , , ]n n VV V R×∈ V " is the generalized body-velocity vector; -61 12 =c o l u m n [ , , , ]n n VV V R×∈ V   " is the generalized body-acceleration vector; -61 12 = column[ , , , ]n n FF F R×∈ F " is the body-wrench vector; -1 12 =c o l u m n [ , , , ]n nR ττ τ×∈ t " is the applied joint-torque/force vector; -1 12 =c o l u m n [ , , , ]n n qq q R×∈ q  " is the joint-velocity vector; -1 12 =c o l u m n [ , , , ]n n qq q R×∈ q   " is the joint-acceleration vector; -61= (0,0, ,0,0,0)TgR×∈0V is the generalized acceleration of the base link; -6 12 =d i a g [ , , , ]nn n ss s R×∈ S " is the joint-twist matrix in the respective body coordinates; -66 12 =d i a g [ , , , ]nn n MM M R×∈ M " is the total generalized-mass matrix; 11 2 266=d i a g [ , , , ] nnnn sq sq s qad ad ad R×−− − ∈1A  " ; 1266=d i a g [ , , , ] nTT T n n VV Vad ad ad R×−− − ∈2A " ; -61 12 = column[ , , , ]ee e n n FF F R×∈EF " is the external wrench vector; Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 69 1 01 1 02 1 066= nT T n TAd Ad R Ad− − −×ªº «»«» ∈«» «» «»¬¼T0G #;and 1 12 11 13 23 111 12 366 12 6 6 66 13 23 6 6 123 6 600 0 00 0 = nn nT nn TT nnn TTTI rA d I rA d rA d I R rA d rA d rA d I− −− −−−× × × × ×ªº «» «» «»∈«» «» «»«»¬¼G" " " ### % # " . Note that (1 ) (1 )() = []nn ijrR+× +∈G * is the accessibility matrix. The matrix G is called a transmission matrix . Substituting eqs. (46)-(48) into eq. (49), we obtain the closed-form equation of motion for a branch-type modular robot with 1n+ modules (including the base module) () (,) () = ++ Mqq Cqqq Nq t   (50) where 0() = (,) = ( ) () =TT TT TT TT+ +12 E T0Mq SGM G S C q q S G MGA A M GS Nq SGM G V SGF (51) (52) (53) The mass matrix is ()Mq ;(,)Cqq represents the centrifugal and Coriolis accelerations; ()Nq represents the gravitational force and external forces. The procedure for obtaining the closed-form equation (eq. (50)) is summarized in Figure 8(b). It has been successfully implemented in Mathematica code. Configuration Optimization Introducing modularity in a robotic system implies that the system perform- ance can be optimized through proper selection and reconfiguration of module components. The task planner for the modular robotic workcell will be able to determine the optimal robot configuration and geometry for a given task from an inventory of robot modules. Figure 9 depicts the general approach for de- termining the optimal assembly configuration. Shaded blocks represent the basic formulation of the optimization problem. With a given set of modules se- lected from the component database, all possible and unique assembly con-70 Industrial Robotics: Theory, Modelling and Control figurations can be generated and identified through an enumeration algorithm (Chen & Burdick 1998). In the second step, an objective function is formulated to evaluate the performance of every assembly configuration, based on the task specifications. A basic robot task contains task specifications that are pro- vided by the task planner---the goal positions/orientations, force application, accuracy, and dexterity of the end-effectors---and constraints to be overcome--- obstacle avoidance, workspace limit, singularity and kinematic redundancy (Chen & Burdick 1995; Yang & Chen 2001). A search/optimization procedure is employed in the last step to find the optimal assembly configuration. Figure 9. Determination of a task-optimal configuration Note that all the dimensions of the modules have been previously designed and fixed at the selection stage. With a given set of modules, the possible combination of robot-assembly configurations is always a finite number. Therefore, the parameter space for the optimization is discrete, and combinato- rial optimization methods can be applied. Exhaustive search algorithms can be used to find the exact optimal solution, but the exponential growth of the data set impedes the efficient implementation of such an algorithm. Random-search techniques such as genetic algorithms (GA) (Chen 1994) and simulated anneal- ing (SA) (Paredis & Khosla 1995) are more suitable for such problems. Transi- tion rules for data points required in GA and SA can be easily implemented based on a data-representation scheme such as AIM. Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 71 Figure 10. The ACEF for serial modular robots 5.1 Task-Oriented Objective Function The crucial point in determining the optimal robot configuration is formulat- ing an objective function that will assign a “goodness” value to every assembly configuration accomplishing a specified task. The form of the objective func- tion should be general enough so that it is applicable to a wide variety of task requirements. Two components of a robot task---task specifications and con- straints---must be considered in formulating the objective function. We call this function an assembly configuration evaluation function (ACEF). The assembly configuration with the greatest ACEF value is deemed optimal. It is also im- portant to note that from a given set of modules it is possible to construct ro- bots with various topologies, such as serial or parallel kinematic structures. Even with a fixed robot-topology class, the number of degrees of freedom (DOF) can alter the kinematic functionality of the system. Here we propose a solution strategy for modular robot with a fixed topology and a fixed number of DOF. The structure of the ACEF for a serial modular robot is shown in Figure 10. The input is an AIM with a predefined number of DOFs and predefined topol- ogy. The output is the ``goodness'' of the AIM in terms of a non-negative real 72 Industrial Robotics: Theory, Modelling and Control number. An AIM with a large ACEF value represents a good assembly con- figuration. The ACEF consists of two parts: task and structure evaluations. Task evaluation is performed according to the given task specifications: the task points (or the positions of the end-effector) and a designated criteria measure, such as the dexterity or the manipulability. A workspace check on the task points is executed before computing the measures for filtering out in- accessible points. Structure evaluation assesses the kinematic constraints (joint singularity and redundancy, link interference) and environmental constraints (workspace obstacles) imposed on the robot in accomplishing the assigned task. The proposed ACEF assumes the modular robot is operated in a struc-tured environment, and that there are no obstacles in the workspace. An auxil- iary function, termed the module-assembly preference (MAP) is defined on the AIM to exclude undesirable kinematic features. Detailed implementation of the task and structure evaluation can be obtained from Chen (1996). 5.2 Evolutionary Algorithms An evolutionary algorithm is a probabilistic search/optimization method based on the principle of evolution and hereditary of nature systems (Michalewicz 1994). In this algorithm, a population of individuals for each generation is maintained. The individual is implemented with some data structure and is evaluated by a ``fitness function'' to give a measure of its ``fit- ness''. A new population is formed by selecting the more suitable individuals. Members in the new population undergo transformations by the ``genetic op- erators'' to form new solutions. Through structured random information changes, the new generation is more ``fit'' than the previous generation. After a number of iterations, the individuals will converge to an optimal or near- optimal solution. Here we attempt to use the AIMs as the data structure of the solution, and define AIM-related genetic operators (Chen 1996) as solving the task-optimal problem in an evolutionary approach, because AIM is a natural representation of the modular robot and is topologically independent. Figure 11 depicts the application of the evolutionary algorithm in solving the task-optimal configuration problem. An example of optimizing the configura- tion of a 4-DOF modular robot is provided in the following example. Suppose we wish to find a 4-DOF fixed-base serial robot with revolute joints that passes through two task points 1p and2p. Also suppose that we require there be no redundant joints, and minimum link interference. Let the performance meas- ure of the robot be the manipulability. The initial set of AIMs randomly gener- ated is shown in Figure 12. The population size is 8, and the evolution stopped after 30 generations. The assembly configuration in the target generation that has the highest fitness value is chosen as the optimal one (Fig. 13a). The aver- age and maximum fitness values in every generation are shown in Figure Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 73 13(b). As can be seen, the evolutionary algorithm does increase the fitness val- ues generation by generation. Although the best solution may not be guaran- teed, a suboptimal solution can always be found, and in return, the efficiency of finding the solution is increased. Figure 11. The evolution algorithm Figure 12. The initial generation (a)74 Industrial Robotics: Theory, Modelling and Control (b) Figure 13. (a) Optimal assembly configuration; (b) average and maximum fitness in each generation Simulation Software for Modular Robots To visualize and simulate the performance of an assembled robot, such as reachability and workspace, a robot simulation software application is neces- sary. The Simulation Environment for MOdular Robot System (a.k.a. SEMORS ) is a Windows NT-based object-oriented software application devel- oped for this purpose. Based on the proposed local POE models and AIM data structures, SEMORS offers uniform and automatic model construction effort (kinematics, dynamics and calibration) across computer simulation and real- time control of arbitrary robot configurations (Chen et al. 1999). The basic graphical user interface of SEMORS is illustrated in Figure 14. SEMORS is in- tended to be a uniform interface for all modular robots and is portable to modular robot systems from different vendors. It will be used both for simula- tion and for on-line execution of a task, regardless of whether the robot is exe- cuting (or is simulated to be executing) the task as a stand-alone application, or as part of a workcell process. Thus, it allows the user to quickly integrate the hardware components into modular robots, and to manage their operations in the reconfigurable workcell. Key features of SEMORS include: •Module and robot builder •D graphical task simulation •“Universal” inverse kinematics •Full dynamics models •Trajectory and task planning •Transparent workcell network connectivity Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 75 Figure 14. User interface of SEMORS In addition to the simulation of modular robots, extended features like robot configuration planning/optimization and module database management are implemented as separate application packages to be used along with SEMORS . The task-based robot configuration optimization mentioned in Section 5 is a generic and platform-independent methodology. With the capability of task- based robot configuration optimization, designing the modular robot configu- ration using SEMORS becomes no longer an ad hoc approach. The software system will provide end-user an optimized robot configuration according to the input task requirements. The user does not need to start the design work from scratch. Rather, based on the result of optimization, he can fine-tune the suggested robot design or layout. The development effort and time for the workcell can be greatly reduced. Prototype of Reconfigurable Robotic Workcell To effectively demonstrate the use of a modular reconfigurable robotic system, we have constructed a prototype workcell for light-machining tasks in an in- dustrial exhibition in 1999 (Figure 15). This workcell was built with multiple reconfigurable robots along with other supporting devices under a unified modular approach. 76 Industrial Robotics: Theory, Modelling and Control Figure 15. A light machining workcell with modular robot components •Preliminary design stage To make use of the advantages of both parallel-typed and serial-typed robots, we intend to make the workcell to perform a complete milling operation of a workpiece, starting from picking up the object, transferring the object to a mill- ing robot, starting the milling process, and returning the workpiece back to a storage rack. Based on this preliminary concept, we decide to use two recon- figurable robots in this workcell: one is a serial-typed robot for the pick-and- place operation, and the other is a parallel-typed robot for the milling opera- tion because of its structural rigidity. The task is to perform milling operation on a dome-shaped top of a cylindrical workpiece with 15cm in diameter. A workpiece transfer system should be used in between the two robots. •Robot configuration selection and construction Based on the preliminary task description, the workcell is configured with a 7- DOF redundant serial-type robot, a 6-DOF articulate RRRS parallel robot, and a 1-DOF linear motion stage. From the robot configuration optimization, a 4- DOF SCARA-type robot is sufficient to perform the task. Deploying a redun- dant robot here is to demonstrate that the proposed model generation algo- rithms used in SEMORS and in robot control are universally applicable for any configuration. The configuration design of the parallel robot follows a systematic approach (Yang et al. 1999). In principle, a 3-branch parallel structure is used because of the structure stiffness and dexterity. Each branch consists of three rotary joints Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 77 (two are active and one is passive) and a passive spherical joint. Once the ge- ometry is determined, the workspace analysis is performed. From the result of this analysis, the lengths of the rigid links and connectors are determined. Be- cause of the modular design, the actuator modules can be freely located at the nine revolute joints. The workspace of the robot changes according to the loca- tions of the actuator modules. A disk-shaped moving platform is attached to the three branches. An end-mill tool actuated by an intelligent motor is mounted at the center of the platform. This motor uses the same control inter- face as the standard actuator modules. Because of the lack of the force sensor, the task is only carried out in simulated manner, i.e., the end-mill tool only goes through the milling path without touching the surface of the workpiece. The 1-DOF linear motion stage uses two standard modules: one rotary module to drive the linear slide and one gripper module to hold the workpiece, to en- sure uniformity in the workcell control. The specifications of the robots and the motion stage are listed in Table 1. •Workcell construction and fine-tuning After the robots and motion stage are constructed, the robot controllers are connected to the robots. Two Pentium II-based industrial PC robot controllers are used to perform high-level trajectory control of the serial robot and the parallel robot respectively. The kinematic models of both serial and parallel robots are generated automatically in SEMORS and stored in the robot con- trollers. Kinematic calibration of both robots is performed before the operation. The kinematic calibration is conducted by using articulate-typed coordinate measuring equipment, called “Spin Arm”. The obtained calibration data is transferred to the robot controller and then SEMORS computes and updates the corrected kinematic models of the robots automatically. Because of its sim- plicity, the control of the motion stage is done by one of the robot controller for this implementation. •Finalize task sequence and control of the workcell actions With updated kinematic models, the detailed task sequence of all robots (Table 2) is laid out. The tasks are then programmed into the respective robot control- lers. The two robot controllers are connected to a closed-loop workcell LAN running at 10MB/sec. A separate notebook computer is also connected to the workcell network performing supervisory control of the workcell through SEMORS running on the individual robot controllers. The task sequence of the workcell is monitored and supervised by the notebook supervisor. Based on the actual construction, to assembly the described 7-DOF serial-typed robot takes two users about 30 minutes. The time to construct the parallel ro- bot requires two persons about two hours because of the complexity of the structure. Adding the time to install the motion stage, calibrate the robots and fine-tune the workcell hardware, it will take about four hours in total to com-78 Industrial Robotics: Theory, Modelling and Control plete the entire workcell set-up excluding the time spent on the preliminary design stage. Light-machining Workcell 7-DOF Redundant Serial Robot Work envelope Approx. sphere, SR = 1200mm Max speed 750 mm/s Repeatability +/- 0.10 mm Max Payload 5 Kg (excluding end-effector) Weight 16 Kg (excluding base) 6-DOF RRRS Articulate Parallel Robot Work envelope Approx. hemisphere, SR = 500mm Max speed 500 mm/s Repeatability +/- 0.05mm Max Payload 25 Kg (excluding end-effector) Weight 30 Kg (excluding base) 1-DOF Linear Motion Stage Effective stroke L = 1500mm Max speed 500 mm/s Repeatability +/- 0.025mm Max Payload 45 Kg (excluding fixture) Weight 35 Kg Table 1. Specificatio ns of the light-machining workcell Conclusion We have presented a generic method to automate the model generation for modular reconfigurable robots based on a graph representation of robot ge- ometry, called an assembly incidence matrix, and geometry-independent model building algorithms for the kinematics, dynamics and error models of a robot. The AIMs of the assembly configuration of modular robots facilitate the determination of optimal robot configuration for a specific task using combina- torial optimization techniques. We also presented here an approach to solve the task optimal problem using evolutionary algorithms with customized ge-netic operators based on the AIM of the robot. The application of this auto- matic modeling technique is implemented in a modular robot control and simulation software application, SEMORS (Simulation Environment for MOdular Robot Systems). In this software system, it is not necessary to main- tain a library of robot models, since the possible assembly configurations of a robot is not a fixed number. Instead, only a small set of component database and kernel functions are kept in the robot controller, and required robot mod- els are generated automatically. From the prototype construction, we can con-Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 79 firm the advantage of using modular components in constructing the complex robotic workcell with different configurations. The plug-and-play kinematics, dynamics, and calibration robot models are also verified through the actual implementation in the robot controller and the simulation software. Acknowledgment: The authors would like to acknowledge work done by other members of the project: Prof. Guang Chen, Dr. Peter Chen, Dr. Weihai Chen, Dr. Wei Lin, Mr. In-Gyu Kang, Mr. Wee Kiat Lim, Mr. Edwin Ho, Mr. S. Ramachandran, Ms. Yan Gao, and Mr. Chee Tat Tan. This project is supported by Singapore Insti-tute of Manufacturing Technology (Upstream Project U97-A006), and Ministry of Education, Singapore (RG64/96 and JT ARC 7/97). Task Sequence 1 Robot A picks up workpiece from fixture 2 Robot A places workpiece on the motion stage 3 Motion stage moves workpiece under Robot B 4 Robot B performs milling task 5 Robot A shifts locations of un-processed workpieces 6 Robot B finishes milling task 7 Motion stage moves processed workpiece back 8 Robot A picks up processed workpiece from motion stage 9 Robot A places processed workpiece to the fixture *Robot A: 7-DOF serial robot, Robot B: 6-DOF parallel robot Table 2. Task Sequence 80 Industrial Robotics: Theory, Modelling and Control References Ambrose, R. O. (1995). Interactive robot joint design, analysis and prototyping, Proc. IEEE Int. Conf. Robotics and Automation , pp. 2119-2124, Washington DC, USA. Benhabib, B.; Zak, G. & and Lipton, M. G. (1989). A generalized kinematic modeling method for modular robots, Journal of Robotics Systems , Vol. 60, No. 5, pp. 545-571. Chen, I.-M. (1994). Theory and Applications of Modular Reconfigurable Robotic Systems, PhD thesis, California Institute of Technology, Division of Engineering and Applied Science, U. S. A. Chen, I.-M. (1996). On optimal configuration of modular reconfigurable robots, Proc. Int. Conf. Control, Automation, Robotics, and Vision , pp. 1855- 1859, Singapore. Chen, I.-M. (2000). Realization of a rapidly reconfigurable robotic workcell, Journal of Japan Society of Precision Engineering , Vol. 66, No. 7, pp. 1024- Chen, I.-M. (2001). Rapid response manufacturing through reconfigurable robotic workcells, Journal of Robotics and Computer Integrated Manufacturing , Vol. 17, No. 3, pp. 199-213. Chen, I.-M. & Burdick, J. W. (1995). Determining task optimal modular robot assembly configurations. Proc. IEEE Int. Conf. Robotics and Automation , pp. 132-137, Nagoya, Japan. Chen, I.-M. & Burdick, J. W. (1998). Enumerating Non-Isomorphic Assembly Configurations of a Modular Robotic System, International Journal of Robotics Research , Vol. 17. No. 7, pp. 702-719. Chen, I.-M. & Yang, G. (1996). Configuration independent kinematics for modular robots. Proc. IEEE Int. Conf. Robotics and Automation , pp. 1845- 1849, Minneapolis, MN, USA. Chen, I.-M. & Yang, G. (1997). Kinematic calibration of modular reconfigurable robots using product-of-exponentials formula, Journal of Robotic Systems , Vol. 14, No. 11, pp. 807-821. Chen, I.-M. & Yang, G. (1999). Numerical inverse kinematics for modular re- configurable robots, Journal of Robotics Systems, Vol. 16, No. 4, pp. 213-225. Chen, I.-M.; Yang, G.; Yeo, S. H. & Chen, G. (1999). Kernel for modular robot applications - automatic modeling techniques, International Journal of Ro- botics Research , Vol. 18, No. 2, pp. 225-242. Chen, I.-M.; Tan, C. T.; Yang, G. & Yeo, S. H. (2001). A local POE model for ro- bot kinematic calibration, Mechanism and Machine Theory, Vol. 36, No. 11, pp. 1215-1239. Cohen, R.; Lipton, M. G.; Dai, M. Q. & Benhabib, B. (1992). Conceptual design of a modular robot, ASME Journal Mechanical Design , Vol. 114, pp. 117- 125.Automatic Modeling for Modular Reconfigurable Robotic Systems – Theory and Practice 81 Cormen, T.; Leiserson, C. & Rivest, R. (1990). Introduction to Algorithms , ISBN 0262032937, MIT Press, Cambridge, MA, USA. Deo, N. (1974). Graph Theory with Applications to Engineering and Computer Science , ISBN 0133634736, Prentice-Hall, New York, USA. Dobrjanskyj, L. & Freudenstein, F. (1967). Some applications of graph theory to the structural analysis of mechanisms, ASME Journal Engineering for Industry , Vol. 89, pp. 153-158. Featherstone, R. (1987). Robot Dynamics Algorithms , ISBN 0898382300, Kluwer Academic Publishers, Holland. Fukuda, T. & Nakagawa, S. (1988). Dynamically reconfigurable robotic system, Proc. IEEE Int. Conf. Robotics and Automation , pp. 1581-1586, Philadelphia, PA, USA. Hollerbach, J. M. (1980). A recursive lagrangian formulation of manipulator dynamics and a comparative study of dynamics formulation complexity, IEEE Trans. Systems, Man, and Cybernetics , Vol. 10, pp. 730-736. Kelmar, L. & Khosla, P. (1988). Automatic generation of kinematics for a reconfigurable modular manipulator system, Prof. IEEE Int. Conf. Robotics and Automation , pp. 663-668, Philadelphia, PA, USA. Khosla, P. K.; Neuman, C. & Prinz, F. (1985). An algorithm for seam tracking applications, International Journal of Robotics Research , Vol. 40, No. 1, pp. 27-41. Michalewicz, Z. (1994). Genetic Algorithms + Data Structures = Evolution Programs , 2ed., ISBN 540580905, Springer-Verlag, Berlin, Germany. Murray, R.; Li, Z. & Sastry, S. (1994) A Mathematical Introduction to Robotic Manipulation , ISBN 0849379814, CRC Press, Boca Raton, FL, USA. Paredis, C. J. J.; Brown, H. B. & Khosla, P. (1997). A rapidly deployable manipulator system, Robotics and Autonomous Systems, Vol. 21, No. 3, pp. 289-304. Paredis, C. J. J. & Khosla, P. K. (1995). Design of modular fault tolerant manipulators, In: Algorithmic Foundations of Robotics , Goldberg, K. (ed.), pp. 371-383, A. K. Peters, ISBN 1568810458, Wellesley, MA, USA. Park, F. C. & Bobrow, J. E. (1994). A recursive algorithm for robot dynamics using lie groups, Proc. IEEE Int. Conf. Robotics and Automation , pp. 1535- 1540, San Diego, CA, USA. Park, F. C.; Bobrow, J. E. & Ploen, S. R. (1995). A lie group formulation of robot dynamics, International Journal of Robotics Research , Vol. 14, No. 6, pp. 609- Rodriguze, G.; Jain, A. & Kreutz-Delgado, K. (1991). A spatial operator algebra for manipulator modeling and control, International Journal of Robotics Research , Vol. 10, No. 4, pp. 371-381. Schmitz, D.; Khosla, P. K. & Kanade, T. (1988). The CMU reconfigurable modular manipulator system , Technical Report CMU-RI-TR-88-7, Robotics Institute, Carnegie Mellon University. 82 Industrial Robotics: Theory, Modelling and Control Wurst, K. H. (1986). The conception and construction of a modular robot system. Proc. 16th Int. Sym. Industrial Robotics (ISIR) , pp. 37-44, Brussels, Belgium. Yang, G. & Chen, I.-M. (2000). Task-based optimization of modular robot con- figurations – MDOF approach, Mechanism and Machine Theory , Vol. 35, No. 4, pp. 517-540. Yang, G.; Chen, I.-M.; Lim, W. K. & Yeo, S.H. (1999). Design and kinematic analysis of modular reconfigurable parallel robots, Proc. IEEE Int. Conf. Robotics and Automation , pp. 2501-2506, Detroit, MI, USA. 833 Kinematic Design and Description of Industrial Robotic Chains Peter Mitrouchev Introduction Today, industrial robots can replace humans in carrying out various types of operations. They can as well serve machine tools as to carry out various tasks like welding, handling, painting, assembling, dismantling, foundering, forg- ing, packaging, palletizing ….in different areas of the mechanical, car, aero- space, automotive, electronics … and other industries. However, the complex- ity of the industrial process poses difficult problems for insertion and generation of the movements of a robot: the working environment of the robot is often complex and varied (presence of obstacles during the execution of a task for example). One of the objectives concerning the problems of computer-aided design (CAD) of robots is the validation of their topological structures. The robot- design engineer puts forth assumptions as regards the provision of the links and the joints of the mechanical articulated system. A first validation of this choice is of a geometrical nature (Merlet, 1996). At first sight the design of a mechanical architecture for a robot appears rather simple and yet it presents a very complex basic difficulty, as it must take into account not only the me- chanical possibilities of realization but also the possibilities of control’s devel- opment, which passes by generating of a mathematical model. The latter strongly affects the mechanical design if good performances are sought. Many methods for mechanism description appeared with the creation of CAD sys- tems (Warnecke, 1977) and (Coiffet, 1992). The existing methods may be sepa- rated into two categories: description methods for classification (Roth, 1976), methods for mathematical modelling (Borel, 1979), (Khalil, 1976), (Renaud, 1975) and (Touron, 1984). Mechanisms and Machines Theory (MMT) contributed greatly to planar and spatial mechanism synthesis with different degrees of freedom (Hwang & Hwang, 1992; Hervè, 1994; Gonzales, 1996; Karouia & Hervè, 2005). Some of 84 Industrial Robotics: Theory, Modelling and Control the current industrial robots with planar chains have a structure created by the kinematic graphs of MMT (Manulescu et al. 1987; Ma & Angeles, 1991). The morphological (topological) synthesis of kinematic chains has, for a long time, been the subject of many papers. There are different methods for number synthesis of planar kinematic chains with simple revolute joints, with different degrees of mobility and different numbers of links and joints. These chains are usually called “planar pin-joined” chains in MMT. While number synthesis originates from kinematics of mechanisms, all methods entail operations on graphs, which in one way or another, represent kinematic chains. There exist different methods for kinematic synthesis of planar chains with simple joints (Tischler et al., 1995; Belfiore, 2000; Rao & Deshmukh, 2001): in- tuition and inspection (Crossley, 1964), graphs theory (Dobrjanskyi and Freu- denstein, 1967; Woo, 1967). Others consist in transformation of binary chains (Mruthyunjaya, 1979; Mruthyunjaya, 1984-a; Mruthyunjaya, 1984-b; Mruthyunjaya, 1984-c), in the concept of Assur groups (Manolescu et al., 1987; Manolescu, 1964; Manolescu, 1979; Manolescu, 1987), or Franke's notation (Davies & Crossley, 1966; Crossley, 1966). Recently, new methods based on genetic algorithms or neuronal networks are also used (Tejomurtula & Kak, 1999; Abo-Hamour et al., 2002; Cabrera et al., 2002; Laribi et al., 2004). The analysis of existing methods shows that there are several methods applied to the development of a mathematical model concerning its application for the control design of the robot. However, concerning the topological description of the chains and robots, only Roth-Piper’s method (Roth, 1976; Pieper & Roth, 1969) tends towards mechanism description with a view to classify robots. Generally speaking, the problem of synthesis of mechanism falls into three sub problems: -specification of the problem: topological and functional specifications and constraints imposed by the environment, -topological synthesis of the mechanism: enumeration and evaluation of possible topologies, -dimensional synthesis: choice of dimensions of the mechanism for the selected types of morphologies. This chapter relates in particular to the second sub problem. Its principal goal is to present an overview concerning the chronology of the design of an indus- trial robot kinematic chain. The chapter starts with a brief reminder of the the- ory of Modular Structural Groups (MSG), and of the connectivity and mobility laws of MMT presented in § 2. Afterwards, a new method for structural syn- thesis of planar link chains in robotics is presented in § 3. It is based on the no- tion of logical equations . Various levels of abstraction are studied concerning the complexity of the structure. This permits the synthesis of planar chains with various degrees of complexity expressed by the number of links, joints and the Kinematic design and descri ption of industrial robotic chains 85 degree of mobility. The logical equations allow the association of MSGs of type A and closed chains of type G. The rules for associations of groups are also presented. The aim is to execute all the possible combinations to join or trans- form links in order to obtain as many structures as possible by avoiding those which are isomorphic. The association of two groups allows the elaboration of different closed chains of upper level. However there are some defective struc- tures, which do not respect the connectivity and mobility laws. Therefore great care has been taken to avoid them. The problem of degenerated structures is central in their synthesis. It especially concerns chains with two and more de- grees of mobility. The problem of defect ,degeneration and isomorphism is then approached. Later, a method for description of chains by contours and mole- cules is proposed in § 4. It enables to reduce the number of the topological structures of the robots concerning its frame and end-effector position by comparing their respective molecules. This method is then applied in § 5 to describe the structures thus obtained (by logical equations approach) and the topology of the principal structure of the industrial robots in the initial phase of their design. Finally a classification of industrial robot structures by different levels of complexity is presented in § 6. Topology of a linked mechanical structure, definitions, terminologies and restrictions The Manipulation System (MS) of the robot is a mechanism composed of links (elements) joined by kinematic joints often with one degree of mobility (rotary or prismatic joints). These elements are considered as rigid bodies which form a kinematic chain, plane or spatial, which can be open or closed. The type of a kinematic link noted "j" is given by the number of joints enabling its associa- tion with other links (Erdman & Sandor, 1991). There are links of “binary”, “ternary”, “quaternary”… “polynary” type with j=1,2,3…, following from the fact that the link contains 1,2,3,… kinematic joints : link binary ternary quaternary ... representation... notation N 2 N 3 N 4 … Table 1. Planar link types MMT proposes various ways of representing kinematic structures. The most common, the kinematic graph , consists in conserving a shape for the links in or-86 Industrial Robotics: Theory, Modelling and Control der to better appraise the topology of the structure. Nevertheless this presenta- tion is difficult to manipulate. Any kinematic structure may be transformed into Crossley's inverse graph (Crossley, 1964) replacing every link (binary, ter- nary…) by a point. Lines linking the points concerned represent the joints themselves. kinematic graph inverse graph b a Figure 1. Representation of a structure by kinematic and Crossley's inverse graph Kinematic chain (named Grübler chain in MMT) is a structure which "floats" in space and all its links have identical status. If a frame and an input link (links) is (are) indicated the chain becomes a mechanism . The possible motions in a chain are called degree of freedom (or absolute degree of mobility) whereas for a mechanism they are called degree of mobility (or relative degree of mobility) of N-link Grübler chain. As it has been said, the arm of a robot or the MS is a mechanism composed of a set of rigid links, which form an open or closed kinematic chain. Existing ro- bots may be topologically classified in two categories according to whether their structure is open or closed: robots with simple (open) structure: one can traverse all the kinematic j o i n t s b y m a k i n g a n o p e n c h a i n . T h e y a r e n o t e d A i,j where i and jare respectively the degree of mobility and the number of links of the structu- re (cf. § 3.1). robots with complex (arborescent or closed) structure: one can traverse all the kinematic joints by making a closed loop. They are noted G k,lwhere k and lare respectively the degree of mobility and the number of links of the structure (cf. § 3.1). Another method allows them to be classified mechanically as robots with pla- nar or spatial chains. Kinematic design and descri ption of industrial robotic chains 87 (a) (b) (c) (d) Figure 2. Robots with: simple-open (a), closed (b), arborescent (c) and complex struc- tures (d) Robots, being complex mechanical systems with an important interaction be- tween their links, their architecture is defined by (Mitrouchev, 1999): -themain structure which generates the main motion of the robot and upon which is situated the rest of the MS, -theregional structure which is composed of the arm and of the forearm (mechanical arm), -thelocal structure which is the wrist of the robot often with three degrees of freedom in rotation. main structureregional structurelocal structure frame Figure 3. Topological structure of a robot The number M of degrees of mobility of an isostatic chain relative to a fixed frame is given by Somov-Malisev’s formula (Artobolevski, 1977): 5 16 k kM N* k C ==−¦ (1) with: C k – number of simple joints of class "k", N* - number of mobile links (in general N* =N-1). 88 Industrial Robotics: Theory, Modelling and Control If the kinematic chain only contains simple rotary joints of class 5 (one degree of freedom joint), instead of equation (1), the Tchebychev-Grübler equation is used: 5 32 M N* C=− (2) with: C 5 - number of simple rotary joints with one degree of mobility. In this chapter only planar structures with simple rotary joints of class 5 shall be considered. If the value of M in Tchebychev-Grübler’s equation (2) is M=0 it becomes: 5 32N* C= (3) Some of the most characteristic MSGs (called Assur groups) resulting from equation (3) are presented in Table 2 by their kinematic graphs or structural diagrams (Manolescu, 1964). notation N* C 5 Assur groups derivative groups A0,2 23 ……… A0,4 46 A0,6 …6 …9 … ………………………….……………… Table 2. Modular Structural Groups (MSGs) with zero degree of mobility If the value of M in Tchebychev-Grübler’s equation (2) is M=1 it becomes: 5 31 2N* C−= (4) Some of its solutions are presented in table 3. Kinematic design and descri ption of industrial robotic chains 89 notation N* C 5kinematic graphe (structural dia gram) A1,3 3 4 A1,5 …5 …7 … ………………………… Table 3. SMGs with one degree of mobility Finally for the MSGs adding two degrees of mobility to the structures (M=2), one obtains: 5 32 2N* C−= (5) Some of its solutions are presented in table 4: notation N* C 5 structural diagram A2,4 45 A2,6 …6 …8 … Table 4. MSGs with two degrees of mobility Proposed method and results Let us consider a plane kinematic structure comprising N links and C 5 kine- matic joints in open, arborescent or closed chain. The first link S 1 is the pre- sumed fixed frame of the robot. MMT, being part of the technological sciences, is at the base of mechanism design in robotics as has been previously men- tioned. The question is: for a given degree of mobility and for a given number of links and joints, how many possibilities are there to join them in a mecha- nism suitable for application in kinematic chain design in robotics? The answer to this question is presented in this paragraph and in the following one. In or- der to answer the question above, let us consider a mechanism with a given degree of mobility (M). Gauhmann's generalised law (called connectivity law) giving the relationship between the number of the links and the joints is (Manolescu, 1987): 90 Industrial Robotics: Theory, Modelling and Control 5CI N=+ (6) with: I=R-2 -structural number representing the complexity level of the structure, R - number of closed loops in the chain allowing to "read" (to pass through) twice each kinematic joint. For the planar kinematic structures the general law of mobility giving the rela- tionship between the number of degrees of mobility and the joints is: 3 3 5 + + = I M C (7) The equations (6) and (7) give: 3 2+ + = I MN (8) Those two latter equations (7 and 8) lead to the first manner of calculating the number of joints C 5 and the number of links N for planar kinematic structures with different degrees of relative mobility M. The general law of mobility giving the relationship between the number of degrees of mobility and the joints is (Manolescu, 1987): 5 116 k kfM(I ) H ( k ) C =+++ = − ¦ (9) with: - H=(6-F), F the number of imposed constraints in a chain. For a planar kinematic structures, F=3 hence H=3. Equation (9) becomes: 54 31 2M (I ) C C++ = + (10) This latter equation allows the second manner of calculating the number of links and joints for planar kinematic structures with different degrees of mobility. Kinematic design and descri ption of industrial robotic chains 91 3.1 Logical equation 3.1.1 Notations We note by: -Ai,ja MSG (Assur group or its derivative) which may be open or closed. There are always some exterior (free) joints which only become active when the group is in connection with a joint shared with a chain or a mechanism (Manolescu, 1964), -Gk,la closed group (structure) without exterior joints. The first mark represents the degree of mobility of the group and the second one represents the number of its links (cf. Table 5). joints groupes structural diagram exterior interior Ai,j 12 3 45 6 12 3 4 5 61,4,6 1,42,3,5 2,3,5,6 Gk,l ,interior only Table 5. Structural diagram and types of joints Alogical equation is defined as the association (combination) of two initial terms (marks in lower case letters). The result of this association is a final closed kinematic structure of type G M,N (marks in capital letters) of upper level. The two initial terms may be (Mitrouchev, 2001): Two identical MSG groups, for example: i, j i, j M,NAAG+= with: M=2i+1; for M=1 and I=0,2 for M=3 and I=0 N=2j.92 Industrial Robotics: Theory, Modelling and Control Two different MSG groups, for example: i,j i' ,j'M , N A AG+= with: M=i+i'+1; for M=1, and I=1,2,3 for M=2, and I=0 N=j+j'. One MSG group and one closed group of type G k,l: NM lk ji G G A , , , = + with: M=i+k; for M=1, and I=1,2,3 for M=2,3 and I=1,2 N=j+ l It can be noted that the association of two closed structures is not possible. 3.1.2 Rules for associations The association of two groups may be done by two operations: direct junction and transformation of links. They may be executed separately or together. The aim is to use all possible combinations to join or transform the links in order to obtain as many structures as possible (for given N and C 5) by avoiding those, which are isomorphic. Some examples are shown in the Table 6: by direct junction = + =+ by transformation of links: the binar y link 1 becomes ternary the ternar y link 1 becomes quaternary the binar y link 1 becomes quaternary and so on 1 2=+ 1212= + 32 3 12 1= + Table 6. Rules for associations of groups Kinematic design and descri ption of industrial robotic chains 93 3.2 Generation of chains with one relative degree of mobility (M=1) Fof M=1 the equations (7) and (8) give: 543 CI=+ (11) and 42NI=+ (12) 3.2.1 First level of abstraction, (I=0) For I=0, equations (11) and (12) give C 5=4 and N=4. Therefore only one closed planar structure of type G 1,4 can be synthesised from the following logical equation: 02 02 14,, ,A AG+= (13) as follows: logical equation schematic closed structure 02 02 14, ,, AAG+= G1,4 The equation (6) gives C 5=N. For C 5=N=4 there is a mono-contour mobile structure called a group of type G4. For M=1, the equation (10) gives: 5424 CC+= (14) The possible solutions of this equation are: a) C 4=0, C 5=4, b) C 4=1, C 5=2 and c) C4=2, C 5=0. From the solution a) only one closed planar structure of type G4 and noted G1,4 can be synthesised by the logical equation (13) above. 3.2.2 Second level of abstraction, (I=1) For I=1, equations (11) and (12) give C 5=7 and N=6. The law for generation a group of elementary modules allows the calculation of the number of links, which are ternary and more (quaternary, quintary and so on) in a closed chain (Manolescu et al, 1972). 94 Industrial Robotics: Theory, Modelling and Control ¦ =− =R jjN j I 3)2( 2 (15) For I=1 equation (15) gives N 3=2. From equation (10) one deduces: 54 72CC=+ (16) The possible solutions of this equation are: a) C 4=0, C 5=7; b) C 4=1, C 5=5; c) C4=2, C 5=3 and d) C 4=3, C 5=1. The number of the links is calculated by equa- tion (6). It becomes: 5 6 NC I=− = (17) Consequently the number of binary links is: 23NN N=− (18) The second level planar structures, of type G 1,6 are obtained from the follow- ing logical equations: 14 02 16,, ,GAG+= (19) 04 02 16,, ,AAG+= (20) Both equations (19) and (20) give two solutions: Watt's and Stephenson's struc- tures. These latter are described by their kinematic graphs (structural diagram) in table 7. Kinematic design and descri ption of industrial robotic chains 95 logical equation groups method for asso- ciationstructural diagram 14 02 16,, ,GAG+=62 5 431 16 45 23by transformati- on of links 4 62 315 Watt 6 123 45 Stephenson 04 02 16, ,, AAG+=65 43 2 1 6543 2 1 12 3 456by junction and transformation of links by junction and transformationof links by junction 65 43 2 1 6 42 513 6 123 45 Table 7. Watt's and Stephenson's structures 96 Industrial Robotics: Theory, Modelling and Control It may be noted that there are three isomorphic structures, which restrict their number to two. Watt's and Stephenson's structures are generated from closed immobile structure composed of two ternary links by adding to it four binary links as presented in figure 4. Figure 4. Closed immobile structure (collapse) and its derivatives The closed immobile structures have no degree of mobility. These are hyper-static systems, thus they are invariant concerning the mobility parameter. The theory of closed structures is applied just as much in robotics as in civil engi- neering, concerning bridges and roadways, seismic structures etc. They are equally applicable for planar structures as for spatial ones. 3.2.3 Third level of abstraction, (I=2) According to expressions (11) and (12) for I=2 one obtains C 5=10 and N=8 in other words the structure has 8 links and 10 joints. According to equation (15) the number of links is: 3424 NN+= (21) The possible solutions of this equation and the associated closed structures are given in table 8: solution a) N 3=4, N 4=0 b) N 3=2, N 4=1 c) N 3=0, N 4=2 associated clo- sed structure Table 8. Third level closed structures Kinematic design and descri ption of industrial robotic chains 97 For the case of planar structure, the number of the binary links is: 2 20 43RI j jNN ( j)N=+ ==+ −¦ (22) where N 0=M+H is the number of links in the main Crossley's chain (N0=1+3=4) hence: 2 443R j jN( j)N ==+ −¦ (23) For I=0 and I=1 the equation (23) has no physical meaning. For j ≤3, the number of binary links is N 2=4, so to have a mobile mechanism one needs four binary links, hence for j=4: 244 NN=+ (24) The possible solutions of this equation are: a) N 2=4, N 4=0, b) N 2=5, N 4=1, c) N2=6, N 4=2 and d) N 2=7, N 4=3. The three solutions of (24) which respect the solutions of (21) are a), b) and c). The third level planar structures of type G 1,8are obtained from the following logical equations: 16 02 18, ,, GAG+= (25) 14 04 18,, ,GAG+= (26) 04 04 18,, ,A AG+= (27) 02 06 18,, ,A AG+= (28) Equation (25) gives 12 structures; equation (26) gives two structures and a double (isomorphic); equation (27) gives one structure, one defect and one double. Finally, equation (28) gives one structure and two doubles. Table 14 (cf. § 4.) recapitulates the sixteen structures solutions of these four logical equa- tions.98 Industrial Robotics: Theory, Modelling and Control 3.2.4 Problem of defect, degeneration and isomorphism The problem of degenerated structures is central in synthesis of structures. It does not concern the chains with one degree of mobility (M=1). But if the chains have two, three or more degrees of mobility there are two degenerate forms of chains called partial and fractionated mobilities (Manolescu, 1964). If any link of the chain is selected to be the frame of a mechanism and if one chooses any M members to be the independent driving links (called "motor" links), then the position of every remaining member is dependent on the posi- tion of all links, such a mechanism is said to have a total degree of mobility (Da- vies & Crossley, 1966). This is the case of structures: 2 of Table 11, and 2, 3, 4 and 6 of Table 12. A mechanism may possess a partial degree of mobility if it can- not fulfil the conditions of total degree of mobility mechanism. In all or some of the derived mechanisms, the movement of certain of the driven links de- pends on the movements of only a number Mp of the motor links, where Mp<M (Manolescu, 1964). This is the case of structures: 1 and 3 of Table 11, and 1, of Table 12. Finally, a mechanism has a fractionated degree of mobility if it does not satisfy the conditions for a total degree of mobility. Such a mechanism possesses at least one link (with at least four joints), which may be decom- posed into two or more parts, with the result that each sub-mechanism forms a closed chain. The mobility of the whole mechanism is equal to the sum of the mobilities of all sub-mechanisms (Davies & Crossley, 1966). This is the case of structures 4 of table 11; and 5 of table 12. The rules for association of two groups allow the elaboration of different closed chains. But there are some defect structures, which do not respect the connectivity and mobility laws. Therefore great care has been taken to avoid them. For instance a defect structure is the one among the three solutions of the logical equation (27) shown in Table 9. logical equation groups method for associationstructural diagram 04 04 18,, ,AAG+=by junction Table 9. Defect structure By junction of the six binary links, which is the simplest way, the resulting structure is a defect because it has I=9-8=1 and M=21-18=3. Nevertheless the Kinematic design and descri ption of industrial robotic chains 99 structural number I is equal to 2 and the degree of mobility M is equal to 1. Fi- nally there are some isomorphic structures too. Consequently the defect struc- tures and the isomorphic ones are systematically moved away from the possi- ble solutions. 3.2.5 Fourth level of abstraction, I=3 According to expressions (11) and (12) for I=3, one obtains: C 5=13 and N=10. The number of links, which are ternary or greater, is calculated from equation (15). It becomes: 345 62 3NNN=+ + (29) The possible solutions of this equation and their associated closed structures are given in the table 10: solution a)N 3=6, N 4=0, N5=0b)N3=4, N 4=1, N5=0c)N3=2, N 4=2, N5=0d)N3=3, N 4=0, N5=1 associated closed struc- ture solution e)N 3=0, N 4=3, N5=0f)N3=1, 4=1, N5=1g)N3=0, N 4=0, N5=2 associated closed struc-ture Table 10. Fourth level closed structures The number of binary or greater links is calculated by equation (23): 24 542 NN N=+ + (30) The possible solutions of this equation are:a) N 2=4, N 4=0, N 5=0, b) N 2=5, N 4=1, N 5=0, c) N 2=6, N 4=2, N 5=3, d) N 2=6, N4=0, N 5=1, e) N 2=7, N 4=3, N 5=0, f) N 2=7, N 4=1, N 5=1, g) N 2=8, N 4=0, N5=2 and h) N 2=8, N 4=4, N 5=0.100 Industrial Robotics: Theory, Modelling and Control The solutions of (30), which respect the solutions of (29), are a), b), c), d), e) f) and g). Thus the fourth level planar structures of type G 1,10 are obtained from the following logical equations: 18 02 11 0, ,, GAG+= (31) 16 04 11 0, ,, GAG+= (32) 14 06 11 0, ,, GAG+= (33) 02 08 1 1 0, ,, AAG+= (34) 06 04 1 1 0,, ,A AG+= (35) Equation (31) gives 50 structures, (32) gives 95 structures, (33) gives 57 struc- tures, (34) gives 18 structures and (35) gives 10 structures. In total 230 struc- tures obtained also by Woo (Woo, 1967) using the graph theory. 3.3 Generation of chains with two relative degrees of mobility (M=2) For M=2 the equations (7) and (8) give: 553 CI=+ (36) And 52NI=+ (37) For I=0 the solutions of equations (36) and (37) are C 5=5 and N=5. The only ki- nematic structure of type G 2,5is provided by the following schematic: logical equation Schematic closed structur e 02 13 25,,,AA G+= + G2,5 For I=1, the expressions (36) and (37) give C 5=8 and N=7. The four second level planar structures, of type G 2,7 are shown in table 11: Kinematic design and descri ption of industrial robotic chains 101 25 02 27, ,, GAG+= 7,2 3,1 4,1 G A G = + = 1 partial = 2 total= 3 partial = 4 fractionated Table 11. Planar structures of type G 2,7 For I=2, the solutions of equations (36) and (37) are respectively C 5=11 and N=9. The third level planar structures, of type G 2,9 are obtained from the fol- lowing logical equations: 27 02 29, ,, GAG+= (38) 25 04 29,, ,GAG+= (39) 16 13 29,, ,GAG+= (40) 14 15 29, ,, GAG+= (41) The forty structures produced by these four equations were also obtained by Manolescu (Manolescu, 1964) using the method of Assur groups. 3.4 Generation of chains with three relative degrees of mobility, (M=3) For M=3 the equations (7) and (8) give: I C 365 += and I N 26+= . For I=0 one obtains C 5=6 and N=6. The only kinematic structure of type G 3,6is pro- vided by the following schematic: logical equation Schematic closed struct. 13 13 36A, A, G , +=+ G3,6102 Industrial Robotics: Theory, Modelling and Control For I=1, one obtains C 5=9 and N=8. The six second level planar structures, of type G 3,8 are presented in Table 12: 36 02 38,,,GAG+= 25 13 38,,,GA G+= 1= + partial 2= + total 3= + total+ = 4 total + = 5 fractionated + = 6 Total Table 12. Planar structures of type G 3,8. One can notice that there are two isomorphic structures 2 and 6 that restrict their number to five. For I=2, one obtains C 5=12 and N=10. The third level planar structures, of type G3,10 are obtained from the following logical equations: 38 02 31 0,,,GAG+= (42) 36 04 31 0,,,GAG+= (43) 27 13 3 1 0,,,GA G+= (44) 25 15 31 0,,,GA G+= (45) 16 24 31 0,,,GAG+= (46) 14 26 31 0,,,GAG+= (47) The ninety-seven structures produced from these six relations were also ob- tained by T.S. Mruthyunjaya (Mruthyunjaya, 1984-a; Mruthyunjaya, 1984-b; Mruthyunjaya, 1984-c) using the method of transformation of binary chains. These mechanisms with three degrees of mobility are often present in the de- sign of industrial robots. Kinematic design and descri ption of industrial robotic chains 103 Description of planar structures Apart from the obvious manner to describe a structure by its kinematic graph , the following two ways to describe the planar structures thus obtained are proposed. By contours : a contour is defined by a closed loop allowing one to pass through the kinematic joints belonging to it. Two kinds of contours are distinguished: internal and external . -An internal contour is defined by a closed loop allowing one to travel trough the kinematic joints belonging to the interior of a structure. A sin- gle circle represents it and is noted by a lower case Greek letter. -An external contour is defined by a closed loop allowing one to travel through the kinematic joints belonging to the exterior of a structure. A double circle represents it and is noted by a capital Greek letter. contourα βγ δ... ... notation ǂǃ Ǆ ǅǆ … C5 4 5 6 7 8 … Table 13. Notation of contours By molecules: A molecule is constituted by contours linked by kinematic joints of class 5. This latter is represented by a line. Let us remember that in the molecules proposed by Davies and Crossley, based on Franke's notation (Davies & Crossley, 1966), a circle is used to repre- sent a polygonal link (ternary, quaternary etc) and a line to represent a band joining the polygonal links either by a kinamatic joint of class 5 or by one or more binary links in a chain. Whereas in the proposed method a circle repre- sents a contour and a line only a kinematic joint of class 5. For example in Watt's structure α is an internal contour, Γ an external one with N=6, C 5=7, I=1 and R=3. structure Contours notation molecule α αΓInternal ( α) External (ƥ) ǂ-ǂ-ƥα α Γ Table 14. Watt's structure and its associated molecule 104 Industrial Robotics: Theory, Modelling and Control Table 15 represents the sixteen structures, with one degree of mobility, ob- tained by logical equations method presented in § 3.2.3. Their contours and molecules are also shown. structure kinematic graph contour molecule G1-81 ǂ-ǂ-ǂ-Ƨ G1-82 ǃ–ǂ-ǂ-Ʀ G1-83 Ǆ-ǂ-ǂ-ƥ G1-84 ǂ-ǂ-ǃ-Ʀ G1-85 ǂ-ǂ-ǂ-Ƨ G1-86 ǂ-ǂ-Ǆ-ƥ G1-87 ǃ-ǃ-ǃ-Ƥ G1-88 ǃ-ǂ-ǃ-ƥ G1-89 ǃ-ǂ-ǃ-ƥα α α Ε γ α α Γ β Δα α α Εα α γ Γα α β Ββ β β Γβ α β Γβ αα β Δ αKinematic design and descri ption of industrial robotic chains 105 G1-810 ǂ-ǃ-ǂ-Ʀ G1-811 ǂ-ǃ-ǃ-ƥ G1-812 ǂ-ǃ-ǂ-Ʀ G1-813 ǃ-ǂ-ǃ-ƥ G1-814 ǂ-Ǆ-ǂ-ƥ G1-815 ǂ-Ǆ-ǂ-ƥ G1-816 ǃ-ǃ-ǃ-Ƥ Table 15. Closed structures of type G 1,8ant theirs molecules (cf. § 3.2.3) (Note: 1, 2,..., 16: arbitrary number of the structure) β Γα βα Δα β α Δα β β Γβ α α Γα γ α Γα γ β Ββ β106 Industrial Robotics: Theory, Modelling and Control Application in the description of the main structure of industrial robots The presented method for mechanisms’ description is applied for the descrip- tion and classification of the main structures of industrial robots with different degrees of mobility. 5.1 Robots with open kinematic structures The simplest structures applied in robotic design are the open loop simple chain. In this case the definitions of contours and molecules have no physical sense. Such a structure is shown in figure 5. kinematic graphcontour molecule mechanism robot non valid non valid Figure 5. Staübli robot For example STAÜBLI RX90L industrial robot (average carrier) has a simple (open) kinematic chain. With a capacity of 6 kg and operating range of 1185 mm it is used in different industrial fields like painting, handling, serving of machine tools etc. .(source: http:// www.staubli.com/ web/web_fr /robot/division.nsf). 5.2 Robots with closed kinematic structures 5.2.1 Robot with a main structure having one degree of mobility and I=0 For M=1 and I=0, the most simple structure is the four-links mechanism (cf. § 3.2.1). This structure has only one closed loop to which correspond two identi- cal contours α and Α. To one of its links an end-effector is attached, allowing it to manipulate objects. The result of this operation is the mechanism corre- sponding to the main structure of the level 1 Pick and Place industrial robot. The structure is shown in figure 6: legend: frame Kinematic design and descri ption of industrial robotic chains 107 kinematic graphcontour molecule mechanism robot ǂƣ− Figure 6. Pick and Place robot This is the simplest robot with closed structure. Its task consists in moving light parts from one place to another, which explains its name "Pick and Place". This robot is essentially used in clock and pharmaceutical industries. 5.2.2 Robot with a main structure having two degrees of mobility and I=0 For M=2 and I=0, there is only one possible kinematic chain obtained by the schematic of § 3.3. The main structure’s kinematic graph of this robot is shown in figure 7. In order for the robot to be able to manipulate objects, this planar structure is connected to a frame by transforming one of its binary links to a ternary one (the choice is arbitrary). Finally an end-effector is added by the same process. The result of these operations is the mechanism corresponding to the main structure of the level 1 HPR Hitachi industrial robot. kinematic graphcontour molecule mechanism robot ǃƤ− Figure 7. HPR Hitachi robot (source: http://www.hqrd.hitachi.co.jp/merl/robot/robot1.cfm)γ Α α γ Β β108 Industrial Robotics: Theory, Modelling and Control 5.2.3 Robot with a main structure having two degrees of mobility and I=1 In this case there are many possible structures generated from the four struc- tures of table 11, according to the choice of frame position. Let us consider so- lution number one of the first column (c.f. table 11, § 3.3). In the same process carried out previously, by linking this structure to a frame and adding an end- effector to it, a structure is obtained corresponding to the main structure (cf. fig. 3) of the level 2 AKR-3000 robot. Being able to manipulate a weight up to 15 daN, this robot is essentially used for paintwork. kinematic graph contour Molecule ǃǂƦ−− Mechanisme robot Figure 8. AKR-3000 Robot 5.2.4 Robot with a main structure having one degree of mobility and I=2 For M=1 and I=2 there are many possible structures (c.f. Table 15). Structure G1,810 has been chosen here. By linking this structure to a frame and adding an end-effector to it, a structure is obtained corresponding to the main level 3 structure of the Mitsubishi AS50VS Robot presented in Fig. 9. α ΔβKinematic design and descri ption of industrial robotic chains 109 kinematic graph contour molecule ǂǃǂƦ−−− mechanism robot Figure 9. Mitsubishi Electric robot 5.2.5 Robot with a main structure having two degrees of mobility and I=2 The starting point for generating of the kinematic structure is the first logical equation of Table 7 (Watt's structure). For the desired robot, the G 1,6structure thus obtained lacks one degree of mobility and five links. The following opera- tions allow its completion (cf. fig. 10). Adding to this structure a frame and an end-effector the resulting mechanism of this operation corresponds to the main structure of the level 4 HPR Andromat robot. stage/ logical equati- onkinematic graph contour molecule first: addition of three links and one de gree of mobility 9,2 3,1 6,1 G A G = +ǄǂǂƧ−−− second: addition of two links 11,2 2,0 9,2 G A G = + adopted solution ǂǄǂǄƧ−−−− α γ γα Εγ α α Εα Δα β110 Industrial Robotics: Theory, Modelling and Control mechanism robot Figure 10. Evolution of the generation of the Andromat robot topological chain (source: http://arbejdsmiljoweb.dk/upload/rap_1_doc.doc) Among the one hundred and ten available structures of type G 2,11, a robot manufacturer has implemented the required solution above in order to design the main structure of the Andromat robot. According to the rules defined in § 3.1.2. the frame, initially a quaternary link, was transformed into a quintarny one and the binary link, where the end-effector was attached, into a ternary one. This robot is equipped with a pantographic system with a working range of 2,5 m and weight range from 250 kg up to 2000 kg. The Andromat is a world- renowned manipulator, which is widely and successfully used in foundry and forging industries enabling operators to lift and manipulate heavy and awk- ward components in hostile and dangerous environments. (source: http://www.pearsonpanke.co.uk/). During the initial design of the MS of robots, the validation of their topological structures may be done by studying the kinematic graphs of their main struc- tures. The representation by molecules mainly yields to the usual structural diagram of the mechanism in order to visualise and simplify. This allows the classification of their structures and their assignation to different classes of structures, taking into account of their complexity expressed by the number of closed loops. Those points are the subject of the next paragraph. Kinematic design and descri ption of industrial robotic chains 111 Classification of industrial robots structures The structures of robots with simple kinematic chains may be represented by one open kinematic structures of type A. We call these open structures 0 (zero) level structures. Many industrial robots are of the same type for example: MA 23 Arm, SCARA carrier, AID-5V, Seiko 700, Versatran Vertical 80, Puma 500, Kawasaki Js-2, Toshiba SR-854HSP and Yamaha robots (Ferreti, 1981; Rob-Aut, 1996). The main structures of robots with closed kinematic chains may be represented by closed kinematic chains of type G derived from MMT. The Pick and Place robot, for instance, has only one closed chain. This is a level 1 (one) robot (cf. § 5.2.1). There are other industrial robots of the same level for example: Tokico, Pana-Robo by Panasonic, SK 16 and SK 120 by Yaskawa, SC 35 Nachi etc (Rob- Aut, 1996). The main structure of the AKR-3000 robot is composed of two closed loops represented by two internal contours in its molecule. This is a level 2 (two) ro- bot. The main structure of Moise-Pelecudi robot (Manolescu et al, 1987) is composed of three closed chains defining a level 3 (three) robot. The main structure of the Andromat robot is composed of four closed chains. This is a level 4 (four) robot etc. Hence the level n of a robot is defined by the number n of internal contours in its molecule. Table 16 completes this classification of certain robots presented by Ferreti in (Ferreti, 1981): robot manufacturer main struc- ture of the robotcontour nb. of internalcontourslevel Nordson RobomaticNordson France Binks ManufacturingCo.-(simple chain) 0 0zero zero Cincinnati T3, HT3 HPR- Hita- chiCincinnati Milacron Fran- ceǂƣ− ǃƤ−1 1one one RASN AOIP Kremlin, Robotique AKRǃǂƦ−− 2 two 112 Industrial Robotics: Theory, Modelling and Control AS50VS Mitsubishi Electric/ JapanǂǃǂƦ−−− 3 three Andromat …/Sweden ǂǄǂǄ−−− −4 four Table 16. Levels of different industrial robots Conclusions and Future Plans In this chapter we presented an overview about the chronology of design process of an industrial robot kinematic chain. The method for symbolical syn- thesis of planar link mechanisms in robotics presented here allows the genera- tion of plane mechanical structures with different degrees of mobility. Based on the notion of logical equations , this enables the same structures obtained us- ing different methods to be found (intuitive methods, Assur's groups, trans- formation of binary chains etc). The goal being to represent the complexity of the topological structure of an industrial robot, a new method for description of mechanisms was proposed. It is based on the notions of contours and molecules . Its advantage, during the initial phase of the design of the robots, is that the validation of their topologi- cal structures can be done by comparing their respective molecules. That makes it possible to reduce their number by eliminating those which are iso-morphic. The proposed method is afterwards applied for the description of closed struc- tures derived from MMT for different degrees of mobility. It is then applied to the description and to the classification of the main structures of different in- dustrial robots. The proposed method permits the simplification of the visuali- sation of their topological structures. Finally a classification of industrial robots of different levels taking into account the number of closed loops in their molecules is presented. In addition to the geometrical, kinematical and dynamic performances, the de- sign of a mechanical system supposes to take into account, the constraints of the kinematic chain according to the: -position of the frame, -position of the end-effector, -and position of the actuators. The two first aspects above are currently the subjects of our research. The problem is how to choose among the possible structures provided by MMT ac-Kinematic design and descri ption of industrial robotic chains 113 cording to the position of the frame an d the end-effector. As there may be a large number of these mechanisms, it is usually difficult to make a choice among the available structures in the initial design phase of the robot chain. In fact, taking into account the symmetries it can be noticed that there are a sig- nificant number of isomorphic structures according to the position of the frame and of the end-effector of the robot. Our future objectives are: -to find planar mechanisms with revolute joints that provide guidance of a moving frame, e.g. the end-effector of an industrial robot, relative to a base frame with a given degree of freedom, -to reduce the number of kinematic structures provided by MMT, which are suitable for robotics applications, taking into account the symme- tries the two criteria being the position of the frame and of the end- effector of the robot. 114 Industrial Robotics: Theory, Modelling and Control References Abo-Hammour, Z.S.; Mirza, N.M.; Mirza, S.A. & Arif, M. (2002). Cartesian path generation of robot manipulators continuous genetic algorithms, Robotics and autonomous systems . Dec 31, 41 (4), pp.179-223. Artobolevski, I. (1977). Théorie des mécanismes , Mir, Moscou. Belfiore, N.P. (2000). Distributed databases for the development of mecha- nisms topology, Mechanism and Machine Theory Vol. 35, pp. 1727-1744. Borel, P. (1979). Modèle de comportement des manipulateurs. Application à l’analyse de leurs performances et à leur commande automatique , PhD Thesis, Mont- pellier. Cabrera, J.A.; Simon, A. & Prado, M. (2002). Optimal synthesis of mechanisms with genetic algorithms, Mechanism and Machine Theory , Vol. 37, pp. 1165-1177. Coiffet, P. (1992). La robotique. Principes et applications , Hermès, Paris. Crossley, F. R. E. (1964). A cotribution to Grubler's theory in the number syn- thesis of plane mechanisms, Transactions of the ASME, Journal of Engi- neering for Industry , 1-8. Crossley, F.R.E. (1966). On an unpublished work of Alt, Journal of Mecha- nisms, 1, 165-170. Davies, T. & Crossley, F.R.E. (1966). Structural analysis of plan linkages by Franke’s condensed notation, Pergamon Press, Journal of Mechanisms , Vol., 1, 171-183. Dobrjanskyi L., Freudenstein F., 1967. Some application of graph theory to the structural analysis of mechanisms, Transactions of the ASME, Journal of Engineering for Industry, 153-158. Erdman A., Sandor G. N., 1991. Mechanism Design, Analysis and Synthesis , Sec- ond edition. Ferreti, M. (1981). Panorama de 150 manipulateurs et robots industriels, Le Nouvel Automatisme , Vol., 26, Novembre-Décembre, 56-77. Gonzales-Palacois, M. & Ahjeles J. (1996). USyCaMs : A software Package for the Interactive Synthesysis of Cam Mecanisms, Proc. 1-st Integrated De- sign end Manufacturing in Mechanical Engineering I.D.M.M.E.'96 , Nantes France, 1, 485-494. Hervé L.-M., 1994. The mathematical group structure of the set of displace- ments, Mech. and Mach. Theory, Vol. 29, N° 1, 73-81. Hwang, W-M. & Hwang, Y-W. (1992). Computer-aided structural synthesis of plan kinematic chains with simple joints Mechanism and Machine Theory , 27, N°2, 189-199. Karouia, M. & Hervè, J.M. (2005). Asymmetrical 3-dof spherical parallel mechanisms, European Journal of Mechanics (A/Solids) , N°24, pp.47-57. Kinematic design and descri ption of industrial robotic chains 115 Khalil, W. (1976). Modélisation et commande par calculateur du manipulateur MA- Extension à la conception par ordinateur des manipulateurs , PhD Thesis. Montpellier. Laribi, M.A. ; Mlika, A. ; Romdhane, L. & Zeghloul, S. (2004). A combined ge- netic algorithm-fuzzy logic method (GA-FL) in mechanisms synthesis, Mechanism and Machine Theory 39, pp. 717-735. Ma, O. & Angeles, J. (1991). Optimum Architecture Design of Platform Ma- nipulators, IEEE , 1130-1135. Manolescu, N. (1964). Une méthode unitaire pour la formation des chaînes ci- nématiques et des mécanismes plans articulés avec différents degrés de liberté et mobilité, Revue Roumaine Sciances. Techniques- Mécanique Appli- quée, 9, N°6, Bucarest, 1263-1313. Manolescu, N. ; Kovacs, F.R. & Oranescu, A. (1972). Teoria Mecanismelor si a masinelor, Editura didactica si pedagogica , Bucuresti. Manolescu, N (1979). A unified method for the formation of all planar joined kinematic chains and Baranov trusses, Environment and Planning B , 6, 447-454. Manolescu, N. ; Tudosie, I. ; Balanescu, I. ; Burciu, D. & Ionescu, T. (1987). Structural and Kinematic Synthesis of Planar Kinematic Chain (PKC) and Mechanisms (PM) with Variable Structure During the Work, Proc. of the 7-th World Congress, The Theory of Machines and Mechanisms , 1, Sevilla, Spain, 45-48. Manolescu N., 1987. Sur la structure des mécanismes en robotique, Conférence à l’Ecole centrale d’Arts et Manufactures, Paris 1987. Merlet, J.-P. (1996). Workspace-oriented methodology for designing a parallel manipulator ", Proc. 1-st Integrated Design end Manufacturing in Mechani- cal Engineering I.D.M.M.E.'96 , April 15-17, Nantes France, Tome 2, 777- Mitrouchev, P. & André, P. (1999). Méthode de génération et description de mécanismes cinématiques plans en robotique, Journal Européen des Sys- tèmes Automatisés, 33 (3), 285-304. Mitrouchev, P. (2001). Symbolic structural synthesis and a description method for planar kinematic chains in robotics, European Journal of Mechanics (A Solids) , N°20, pp.777-794. Mruthyunjaya, T.S. (1979). Structural Synthesis by Transformation of Binary Chains, Mechanism and Machine Theory , 14, 221-238. Mruthyunjaya, T.S. (1984-a). A computerized methodology for structural syn- thesis of kinematic chains: Part 1- Formulation, Mechanism and Machine Theory , 19, No.6, 487-495. Mruthyunjaya, T.S. (1984-b). A computerized methodology for structural syn- thesis of kinematic chains: Part 2-Application to several fully or par- tially known cases, Mechanism and Machine Theory , 19, No.6, 497-505.116 Industrial Robotics: Theory, Modelling and Control Mruthyunjaya, T.S. (1984-c). A computerized methodology for structural syn- thesis of kinematic chains: Part 3-Application to the new case of 10-link, three-freedom chains, Mechanism and Machine Theory , 19, No.6, 507-530. Pieper, L. & Roth, B. (1969). The Kinematics of Manipulators Under Computer Control, Proceedings 2-nd International Congress on The Theory of Machines and Mechanisms , 2, 159-168. Rao, A. C. & Deshmukh, P. B. (2001). Computer aided structural synthesis of planar kinematic chains obviating the test for isomorphism, Mechanism and Machine Theory 36, pp. 489-506. Renaud, M. (1975). Contribution à l’étude de la modélisation et de la commande des systèmes mécaniques articulés , Thèse de Docteur ingénieur. Université Paul Sabatier, Toulouse. Rob-Aut. (1996). La robotique au Japon, ROBotisation et AUTomatisation de la production, N°12, Janvier-Février, 28-32. Roth, B. (1976). Performance Evaluation of manipulators from a kinamatic viewpoint, Cours de robotique. 1, IRIA. Tejomurtula, S. & Kak, S. (1999). Inverse kinematics in robotics using neural networks, Information sciences , 116 (2-4), pp. 147-164. Tischler, C. R.; Samuel A. E. & Hunt K. H. (1995). Kinematic chains for robot hands – I. Orderly number-synthesis, Mechanism and Machine Theory ,30, No.8, pp. 1193-1215. Touron, P. (1984). Modélisation de la dynamique des mécanismes polyarticu- lés.Application à la CAO et à la simulation de robots , Thèse, Université de Montpellier. Warneke, H.J. (1977). Research activities and the I.P.A. in the field of robotics, Proc. of the 7-th ISIR Congress , Tokyo, 25-35. Woo, L. S. (1967). Type synthesis of plan linkages, Transactions of the ASME, Journal of Engineering for Industry , 159-172. 1174 Robot Kinematics: Forward and Inverse Kinematics Serdar Kucuk and Zafer Bingul Introduction Kinematics studies the motion of bodies without consideration of the forces or moments that cause the motion. Robot kinematics refers the analytical study of the motion of a robot manipulator. Formulating the suitable kinematics mod-els for a robot mechanism is very crucial for analyzing the behaviour of indus- trial manipulators. There are mainly two different spaces used in kinematics modelling of manipulators namely, Cartesian space and Quaternion space. The transformation between two Cartesian coordinate systems can be decomposed into a rotation and a translation. There are many ways to represent rotation, including the following: Euler angles, Gibbs vector, Cayley-Klein parameters, Pauli spin matrices, axis and angle, orthonormal matrices, and Hamilton 's quaternions. Of these representations, homogenous transformations based on 4x4 real matrices (orthonormal matrices) have been used most often in robot- ics. Denavit & Hartenberg (1955) showed that a general transformation be- tween two joints requires four parameters. These parameters known as the Denavit-Hartenberg (DH) parameters have become the standard for describing robot kinematics. Although quaternions constitute an elegant representation for rotation, they have not been used as much as homogenous transformations by the robotics community. Dual quaternion can present rotation and transla-tion in a compact form of transformation vector, simultaneously. While the orientation of a body is represented nine elements in homogenous transforma- tions, the dual quaternions reduce the number of elements to four. It offers considerable advantage in terms of computational robustness and storage effi- ciency for dealing with the kinematics of robot chains (Funda et al., 1990). The robot kinematics can be divided into forward kinematics and inverse kinematics. Forward kinematics problem is straightforward and there is no complexity deriving the equations. Hence, there is always a forward kinemat- ics solution of a manipulator. Inverse kinematics is a much more difficult prob- lem than forward kinematics. The solution of the inverse kinematics problem is computationally expansive and generally takes a very long time in the real time control of manipulators. Singularities and nonlinearities that make the 118 Industrial Robotics: Theory, Modelling and Control problem more difficult to solve. Hence, only for a very small class of kinemati- cally simple manipulators (manipulators with Euler wrist) have complete ana- lytical solutions (Kucuk & Bingul, 2004). The relationship between forward and inverse kinematics is illustrated in Figure 1. Tnθ1Forward kinematics Inverse kinematicsCartesian spaceJoint spaceθ2 θn0 . Figure 10. The schematic representation of forward and inverse kinematics. Two main solution techniques for the inverse kinematics problem are analyti- cal and numerical methods. In the first type, the joint variables are solved ana- lytically according to given configuration data. In the second type of solution, the joint variables are obtained based on the numerical techniques. In this chapter, the analytical solution of the manipulators is examined rather then numerical solution. There are two approaches in analytical method: geometric and algebraic solu- tions. Geometric approach is applied to the simple robot structures, such as 2-DOF planar manipulator or less DOF manipulator with parallel joint axes. For the manipulators with more links and whose arms extend into 3 dimensions or more the geometry gets much more tedious. In this case, algebraic approach is more beneficial for the inverse kinematics solution. There are some difficulties to solve the inverse kinematics problem when the kinematics equations are coupled, and multiple solutions and singularities ex- ist. Mathematical solutions for inverse kinematics problem may not always correspond to the physical solutions and method of its solution depends on the robot structure. This chapter is organized in the following manner. In the first section, the for- ward and inverse kinematics transformations for an open kinematics chain are described based on the homogenous transformation. Secondly, geometric and algebraic approaches are given with explanatory examples. Thirdly, the prob- lems in the inverse kinematics are explained with the illustrative examples. Fi- nally, the forward and inverse kinematics transformations are derived based on the quaternion modeling convention. Robot Kinematics: Forward and Inverse Kinematics 119 Homogenous Transformation Modelling Convention 2.1. Forward Kinematics A manipulator is composed of serial links which are affixed to each other revo- lute or prismatic joints from the base frame through the end-effector. Calculat- ing the position and orientation of the end-effector in terms of the joint vari- ables is called as forward kinematics. In order to have forward kinematics for a robot mechanism in a systematic manner, one should use a suitable kinematics model. Denavit-Hartenberg method that uses four parameters is the most common method for describing the robot kinematics. These parameters a i-1, 1i−α, di and θi are the link length, link twist, link offset and joint angle, respec- tively. A coordinate frame is attached to each joint to determine DH parame- ters. Z i axis of the coordinate frame is pointing along the rotary or sliding di- rection of the joints. Figure 2 shows the coordinate frame assignment for a general manipulator. 1i−α Link i-1Yi-1Zi-1 Xi-1ai-1 diYiZi XiθiLink iaiYi+1Zi+1 Xi+1 Figure 2. Coordinate frame assignment for a general manipulator. As shown in Figure 2, the distance from Z i-1to Z i measured along X i-1 is as- signed as a i-1, the angle between Z i-1 and Z i measured along X i is assigned as αi-1, the distance from X i-1 to X i measured along Z i is assigned as d i and the an- gle between X i-1 to X i measured about Z i is assigned as θi (Craig, 1989). The general transformation matrix T1i i− for a single link can be obtained as fol- lows.120 Industrial Robotics: Theory, Modelling and Control () ( ) ( ) ( )i i i z 1i x 1i x1i i dQ RaD RT θ α =− −− »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª θ θθ−θ »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª α αα− α=− − −− − 1000d10000100001 10 0 001 0 000 c s00 s c 100001000010a001 1 0 0 00 c s00 s c00 0 0 1 ii ii i 1i 1i 1i1i 1i »»»» ¼º «««« ¬ª α α αθ αθα− α− αθ αθθ− θ = − − − −− − − −− 1 0 0 0dc c sc ssds s cc csa 0 s c i1i 1i 1i i 1i ii1i 1i 1i i 1i i1i i i (1) where R x and R z present rotation, D x and Q i denote translation, and c θi and sθi are the short hands of cos θi and sin θi, respectively. The forward kinematics of the end-effector with respect to the base frame is determined by multiplying all of the T1i i− matrices. T ...TTT1n n1 20 1base effector_end−= (2) An alternative representation of Tbase effector_end can be written as »»»» ¼º «««« ¬ª =− 1 0 00p r rrp r rrpr rr T z 33 32 31y 23 22 21x 13 12 11 base effector end (3) where r kj’s represent the rotational elements of transformation matrix (k and j=1, 2 and 3). p x, py and p z denote the elements of the position vector. For a six jointed manipulator, the position and orientation of the end-effector with re- spect to the base is given by )q(T)q(T)q(T)q(T)q(T)q(T T65 6 54 5 43 4 32 3 21 2 10 10 6= (4) where q i is the joint variable (revolute or prismatic joint) for joint i, (i=1, 2, .. .6).Robot Kinematics: Forward and Inverse Kinematics 121 Example 1. As an example, consider a 6-DOF manipulator (Stanford Manipulator) whose rigid body and coordinate frame assignment are illustrated in Figure 3. Note that the manipulator has an Euler wrist whose three axes intersect at a com- mon point. The first (RRP) and last three (RRR) joints are spherical in shape. P and R denote prismatic and revolute joints, respectively. The DH parameters corresponding to this manipulator are shown in Table 1. z0,1y2 x2z2 z0 y0d3 y3z3 x3 θ1θ2 x0z1 y1x1 h1d2θ4θ5θ6 z4 x4 y4z5 x5y5 z6 x6 y6 Figure 3. Rigid body and coordinate frame assignment for the Stanford Manipulator. i θi αi-1 ai-1 d i 1 θ1 0 0 h 1 2 θ2 90 0 d 2 3 0 -90 0 d 3 4 θ4 0 0 0 5 θ5 90 0 0 6 θ6 -90 0 0 Table 1. DH parameters for the Stanford Manipulator. 122 Industrial Robotics: Theory, Modelling and Control It is straightforward to compute each of the link transformation matrices using equation 1, as follows. »»»» ¼º «««« ¬ª θ θθ−θ = 10 0 0h1 0 000 c s00 s c T11 11 1 0 1 (5) »»»» ¼º «««« ¬ª θ θ− −θ−θ = 1 0 0 00 0 c sd 1 0 00 0 s c T2 222 2 1 2 (6) »»»» ¼º «««« ¬ª −= 1000001 0d1000001 T3 2 3 (7) »»»» ¼º «««« ¬ª θ θθ− θ = 10 0 001 0 000 c s00 s c T4 44 4 3 4 (8) »»»» ¼º «««« ¬ª θ θ−θ−θ = 10 0 000 c s01 0 000 s c T 5 55 5 4 5 (9) »»»» ¼º «««« ¬ª θ− θ−θ− θ = 10 0 000 c s01 0 000 s c T 6 66 6 5 6 (10) The forward kinematics of the Stanford Manipulator can be determined in the form of equation 3 multiplying all of the T1i i− matrices, where i=1,2, …, 6. In this case, T0 6 is given by Robot Kinematics: Forward and Inverse Kinematics 123 »»»» ¼º «««« ¬ª = 1000prrrprrrprrr Tz 33 32 31y 23 22 21x 13 12 11 0 6 (11) where )ssc)ccc ss(c(c)scc sc(s r5 2 1 4 2 1 4 1 5 6 4 2 1 1 4 6 11 θθθ+θθθ−θθθθ−θθθ+θθθ−= )scc sc(c)ssc)ccc ss(c(s r4 2 1 1 4 6 5 2 1 4 2 1 4 1 5 6 12 θθθ+θθθ−θθθ+θθθ−θθθθ= 2 5 1 4 2 1 4 1 5 13 scc)ccc ss(s r θθθ−θθθ−θθθ= )sss)scc sc(c(c)ssc cc(s r5 2 1 1 4 2 4 1 5 6 4 1 2 4 1 6 21 θθθ−θθθ+θθθθ+θθθ−θθθ= )sss)scc sc(c(s)ssc cc(c r5 2 1 1 4 2 4 1 5 6 4 1 2 4 1 6 22 θθθ−θθθ+θθθθ−θθθ−θθθ= 2 1 5 1 4 2 4 1 5 23 ssc)scc sc(s r θθθ−θθθ+θθθ−= 6 4 2 2 5 4 5 2 6 31 sss)scc sc(c r θθθ−θθθ+θθ θ= 4 2 6 2 5 4 5 2 6 32 ssc)scc sc(s r θθθ−θθθ+θθθ−= 5 2 4 5 2 33 ssc cc r θθθ−θθ= 2 1 3 1 2 x scd sd p θθ −θ = 2 1 3 1 2 y ssd cd p θθ −θ −= 2 3 1 z cdh p θ + = 2.1.1 Verification of Mathematical model In order to check the accuracy of the mathematical model of the Stanford Ma- nipulator shown in Figure 3, the following steps should be taken. The general position vector in equation 11 should be compared with the zero position vec- tor in Figure 4.124 Industrial Robotics: Theory, Modelling and Control z0,1h1d2d3 +z0 +y0+x0 -x0-y0 Figure 4. Zero position for the Stanford Manipulator. The general position vector of the Stanford Manipulator is given by »»» ¼º ««« ¬ª θ +θθ −θ −θθ −θ = »»» ¼º ««« ¬ª2 3 12 1 3 1 22 1 3 1 2 zyx cdhssd cdscd sd ppp (12) In order to obtain the zero position in terms of link parameters, let’s set θ1=θ2=0° in equation 12. »»» ¼º ««« ¬ª +−= »»» ¼º ««« ¬ª +− −− = »»» ¼º ««« ¬ª3 12 3 13 23 2 zyx dhd0 )0(cdh)0(s)0(sd)0(cd)0(s)0(cd)0(sd ppp $$ $ $$ $ $ (13) All of the coordinate frames in Figure 3 are removed except the base which is the reference coordinate frame for determining the link parameters in zero po- sition as in Figure 4. Since there is not any link parameters observed in the di- rection of +x 0 and -x 0 in Figure 4, p x=0. There is only d 2 parameter in –y 0 direc- tion so p y equals -d 2. The parameters h 1 and d 3 are the +z 0 direction, so p z equals h 1+d3. In this case, the zero position vector of Stanford Manipulator are obtained as following Robot Kinematics: Forward and Inverse Kinematics 125 »»» ¼º ««« ¬ª +−= »»» ¼º ««« ¬ª3 12 zyx dhd0 ppp (14) It is explained above that the results of the position vector in equation 13 are identical to those obtained by equation 14. Hence, it can be said that the mathematical model of the Stanford Manipulator is driven correctly. 2.2. Inverse Kinematics The inverse kinematics problem of the serial manipulators has been studied for many decades. It is needed in the control of manipulators. Solving the in- verse kinematics is computationally expansive and generally takes a very long time in the real time control of manipulators. Tasks to be performed by a ma- nipulator are in the Cartesian space, whereas actuators work in joint space. Cartesian space includes orientation matrix and position vector. However, joint space is represented by joint angles. The conversion of the position and orientation of a manipulator end-effector from Cartesian space to joint space is called as inverse kinematics problem. There are two solutions approaches namely, geometric and algebraic used for deriving the inverse kinematics solu- tion, analytically. Let’s start with geometric approach. 2.2.1 Geometric Solution Approach Geometric solution approach is based on decomposing the spatial geometry of the manipulator into several plane geometry problems.It is applied to the sim- ple robot structures, such as, 2-DOF planer manipulator whose joints are both revolute and link lengths are l 1 and l 2 shown in Figure 5a. Consider Figure 5b in order to derive the kinematics equations for the planar manipulator. The components of the point P (p x and p y) are determined as follows. 126 Industrial Robotics: Theory, Modelling and Control l1 θ1θ2l2 XY P (a) Y θ2 θ1θ1 l1l2 X l1cosθ1 l2cos(θ1+θ2)l1sinθ1l2sin(θ1+θ2)P (b) Figure 5. a) Planer manipulator; b) Solving the inverse kinematics based on trigo- nometry. 12 2 1 1 x cl cl p θ +θ= (15) 12 2 1 1 y sl sl p θ+θ= (16) where2 1 2 1 12 ss cc c θθ−θθ=θ and 2 1 2 1 12 sc cs s θθ+θθ=θ . The solution of 2θcan be computed from summation of squaring both equations 15 and 16. 12 1 21 1222 2 122 12 x ccll2 cl cl p θθ +θ +θ = 12 1 21 1222 2 122 12 y ssll2 sl sl p θθ +θ +θ = )ss cc(ll2)s c(l)s c(l pp12 1 12 1 21 122 122 2 2 12 12 2 12 y2 x θθ+θθ +θ+θ +θ+θ = +Robot Kinematics: Forward and Inverse Kinematics 127 Since 1 s c12 12=θ+θ , the equation given above is simplified as follows. ])sc cs[s]ss cc[c(ll2ll pp2 1 2 1 1 2 1 2 1 1 212 22 12 y2 x θθ+θθθ+θθ−θθθ ++= + )ssc cs ssc cc(ll2ll pp2 1 1 2 12 2 1 1 2 12 212 22 12 y2 x θθθ+θθ+θθθ−θθ ++= + ])s c[c(ll2ll pp12 12 2 212 22 12 y2 x θ+θ θ ++=+ 2 212 22 12 y2 x cll2ll pp θ ++= + and so 212 22 12 y2 x 2ll2llppc−−+=θ (17) Since, 1 s ci2 i2=θ+θ (i =1,2,3,……),2sθ is obtained as 2 212 22 12 y2 x 2ll2llpp1 s¸¸ ¹· ¨¨ ©§ −−+−±=θ (18) Finally, two possible solutions for 2θ can be written as ¸¸ ¹· ¨¨ ©§−−+ ¸¸ ¹· ¨¨ ©§ −−+− ± =θ 212 22 12 y2 x2 212 22 12 y2 x 2ll2llpp,ll2llpp1 2tanA (19) Let’s first, multiply each side of equation 15 by 1cθ and equation 16 by 1sθand add the resulting equations in order to find the solution of 1θ in terms of link parameters and the known variable2θ. 2 1 1 2 2 12 2 12 1 x1 sscl ccl cl pc θθθ−θθ +θ = θ 2 1 1 2 2 12 2 12 1 y1 scsl csl sl ps θθθ+θθ +θ = θ )s c(cl)s c(l ps pc12 12 2 2 12 12 1 y1 x1 θ+θ θ +θ+θ = θ+ θ The simplified equation obtained as follows. 2 2 1 y1 x1 cll ps pc θ += θ+ θ (20) In this step, multiply both sides of equation 15 by 1sθ− and equation 16 by 1cθ and then adding the resulting equations produce 128 Industrial Robotics: Theory, Modelling and Control 2 12 2 2 1 1 2 1 1 1 x1 ssl ccsl csl ps θθ +θθθ−θθ−= θ− 2 12 2 2 1 1 2 1 1 1 y1 scl cscl csl pc θθ +θθθ +θθ= θ )s c(slpcps12 12 2 2 y1 x1 θ+θ θ= θ+θ− The simplified equation is given by 2 2 y1 x1 slpcps θ= θ+θ− (21) Now, multiply each side of equation 20 by xp and equation 21 by yp and add the resulting equations in order to obtain1cθ. )cll(p ppspc2 2 1 x yx12 x1 θ + = θ+θ 2 2y2 y1 yx1 slppcpps θ = θ+ θ− 2 2y 2 2 1 x2 y2 x 1 slp)cll(p)pp(c θ +θ + = + θ and so 2 y2 x2 2y 2 2 1 x 1ppslp)cll(pc+θ +θ +=θ (22) 1sθ is obtained as 2 2 y2 x2 2y 2 2 1 x 1ppslp)cll(p1 s¸¸ ¹· ¨¨ ©§ +θ +θ +−±=θ (23) As a result, two possible solutions for 1θ can be written ¸¸¸ ¹· ¨¨¨ ©§ +θ +θ + ¸¸ ¹· ¨¨ ©§ +θ +θ +− ± =θ2 y2 x2 2y 2 2 1 x2 2 y2 x2 2y 2 2 1 x 1ppslp)cll(p,ppslp)cll(p1 2tanA (24) Although the planar manipulator has a very simple structure, as can be seen, its inverse kinematics solution based on geometric approach is very cumber- some.Robot Kinematics: Forward and Inverse Kinematics 129 2.2.2 Algebraic Solution Approach For the manipulators with more links and whose arm extends into 3 dimen- sions the geometry gets much more tedious. Hence, algebraic approach is cho- sen for the inverse kinematics solution. Recall the equation 4 to find the in- verse kinematics solution for a six-axis manipulator. )q(T)q(T)q(T)q(T)q(T)q(T 1000prrrprrrprrr T65 6 54 5 43 4 32 3 21 2 10 1 z 33 32 31y 23 22 21x 13 12 11 0 6 = »»»» ¼º «««« ¬ª = To find the inverse kinematics solution for the first joint (1q) as a function of the known elements of Tbase effector end− , the link transformation inverses are premul- tiplied as follows. [] [] )q(T)q(T)q(T)q(T)q(T)q(T)q(T T)q(T65 6 54 5 43 4 32 3 21 210 11 10 10 61 10 1− −= where [] I)q(T)q(T10 11 10 1 =−, I is identity matrix. In this case the above equation is given by [] )q(T)q(T)q(T)q(T)q(T T )q(T65 6 54 5 43 4 32 3 21 20 61 10 1 =− (25) To find the other variables, the following equations are obtained as a similar manner. [] )q(T)q(T)q(T)q(T T )q(T)q(T65 6 54 5 43 4 32 30 61 21 2 10 1 =− (26) [] )q(T)q(T)q(T T )q(T)q(T)q(T65 6 54 5 43 40 61 32 3 21 2 10 1 =− (27) [] )q(T)q(T T )q(T)q(T)q(T)q(T65 6 54 50 61 43 4 32 3 21 2 10 1 =− (28) [] )q(T T )q(T)q(T)q(T)q(T)q(T65 60 61 54 5 43 4 32 3 21 2 10 1 =− (29) There are 12 simultaneous set of nonlinear equations to be solved. The only unknown on the left hand side of equation 18 is q 1. The 12 nonlinear matrix elements of right hand side are either zero, constant or functions of q 2 through q 6. If the elements on the left hand side which are the function of q 1 are equated with the elements on the right hand side, then the joint variable q 1130 Industrial Robotics: Theory, Modelling and Control can be solved as functions of r 11,r12, … r 33, px, py, pzand the fixed link parame- ters. Once q 1 is found, then the other joint variables are solved by the same way as before. There is no necessity that the first equation will produce q 1 and the second q 2 etc. To find suitable equation for the solution of the inverse kine- matics problem, any equation defined above (equations 25-29) can be used arbitrarily. Some trigonometric equations used in the solution of inverse kine- matics problem are given in Table 2. . Equations Solutions 1 c cosb sina =θ +θ ( )c,cba2tanA)b,a(2tanA2 2 2−+ =θ # 2 0 cosb sina =θ +θ )a,b(2tanA − =θ or )a,b(2tanA − =θ 3 a cos =θ and b sin =θ ()a,b2tanA=θ 4 a cos =θ ( )a,a1 2tanA2− =θ # 5 a sin =θ ( )2a1 ,a2tanA − =θ # Table 2. Some trigonometric equations and solutions used in inverse kinematics Example 2. As an example to describe the algebraic solution approach, get back the in- verse kinematics for the planar manipulator. The coordinate frame assignment is depicted in Figure 6 and DH parameters are given by Table 3. i θi αi-1 ai-1 d i 1 θ1 0 0 0 2 θ2 0 l1 0 3 0 0 l 2 0 Table 3. DH parameters for the planar manipulator. Robot Kinematics: Forward and Inverse Kinematics 131 l1 θ1θ2l2 X0,1 Y0,1Z0,1X2 Y2Z2X3 Y3Z3 Figure 6. Coordinate frame assignment for the planar manipulator. The link transformation matrices are given by »»»» ¼º «««« ¬ª θ θθ−θ = 10 0 001 0 000 c s00 s c T1 11 1 0 1 (30) »»»» ¼º «««« ¬ª θ θθ−θ = 10 0 001 0 000 c sl0 s c T2 21 2 2 1 2 (31) »»»» ¼º «««« ¬ª = 100001000010l001 T2 2 3 (32) Let us use the equation 4 to solve the inverse kinematics of the 2-DOF manipu- lator.132 Industrial Robotics: Theory, Modelling and Control TTT 1000prrrprrrprrr T2 31 20 1 z 33 32 31y 23 22 21x 13 12 11 0 3 = »»»» ¼º «««« ¬ª= (33) Multiply each side of equation 33 by 1 0 1T− TTTT TT2 31 20 11 0 10 31 0 1− −= (34) where »¼º «¬ª −=− 1 000PR RT10T 0 1T 0 1 1 0 1 (35) In equation 35, T 0 1R and 10Pdenote the transpose of rotation and position vec- tor of T0 1, respectively. Since, IT T0 11 0 1 =−, equation 34 can be rewritten as fol- lows. TT TT2 31 20 31 0 1 =− (36) Substituting the link transformation matrices into equation 36 yields »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª θ θθ−θ = »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª θ θ−θ θ 100001000010l001 10 0 001 0 000 c sl0 s c 1000prrrprrrprrr 100 0010 000 c s00 s c2 2 21 2 2 z 33 32 31y 23 22 21x 13 12 11 1 11 1 (37) »»»» ¼º «««« ¬ª θ+θ = »»»» ¼º «««« ¬ª θ+ θ−θ+ θ 1 0000 ...sl ...l cl... 1 000p ...pcps ...pspc...2 21 2 2 zy1 x1y1 x1 Squaring the (1,4) and (2,4) matrix elements of each side in equation 37Robot Kinematics: Forward and Inverse Kinematics 133 2 1 2 21 222 2 1 1 yx2 y12 2 x12l cll2 cl scpp2pspc +θ +θ =θθ +θ+θ 222 2 1 1 yx2 y12 2 x12sl scpp2pcps θ =θθ −θ+θ and then adding the resulting equations above gives 2 1 2 21 22 22 2 2 12 12 2 y 12 12 2 x l cll2)s c(l)c s(p)s c(p +θ +θ+θ =θ+θ +θ+θ 2 1 2 212 22 y2 x l cll2l p p +θ += + 212 22 12 y2 x 2ll2llppc−−+=θ Finally, two possible solutions for 2θ are computed as follows using the fourth trigonometric equation in Table 2. ¸¸¸ ¹· ¨¨¨ ©§−− + » ¼º « ¬ª −− +− =θ 212 22 12 y2 x2 212 22 12 y2 x 2ll2ll p p,ll2ll p p1 2tanA# (38) Now the second joint variable 2θ is known. The first joint variable 1θ can be determined equating the (1,4) elements of each side in equation 37 as follows. 1 2 2 y1 x1 l cl ps pc +θ= θ+ θ (39) Using the first trigonometric equation in Table 2 produces two potential solu- tions. )l cl,)l cl( p p(2tanA)p,p(2tanA1 2 22 1 2 2 x2 y x y 1 +θ +θ − + =θ # (40) Example 3. As another example for algebraic solution approach, consider the six-axis Stan- ford Manipulator again. The link transformation matrices were previously de- veloped. Equation 26 can be employed in order to develop equation 41. The inverse kinematics problem can be decoupled into inverse position and orien- tation kinematics. The inboard joint variables (first three joints) can be solved using the position vectors of both sides in equation 41. [] TTTT T TT5 64 53 42 30 611 20 1 =− (41) 134 Industrial Robotics: Theory, Modelling and Control »»»» ¼º «««« ¬ª = »»»» ¼º «««« ¬ª −θ−θ− θ+ θ+θθ−− θ+ θ+θθ 10000...d...0... 1 000dpcps ...)hp(c)pspc(s ...)hp(s)pspc(c...3 2 y1 x11 z 2 y1 x1 21 z 2 y1 x1 2 The revolute joint variables 1θ and 2θ are obtained equating the (3,4) and (1,4) elements of each side in equation 41 and using the first and second trigono- metric equations in Table 2, respectively. )d,d p p(2tanA)p,p(2tanA22 22 y2 x y x 1 − + ± − =θ (42) )hp,pspc(2tanA1 z y1 x1 2 + − θ+ θ ±=θ (43) The prismatic joint variable 3d is extracted from the (2,4) elements of each side in equation 41 as follows. )h p(c)ps pc(s d1 z 2 y1 x1 2 3 − θ+ θ+ θθ−= (44) The last three joint variables may be found using the elements of rotation ma- trices of each side in equation 41. The rotation matrices are given by »»»» ¼º «««« ¬ª θθθ θθ− θθθθ− = »»»» ¼º «««« ¬ª θ −θθθ −θθ −θθθ +θθ +θ 1 0 0 0. ss . .. c ss sc. sc . . 1 0 00. cr sr ... ssr scr cred. scr ccr sr.. 5 45 6 5 5 65 4 1 23 1 132 1 23 2 1 13 2 331 2 23 2 1 13 2 33 (45) where2 1 21 2 1 11 2 31 ssr scr crd θθ −θθ −θ = and 2 1 22 2 1 12 2 32 ssr scr cre θθ −θθ −θ = . The revolute joint variables 5θ is determined equating the (2,3) elements of both sides in equation 45 and using the fourth trigonometric equation in Table 2, as follows. ( )2 1 23 2 1 13 2 332 2 1 23 2 1 13 2 33 5 ssr scr cr,)ssr scr cr(1 2tanA θθ −θθ −θ θθ −θθ −θ − ± =θ (46) Extracting 4 cosθ and 4 sinθ from (1,3) and (3,3), 6 cosθ and 6sinθ from (2,1) and (2,2) elements of each side in equation 45 and using the third trigonomet-Robot Kinematics: Forward and Inverse Kinematics 135 ric equation in Table 2, 4θ and 6θ revolute joint variables can be computed, re- spectively. ¸¸ ¹· ¨¨ ©§ θθθ +θθ +θ−θθ −θ=θ 51 2 23 2 1 13 2 33 51 23 1 13 4sscr ccr sr,scr sr2tanA (47) ¸¸ ¹· ¨¨ ©§ θθθ −θθ −θ θθθ −θθ −θ− =θ 52 1 21 2 1 11 2 31 52 1 22 2 1 12 2 32 6sssr scr cr,sssr scr cr2tanA (48) 2.2.3 Some Drawbacks for the Solution of the Inverse Kinematics Problem Although solution of the forward kinematics problem is steady forward, the solution of the inverse kinematics problem strictly depend on the robot struc- tures. Here are some difficulties that should be taken in account while driving the inverse kinematics. The structure of the six-axis manipulators having Euler wrist allows for the decoupling of the position and orientation kinematics. The geometric feature that generates this decoupling is the intersection of the last tree joint axes. Hence, their inverse kinematics problems are quite simple. On the other hand, since the orientation and position of some 6 DOF manipulators having offset wrist (whose three axes does not intersect at a common point) are coupled, such manipulators do not produce suitable equations for the analytical solu- tion. In this case, numerical methods are employed to obtain the solution of the inverse kinematics problem. Consider the example 3 for describing the singularity. As long as $05≠θ and $1805≠θ ,4θ and 6θ can be solved. A singularity of the mechanism exists when$05=θ and $1805=θ . In this case, the manipulator loses one or more de- grees of freedom. Hence, joint angles, 4θ and 6θ make the same motion of the last link of the manipulator. The inverse kinematics solution for a manipulator whose structure comprises of revolute joints generally produces multiple solutions. Each solution should be checked in order to determine whether or not they bring the end-effector to the desired poison. Suppose the planar manipulator illustrated in Figure 5, with the link lengths l 1=10 and l 2=5 in some units. Use the inverse kinematics solutions given in equations 38 and 40 to find the joint angles which bring the end-effector at the following position (p x,py)=(12.99, 2.5). Substituting l 1=10, l2=5 and (p x,py)=(12.99, 2.5) values into equation 38 yields136 Industrial Robotics: Theory, Modelling and Control ¸¸ ¹· ¨¨ ©§ »¼º «¬ª ⋅⋅− − + »¼º «¬ª ⋅⋅− − +− =θ51025 105.2 99.12,51025 105.2 99.121 2tanA2 2 2 222 2 2 2 2 # ( ) 4999.0,) 4999.0(1 2tanA2− = # (49) ()$# # 60 4999.0,866.0 2tanA = = As can be seen from equation 49, 2θ has two solutions, corresponding to the positive (+60°) and negative (-60°) sign choices. Since ) cos() cos( θ− =θ , one (2θ=60°) of above two solutions can be employed to find the numeric values of the first joint as follows. #)99.12,5.2(2tanA1=θ )10)60(c5,)10)60(c5( 99.12 5.2(2tanA2 2 2+ ⋅ + ⋅− + (50) 1.199.10# = Clearly, the planar manipulator has four different mathematical solutions given by }60 ,301.199.10 {S2 1 1$ $+=θ = + =θ= (51) }60 ,301.199.10 {S2 1 2$ $−=θ = + =θ= (52) }60 ,20.8 1.199.10 {S2 1 3$ $+=θ −= − =θ= (53) }60 ,20.8 1.199.10 {S2 1 4$ $−=θ −= − =θ= (54) As a result, these four sets of link angle values given by equations 51 through 54 solve the inverse kinematics problem for the planar manipulator. Figure 7 illustrates the particular positions for the planar manipulator in each of above solutions.Robot Kinematics: Forward and Inverse Kinematics 137 θ1=30θ2=60Y Xl1l2 θ1=30, θ2=60(12.99, 2.5) θ1=30θ2=-60Y Xl1 l2 θ1=30, θ2=-60 (a) (b) (12.99, 2.5) θ1=-8.2θ2=60Y X l1l2 θ1= -8.2, θ2=60θ1=-8.2 θ2=-60Y X l1 l2 θ1= -8.2, θ2=-60 (c) (d) Figure 7. Four particular positions for the planar manipulator. Although there are four different inverse kinematics solutions for the planar manipulator, only two (Figure 7b and 6c) of these bring the end-effector to the desired position of (px, py)=(12.99, 2.5). Mathematical solutions for inverse kinematics problem may not always corre- spond to physical solutions. Another words, there are physical link restrictions for any real manipulator. Therefore, each set of link angle values should be 138 Industrial Robotics: Theory, Modelling and Control checked in order to determine whether or not they are identical with the physical link limits. Suppose, 2θ=180°, the second link is folded completely back onto first link as shown in Figure 8. One can readily verify that this joint value is not physically attained by the planar manipulator. θ2=180 θ1l2 l1 Figure 8. The second link is folded completely back onto the first link when 2θ=180°. Quaternion Modelling Convention Formulating the suitable mathematical model and deriving the efficient algo- rithm for a robot kinematics mechanism are very crucial for analyzing the be- havior of serial manipulators. Generally, homogenous transformation based on 4x4 real matrices is used for the robot kinematics. Although such matrices are implemented to the robot kinematics readily, they include in redundant elements (such matrices are composed of 16 elements of which four are com- pletely trivial) that cause numerical problems in robot kinematics and also in-crease cost of algorithms (Funda et al., 1990). Quaternion-vector pairs are used as an alternative method for driving the robot kinematics of serial manipula- tor. The successive screw displacements in this method provide a very com- pact formulation for the kinematics equations and also reduce the number of equations obtained in each goal position, according to the matrix counterparts. Since (Hamilton, 2004)’s introduction of quaternions, they have been used in many applications, such as, classical and quantum mechanics, aerospace, geo- metric analysis, and robotics. While (Salamin, 1979) presented advantages of quaternions and matrices as rotational operators, the first application of the former in the kinematics was considered by (Kotelnikov, 1895). Later, general properties of quaternions as rotational operators were studied by (Pervin & Webb, 1982) who also presented quaternion formulation of moving geometric Robot Kinematics: Forward and Inverse Kinematics 139 objects. (Gu & Luh, 1987) used quaternions for computing the Jacobians for ro- bot kinematics and dynamics. (Funda et al., 1990) compared quaternions with homogenous transforms in terms of computational efficiency. (Kim & Kumar, 1990) used quaternions for the solution of direct and inverse kinematics of a 6- DOF manipulator. (Caccavale & Siciliano, 2001) used quaternions for kine- matic control of a redundant space manipulator mounted on a free-floating space-craft. (Rueda et al., 2002) presented a new technique for the robot cali- bration based on the quaternion-vector pairs. 3.1. Quaternion Formulation A quaternion q is the sum of scalar (s) and three dimensional vectors (v). Other words, it is a quadrinomial expression, with a real angle ǉ and an axis of rota- tion n = ix + jy + kz, where i, j and k are imaginary numbers. It may be ex- pressed as a quadruple q = ( ǉ, x, y, z) or as a scalar and a vector q = ( ǉ, u), where u= x, y, z. In this chapter it will be denoted as, ]k,k,k)2/ sin(),2/ [cos(]v,s[qz y x > < θ θ = = (55) where Rs∈,3Rv∈ and ǉ and k, a rotation angle and unit axis, respectively. For a vector r oriented an angle ǉ about the vector k, there is a quaternion ]z,y,x,s[]k,k,k)2/ sin(),2/ [cos(qz y x > < => < θ θ = that represents the orienta- tion. This is equivalent to the rotation matrix R. »»» ¼º ««« ¬ª − − + −− − − ++ − − − = 2 22 22 2 y2 x21 sx2yz2 sy2xz2sx2yz2 z2 x21 sz2 xy2sy2xz2 sz2 xy2 z2 y21 R (56) If R is equated to a 3x3 rotational matrix given by »»» ¼º ««« ¬ª 33 32 3123 22 2113 12 11 r r rr r rr r r (57) and since, q is unit magnitude ( 1z y xs2 2 2 2= + + + ) then, the rotation matrix R can be mapped to a quaternion ]z,y,x,s[q > < = as follows. 140 Industrial Robotics: Theory, Modelling and Control 21r r rs33 22 11 + + += (58) s4r rx23 32−= (59) s4r ry31 13−= (60) s4r rz12 21−= (61) Although unit quaternions are very suitable for defining the orientation of a rigid body, they do not contain any information about its position in the 3D space. The way to represent both rotation and translation in a single transfor- mation vector is to use dual quaternions. The transformation vector using dual quaternions for a revolute joint is > <> < θ θ =z y x z y x p,p,p],k,k,k)2/ sin(),2/ ([cos()p,q(Q (62) where the unit quaternion q represents appropriate rotation and the vector p=<p x, py, pz> encodes corresponding translational displacement. In the case of prismatic joints, the displacement is represented by a quaternion-vector pair as follows. )p,p,p],0,0,0,1([)p,q(Qz y x > <> < = (63) where ]0,0,0,1[ > < represents unit identity quaternion. Quaternion multiplica- tion is vital to combining the rotations. Let, ]v,s[q1 1 1= and ]v,s[ q2 2 2= denote two unit quaternions. In this case, multiplication process is shown as ]vvvs vs,vvss[qq2 1 12 21 2 1 21 2 1 ×+ + ⋅− =∗ (64) where (.), ( ×) and ( ∗) are dot product, cross product and quaternion multipli- cation, respectively. In the same manner, the quaternion multiplication of two point vector transformations is denoted as, 11 1 2 1 2 1 2 2 1 1 2 1 p qpq,qq)p,q()p,q( QQ + ∗∗ ∗= ∗ =− (65) Robot Kinematics: Forward and Inverse Kinematics 141 where, ).pv(v2)pv(s2 p qpq2 1 1 2 1 1 21 1 2 1 × × + × + = ∗∗−A unit quaternion inverse requires only negating its vector part, i.e. ]v,s[]v,s[ q1− = =−(66) Finally, an equivalent expression for the inverse of a quaternion-vector pair can be written as, )q*p*q,q( Q1 1 1 − − −− = (67) where ))].p(v(v2))p(v(s2[p q*p*q1−×× + −× −+−= −− 3.2 Forward Kinematics Based on the quaternion modeling convention, the forward kinematics vector transformation for an open kinematics chain can be derived as follows: Con-sider the Stanford Manipulator once more as illustrated in Figure 9. A coordi- nate frame is affixed to the base of the manipulator arbitrarily and the z-axis of the frame is assigned for pointing along the rotation axis of first joint. This frame does not move and, is considered as the reference coordinate frame. The position and the orientation vectors of all other joints are assigned in terms of this frame. Let’s find orientation vectors. Since the z-axis of the reference coor- dinate frame is the unit line vector along the rotation axis of the first joint, the quaternion vector that represents the orientation is expressed as ]1,0,0 sin, [cosq1 1 1 > <θ θ = (68) where 2/1 1θ=θ . As shown in Figure 9, the unit line vector of the second joint is the opposite direction of the y-axis of the reference coordinate frame, in this case, the orientation of the second joint is given by 142 Industrial Robotics: Theory, Modelling and Control z0,1h1d2d3 Unit line vector of the first joint Zθ1θ2 X Yθ4,θ6 θ5 Figure 9. The coordinate frame and unit line vectors for the Stanford Manipulator. ]0,1,0 sin, [cosq2 2 2 > −<θ θ = (69) Because, the third joint is prismatic; there is only a unit identity quaternion that can be denoted as ]0,0,0,1[q3 > < = (70) Orientations of the last three joints are determined as follows using the same approach described above. ]1,0,0 sin, [cosq4 4 4 > <θ θ = (71) ]0,1,0 sin, [cosq5 5 5 > <θ θ = (72) ]1,0,0 sin, [cosq6 6 6 > <θ θ = (73) The position vectors are assigned in terms of reference coordinate frame as fol- lows. When the first joint is rotated anticlockwise direction around the z axis of reference coordinate frame by an angle of 1θ, the link d 2 traces a circle in the xy-plane which is parallel to the xy plane of the reference coordinate frame as given in Figure 10a. Any point on the circle can be determined using the vectorRobot Kinematics: Forward and Inverse Kinematics 143 > θ −θ >=< <=1 1 2 1 2 1z 1y 1x 1 h, cosd, sind p,p,p p (74) If the second joint is rotated as in Figure 10b, in this case the rotation will be xz-plane with respect to the reference coordinate frame. The position vector of the second quaternion can be written as >θ θ −<=2 3 2 3 2 cosd,0, sind p (75) z0,1h1d2 θ1X Y Z X Yz0,1h1d2d3 Zθ2 X YZ X Figure 10. a) The link d 2 traces a circle on the xy-plane; b) The link d 3 traces a circle on the xz-plane. Since rotation of the last four joints do not create any displacement for the suc- cessive joints, the position vectors are denoted as > =< = = = 0,0,0 p p p p6 5 4 3 (76) Finally, the kinematics transformations for the Stanford Manipulator defining the spatial relationships between successive linkages can be expressed as fol- lows. ( )> θ −θ <> <θ θ =1 1 2 1 2 1 1 1 h, cosd, sind],1,0,0 sin, [cos Q (77) () >θ θ −<> −<θ θ =2 3 2 3 2 2 2 cosd,0, sind ],0,1,0 sin, [cos Q (78) () > <> < = 0,0,0],0,0,0,1[ Q3 (79) 144 Industrial Robotics: Theory, Modelling and Control () > <> <θ θ = 0,0,0],1,0,0 sin, [cos Q4 4 4 (80) () > <> <θ θ = 0,0,0],0,1,0 sin, [cos Q5 5 5 (81) ( )> <> <θ θ = 0,0,0],1,0,0 sin, [cos Q6 6 6 (82) The forward kinematics of the Stanford Manipulator can be determined in the form of equation 62, multiplying all of the iQ matrices, where i=1,2, …, 6. []() >θ + θθ −θ −θθ −θ < =2 3 1 2 1 3 1 2 2 1 3 1 2 cdh,ssd cd,scd sd,v,s)p,q(Q (83) where11Ms= and M,M,M v14 13 12 > =< are given by equation 98. 3.3 Inverse Kinematics To solve the inverse kinematics problem, the transformation quaternion is de- fined as )p,p,p],c,b,a,w([]T,R[z y x w w > <> < = (84) where )T,R(w w represents the known orientation and translation of the robot end-effector with respect to the base. Let iQ )6i1( ≤≤ denotes kinematics trans- formations describing the spatial relationships between successive coordinate frames along the manipulator linkages such as )p,q( Q1 1 1= , )p,q( Q2 2 2= … )p,q( Q6 6 6= . The quaternion vector products iM and the quaternion vector pairs 1jN+are defined as 1i i i MQ M+ = (85) i1 i 1i NQ N− += (86) where 5i1 ≤≤ . Note that 6 6Q M= and ]T,R[ Nw w 1= . In order to extract joint variables as functions of s, v, p x, py, pz and fixed link parameters, appropriate iM and 1jN+terms are equated, such as ,N M1 1=2 2N M= … 6 6N M= . For the reason of compactness, 2/iθ , )2/ sin(iθ , )2/ cos(iθ , ) sin(iθand ) cos(iθwill be represented as iθ,is,ic,is and ic respectively. The link transformation matri- ces were formerly developed. The inverse transformations can be written as follows using equation 67. Robot Kinematics: Forward and Inverse Kinematics 145 )h,d,0],1,0,0s,c([ Q1 2 1 11 1 >− −<> <− =− (87) )d,0,0],0,1,0s,c([ Q3 2 21 2 > − <> < =− (88) )0,0,0],0,0,0,1([ Q1 3 > <> < =− (89) )0,0,0],1,0,0s,c([ Q4 41 4 > <> <− =− (90) )0,0,0],0,1,0s,c([ Q5 51 5 > <> <− =− (91) )0,0,0],1,0,0s,c([ Q6 61 6 > <> <− =− (92) The quaternion vector products are ( )> <> <θ θ= = 0,0,0],1,0,0 s,c[ Q M6 6 6 6(93) )0,0,0],sc,cs,ss,cc([ MQ M65 65 65 65 6 5 5 > <> < = = (94) )0,0,0], M,M,M,M([ MQ M44 43 42 41 5 4 4 > <> < = = (95) where, )64(5 41 cc M+ = , )64(5 42 ss M− −= , )64(5 43 cs M− = and )46(5 44 sc M+ = . )0,0,0], M,M,M,M([ MQ M34 33 32 31 4 3 3 > <> < = = (96) where, 42 32M M = , 43 33M M = and 44 34M M = . )cd,0,sd ], M,M,M,M([ MQ M23 23 24 23 22 21 3 2 2 > −<> < = = (97) where,146 Industrial Robotics: Theory, Modelling and Control 43 2 41 2 21 Ms Mc M − = , 44 2 42 2 22 Ms Mc M − = ,41 2 43 2 23 Ms Mc M − = and 42 2 44 2 24 Ms Mc M + = . ) M,M,M], M,M,M,M([ MQ M17 16 15 14 13 12 11 2 1 1 > <> < = = (98) where , )Ms Mc(s Mc M42 2 44 2 1 21 1 11 − − = , 23 1 22 1 12 Ms Mc M − = , 22 1 23 1 13 Ms Mc M + = , 24 1 21 1 14 Mc Ms M + = , 2 1 3 1 2 15 scd sd M θθ −θ = , 2 1 3 1 2 16 ssd cd M θθ −θ −= and 2 3 1 17 cd h M θ + = . The quaternion vector pairs are )p,p,p]c,b,a,w([ Nz y x 1 > <> < = (99) )h p,N,N], N,N,N,N([ NQ N1 z 26 25 24 23 22 21 11 1 2 >− <> < = =− (100) where, 1 1 21 sccw N + = , 1 1 22 sbca N + = , 1 1 23 sacb N − = , 1 1 24 swcc N − = , 1y 1x 25 spcp N + = and 2 1y 1x 26 dcpsp N − + −= . ) N,N,N], N,N,N,N([ NQ N37 36 35 34 33 32 31 21 2 3 > <> < = =− (101) where, 24 2 21 2 31 Ns Nc N − = , 23 2 22 2 32 Ns Nc N − = , 22 2 23 2 33 Ns Nc N + = , 21 2 24 2 34 Ns Nc N + = , )p h(s)spcp(c Nz 1 2 1y 1x 2 35 − − + = ,2 1x 1y 36 dspcp N − − = , 3 1y 1x 2 1 z 2 37 d)spcp(s)h p(c N − + − − = .Robot Kinematics: Forward and Inverse Kinematics 147 )0,0,0], N,N,N,N([ NQ N44 43 42 41 31 3 4 > <> < = =− (102) where,31 41N N= , 32 42N N= , 33 43N N= and 34 44N N= . The first joint variable 1θ can be determined equating the second terms of M 2 and N 2 as follows. )d,d p p(2tanA)p,p(2tanA22 22 y2 x y x 1 − + ± − =θ (103) The joint variables 2θ and 3dare computed equating the first and third ele- ments of M 3 and N 3 respectively. )p h,ps pc(2tanAz 1 y1 x1 2 − θ+ θ ±=θ (104) )h p(c)ps pc(s d1 z 2 y1 x1 2 3 − θ+ θ+ θθ−= (105) 2 432 422 5 N N s + = ,2 442 412 5 N N c + = , 4144 6 4NN) tan( =θ+θ a n d 4342 6 4NN) tan( −=θ−θ equations can be derived form equating the terms M 4 to N 4, where, 41 )64(5 N cc =+ ,42 )64(5 N ss = −− ,43 )64(5 N cs =− and 44 )46(5 N sc =+ . In this case, the orientation angles of the Euler wrist can be determined as follows. ( )2 442 412 432 42 5 N N,N N 2 arctan + + ± =θ (106) ¸¸ ¹· ¨¨ ©§− +¸¸ ¹· ¨¨ ©§=θ 4342 4144 4NNarctanNNarctan (107) ¸¸ ¹· ¨¨ ©§− −¸¸ ¹· ¨¨ ©§=θ 4342 4144 6NNarctanNNarctan (108) 148 Industrial Robotics: Theory, Modelling and Control References Denavit, J. & Hartenberg, R. S. (1955). A kinematic notation for lower-pair mechanisms based on matrices. Journal of Applied Mechanics, Vol., 1 (June 1955) pp. 215-221 Funda, J.; Taylor, R. H. & Paul, R.P. (1990). On homogeneous transorms, qua- ternions, and computational efficiency. IEEE Trans.Robot. Automat., Vol., 6 (June 1990) pp. 382–388 Kucuk, S. & Bingul, Z. (2004). The Inverse Kinematics Solutions of Industrial Robot Manipulators, IEEE Conferance on Mechatronics , pp. 274-279, Tur- key, June 2004, Istanbul Craig, J. J. (1989). Introduction to Robotics Mechanics and Control, USA:Addision- Wesley Publishing Company Hamilton, W. R. (1869). Elements of quaternions, Vol., I & II, Newyork Chelsea Salamin, E. (1979). Application of quaternions to computation with rotations. Tech., AI Lab, Stanford Univ., 1979 Kotelnikov, A. P. (1895). Screw calculus and some of its applications to geometry and mechanics. Annals of the Imperial University of Kazan. Pervin, E. & Webb, J. A. (1983). Quaternions for computer vision and robotics, In conference on computer vision and pattern recognition. pp 382-383, Washington, D.C. Gu, Y.L. & Luh, J. (1987). Dual-number transformation and its application to robotics. IEEE J. Robot. Automat. Vol., 3, pp. 615-623 Kim, J. H. & Kumar, V. R. (1990). Kinematics of robot manipulators via line transformations. J. Robot. Syst., Vol., 7, No., 4, pp. 649–674 Caccavale, F. & Siciliano, B. (2001). Quaternion-based kinematic control of re- dundant spacecraft/ manipulator systems, In proceedings of the 2001 IEEE international conference on robotics and automation , pp. 435-440 Rueda, M. A. P.; Lara, A. L. ; Marinero, J. C. F.; Urrecho, J. D. & Sanchez, J.L.G. (2002). Manipulator kinematic error model in a calibration process through quaternion-vector pairs, In proceedings of the 2002 IEEE interna- tional conference on robotics and automation , pp. 135-1401495 Structure Based Classification and Kinematic Analysis of Six-Joint Industrial Robotic Manipulators Tuna Balkan, M. Kemal Özgören and M. A. Sahir Arıkan Introduction In this chapter, a complete set of compact, structure based generalized kine- matic equations for six-joint industrial robotic manipulators are presented to-gether with their sample solutions. Industrial robots are classified according to their kinematic structures, and their forward kinematic equations are derived according to this classification. The purpose of this classification is to obtain simplified forward kinematic equations considering the specific features of the classified manipulators and thus facilitate their inverse kinematic solutions. For the classification, one hundred industrial robots are surveyed. The robots are first classified into kinematic main groups and then into subgroups under each main group. The main groups are based on the end-effector rotation ma- trices and characterized by the twist angles. On the other hand, the subgroups are based on the wrist point positions and characterized by the link lengths and offsets. The reason for preferring the wrist point rather than the tip point in this classification is that, the wrist point and rotation matrix combination contain the same amount of information as the tip point and rotation matrix combination about the kinematic features of a manipulator, and the wrist point coordinates are simpler to express in terms of the joint variables. After obtain-ing the forward kinematic equations (i.e. the main group rotation matrix equa- tions and the subgroup wrist point equations), they are simplified in order to obtain compact kinematic equations using the numerous properties of the ex- ponential rotation matrices (Özgören, 1987-2002). The usage of the exponential rotation matrices provided important advantages so that simplifications are carried out in a systematic manner with a small number of symbolic matrix manipulations. Subsequently, an inverse kinematic solution approach applica- ble to the six-joint industrial robotic manipulators is introduced. The approach is based on the kinematic classification of the industrial robotic manipulators as explained above. In the inverse kinematic solutions of the surveyed indus- trial robots, most of the simplified compact equations can be solved analyti- cally and the remaining few of them can be solved semi-analytically through a numerical solution of a single univariate equation. The semi-analytical method 150 Industrial Robotics: Theory, Modelling and Control is named as the Parametrized Joint Variable (PJV) method. In these solutions, the singularities and the multiple configurations of the manipulators indicated by sign options can be determined easily. Using these solutions, the inverse kinematics can also be computerized by means of short and fast algorithms. Owing to the properties of the exponential rotation matrices, the derived sim- ple and compact equations are easy to implement for computer programming of the inverse kinematic solutions. Besides, the singularities and the multiple configurations together with the working space limitations of the manipulator can be detected readily before the programming stage, which enables the pro- grammer to take the necessary actions while developing the program. Thus, during the inverse kinematic solution, it becomes possible to control the mo- tion of the manipulator in the desired configuration by selecting the sign op- tions properly. In this approach, although the derived equations are manipula- tor dependent, for a newly encountered manipulator or for a manipulator to be newly designed, there will be no need to follow the complete derivation pro- cedure starting from the beginning for most of the cases; only a few modifica- tions will be sufficient. These modifications can be addition or deletion of a term, or just changing simply a subscript of a link length or offset. Even if the manipulator under consideration happens to generate a new main group, the equations can still be derived without much difficulty by using the procedure described here, since the approach is systematic and its starting point is the application of the Denavit-Hartenberg convention by identifying the twist an- gles and the other kinematic parameters. In this context, see (Özgören, 2002) for an exhaustive study that covers all kinds of six-joint serial manipulators. The presented method is applicable not only for the serial manipulators but also for the hybrid manipulators with closed chains. This is demonstrated by applying the method to an ABB IRB2000 industrial robot, which has a four-bar mechanism for the actuation of its third link. Thus, alongside with the serial manipulators, this particular hybrid manipulator also appears in this chapter with its compact forward kinematic equations and their inversion for the joint variables. Finally, the chapter is closed by giving the solutions to some typical trigonometric equations encountered during the inverse kinematic solutions. For the solution of inverse kinematics problem, forward kinematic equations are required. There are three methods for inverse kinematic solution; namely, analytical, semi-analytical, and fully numerical. Presently, analytical methods can be used only for certain manipulators with specific kinematic parameter combinations such as PUMA 560. For a general case where the manipulator does not have specific kinematic parameter combinations, it becomes impossi-ble to obtain analytical solutions. So, either semi-analytical or fully numerical methods have been developed. Since the present general semi-analytical methods are rather cumbersome to use (Raghavan & Roth, 1993; Manseur & Doty, 1996), fully numerical methods are mostly preferred. However, if the forward kinematic equations can be simplified, it becomes feasible to use semi-Structure Based Classification and Kinematic Analysis of … 151 analytical and even analytical methods for a large number of present industrial robot types. On the other hand, although the fully numerical methods can de- tect the singularities by checking the determinant of the Jacobian matrix, they have to do this continuously during the solution, which slows down the proc- ess. However, the type of the singularity may not be distinguished. Also, in case of multiple solutions, the desired configurations of the manipulator can not be specified during the solution. Thus, in order to clarify the singularities and the multiple configurations, it becomes necessary to make use of semi- analytical or analytical methods. Furthermore, the analytical or semi-analytical methods would be of practical use if they lead to compact and simple equa-tions to facilitate the detection of singularities and multiple configurations. The methodology presented in this chapter provides such simple and compact equations by making use of various properties of the exponential rotation ma- trices, and the simplification tools derived by using these properties (Özgören, 1987-2002). Since different manipulator types with different kinematic parame- ters lead to different sets of simplified equations, it becomes necessary to clas- sify the industrial robotic manipulators for a systematic treatment. For such a classification, one hundred currently used industrial robots are surveyed (Bal- kan et al., 1999, 2001). The kinematics of robotic manipulators can be dealt with more effectively and faster by perceiving their particular properties rather than resorting to general- ity (Hunt, 1986). After the classification, it is found that most of the recent, well-known robotic manipulators are within a specific main group, which means that, instead of general solutions and approaches, manipulator depend- ent solutions and approaches that will lead to easy specific solutions are more reasonable. The usage of exponential rotation matrices provide important ad- vantages so that simplifications can be carried out in a systematic manner with a small number of symbolic matrix manipulations and the resulting kinematic equations become much simpler especially when the twist angles are either 0° or ± 90°, which is the case with the common industrial robots. For serial manipulators, the forward kinematics problem, that is, determina- tion of the end-effector position and orientation in the Cartesian space for given joint variables, can easily be solved in closed-form. Unfortunately, the inverse kinematics problem of determining each joint variable by using the Cartesian space data does not guarantee a closed-form solution. If a closed- form solution can not be obtained, then there are different types of approaches for the solution of this problem. The most common one is to use a completely numerical solution technique such as the Newton-Raphson algorithm. Another frequently used numerical method is the “resolved motion rate control” which uses the inverse of the Jacobian matrix to determine the rates of the joint vari- ables and then integrates them numerically with a suitable method (Wu & Paul, 1982). Runge-Kutta of order four is a common approach used for this purpose. As an analytical approach, it is possible to convert the forward kine-152 Industrial Robotics: Theory, Modelling and Control matic equations into a set of polynomial equations. Then, they can be reduced to a high-order single polynomial equation through some complicated alge- braic manipulations. Finally, the resulting high-order equation is solved nu- merically. However, requiring a lot of polynomial manipulations, this ap- proach is quite cumbersome (Wampler & Morgan, 1991; Raghavan & Roth, 1993). On the other hand, the approach presented in this chapter aims at obtaining the inverse kinematic solutions analytically by manipulating the trigonometric equations directly without converting them necessarily into polynomial equa- tions. In a case, where an analytical solution cannot be obtained this way, then a semi-analytical solution is aimed at by using the method described below. As explained before, the PJV method is a semi-analytical inverse kinematics solution method which can be applied to different kinematic classes of six-joint manipulators which have no closed-form solutions. In most of the cases, it is based on choosing one of the joint variables as a parameter and determining the remaining joint variables analytically in terms of this parametrized joint variable. Parametrizing a suitable joint variable leads to a single univariate equation in terms of the parametrized joint variable only. Then, this equation is solved using a simple numerical technique and as the final step remaining five joint variables are easily computed by substituting the parametrized joint variable in their analytical expressions. However, for certain kinematic struc- tures and kinematic parameters two and even three equations in three un- knowns may arise (Özgören, 2002). Any initial value is suitable for the solution and computational time is very small even for an initial condition far from the solution. The PJV method can also handle the singular configurations and mul-tiple solutions. However, it is manipulator dependent and equations are dif- ferent for different classes of manipulators. PJV works well also for non- spherical wrists with any structural kinematic parameter combination. In this chapter, four different subgroups are selected for the demonstration of the inverse kinematic solution method. Two of these subgroups are examples to closed-form and semi-analytic inverse kinematic solutions for the most fre- quently seen kinematic structures among the industrial robots surveyed in (Balkan et al., 1999, 2001). Since the manipulators in these two subgroups have revolute joints only, the inverse kinematic solution of subgroup 4.4 which in- cludes Unimate 4000 industrial robot is also given to demonstrate the method on manipulators with prismatic joints. The inverse kinematic solution for this class of manipulators happens to be either closed-form or needs the PJV method depending on the selection of one of its parameters. In addition, the inverse kinematic solution for ABB IRB2000 industrial robot, which has a closed chain, is obtained to show the applicability of the method to such ma- nipulators. Structure Based Classification and Kinematic Analysis of … 153 Kinematic Equations for Six-Joint Robots In the derivation of the kinematic equations for six-joint manipulators, De- navit-Hartenberg (D-H) convention is used as shown in Figure 1 (Denavit & Hartenberg, 1955), with notation adopted from (Özgören, 2002). Figure 1. D-H Convention and Related Notation The symbols in Fig. 1 are explained below. Jk: Joint k. Lk: Link k. Ok: Origin of the reference frame F k attached to L k. Ak: Auxiliary point between L k-1 and L k. (k) iuG: ith unit basis vector of F k ; i = 1, 2, 3. ak: Effective length A kOk of L k along k 1uG. dk: Distance O k-1Ak of L k from L k-1 along −G(k 1) 3u . It is a constant parameter, called offset, if J k is revolute. It is the kth joint variable if J k is prismatic. It is then denoted as s k.kOk1A− k1O−Jk+1Jkï1 JkLkLkï1(k 2) 3u−G (k 1) 3u−G (k) 3uG (k 1) 1u−G(k) 1uGkakα θkkdkA k1a−154 Industrial Robotics: Theory, Modelling and Control ǉk: Rotation angle of L k with respect to L k-1 about −G(k 1) 3u . It is the kth joint variable if J k is revolute. If J k is prismatic, it is a constant parameter which is either 0° or ±90° for common industrial robot manipulators. αk: Twist angle of J k+1 with respect to J k about G(k) 1u . For common industrial robot manipulators, it is either 0° or ±90°. Among the industrial robots surveyed in this chapter, there is no industrial ro- bot whose last joint is prismatic. Thus, the wrist point, which is defined as the origin of F 6 is chosen to be coincident with the origin of F 5. That is, O 5= O6. The other features of the hand frame F 6 are defined as described below. =GG(6) (5) 33u u (1) a6= 0, d 6= 0, α6= 0 (2) The end-effector is fixed in F 6 and assuming that its tip point P is on the axis along the approach vector G(6) 3u , its location can be described as d p= O6P. The relationship between the representations of the same vector in two differ- ent frames can be written as shown below. =(a) (a,b) (b) ˆnC n (3) Here,(a) (b)n , n are the column representations of the vector Gn in the frames F a and F b while (a,b)ˆC is the transformation matrix between these two frames. In order to make the kinematic features of the manipulators directly visible and to make the due simplifications easily, the hand-to-base transformation matrix (0,6)ˆC and the wrist point position vector (0)r, or the tip point position vector(0)p are expressed separately, rather than concealing the kinematic fea- tures into the overcompact homogeneous transformation matrices, which are also unsuitable for symbolic manipulations. The wrist and tip point position vectors are related as follows: =+(0) (0) (0,6) p3ˆprd C u (4) Here,(0)rand(0)p are the column matrix representations of the position vec- tors in the base frame F 0 whereas 3u is the column matrix representation of the approach vector in the hand frame F 6. The overall relative displacement from F k-1 to F k consists of two rotations and two translations, which are sequenced as a translation of s k along −G(k 1) 3u , a ro- tation of ǉk about −G(k 1) 3u , a translation of a k along G(k) 1u , and a rotation of αk aboutG(k) 1u. Structure Based Classification and Kinematic Analysis of … 155 Using the link-to-link rotational transformation matrices, (0,6)ˆC can be formu- lated as follows: =(0,6) (0,1) (1,2) (2,3) (3,4) (4,5) (5,6)ˆ ˆˆˆˆˆˆC C C C C C C (5) According to the D-H convention, the transformation matrix between two suc- cessive link frames can be expressed using exponential rotation matrices (Özgören, 1987-2002). That is, θα=3k 1 k (k-1,k) uu ˆCe e (6) On the other hand, assuming that frame F b is obtained by rotating frame F a about an axis described by a unit vector Gn through an angle ǉ, the matrix (a,b)ˆC is given as an exponential rotation matrix by the following equation (Özgören, 1987-2002): θ== θ θ θ(a,b) nT ˆ ˆC e I cos + n sin + n n (1-cos ) (7) Here,ˆI is the identity matrix and n is the skew symmetric matrix generated from the column matrix =(a)n n . This generation can be described as follows. ªº ª º «» « »=→ =«» « » «» « »¬¼ ¬ ¼13 2 23 1 32 1n0 - n n n n n n 0 - n n- n n 0 (8) Furthermore, if =GG (a) k n u where G(a) ku is the kth basis vector of the frame F a, then = k n u and θ=k (a,b) u ˆC e (9) Here, ªº ªº ªº «» «» «»===«» «» «» «» «» «»¬¼ ¬¼ ¬¼123100 u 0 , u 1 , u 0 001 (10) Using Equation (6), Equation (5) can be written as θαθαθαθαθαθ==31 1 1 32 1 2 33 1 3 34 1 4 35 1 5 36 (0,6) uuuu uuuu uuu ˆˆC C eeeeeeeeeee (11) 156 Industrial Robotics: Theory, Modelling and Control On the other hand, the wrist point position vector can be expressed as =+++++GG G G G G G 01 12 23 34 45 56 rr r r r r r (12) Here,G ijr is the vector from the origin O i to the origin O j. Using the column matrix representations of the vectors in the base frame F 0, Equation (12) can be written as == + + + + +(0) (0,1) (0,1) (0,2) (0,2) (0,3) 13 1 1 2 3 2 1 3 3 3 1ˆˆˆˆˆr r d ua C ud C ua C ud C ua C u +++ +(0,3) (0,4) (0,4) (0,5) 43 41 53 51ˆˆˆˆd C ua C ud C ua C u ( 1 3 ) Substitution of the rotational transformation matrices and manipulations using the exponential rotation matrix simplification tool E.2 (Appendix A) result in the following simplified wrist point equation in its most general form. θθ αθ α θ=+ + +   31 31 1 1 31 1 1 32uu uu u u 13 1 1 2 3 2 1 rd u a e u d e e u a e e e u θαθα θαθαθ++ 31 1 1 32 1 2 31 1 1 32 1 2 33uuuu uuuu u 33 3 1d eeeeu a eeeeeu θαθαθα+31 1 1 32 1 2 33 1 3uuuu uu 43d eeeeeeu θαθαθαθ+31 1 1 32 1 2 33 1 3 34uu uu uu u 41ae e e e e e e u θαθαθαθα+31 1 1 32 1 2 33 1 3 34 1 4uuuuuuuu 53de e e e e e e e u θαθαθαθαθ+31 1 1 32 1 2 33 1 3 34 1 4 35uuuuuuuuu 51a eeeeeeeeeu ( 1 4 ) Classification of Six-Joint Industrial Robotic Manipulators As noticed in Equations (11) and (14), the general r expression contains five joint variables and the general ˆC expression includes all of the angular joint variables. On the other hand, it is an observed fact that in the six-joint indus-trial robots, many of the structural length parameters (a k and d k) are zero (Bal- kan et al., 1999, 2001). Due to this reason, there is no need to handle the inverse kinematics problem in a general manner. Instead, the zero values of a k and d k of these robots can be used to achieve further simplifications in Equations (11) and (14). In order to categorize and handle the simplified equations in a sys- tematic manner, the industrial robots are grouped using a two step classifica- tion scheme according to their structural parameters a k,αk, and d k for revolute joints or ǉk for prismatic joints. The primary classification is based on the twist angles ( αk) and it gives the main groups . Whereas, the secondary classification is based on the other structural parameters (a k and d k or ǉk) and it gives the subgroups under each main group. Structure Based Classification and Kinematic Analysis of … 157 In the main groups, the simplified r a n d ˆC expressions are obtained using the fact that the twist angles are either 0 ° or ± 90 °. The ˆC expression for each main group is the same, because the rotation angles ( ǉk) are not yet distinguished at this level whether they are constant or not. At the level of the subgroups, the values of the twist and constant rotation angles are substituted into the r a n d ˆC expressions, together with the other parameters. Then, the properties of the exponential rotation matrices are used in order to obtain simplified equations with reduced number of terms, which can be used with convenience for the inverse kinematic solutions. The main groups with their twist angles and the number of robots in each main group are given in Table 1 considering the in- dustrial robots surveyed here. The subgroups are used for finer classification using the other structural parameters. For the manipulators in this classifica- tion, the r expressions are simplified to a large extent especially when zeros are substituted for the vanishing structural parameters. Table 1. Main Groups of Surveyed Six-Joint Industrial Robots 3.1 Main Group Equations Substituting all the nine sets of the twist angle values given in Table 1 into Equations (11) and (14), the main group equations are obtained. The terms of r involving a k and d k are denoted as T(a k) and T(d k) as described below. T(a k)= ake (ǉ1, ... , ǉk,α1, ... , αk)1u (15) T(d k)= dk e (ǉ1, ... , ǉk-1,α1, ... , αk-1)3u (16) Here, e stands for a product of exponential rotation matrices associated with the indicated angular arguments as exemplified by the following terms. ()θαθ=θ θ α =31 1 1 32uuu 22 1 2 1 1 2 1T(a ) a e , , u a e e e u (17) 158 Industrial Robotics: Theory, Modelling and Control ()θα=θ α =31 1 1uu 22 1 1 3 2 3T ( d) de , u de e u (18) Here, the derivation of equations is given only for the main group 1, but the equations of the other groups can be obtained in a similar systematic manner by applying the exponential rotation matri x simplification tools given in Appendix A. The numbers (E.#) of the employed tools of Appendix A during the deriva- tion of the ˆC matrices and the terms (a k) and (d k) are shown in Table 2. Table 2. Exponential Rotation Matrix Simplification Tool Numbers (E.#) Applied for Deriva- tion of ˆC Matrices and Terms (a k) and (d k) in Main Group Equations Equations of Main Group 1 Letα denote the set of twist angles. For the main group 1, α is []α= − ° ° ° − ° ° °T90 , 0 , 90 , 90 , 90 ,0 . (19) Substituting α into the general ˆC equation results in the following equation. θ πθ θ πθ πθ πθ=     3 1 1 3 23 31 3 4 1 3 51 3 6u - u/ 2 u u u/ 2 u - u/ 2 u u/ 2 u ˆC ee eee ee ee e (20) Using the exponential rotation matrix simplification tools E.4 and E.6, the rota- tion matrix for the main group 1, i.e. 1ˆC , can be obtained as follows. θθ θθθ= 3 12 2 33 42 53 6uu uuu 1ˆCee eee (21) Here,ǉjk=ǉj + ǉk is used as a general way to denote joint angle combinations. Substituting α into the general r expression results in the following equation. Structure Based Classification and Kinematic Analysis of … 159 θθ π θ π θ=+ + +    31 31 1 31 1 32uu - u / 2 u - u / 2 u 13 1 1 2 3 2 1 rd u a e u d e e u a e e e u θπθ θ πθ θ++   31 1 32 31 1 32 33u- u / 2 u u - u / 2 u u 33 3 1d e e eu a ee eeu θπ θ θ π θπ θ θ π θ++        31 1 32 33 1 31 1 32 33 1 34u- u / 2 uuu / 2 u- u / 2 uuu / 2 u 43 4 1de e e e e u ae e e e e e u θπθ θ πθ π+   31 1 32 33 1 34 1u- u / 2 u u u / 2 u - u / 2 53de e e e e e e u θπ θ θ π θπ θ+     31 1 32 33 1 34 1 35u - u/ 2 u u u/ 2 u - u/ 2 u 51a ee eee ee eu ( 2 2 ) The simplifications can be made for the terms T(a k) and T(d k) of Equation (22) as shown in Table 3 using the indicated simplification tools given in Appendix A. E.8 T(d 2)= d2θ31u 2 e u E.10, E.6 and E.2 T(a 2)= a2θθ31 22uu 1 eeu E.2 and E.8 T(d 3)= d3θ31u 2 eu E.4 and E.6 T(a 3)= a3θθ31 22 3uu 1 ee u E.4 and E.6 T(d 4)= d4θθ31 22 3uu 3 ee u E.4 and E.6 T(a 4)= a4θθ θ 31 22 3 34uu u 1 ee eu E.4, E.6 and E.8 T(d 5)= d5θθ θ 31 22 3 34uu u 2 ee eu E.4, E.6 and E.10 T(a 5)= a5θθ θθ 31 22 3 34 25uu uu 1 ee eeu Table 3. Simplifications of the terms T(a k) and T(d k) in Equation (22) Replacing the terms T(a k) and T(d k) in Equation (22) with their simplified forms given in Table 3, the wrist point location for the main group 1, i.e. 1r, can be obtained as follows: θθθ θθθ θ=+ + + + +  31 31 31 22 31 31 22 3uuu uuu u 11 3 1 12 22 13 23 1rd ua e ud e ua ee ud e ua ee u θθ θθ θ θθ θ++ +    31 22 3 31 22 3 34 31 22 3 34uu uu u uu u 4 3 41 52de e u ae e e u de e e u θθ θθ+ 31 22 3 34 25uu uu 51a e e e e u (23) The simplified equation pairs for ˆC and r pertaining to the other main groups can be obtained as shown below by using the procedure applied to the main group 1 and the appropriate simplification tools given in Appendix A. The subscripts indicate the main groups in the following equations. In these equa- tions, d ij denotes d i+dj. Note that, if J k is prismatic, then the offset d k is to be replaced with the joint variable s k as done in obtaining the subgroup equations in Subsection 3.2. θθ θθ π=  3 1 2 234 3 5 2 6 1uu uu- u / 2 2ˆC e e e e e (24) 160 Industrial Robotics: Theory, Modelling and Control θ θ θθ θθ=+ + + +   31 31 31 22 31 22 3u u uu uu 2 1 31 1 2 3 4 22 13 1rd ua eud eua eeua ee u θθ θθ θθ θ++ +   3 1 2 234 3 1 2 234 3 1 2 234 3 5uu uu uu u 41 53 5 1a e eu d e eu a e ee u ( 2 5 ) θθθ θθ= 31 22 33 4 25 36uuu uu 3ˆC e e e e e (26) θ θ θθ θθ=+ + + +   31 31 31 22 31 22u u uu uu 31 3 1 12 2 2 13 4 3rd ua eud eua eeud eeu θθθ θθθ θθθ++ +  31 22 33 31 22 33 4 31 22 33 4uuu uuu uuu 3 1 41 52a eeeu a eee u d eee u θθθ θ+ 31 22 33 4 25uuu u 51a eee eu ( 2 7 ) θθθθθθ π= 31 22 33 24 35 26 1uuuuuu- u / 2 4ˆC e e e e e e e (28) θ θ θθ θθ=+ + + +   31 31 31 22 31 22u u uu uu 41 3 1 12 22 13 3rd ua eud eua eeud eeu θθθ θθθ θθθθ++ +  31 22 33 31 22 33 31 22 33 24uuu uuu uuuu 31 42 4 1a eeeu d eeeua eeeeu θθθθ θθθθθ++ 31 22 33 24 31 22 33 24 35uuuu uuuuu 53 5 1d eeeeu a eeeeeu ( 2 9 ) θθ θ= 3 1234 2 5 3 6uu u 5ˆC e e e (30) θθ θ θ θ=+ + + + +   3 1 3 12 3 123 3 1234 3 1234uu u u u 5 1234 3 1 1 2 1 3 1 4 1 5 2rdua eua e ua e ua e ud e u θθ+3 1234 2 5uu 51a e e u (31) θθθ θ π=  3 1 2 2 3 345 2 6 1uuu u- u / 2 6ˆC e e e e e (32) θ θ θθ θθ=+ + + +   31 31 31 22 31 22u u uu uu 61 3 1 12 22 13 4 5 3rd ua eud eua eeud eeu θθθ θθθ θθθ++ +  31 22 33 31 22 33 4 31 22 33 4 5uuu uuu uuu 31 4 1 5 1ae e e u ae e e u ae e e u ( 3 3 ) θθθ θπ= 3 12 2 34 3 5 2 6 1uuu u - u / 2 7ˆC e e e e e (34) θθ θ θ θ=+ + + +   31 31 2 31 2 31 2 23uu u u u 71 2 3 1 1 2 1 3 4 2 3 1rd ua eua e ud e ua e e u θθ θθ θθθ++ +  31 2 23 4 31 2 23 4 31 2 23 4 35uu uu uuu 41 53 5 1a e e u d e e u a e e e u (35) θθ θ θ θ= 31 2 23 34 25 36uu u u u 8ˆCe eeee ( 3 6 ) θθ θ θ θ θ θ=+ + + + +    31 31 2 31 2 31 2 23 31 2 23uu u u u u u 81 2 3 1 1 2 13 2 3 14 3r d ua eu a e u d e ua e eu d e eu θθ θ θθ θ θθ θ θ++ +     31 2 23 34 31 2 23 34 31 2 23 34 25u uu u uu u uuu 41 52 5 1a e eeu d e eeua e eeeu ( 3 7 ) θθ θ θ π=   3 1 2 23 3 45 2 6 1uu u u- u / 2 9ˆC e e e e e (38) θ θ θθ θθ=+ + + +   31 31 31 22 31 22 3u u uu uu 91 3 1 12 3 2 2 1 3 1rd ua eud eua ee ua ee u θθ θθ θ θθ θ++ +    31 22 3 31 22 3 34 31 22 3 34 5uu uu u uu u 45 3 4 1 5 1d e e u a e e e u a e e e u (39) Structure Based Classification and Kinematic Analysis of … 161 3.2 Subgroups and Subgroup Equations The list of the subgroups of the nine main groups is given in Table 4 with the non-zero link parameters and the number of industrial robots surveyed in this study. In the table, the first digit of the subgroup designation indicates the un- derlying main group and the second non-zero digit indicates the subgroup of that main group (e.g., subgroup 2.6 indicates the subgroup 6 of the main group 2). The second zero digit indicates the main group itself. The brand names and the models of the surveyed industrial robots are given in Appendix B with their subgroups and non-zero link parameters. If the joint J k of a manipulator happens to be prismatic, the offset d k becomes a joint variable, which is then denoted by s k. In the column titled “Solution Type”, CF denotes that a closed- form inverse kinematic solution can be obtained analytically and PJV denotes that the inverse kinematic solution can only be obtained semi-analytically us- ing the so called parametrized joint variable method. The details of these two types of inverse kinematic solutions can be seen in Section 4. Table 4. Subgroups of Six-Joint Robots Using the information about the link lengths and the offsets, the simplified subgroup equations are obtained for the wrist locations as shown below by us- ing again the exponential rotation matrix simplification tools given in Appen- dix A. In these equations, the first and second subscripts associated with the 162 Industrial Robotics: Theory, Modelling and Control wrist locations indicate the related main groups and subgroups. For all sub- groups of the main groups 1 and 2, the rotation matrix is as given in the main group equations. θθ θθ=+ 31 22 31 22 3uu uu 11 2 1 4 3r a eeud ee u (40) θθ θθ θ=+ +  31 31 22 31 22 3uu u u u 12 2 2 2 1 4 3rd e u a e e u d e eu (41) θθ θ θ θ=+ +  31 31 22 31 22 3uu u u u 13 1 1 2 1 4 3ra e u a e e u d e eu (42) θθ θθ θθ=+ +  31 22 31 22 3 31 22 3uu uu uu 14 2 1 3 1 4 3r a eeua ee ud ee u (43) θθ θ θ θ=+ +  31 31 22 31 22 3uu u u u 15 23 2 2 1 4 3rd e u a e e u d e eu (44) θθ θθ θ θ θ=+ + +    31 31 22 31 22 3 31 22 3uu uu u u u 16 1 1 2 1 3 1 4 3ra e u a e e u a e eu d e eu (45) θθ θθ θθ θ=+ +   31 22 31 22 3 31 22 3 34uu uu uu u 17 2 1 4 3 5 2r a eeud ee ud ee eu (46) θθ θθ θ θ θ θ=+ + +     31 31 22 31 22 3 31 22 3 34uu u u u u u u 18 2 2 2 1 4 3 5 2rd e u a e e u d e eu d e ee u (47) θθ θθ θ θ θ=+ + +    31 31 22 31 22 3 31 22 3uu uu u u u 19 1 1 2 1 3 1 4 3ra e u a e e u a e eu d e eu (48) 31 22 3 34uu u 52de e e uθθ θ+  θθ θθ θ θ θ θ=+ + + +    31 31 22 31 22 3 31 31 22 3uu uu u u u u 110 1 1 2 1 3 1 3 2 4 3ra e u a e e u a e e u d e u d e e u θθ θ+ 31 22 3 34uu u 52d e e e u (49) θθ θθ θ=+ +  31 22 31 22 3 31uu uu u 21 2 1 3 1 4 2r a eeua ee ud eu (50) θθ θθ θθ=+ +  31 22 31 22 3 31 22 3 4uu uu uu 22 2 1 3 1 4 1r a ee ua ee ua ee u (51) θθ θθ θθ=+ +  31 22 31 22 3 31 22 3 4uu uu uu 23 2 1 3 1 5 3r a eeua ee ud ee u (52) θθ θθ θ θ θ=+ + +    31 31 22 31 22 3 31 22 3 4uu uu u u u 24 2 2 2 1 3 1 5 3rd e u a e e u a e eu d e e u (53) θ θ θθ θθ θθ=+ + + +    31 31 31 22 31 22 3 31 22 3 4u u uu uu uu 25 1 1 2 2 2 1 3 1 5 3r a eud eua eeua ee ud ee u (54) θθ θθ θ θ θ θ=+ + + +    31 31 22 31 22 3 31 31 22 3 4uu uu u u u u 26 1 1 2 1 3 1 4 2 5 3ra e u a e e u a e eu d e u d e e u (55) Structure Based Classification and Kinematic Analysis of … 163 The constant joint angles associated with the prismatic joints are as follows for the subgroups of the main group 3: For the subgroups 3.1 and 3.2 having s 1, s2, and s 3 as the variable offsets, the joint angles are ǉ1= 0°,ǉ2= 90°,ǉ3= 0° or 90 °. For the subgroups 3.3 and 3.4, having s 3 as the only variable offset, ǉ3 is either 0° or 90 °. This leads to the following equations: ′ θθθ ′ θθ θ ′′θθθ­ θ=° °== = ®θ= ° °¯   14 25 36 13 4 25 36 14 25 36uuu 3uu u 31 32uuu 3e e e for 0ˆˆCCee e e e e for 90 (56) Here, ′θ= θ+ °44 90 and ′θ= θ+ °55 90 . =++3 1 31 22 13rs u s u s u (57) θ′′++ θ = °­′=++− = ®′′++ θ = °¯1331 22 13 3u 32 3 1 2 2 1 3 3 3 31 22 13 3s u s u s u for 0rs u s u s u a e us u s u s u for 90 (58) Here, ′=−113ss a , ′=+223ssa , a n d ′=++3314ssa d . θθθθθ ′ θθθθθ­ θ=° °==®θ= ° °¯ 31 22 34 25 36 31 22 34 25 36uuuuu 3 33 34uuuuu 3e e e e e for 0ˆˆCC e e e e e for 90 (59) θθ θ=+ 31 31 22uu u 33 2 2 3 3rd e u s e e u (60) θθ θθ θθθ=++  31 22 31 22 31 22 33 4uu uu uuu 34 2 1 3 3 5 2r a eeus eeud eee u θθ θθ θθθ ′ θθ θθ θθθ­ ++ θ = ° °=®++ θ = ° °¯     31 22 31 22 31 22 34 31 22 31 22 31 22 34uu uu uuu 21 33 5 2 3 uu uu uuu 21 33 5 2 3a e e u s e e u d e e e u for 0 a eeu s eeu d eeeu f o r 9 0 (61) Here, ′θ= θ+ °44 90 . The constant joint angles associated with the prismatic joints, for the sub- groups of the main group 4 are as follows: For the subgroup 4.1 having s 1, s2, and s 3 as the variable offsets, the joint angles are ǉ1= 0°,ǉ2= 90°,ǉ3= 0° or 90 °. For the subgroup 4.2 having s 2 as the only variable offset, ǉ2 is either 0 ° or 90 °. For the subgroups 4.3 and 4.4 having s 3 as the only variable offset, ǉ3 is either 0° or 90 °. This leads to the following equations: 164 Industrial Robotics: Theory, Modelling and Control ′θθθ π ′ θθθθ π ′θθ θ­ θ=° °== ®θ= ° °¯     24 35 26 1 13 24 35 26 1 34 25 36uuu- u / 2 3uuuu- u / 2 41u- uu 3e e e e for 0ˆCe e e e e e e e for 90 (62) θ′′′++ θ = °­′′=+++ = ®′′ ′++ θ = °¯1331 22 13 3u 4 1 31 22 13 4 2 31 22 13 3s u s u s u for 0rs u s u s u d e us u s u s u for 90 (63) Here, ′=−112ss a , ′′ ′=+11 4ssd , ′=+224ssd , a n d ′=+331ssa . θθ θ θπ ′ θθθθθ π­ θ=° °=®θ= ° °¯    31 3 24 35 26 1 31 13 24 35 26 1uu u u - u / 2 2 42uuuuu- u / 2 2e e e e e for 0ˆC e e e e e e for 90 (64) Here, ′θ= θ+ °44 90 . θθ θθ θ θ θθ θ­ +θ = ° °=+ = ®+θ = ° °¯     31 31 3 31 31 22 33 31 31 13uu 22 4 2 2uu u u 42 2 2 4 2uu u 22 4 2 2s e u d e u for 0rs e u d e e e u se u de e u f o r 9 0 (65) θθ θθ π ′ θθ θθθ π­ θ=° °==®θ= ° °¯     31 22 4 35 26 1 31 22 14 35 26 1uu uu- u / 2 3 43 44uu- uuu- u / 2 3e e e e e for 0ˆˆCC e e e e e e for 90 (66) Here, ′θ= θ+ °55 90 . θθ θθθθ=+ 31 22 31 22 33 24uu uuuu 43 3 3 5 3r s eeud eeeeu θθ θθ θθ θθ θ­ +θ = ° °=®+θ = ° °¯    31 22 31 22 4 31 22 31 22 14uu uu 33 5 3 3 uu uu- u 33 5 3 3s e e u d e e u for 0 s e e u d e e e u for 90 (67) θθ θθ θθθθ=++  31 22 31 22 31 22 33 24uu uu uuuu 44 2 1 3 3 5 3r a eeus eeud eeeeu θθ θθ θθ θθ θθ θθ θ­ ++ θ = ° °=®++ θ = ° °¯      31 22 31 22 31 22 4 31 22 31 22 31 22 14uu uu uu 21 33 5 3 3 uu uu uu- u 21 33 5 3 3a e e u s e e u d e e u for 0 a e e u s e e u d e e e u for 90 (68) The constant joint angle ǉ3 associated with the prismatic joint J 3 for the sub- group of the main group 5 is either 0 ° or 90 °. This leads to the following equa- tions: θθ θ θθ θ ′θθ θ­ θ=° °== ®θ= ° °¯     3 124 2 5 3 6 3 1234 2 5 3 6 3 124 2 5 3 6uu u 3uu u 51uu u 3e e e for 0ˆCe e e e e e for 90 (69) Structure Based Classification and Kinematic Analysis of … 165 Here, ′θ= θ+ °124 124 90 . θθ=+ +31 31 2uu 51 1 1 2 1 3 3ra e u a eu s u (70) For the subgroup of the main group 6, the rotation matrix is as given in the main group equations and the wrist point location is expressed as θθθ θθθ=+ 31 22 33 31 22 33 4uuu uuu 61 3 1 4 1ra e e e u a e e eu (71) The constant joint angles associated with the prismatic joints for the subgroup of the main group 7 are as follows: The joint angle ǉ2 is 90 ° for the prismatic joint J 2 and the joint angle ǉ3 is either 0 ° or 90 ° for the prismatic joint J 3. This leads to the following equations: ′θθθθ π ′θθ θθ π ′′θθθθ π­ θ=° °== ®θ= ° °¯      31 24 35 26 1 31 23 4 35 26 1 31 24 35 26 1uuuu- u / 2 3uu uu- u / 2 71uuuu- u / 2 3e e e e e for 0ˆCe ee e e e e e e e for 90 (72) Here, ′θ= θ+ °11 90 and ′θ= θ+ °44 90 . θθ=+ −31 31uu 71 2 3 2 2 3 1rs u a e u s e u (73) For the subgroups of the main group 8, the rotation matrix is as given in the main group equations and the wrist point locations are expressed as θθ θ θ=+ +  31 31 2 31 2 23uu u u 81 1 1 3 2 4 3ra e u d eu d ee u (74) θθ θ θ θ=+ + +   31 31 2 31 2 31 2 23uu u u u 82 1 1 2 1 3 2 4 3ra e u a eu d eu d ee u (75) For the subgroup of the main group 9, the rotation matrix is as given in the main group equations and the wrist point location is expressed as θθ θθ θ θ θ=+ + +    31 31 22 31 22 3 31 22 3uu uu u u u 91 1 1 2 1 3 1 45 3ra e u a e e u a e eu d e eu 31 22 3 34uu u 41ae e e uθθ θ+  (76) 166 Industrial Robotics: Theory, Modelling and Control Classification Based Inverse Kinematics In the inverse kinematics problem, the elements of ˆC and r are available and it is desired to obtain the six joint variables. For this purpose, the required elements of the r a n d ˆC matrices can be extracted as follows: =T iiru r and =T ij i jˆcu C u (77) For most of the manipulators, which are called separable , the wrist point posi- tion vector contains only three joint variables. The most typical samples of such manipulators are those with spherical wrists (Pieper & Roth, 1969). Therefore, for this large class of manipulators, Equation (14) is first used to ob- tain the arm joint variables , and then Equation (11) is used to determine the re- maining three of the wrist joint variables contained in the ˆC matrix. After ob- taining the arm joint variables, ˆC equation is arranged in such a way that the arm joint variables are collected at one side of the equation leaving the remain- ing joint variables to be found at the other side within a new matrix ˆM, which is called modified orientation matrix . The three arguments of ˆM happen to be the wrist joint variables and they appear similarly as an Euler Angle sequence of three successive rotations. After this preparation, the solution of the modified orientation equation directly gives the wrist joint variables. The most com- monly encountered sequences are given in Table 5 with their solutions and singularities. In the table, σ=± 1 indicates the alternative solutions. When the sequence becomes singular, the angles φ1 and φ3can not be determined and the mobility of the wrist becomes restricted. For a more detailed singularity analy- sis, see (Özgören, 1999 and 2002). However, there may also be other kinds of separable manipulators for which it is the ˆC matrix that contains only three joint variables. In such a case, the solu- tion is started naturally with the ˆC equation and then the remaining three joint variables are found from the r equation. Besides, there are inseparable manipulators as well for which both of the ˆC and r equations contain more than three joint variables. The most typical sample of this group is the Cincin-nati Milacron-T3 (CM-T3 566 or 856) robot. It has four unknown variables in each of its ˆC and r equations. For such manipulators, since the ˆC and r equations are not separable, they have to be solved jointly and therefore a closed-form inverse kinematic solution cannot be obtained in general. Never- theless, for some special forms of such manipulators, Cincinnati Milacron-T3 being one of them, it becomes possible to obtain a closed-form inverse kine- matic solution. For a more detailed analysis and discussion of inverse kinemat- ics covering all possible six-joint serial manipulators, see (Özgören, 2002). Structure Based Classification and Kinematic Analysis of … 167 Table 5. Wrist Joint Variables in the Most Commonly Encountered Sequences For all the groups of six-joint manipulators considered in this chapter, there are two types of inverse kinematic solution, namely the closed-form (CF) solu- tion and the parametrized joint variable (PJV) solution where one of the joint variables is temporarily treated as if it is a known parameter. For many of the six-joint manipulators, a closed-form solution can be obtained if the wrist point location equation and the end-effector orientation equation are separable, i.e. if it is possible to write the wrist point equation as = 123 rr ( q , q , q ) (78) where q k denotes the kth joint variable, which is either ǉkor s k. Since there are three unknowns in the three scalar equations contained in Equation (78), the unknowns q 1, q2, q3 can be directly obtained from those equations. The end- effector orientation variables q 4, q5, q6 are then obtained by using the equation forˆC. In general, the necessity for a PJV solution arises when a six-joint manipulator has a non-zero value for one or more of the structural length parameters a 4, a5, and d 5. However, in all of the manipulators that are considered here, only d 5 exists as an offset at the wrist. In this case, r will be a function of four vari- ables as = 1234 r r(q ,q ,q ,q ) (79) Since, there are more unknowns now than the three scalar equations contained in Equation (79), the variables q 1, q2, q3, and q 4 can not be obtained directly. So, one of the joint variables is parametrized and the remaining five joint variables are obtained as functions of this parametrized variable from five of the six sca- lar equations contained in the ˆC and r equations. Then, the remaining sixth scalar equation is solved for the parametrized variable using a suitable nu- merical method. Finally, by substituting the numerically found value of this joint variable into the previously obtained expressions of the remaining joint variables, the complete solution is obtained. 168 Industrial Robotics: Theory, Modelling and Control There may also be a situation that a six-joint manipulator can have non-zero values for the structural parameters d 5 and a 5 so that = 12345 r r(q ,q ,q ,q ,q ) (80) In this case, two joint variables can be chosen as the parametrized joint vari- ables and the remaining four joint variables are obtained as functions of these two parametrized variables. Then, using a suitable numerical method, the re- maining two equations are solved for the parametrized joint variables. After-wards, the inverse kinematic solution is completed similarly as described above. However, if desired, it may also be possible to reduce the remaining two equations to a single but rather complicated univariate polynomial equa- tion by using methods similar to those in (Raghavan & Roth, 1993; Manseur & Doty, 1996; Lee et al, 1991). Although the analytical or semi-analytical solution methods are necessarily dependent on the specific features of the manipulator of concern, the proce- dure outlined below can be used as a general course to follow for most of the manipulators considered here. The wrist location equation is manipulated symbolically to obtain three scalar equations using the simplification tools given in Appendix A. The three scalar equations are worked on in order to cast them into the forms of the trigonometric equations considered in Appendix C, if they are not so already. As a sufficient condition for a CF solution, if there exists a scalar equation containing only one joint variable, or if such an equation can be generated by combining the other available equations, it can be solved for that joint variable to start the solution. If such an equation does not exist or cannot be generated, then the PJV method is used. Thus, except the parametrized joint variable, there will again be a single equation with a single unknown to start the solution. The two remaining scalar equations pertaining to the wrist location are then used to determine the remaining two of the arm joint variables again by using the appropriate ones of the trigonometric equation solutions given in Appendix C. Once the arm joint variables are obtained, the solution of the orientation equation for the three wrist joint variables is straightforward since it will be the same as the solution pattern of one of the commonly encountered rotation sequences, such as 1-2-3, 3-2-3, etc, which are shown in Table 5. Structure Based Classification and Kinematic Analysis of … 169 When the manipulators in Table 4 are considered from the viewpoint of the so- lution procedure described above, they are accompanied by the designations CF (having inverse kinematic solution in closed-form) and PJV (having inverse kinematic solution using a parametrized joint variable). As noted, almost all the manipulators in Table 4 are designated exclusively either with CF or PJV. Exceptionally, however, the subgroups 4.3 and 4.4 have both of the designa- tions. This is because the solution type can be either CF or PJV depending on whether ǉ3= 0° or ǉ3= 90°, respectively. In this section, the inverse kinematic solutions for the subgroups 1.1 (e.g. KUKA IR 662/10), 1.7 (e.g. GMF S-3 L or R) and 4.4 (e.g. Unimate 4000) are given in order to demonstrate the solution procedure described above. As in- dicated in Table 4, the subgroup 1.1 can have the inverse kinematic solution in closed-form, whereas the subgroup 1.7 necessitates a PJV solution. On the other hand, for the subgroup 4.4, which has a prismatic joint, the inverse ki-nematic solution can be obtained either in closed-form or by using the PJV method depending on whether the structural parameter ǉ 3 associated with the prismatic joint is 0° or 90°. Although ǉ3= 0° for the enlisted industrial robot of this subgroup, the solution for ǉ3= 90° is also considered here for sake of dem- onstrating the application of the PJV method to a robot with a prismatic joint as well. It should be noted that, the subgroups 1.1 and 1.7 are examples to ro- bots with only revolute joints and the subgroup 4.4 is an example to robots with revolute and prismatic joints. The subgroups 1.1 and 1.7 are considered particularly because the number of industrial robots is high within these cate- gories. As an additional example, the ABB IRB2000 industrial robot is also con- sidered to demonstrate the applicability of the method to manipulators con- taining closed kinematic chains. However, the solutions for the other subgroups or a new manipulator with a different kinematic structure can be obtained easily by using the same systematic approach. 4.1 Inverse Kinematics of Subgroups 1.1 and 1.7 For all the subgroups of the main group 1, the orientation matrix is θθ θθθ= 31 22 3 34 25 36uu uuu 1ˆCee eee ( 8 1 ) Since all the subgroups have the same 1ˆC matrix, they will have identical equations for ǉ4,ǉ5 and ǉ6. In other words, these variables can always be de- termined from the following equation, after finding the other variables some-how from the wrist location equations of the subgroups: θθθ=34 25 36uuu 1ˆeee M ( 8 2 ) 170 Industrial Robotics: Theory, Modelling and Control Here,θθ=22 3 31-u -u 11ˆ ˆMe e C a n d ǉ23=ǉ2 + ǉ3. Since the sequence in Equation (82) is3-2-3 , using Table 5, the angles ǉ4,ǉ5 and ǉ6 are obtained as follows, assum- ing that ǉ1 and ǉ23 have already been determined as explained in the next sub- section: θ= σ σ45 2 3 5 1 3atan2 ( m , m ) (83) θ= σ −2 55 3 3 3 3atan2 ( 1 m , m ) (84) θ= σ σ65 3 2 5 1 3atan2 ( m , - m ) (85) Here,ǔ5= ±1 and =T ij i 1 jˆmu M u . Note that this 3-2-3 sequence becomes singular if ǉ5= 0 or θ= ±o 5 180 , but the latter case is not physically possible. This is the first kind of singularity of the manipulator, which is called wrist singularity . In this singularity with ǉ5= 0, the axes of the fourth and sixth joints become aligned and Equation (82) degener- ates into θ+ θ θθ θ== =   34 6 34 36 34 6 u( ) uu u 1ˆe e e e M (86) This equation implies that, in the singularity, ǉ4 and ǉ6 become arbitrary and they cannot be determined separately although their combination ǉ46=ǉ4 + ǉ6 can still be determined as θ=46 21 11atan2 (m , m ) . This means that one of the fourth and sixth joints becomes redundant in orienting the end-effector, which in turn becomes underivable about the axis normal to the axes of the fifth and sixth joints. 4.1.1 Inverse Kinematics of Subgroup 1.1 The wrist point position vector of this subgroup given in Equation (40) can be written again as follows by transposing the leading exponential matrix on the right hand side to the left hand side: θθθ=+31 22 22 3-u u u 11 2 1 4 3 era e u d eu (87) Premultiplying both sides of Equation (87) by TTT 123u, u, u and using the simplification tool E.8 in Appendix A, the following equations can be obtained. θ+ θ= θ+ θ 11 21 2 2 42 3r cos r sin a cos d sin (88) Structure Based Classification and Kinematic Analysis of … 171 θ− θ= 21 1 1r cos r sin 0 (89) =− θ + θ322 4 2 3r a sin d cos (90) Here, r 1, r2 and r 3 are the base frame components of the wrist position vector, 11r. From Equation (89), ǉ1 can be obtained as follows by using the trigonometric equation T1 in Appendix C, provided that +≠22 21rr0 : θ= σ σ11 2 1 1atan2 ( r , r ) and ǔ1= ±1 (91) If +=22 21rr0 , i.e. if ==21rr0 , i.e. if the wrist point is located on the axis of the first joint, the second kind of singularity occurs, which is called shoulder singu- larity . In this singularity, Equation (89) degenerates into 0 = 0 and therefore θ1 cannot be determined. In other words, the first joint becomes ineffective in po- sitioning the wrist point, which in turn becomes underivable in the direction normal to the arm plane (i.e. the plane formed by the links 2 and 3). To continue with the solution, let ρ=θ +θ11 1 2 1r cos r sin (92) Thus, Equation (88) becomes ρ=θ +θ12 24 2 3a cos d sin (93) Using Equations (90) and (93) in accordance with T6 in Appendix C, ǉ3 can be obtained as follows, provided that −≤ ρ≤2 11 : θ= ρσ− ρ2 32 3 2atan2 ( , 1 ) and ǔ3= ±1 (94) Here, ρ+ − +ρ=22 2 2 13 2 4 2 24(r ) ( a d ) 2a d (95) Note that the constraint on ρ2 implies a working space limitation on the ma- nipulator, which can be expressed more explicitly as − ≤ρ + ≤ +22 2 2 24 1 3 2 4(a d ) r (a d ) (96) 172 Industrial Robotics: Theory, Modelling and Control Expanding sin ǉ23 and cos ǉ23 in Equation (90) and (93) and rearranging the terms as coefficients of sin ǉ2 and cos ǉ2, the following equations can be ob- tained. ρ=ρ θ+ ρ θ 13 24 2 cos sin (97) 34 2 3 2rc o s s i n=ρ θ− ρ θ (98) Here, 324 3ad s i n ρ=+ θ (99) 44 3dc o s ρ=θ (100) According to T4 in Appendix C, Equations (97) and (98) give ǉ2 as follows, pro- vided that ρ+ρ≠22 34 0: () 24 1 3 3 4 3 3 1atan2 r , r θ= ρρ −ρρ −ρρ (101) Ifρ+ρ=22 34 0 , i.e. if ρ=ρ= 34 0 , the third kind of singularity occurs, which is called elbow singularity . In this singularity, both of Equations (97) and (98) de- generate into =00 . Therefore, θ2 cannot be determined. Note that, according to Equations (99) and (100), it is possible to have ρ=ρ= 34 0 only if =24ad and θ= ±o 3 180 . This means that the elbow singularity occurs if the upper and front arms (i.e. the links 2 and 3) have equal lengths and the front arm is folded back onto the upper arm so that the wrist point coincides with the shoulder point. In this configuration, the second joint becomes ineffective in positioning the wrist point, which in turn becomes underivable neither along the axis of the second joint nor in a direction parallel to the upper arm. As seen above, the closed-form inverse kinematic solution is obtained for the subgroup 1.1 as expressed by Equations (83)-(85) and (91)-(101). The com- pletely analytical nature of the solution provided all the multiplicities (indi- cated by the sign variables σ1,σ2, etc), the singularities, and the working space limitations alongside with the solution. 4.1.2 Inverse Kinematics of Subgroup 1.7 The wrist point position vector of this subgroup is given in Equation (46). From that equation, the following scalar equations can be obtained as done previously for the subgroup 1.1: Structure Based Classification and Kinematic Analysis of … 173 θ+ θ= θ+ θ − θ θ 11 21 2 2 42 3 5 2 34r cos r sin a cos d sin d cos sin (102) θ− θ= θ 21 1 1 54r cos r sin d cos (103) =− θ + θ + θ θ322 4 2 3 52 34r a sin d cos d sin sin (104) Here, r 1, r2 and r 3 are the components of the wrist position vector, 17r. Note that Equations (102)-(104) contain four unknowns ( ǉ1,ǉ2,ǉ3,ǉ4). Therefore, it now becomes necessary to use the PJV method. That is, one of these four un- knowns must be parametrized. On the other hand, Equation (103) is the sim- plest one of the three equations. Therefore, it will be reasonable to parametrize eitherǉ1 or ǉ4. As it is shown in (Balkan et al., 1997, 2000), the solutions ob- tained by parametrizing ǉ1 and ǉ4 expose different amounts of explicit infor- mation about the multiple and singular configurations of the manipulators be- longing to this subgroup. The rest of the information is concealed within the equation to be solved numerically. It happens that the solution obtained by pa- rametrizing ǉ4 reveals more information so that the critical shoulder singular- ity of the manipulator can be seen explicitly in the relevant equations; whereas the solution obtained by parametrizing ǉ1 conceals it. Therefore, ǉ4 is chosen as the parametrized joint variable in the solution presented below. As the starting step,ǉ1 can be obtained from Equation (103) as follows by using T3 in Appen- dix C, provided that +>22 21rr0 and +≥ ρ22 2 21 5rr : θ= − + σ + − ρρ22 2 12 1 1 1 2 5 5atan2 ( r , r ) atan2 ( r r , ) and ǔ1= ±1 (105) Here, ρ=θ55 4d cos (106) If +=22 21rr0 , which necessitates that ρ=50 o r θ= ±o 4 90, the shoulder singu- larity occurs. In that case, Equation (103) degenerates into 0 = 0 and therefore θ1 becomes arbitrary. The consequences are the same as those of the subgroup 1.1. On the other hand, the inequality constraint +≥ ρ22 2 21 5rr indicates a working space limitation on the manipulator. Equations (102) and (104) can be arranged as shown below: =θ +θ − ρ θ 1 2 2 4 23 6 23xa c o s d s i n c o s (107) 174 Industrial Robotics: Theory, Modelling and Control =− θ + θ + ρ θ 3 2 2 4 23 6 23ra s i nd c o s s i n (108) Here, ρ=θ65 4d sin (109) According to T9 in Appendix C, Equations (107) and (108) give ǉ3 as follows, provided that ρ+≥ ρ222 147d : 22 2 34 6 3 1 4 7 7atan2 (d , ) atan2 ( d , ) θ= − ρ+σ ρ+− ρρ andǔ3= ±1 (110) Here, ρ+−+ + ρρ=22 2 2 2 13 2 4 6 7 2(r ) ( a d ) 2a (111) As noted, the inequality constraint ρ+≥ ρ222 147d constitutes another limitation on the working space of the manipulator. Expanding sin ǉ23 and cos ǉ23 in Equation (107) and (108) and collecting the relevant terms as coefficients of sin ǉ2 and cos ǉ2, the following equations can be obtained. ρ=ρ θ+ρ θ 18 29 2 cos sin (112) =ρ θ−ρ θ 39 2 8 2rc o s s i n (113) Here, ρ=+ θ − ρ θ 824 3 6 3ad s i n c o s (114) ρ=θ + ρ θ 94 3 6 3dc o s s i n (115) According to T4 in Appendix C, Equation (112) and (113) give ǉ2 as follows, provided that ρ+ρ≠22 89 0: () 2 9 13 39 38 1atan2 r , r θ= ρρ −ρρ −ρρ (116) Ifρ+ρ=22 89 0 , the elbow singularity occurs. Then, θ2 becomes arbitrary with the same consequences as those of the subgroup 1.1. Structure Based Classification and Kinematic Analysis of … 175 Note that the matrix θθ=22 3 31-u -u 11ˆ ˆM e e C of this subgroup comes out to be a function of θ4 because the angles θ1 and θ= θ + θ23 2 3 are determined above as functions of θ4. Therefore, the equation for the parametrized joint variable ǉ4 is nothing but Equation (83), which is written here again as θ= θ = σ θ σ θ44 4 5 2 3 4 5 1 3 4f ()a t a n 2 [m () , m () ] andǔ5= ±1 (117) As noticed, Equation (117) is a highly complicated equation for the unknown ǉ4 and it can be solved only with a suitable numerical method. However, after it is solved for θ4, by substituting ǉ4 into the previously derived equations for the other joint variables, the complete solution is obtained. Here, it is worth to mention that, although this solution is not completely analytical, it is still ca- pable of giving the multiple and singular configurations as well as the working space limitations. Although the PJV method is demonstrated above as applied to the subgroup 1.7, it can be applied similarly to the other subgroups that require it. For ex- ample, as a detailed case study, its quantitatively verified application to the FANUC ArcMate Sr. robot of the subgroup 1.9 can be seen in (Balkan et al. 1997 and 2000). 4.2 Inverse Kinematics of Subgroup 4.4 The inverse kinematic solution for the subgroup 4.4 is obtained in a similar manner and the related equations are given in Table 6 indicating the multiple solutions by i1 σ= ± . The orientation matrix 4ˆC is simplified using the kine- matic properties of this subgroup and denoted as 44ˆC . Actually, the Unimate 4000 manipulator of this subgroup does not have two versions with ǉ3= 0° and ǉ3= 90° as given below. It has simply ǉ3= 0° and the other configuration is a fictitious one. However, aside from constituting an additional example for the PJV method, this fictitious manipulator also gives a design hint for choosing the structural parameters so that the advantage of having a closed-form in- verse kinematic solution is not lost. 176 Industrial Robotics: Theory, Modelling and Control Table 6. Inverse Kinematic Solution for Subgroup 4.4 Structure Based Classification and Kinematic Analysis of … 177 4.3 Inverse Kinematics of Manipulators with Closed Kinematic Chains The method of inverse kinematics presented here is not limited to the serial manipulators only. It can also be applied to robots with a main open kinematic chain supplemented with auxiliary closed kinematic chains for the purpose of motion transmission from the actuators kept close to the base. As a typical ex- ample, the ABB IRB2000 industrial robot is selected here in order to demon- strate the application of the method to such manipulators. The kinematic sketch of this manipulator with its four-link transmission mechanism is shown in Figure 2. It can be seen from the kinematic sketch that the four-link mecha- nism can be considered in a sense as a satellite of the manipulator’s main open kinematic chain. In other words, its relative position with respect to the main chain is determined completely by the angle ǉ Once ǉ3 is found by the inverse kinematic solution, the angular position of the third joint actuator φ3 can be determined in terms of ǉ3 as follows by considering the kinematics of the four- link mechanism: φ=ψ+θ 32 2 (118) Here, ψ= + σ + +22 2 23atan2(b, a) atan2( a b c , c) and σ3= ±1 (119) =+ θ 24 3 a a b sin , =θ 43 bb c o s , ++−=− θ2222 22432 4 3 22abbba bcs i n2b b (120) Gu3(0) θ1Gu3(1 )Gu3(2)O3 O0O1, Gu3(5),Gu3(6)Gu3(4)O2 Gu1(1 )Gu1(3)Gu1(2) Gu3(3)Gu1(4) xx θ2<0x Gu1(5)θ5 O4O5O6,,θ3 a2a3 d4 θ3 a2 b2b3b4 O2 O1AB θ2ψ4=π 2−θ3 ψ2 φ3 a) Complete Kinematic Structure b) Closed Kinematic Chain Details Figure 2. Kinematic Sketch of the ABB IRB2000 Manipulator 178 Industrial Robotics: Theory, Modelling and Control However, in this particular manipulator, the four-link mechanism happens to be a parallelogram mechanism so that ψ=ψ 24 and πφ=θ + −θ32 32. Note that, if the auxiliary closed kinematic chain is separated from the main open kine- matic chain, then this manipulator becomes a member of the subgroup 1.4 and the pertinent inverse kinematic solution can be obtained in closed-form simi- larly as done for the subgroup 1.1. 4.4 Comments on the Solutions The inverse kinematic solutions of all the subgroups given in Table 4 are ob-tained. In main group 1, subgroup 1.2 has parameter d 2 in excess when com- pared to subgroup 1.1. This has an influence only in the solution of ǉ1. The re- maining joint variable solutions are the same. Similarly subgroup 1.3 has parameter a1and subgroup 1.5 has d 23 (d 2+d3) in excess when compared to subgroup 1.1. Considering subgroup 1.3, only the solutions of ǉ2 and ǉ3 are dif- ferent than the solution of subgroup 1.1, whereas the solution of subgroup 1.5 is identical to the solution of subgroup 1.2 except that d 23 is used in the formu- las instead of d 2. Subgroup 1.6 has parameter a 1 in excess compared to sub- group 1.4. Thus, the solutions of ǉ2 and ǉ3 are different than the solution of subgroup 1.4. Subgroup 1.8 has parameter d 2 and subgroup 1.9 has a 1 and a 3 in excess when compared to subgroup 1.7. Considering subgroup 1.8, only the solution of ǉ1 is different. For subgroup 1.9, a 1 and a 3 causes minor changes in the parameters defined in the solutions of ǉ2 and ǉ3. The last subgroup, that is subgroup 1.10 has the parameters a 1, a3 and d 3 in excess when compared to subgroup 1.7. ǉ1,ǉ2 and ǉ3 have the same form as they have in the solution of subgroup 1.7, except the minor changes in the parameters defined in the solu- tions. It can be concluded that d 2 affects the solution of ǉ2 and a 1 affects the so- lutions of ǉ2 and ǉ3 through minor changes in the parameters defined in the so- lution. In main group 2, subgroup has parameter d 2 in excess when compared to subgroup 2.3 and thus the solution of ǉ1 has minor changes. Subgroup 2.5 has parameter a 1 in excess when compared to subgroup 2.4 and the solutions ofǉ2 and ǉ3 have minor changes. Subgroup 2.6 has parameter d 4 in excess and the term including it is identical to the term including d 2 in subgroup 2.5 ex- ceptǉ1 which includes d 4 instead of d 2. In main group 8, subgroup 8.2 has the parameter a 2 in excess compared to subgroup 8.1. This leads to a minor change in the solutions of ǉ1 and ǉ2 through the parameters defined in the solution. For main group 1, if ǉ1 is obtained analytically ǉ4,ǉ5 and ǉ6 can be solved in closed-form. Any six-joint manipulator belonging to main group 2 can be solved in closed-form provided that ǉ1 is obtained in closed-form. Using ǉ1, ǉ234 can easily be determined using the orientation matrix equation. Since ǉ4 appears in the terms including a 4, d 5 and a 5 as ǉ234, this lead to a complete Structure Based Classification and Kinematic Analysis of … 179 closed-form solution. In main group 3, directly obtaining ǉ1 and ǉ2 analytically results in a complete closed-form solution provided that the kinematic pa- rameter a 5= 0. In main group 6, even there is the offset d 5, a complete closed- form solution can be obtained since the term of d 5 does not include ǉ4. More- over, if ǉ1 can be obtained in closed-form and a 5 is a nonzero kinematic pa- rameter, simply solving ǉ345 from ˆC leads to a complete closed-form solution. Among all the main groups, main group 5 has the least complicated equations. Joint variable ǉ1234 is directly obtained from ˆC and if d 5 or a 4 are kinematic pa- rameters of a manipulator belonging to this main group, the whole solution will be in closed-form. The offset in main group 9 does not lead to a PJV solu- tion since it does not include ǉ4 in the term including it. Also ǉ1 even if a 5 is a nonzero kinematic parameter, a closed-form solution can be obtained using ǉ45 provided that ǉ1 is obtained analytically. Since α4 of main groups 6 and 9 is 0°, ǉ4 does not appear in the term including offset d 5. The kinematic parameter a 5 does not appear in any of the subgroups, so it can be concluded that this pa- rameter might appear only in some very specific six-joint manipulators. On the other hand, the more the number of prismatic joints, the easier the solution is, since the joint angles become constant for prismatic joints. Conclusion In this chapter, a general approach is introduced for a classification of the six-joint industrial robotic manipulators based on their kinematic structures, and a complete set of compact kinematic equations is derived according to this clas- sification. The algebraic tools based on the properties of the exponential rota- tion matrices have been very useful in simplifying the kinematic equations and obtaining them in compact forms. These compact kinematic equations can be used conveniently to obtain the inverse kinematic solutions either analytically in closed forms or semi-analytically using parametrized joint variables. In ei- ther case, the singular and multiple configurations together with the working space limitations are also determined easily along with the solutions. Moreover, both types of these inverse kinematic solutions provide much easier programming facilities and much higher on-line application speeds compared to the general manipulator-independent but purely numerical solution meth- ods. On the other hand, although the classification based method presented here is naturally manipulator-dependent, it is still reasonable and practical to use for the inverse kinematic solutions, because a manipulator having all non-zero ki- nematic parameters does not exist and it is always possible to make a consid- erable amount of simplification on the kinematic equations before attempting to solve them. 180 Industrial Robotics: Theory, Modelling and Control References Balkan, T.; Özgören, M. K., Arıkan, M. A. S. & Baykurt M. H. (1997). A Method of Inverse Kinematics Solution for a Class of Robotic Manipulators, CD- ROM Proceedings of the ASME 17th Computers in Engineering Conference , Paper No: DETC97/CIE-4283, Sacramento, CA. Balkan, T.; Özgören, M. K., Arıkan, M. A. S. & Baykurt, M. H. (1999). A Kine- matic Structure Based Classification of Six-DOF Industrial Robots and a Method of Inverse Kinematic Solution, CD-ROM Proceedings of the ASME 1999 Design Engineering Technical Conference , Paper No: DETC99/DAC- 8672, Las Vegas, Nevada. Balkan, T.; Özgören, M. K., Arıkan, M. A. S. & Baykurt, M. H. (2000). A Method of Inverse Kinematics Solution Including Singular and Multiple Configurations for a Class of Robotic Manipulators, Mechanism and Ma- chine Theory , Vol. 35, No. 9, pp. 1221-1237. Balkan, T.; Özgören, M. K., Arıkan, M. A. S. & Baykurt, M. H. (2001). A Kine- matic Structure-Based Classification and Compact Kinematic Equations for Six-DOF Industrial Robotic Manipulators, Mechanism and Machine Theory , Vol. 36, No. 7, pp. 817-832. Denavit, J. & Hartenberg, R. S. (1955). A Kinematic Notation for Lower-Pair Mechanisms Based on Matrices, ASME Journal of Applied Mechanisms , pp. 215-221. Hunt, K. H. (1986). The Particular or the General (Some Examples from Robot Kinematics), Mechanism and Machine Theory , Vol. 21, No. 6, pp. 481-487. Lee H. Y.; Woernle, C. & Hiller M. (1991). A Complete Solution for the Inverse Kinematic Problem of the General 6R Robot Manipulator, Transactions of the ASME, Journal of Mechanical Design , Vol. 13, pp. 481-486. Manseur, R. & Doty, K. L. (1996). Structural Kinematics of 6-Revolute-Axis Ro- bot Manipulators, Mechanism and Machine Theory , Vol. 31, No. 5, pp. 647- Özgören, M. K. (1987). Application of Exponential Rotation Matrices to the Ki- nematic Analysis of Manipulators, Proceedings of the 7th World Congress on the Theory of Machines and Mechanisms , pp. 1187-1190, Seville, Spain. Özgören, M. K. (1994). Some Remarks on Rotation Sequences and Associated Angular Velocities, Mechanism and Machine Theory , Vol. 29, No. 7, pp. 933- Özgören, M. K. (1995). Position and Velocity Related Singularity Analysis of Manipulators, Proceedings of the 9th World Congress on the Theory of Ma- chines and Mechanisms , Milan, Italy. Özgören, M. K. (1999). Kinematic Analysis of a Manipulator with its Position and Velocity Related Singular Configurations, Mechanism and Machine Theory , Vol. 34, No. 7, pp. 1075-1101. Structure Based Classification and Kinematic Analysis of … 181 Özgören, M. K. (2002). Topological Analysis of 6-Joint Serial Manipulators and Their Inverse Kinematic Solutions, Mechanism and Machine Theory , Vol. 37, pp. 511-547. Pieper D. L. & Roth B. (1969). The Kinematics of Manipulators under Com- puter Control, Proceedings of the 2nd International Congress for the Theory of Machines and Mechanisms , pp. 159–168, Zakopane, Poland. Raghavan, B. & Roth, B. (1993). Inverse Kinematics of the General 6R Manipu- lator and Related Linkages, Transactions of the ASME, Journal of Mechanical Design , Vol. 115, pp. 502-508. Wampler, C. W. & Morgan, A. (1991). Solving the 6R Inverse Position Problem Using a Generic-Case Solution Methodology, Mechanism and Machine The- ory, Vol. 6, Vol. 1, pp. 91-106. Wu, C. H. & Paul, R. P. (1982). Resolved Motion Force Control of Robot Ma- nipulator, IEEE Transactions on Systems, Man and Cybernetics , Vol. SMC 12, No. 3, pp. 266-275. 182 Industrial Robotics: Theory, Modelling and Control Appendix A Exponential Rotation Matrix Simplification Tools (Özgören, 1987-2002; Balkan et al., 2001) E.1 : θ− θ=ik iku1 - u(e ) e E.2 : θ=iku ii euu E.3 : θ=ik Tu T iiue u E.4 : θθ + θ θ θ==  ij ij ki jk ik uu ( ) u uee e e E.5 : ππ=iiu- uee E.6 : θθ ππ= j ij ii un u/ 2 - u/ 2ee e e where = ij i jnu u . E.7 : ππ θθ= jj ik ik uu u- uee e e E.8 : θ=θ + θiku jj i j euu c o s( u u ) s i n for i ≠ j E.9 : θ=θ + θik Tu T T jj j iue u c o s ( u u )s i n for i ≠ j E.10 : θθ== ik ik i-u u u 0 ˆee e IStructure Based Classification and Kinematic Analysis of … 183 Appendix B List of Six-joint Industrial Robots Surveyed (Balkan et al., 2001) 184 Industrial Robotics: Theory, Modelling and Control Appendix C Solutions to Some Trigonometric Equations Encountered in Inverse Kinematic Solu- tions The two-unknown trigonometric equations T5-T8 and T9 become similar to T4 and T0c respectively once ǉj is determined from them as indicated above. Then,ǉi can be determined as described for T4 or T0c. 1856 Inverse Position Procedure for Manipulators with Rotary Joints Ibrahim A. Sultan Introduction Industrial robot manipulators are essentially spatial linkages that consist of rigid bodies connected by joints. Even though many types of joints (which are also known as kinematic pairs) are available for use in mechanical linkages, only two types are employed for robot manipulators. These are the revolute, or rotary, joints (referred to in literature as R) and the prismatic, or sliding, joints (referred to as P). These specific types allow a single degree of freedom relative movement between adjacent bodies; and are easier to drive and con- trol than other kinematic pairs. Normally every joint on the manipulator is in- dependently driven by a dedicated motor. It is central to kinematic control of manipulators to calculate the sets of joint-motor displacements which corre- spond to a desired pose (i.e. position and orientation) at the end-effector. The mathematical procedure which is followed to achieve this purpose is often re- ferred to as, Inverse Position Analysis . This analysis presents a special difficulty in the field of Robotics as it is associated with the use of intricate spatial ge-ometry techniques. The complexity of the analysis increases substantially with the number of rotary joints on the manipulator structure. For this reason a considerable part of the published literature is mainly concerned with the revolute-joint manipulators. Published literature reveals that various methods have been proposed to solve the inverse position problem of manipulators. These methods range from Jacobian-based iterative techniques to highly sophisticated levels of equation- manipulation intended to reduce the whole model into a polynomial with thousands of mathematical terms. However, most industrial robots are de- signed with geometric features (such as parallelism and perpendicularity) to make it possible for simple inverse position solutions to be obtained in closed forms suitable for real time control. Another geometric aspect that leads to simplified inverse solutions is the spherical wrist design, which entails that the last three joints on the manipulator structure intersect at one point. This usu- ally suggests that these three joints (also known as the wrist joints) have the main task of orienting (rather than placing) the end-effector in space. In this 186 Industrial Robo tics: Theory, Modelling and Control case it should be possible to regard the manipulator as consisting of two sepa- rate parts where the first part (referred to as the arm) consists of the first three joints, counting from the stationary base, on the structure. The task of the arm is to place the end-effector origin (i.e. the point of intersection of the last three joint axes) at a defined point in space. The solution for this first part can be ob- tained separately before proceeding to find the angles of the last three joints which will result in giving the end-effector its desired spatial orientation. The work presented in this paper adopts this strategy to propose a mathematical procedure, for the arm inverse solution, based on assigning local coordinates at every joint, and utilising the properties of rotation to relate these coordi-nates. A model manipulation technique is then employed to obtain the arm inverse solution in terms of one polynomial. A kinematic synthesis discussion is then presented for the arm structure in terms of local coordinates to reflect on the number of solutions expected from the polynomial. It will be shown that the concept of intersecting spatial circles offers a good ground to compre- hend the kinematics of revolute-joint manipulators. Moreover, models are presented for the wrist structure to obtain a full inverse kinematic solution for the robot manipulator. A solved example is demonstrated to prove the valid- ity of the method presented. Literature Survey Published literature reveals that the homogeneous transformation matrix which was developed as far back as 1955 has extensively been employed for the analysis of robot manipulators. The matrix involves the use of four pa- rameters, usually referred to as the DH-parameters, intended to perform trans- formation between two spatial Cartesian coordinate systems (Denavit and Hartenberg, 1955). Recently, other kinematic models have been proposed by researchers to deal with the drawbacks of the DH presentation (Sultan and Wager, 1999). This is particularly important if the model is going to be imple- mented for robot calibration purposes. The theory of dual-number algebra was introduced into the field of kinematics back in the 1960’s (Yang and Freu- denstein, 1964); and it did appeal to researchers in the field of robot kinematics (Pennock and Yang, 1985; Gu and Luh, 1987; Pardeep et al, 1989). In addition to these approaches, which are based on matrices, vector methods were also employed in the field of kinematic analysis of robots (Duffy, 1980; Lee and Li- ang, 1988A and 1988B).Many industrial robots possess parallel and intersecting joint-axes and their direct-position models can be inverted analytically such that closed-form solu- tions may be obtained for the joint-displacements (Gupta, 1984; Pennock and Yang, 1985; Pardeep et al, 1989; Wang and Bjorke, 1989). Inverse Position Procedure for Man ipulators with Rotary Joints 187 Spherical-wrist manipulators have their last three joint-axes intersecting at a common point. For these manipulators the position of the end-effector in space is determined only by the displacements performed about the first three joint-axes. This concept is often referred to as the position-orientation decoup- ling; and has been utilised to produce a closed form solution, for the inverse position problem of simple structure robots, efficient enough to be imple- mented for computer control (Pieper and Roth, 1969). Inverse position tech- niques have been proposed to utilise the position-orientation decoupling of industrial robot of arbitrarily directed axes (Sultan, 2000; Sultan and Wager, 2001). As such these techniques do not rely on any particular spatial relations (e.g. parallelism or perpendicularity) between the successive joint-axes. In fact, approaches which utilise these particular geometric features to produce the model equations are likely to produce positioning errors when used for ro- bot control since the actual structures always deviate from their intended ideal geometry. Iterative techniques have been employed for the inverse position analysis of general robot manipulators. Many of these techniques involve the computa- tion of a Jacobian matrix which has to be calculated and inverted at every it- eration. The solution in this case may be obtained by a Newton-Raphson tech- nique (Hayati and Reston, 1986) or a Kalman filter approach (Coelho and Nunes, 1986). However, the inversion of the system Jacobian may not be pos- sible near singular configurations (where the motion performed about one joint-axis produces exactly the same effect, at the end-effector, as the motion performed about another axis, hence resulting in loss of one or more degrees of freedom). Therefore, a singularity avoidance approach has been reported where the technique of damped least-squares is used for the analysis (Chia- verini et al, 1994). However, this technique seems to be rather sluggish near singular points where extra computational procedure may have to be in- volved. Optimisation techniques have also been employed to solve the inverse- position problem of manipulators whereby a six-element error vector was im- plemented for the analysis (Goldenberg et al, 1985). The vector combines the current spatial information (position and orientation) of the robot hand and compares it to the desired pose to produce error values. Published literature in the area of optimisation report a technique by which the robot is moved about one joint at a time to close an error gap (Mahalingam and Sharan, 1987; Wang and Chen, 1991; Poon and Lawrence, 1988). More recent research effort demonstrates valuable inputs form such areas as neural networks (Zhang et al, 2005) and fuzzy techniques (Her et al, 2002) to the field of robot inverse kine- matics. It has been shown that the kinematic behaviour of robots can be described in terms of a set of polynomials that can be solved iteratively (Manseur and Doty 1992a, 1992b and 1996). One such method features a set of eight polynomials 188 Industrial Robo tics: Theory, Modelling and Control which were solved numerically to obtain different possible solutions to the in- verse position problem; it could therefore be concluded that the maximum number of meaningful solutions to the inverse position problem of a general robotic structure is 16 (Tsai and Morgan 1985), rather than 32 as had previ- ously been suggested (Duffy and Crane, 1980). However it has been pointed out that a manipulator with 16 different real inverse position solutions can sel- dom be found in real life (Manseur and Doty, 1989). In reality most manipula- tors are designed to possess up to 8 solutions of which only one or two can be physically attained. It is possible to express the inverse position problem of robots in terms of a 16 degree polynomial in the tan-half-angle of a joint-displacement (Lee and Liang 1988a & 1988b; Raghavan and Roth 1989). However it has been argued that the coefficients of such a polynomial are likely to contain too many terms which may render such a tack impractical to use (Smith and Lipkin 1990). Also, these high order polynomials are obtained by evaluating the eliminants of hyper-intricate determinants which may be impossible to handle symboli- cally in the first place. This may have motivated some researchers (Manocha and Canny 1992; Kohli and Osvatic 1993) to reformulate the solutions in terms of eigenvalue models in order to simplify the analysis and avoid numerical complications. However, a numerical technique has been introduced to obtain the inverse solutions without having to expand the system characteristic de- terminant (Sultan, 2002). The procedure introduced here for the inverse position analysis of robot ma- nipulators is described in the rest of this paper. Rotation of Vectors The unit vector ˆizin Figure (1) represents an axis of rotation in a spatial mechanism. It is required to obtain the new rotated vector, irv, which results from rotating the original vector iov (where ×≠ˆio ivz0 ) by an angle θˆiiz In or- der to do so, the Cartesian system ˆˆˆii ixyz may be introduced as follows, =Dˆˆ0iixz (1) where ˆ 1i=x . Then =× ˆ ˆˆii iy zx (2) The original vector, iov, and the rotated vector irv,can both be expressed with respect to the ˆˆˆii ixyz-frame in terms of local coordinates, n,m and l as follows, Inverse Position Procedure for Man ipulators with Rotary Joints 189 ˆˆ ˆ ˆˆ ˆ=+ + ½ ¾=+ + ¿io io i io i io i ir ir i ir i ir inml nmlvx y z vx y z (3) 0ˆx 0ˆy0ˆz Base Coordinatesiˆziˆxθι iˆyvioir Figure 1. Rotation of Vectors. where the local coordinates are given as follows; ˆ ˆ ˆio io i io io i io io in ml=½ °=¾ °= ¿vx v y vzD D D (4) Andcos sin cos sinir io i io i ir io i io i ir ionn m mm n llθθ θθ=− ½ °=+ ¾ °= ¿ (5) The inverse of this problem is encountered when ˆiz,iov and irv are all known and it is required to obtain the corresponding value of θi. With the values of the local coordinates known, iθcould be obtained as follows, atan2( , )i i r i o i ri o i r i o i ri o mn nm nn mm θ=− + (6) 190 Industrial Robo tics: Theory, Modelling and Control where the function atan2(y,x) is available in many computer algebra packages and compilers to compute the angle iθ (over the range of the whole circle) when its sine and cosine are both given. In this paper, the concepts mentioned above are used together with the suitable conditions of rotation to perform the inverse position analysis of the manipulator arm and wrist. The proposed analysis for the arm is given in the next section. Inverse Kinematics of the Arm The arm, which is the largest kinematic part of the manipulator, consists of three revolute joints connected through rigid links. Each joint, as shown in Figure (2), is represented by the spatial pose of its axis. The first joint-axis has a fixed location and orientation in space as it represents the connection be- tween the whole manipulator and the fixed frame. Any other joint-axis num- berican float in space as it rotates about the joint-axis number i–1. In the current context, the main function of the arm is to displace a certain spa- tial point from an initial known location to a required final position. In spheri- cal-wrist manipulators, this point is at the intersection of the wrist axes. In a calibrated (non-spherical-wrist) manipulator, it may represent a point on the sixth axis as close as possible to the fifth joint-axis. In Figure (2), the arm is re- quired to displace point pi to a final position pf. The position vectors,bpi and bpf respectively, of these two points are known with respect to the base coor- dinate system. As per Appendix A, any joint-axis ˆizis related to the successive axis, +1ˆiz, through a common normal, +1ˆix. This common normal is used to construct a local frame at the axis +1ˆizusing the relation, ++ +=×11 1ˆ ˆˆii iy zx . The shortest dis- tance,1ia+, between the axes, ˆizand+1ˆiz, is measured along +1ˆix which inter- sects ˆiz at the point pi and +1ˆiz at the point (1 )pii+. At the zero initial position which is shown in Figure (2), the axis 1ˆx is chosen to coincide with 2ˆx. In this figure, the position vectors, 3opi and 1rpf, of points pi and pf respectively with respect to the frames 33 3ˆˆˆxyz and 11 1ˆˆˆxyzmay be numerically calculated as follows, =− ½ ¾=− ¿11 33 2rb obpf pf p pi pi p (7) where1pand32p are the position vectors of the axes-attached, points 1p and 32p, respectively as measured from the origin of the base coordinates. Accord-Inverse Position Procedure for Man ipulators with Rotary Joints 191 ing to the concepts in (4) and (5), 1rpf can be described with respect to the 11 1ˆˆˆxyz-frame in terms of known local coordinates (1rn,1rm and 1rl). Also, 30pi can be described with respect to the 33 3ˆˆˆxyz-frame in terms of known local coordinates (3on,3om and 3ol). 1ˆz 2z 3ˆz 3ˆx2ˆx 1ˆx 3ˆy2ˆy 1ˆy a2 a 3d 2p1 p32p2p21pipf 3opi1rpf θ1θ2 θ3 0ˆx 0ˆy0ˆz Base Coordinates Figure 2. A General View of a 3R Manipulator Arm at Its Zero Position. It is understood that the vector 1rpf resulted from rotating another vector 1opf about the ˆiz axis by an angle, θ1 (i.e. a θ11ˆz-type rotation). The original vector, 1opf, can be expressed with respect to the 11 1ˆˆˆxyz-frame in terms of local coor- dinates (1on,1om and 1ol). Also, during the positioning process the vector 3opi will perform a θ33ˆz-type rotation to evolve into 3rpi which can be expressed with respect to the 33 3ˆˆˆxyz-frame in terms of local coordinates (3rn,3rm and 3rl). Therefore the two vectors, 1opf and 3rpi can be written as follows; 11 1 1 1 1 1 33 3 3 3 3 3ˆ ˆˆ ˆ ˆˆoo o o rr r rnml nml=+ + ½ ¾=+ + ¿pf x y z pi x y z (8) 192 Industrial Robo tics: Theory, Modelling and Control where the two equations above have four unknowns that need to be deter- mined. These four unknowns are 1on,1om,3rn and 3rm. The numerical values of the l-type local coordinates are calculated as follows; = ½ ¾= ¿D D33 3 11 1ˆ ˆro orl lpi z pf z (9) In fact the value of 3rl is calculated, and stored in a data file, once the manipu- lator has been calibrated and an initial position has been nominated; however, 1ol has to be calculated for every new desired end-effector position. Moreover, the end-effector positions which are defined by the vectors 1opf and 3rpi can be used to study the rotation about the middle joint-axis, 2ˆz. These same posi- tions can be expressed relative to a point, 2p, attached to 2ˆz, using the two re- spective vectors, 2rp and 20p as follows; =+ − ½ ¾=+ ¿21 2 2 2 2 23 3 3ˆ ˆ ˆro orda app f z x pp i x(10) where =− D22 1 2 2ˆ () d ppz It may be noted that 2rp and 20p are separated by a single rotation, θ22ˆz. The properties of this rotation may be utilised to show that, =DD22 22ˆˆorpi z pi z (11) and =DD22 22oo rrpi pi pi pi (12) Equations (7) to (12) may then be manipulated to obtain the following two lin- ear equations, 11 2 33 2 3 3 2 1 1 2 2ˆˆ ˆˆ ˆˆ ˆˆor r omml l d =+ − − yz yzz zz z DD D D (13) and ()222 1 2 1 2 21 33 3 3 1 1 3 2 2 1 21 21ˆˆ ˆˆ 22oo r i i r r omd a n a n a a d ld −=+ − + − − − yzp i p i p f p f z zDD D D (14) The concept in equations (3) and (5) may be employed to express the x 2-, y2- and z 2-components of a rotated vector 2r op which results from performing a θ22ˆz rotation on 20p. Then the coincidence of 2r op and 2rp may be described by,Inverse Position Procedure for Man ipulators with Rotary Joints 193 =DD22 22ˆˆr orpxpx (15) and =DD2222ˆˆr orp y p y (16) where =DD22 22ˆˆr orpzpz is already described in equation (13) , and the ex- panded forms of the (15) and (16) are given respectively as follows; () ( ) () ( )12 3 2 2 3 2 2 3 3 2 2 3 2 2 3 33 2 3 3 2 2 33 2 3 3 2 2ˆˆ ˆ ˆ ˆˆ ˆ ˆ ˆˆ ˆ ˆˆˆ ˆ ˆor r rrna c s n c s m la c la s−= − + − ++ −+xx xy yx yy zx xx zy xyDD DD DD DD (17) and () ( ) () ( )11 2 1 1 2 3 2 2 3 2 2 3 3 2 2 3 2 2 3 33 2 3 3 2 2 33 2 3 3 2 2ˆˆ ˆ ˆ ˆˆ ˆˆ ˆ ˆ ˆˆ ˆˆ ˆ ˆ ˆˆ ˆ ˆoo r r rrml s c n s c m la c la s+= + + + ++ ++yy zy xx xy yx yy zy xy zx xxDD DD DD DD DD (18) where2cand2s stand for 2 cosθ and 2sinθ respectively. The four linear equations, (13), (14), (17) and (18) represent the mathematical core of the kinematic model introduced in the present work for the inverse po- sition analysis of the arm module. A symbolic solution for these equations can be obtained such that, 3rn and 3rm are expressed in the following forms, 31 /rnf f= (19) and 32 /rmf f= (20) where f,1f and 2f are linear functions of 2s and 2c. Noting the properties of rotation about 3ˆz the following may be deduced, () += − D22 2 2 12 3 3 3 oo r fff l pi pi (21) This last equation is a polynomial of 2s,2c,2 2s,2 2c and 22sc; and can be re- expressed in the following form, − − ==¦4 4 4 00k k kbt (22) 194 Industrial Robo tics: Theory, Modelling and Control where the coefficients are calculated symbolically from the model presented above. The parameters which constitute these coefficients reflect the kinematic relations between the successive arm axes and they can be calculated and stored for run-time use once the arm is calibrated. These parameters are all constant for a given arm except 11rrpf pfD and 1ol which depend on the desired final location of the end-effector as described above. The fact that only two pa- rameters need to be calculated highlights the computational efficiency of the described approach. In (22), t is the tangent of half θ2 and it is used to replace 2c and 2s as follows, ½−=°°+¾ ° =°+¿2 2 2 2 21 1 2 1tct tst (23) Equation (22), which is a fourth degree polynomial, can be solved using a sys- tematic non-iterative technique (Tranter, 1980). The resulting roots can succes- sively be plugged back in equations (23) to work out the corresponding values of2c and 2s. These values are then employed to obtain the joint-displacement 2θ using the atan2 function referred to above. The values of the local coordi- nates,3rn and 3rm, may be calculated by using equations (19) and (20). A numerically stable method to obtain 1omand1on is to use equation (17) for 1on and then obtain 1om from the following equation, () 12 2 2 1ˆˆr oomd=−pz y D (24) Finally,3rn,3rm,3on,3om are employed in equation (6) to obtain the corre- sponding values of θ3. Similarly, 1rn,1rm,1on,1om are used to obtain the cor- responding values of θ1. As revealed by the polynomial in (22), the maximum number of arm configu- rations,armN , which correspond to a given end-effector position is four. In some cases, however, the geometrical relationships between the consecutive axes as well as the required position of p f allow for the inverse position prob- lem to be solved through the use of quadratic, rather quartic or higher, poly- nomials. Arms which exhibit this sort of simplification are said to have simple structures. Some of these cases are outlined in the next section. Inverse Position Procedure for Man ipulators with Rotary Joints 195 Kinematic Synthesis of the Arm Mechanism Most industrial robots are designed to have their successive axes either paral- lel or perpendicular to make a simplified closed form inverse position solution achievable. Researchers have repeatedly assigned the term, simple structure , to these robotic arms. The word " simple" usually implies that a non-iterative so- lution can be obtained for the inverse position problem of this particular struc-ture. However, as the discussion in the previous section reveals, a non- iterative solution can still be obtained even for arms with arbitrarily positioned and directed joint-axes. A definition has been proposed for this term in the light of the conics theory (Smith and Lipkin, 1990). In the present section, a consistent simplified geometrical definition is introduced. To gain understanding of the results obtainable from the fourth-degree poly- nomial equation (22), equations (13) and (14) along with the following two equations may be considered, 22 2 33 33 3rr oo rnm l+= − pi piD (25) 22 2 11 11 1oo rr onm l+= − pf pfD (26) The four equations, (13), (14), (25) and (26), together are useful in studying the kinematic behaviour of the arm mechanism. Essentially, the inverse position problem of the arm structure may be depicted as shown in Figure (3). In the figure, points p f and p i assume their local circu- lar paths about the rotary axes, 1ˆz and 3ˆz, creating two spatial circles Cz 1 and Cz3, respectively, in two planes perpendicular to 1ˆzand3ˆz with their centres located on the axes. Thus, a solution exists if a circle, Cz 2, that intersects both Cz1 and Cz 3 simultaneously, can be drawn in a plane normal to 2ˆz with its centre located along it. As the analysis given in the previous section suggests, if the three axes are located and directed arbitrarily in space, a maximum of four different circles can be drawn about 2ˆz to satisfy this condition. Each cir- cle intersects each of Cz 1 and Cz 3 at one point and hence, the four possible so- lutions.196 Industrial Robo tics: Theory, Modelling and Control 1ˆz3ˆz 3ˆx 2ˆx 0ˆypipf θ1θ2θ3 0ˆx0ˆz Base Coordinates2ˆz Cz3 Cz2 Cz1 Figure 3. The Kinematic Behaviour of the Arm Joints. As established in Appendix B, any two spatial circles may intersect at two points if, and only if, their corresponding axes lie in one and the same plane (this is the plane which perpendicularly halves the line connecting the two points of intersection). Therefore, in arms with ideal (non-calibrated) struc-tures where 2ˆz lies in the same plane with either 1ˆz or 3ˆz, the number of middle circles, Cz 2, becomes two. In such a case, the complex mathematical aspects associated with the inverse position problem of the arm disappear and the solution can easily be obtained by using equations (13), (14), (25) and (26). For example, if 1ˆz and 2ˆz lie in one plane where 20a=, the following proce- dure may be adopted for the solution; -i. use equations (13) and (14) to express 3rn and 3rm as functions of 1om. -ii. use these functions in equation (25) to obtain the two roots of 1om:11om and12om, -iii. use equation (26) to obtain the four corresponding values of 1on:11on, 11on−,12onand12on−,Inverse Position Procedure for Man ipulators with Rotary Joints 197 -iv. use equations (13) to obtain the two corresponding values of 3rm: 31rmand32rm; then use (14) to obtain the corresponding values of 3rn:. 31rn and 32rn, -v. combine the roots in the following order to obtain the required solu- tions, -(11on,11om,31rn,31rm), (11on−,11om,31rn,31rm), (12on,12om,32rn, 32rm) and (12on−,12om,32rn,32rm). The corresponding four values of θ2 may be obtained by solving equations (17) and (18) simultaneously for θ2 cos and θ2 sin . Also, θ1 and θ3 are ob- tained by using equation (5). The above mathematical procedure can be performed symbolically such that, closed form expressions are obtained for the three joint-displacements. Similar simplified mathematical procedure may be used in cases with 1ˆz par- allel to 2ˆz. It may be noted that in designs where 2ˆz lies in one plane with 1ˆz and in another plane with 3ˆz, the number of middle circles, Cz 2, becomes one and the solution can be simplified even further. In such a case, the middle cir- cle, Cz 2, intersects both Cz 1 and Cz 3 at two points to produce the four possible solutions. An example may be sought in PUMA-type robots, whose nominal structures possess the following kinematic features, =20a , =−D12ˆˆ 1 yz and =D32ˆˆ 0 yz This makes it possible to obtain the solution for a non-calibrated PUMA arm substructure using the following procedure, -i. obtain 1om from equation (13) -ii. obtain 3rn from equation (14) -iii. obtain 3rm± from equation (25) -iv. obtain 1on± from equation (26) Thus, the four possible configurations of the arm are given by the following root combinations, (1on,1om,3rn,3rm), (1on,1om,3rn,3rm− ), (1on−,1om,3rn,3rm) and (1on−,1om, 3rn,3rm− ).198 Industrial Robo tics: Theory, Modelling and Control Based on the above discussion it can be concluded that the middle axes 2ˆz must lie in one plane with either 1ˆz or 3ˆz for a simplified mathematical pro- cedure to be realisable. Once this condition is satisfied, the four equations, (13), (14), (25) and (26) can be readily employed to obtain the inverse solution and therefore the arm structure can be described as simple . In the next section, the procedure which is presented for the inverse position analysis of the wrist substructure is explained. Inverse Kinematics of the Wrist In the current context, the main task of the first two wrist joints (namely the fourth and fifth joints on the manipulator structure) is to displace the axis of the last joint (i.e. the sixth joint) from a given known orientation to a new de- sired direction in space. Figure (4) depicts an arrangement of two revolute joints with their axes 4ˆz and 5ˆz pointing in the directions calculated using any suitable direct kinematic procedure featuring three consecutive rotations, θ33ˆz,θ22ˆz and θ11ˆz. At this specific pose, the axis of the sixth joint, i 65ˆ oz , is also calculated using the same consecutive rotations, and it is now required to be orientated in the direction off 6ˆz. In the figure, the common normal 5ˆx is directed from 4ˆz to 5ˆz (where =×54 5ˆ ˆˆ xz z ). At zero position 4ˆx is selected to coincide with 5ˆx such that two Cartesian coordinate systems 44 4ˆˆˆxyzand55 5ˆˆˆxyz can be established. Accord- ing to the concepts in (4) and (5), f 6ˆz can be described with respect to the 44 4ˆˆˆxyz-frame in terms of local coordinates (4rn,4rm and 4rl). Also, i 65ˆ oz can be described with respect to the 55 5ˆˆˆxyz-frame in terms of known local coordi- nates (5on,5om and 5ol).Inverse Position Procedure for Man ipulators with Rotary Joints 199 4ˆz 5 0ˆx 0ˆy5ˆx 4ˆx 0ˆz5ˆy 4ˆy Base Coordinatesθ4 θ56ˆzf i 65ˆ oz Figure 4. A 2R Arrangement Used for Orienting Vectors in Space. It is understood that the vector f 6ˆz resulted from rotating another vector f 64ˆ oz about the 4ˆzaxis by an angle, θ4 (i.e. a θ44ˆz-type rotation). The original vec- tor,f 64ˆ oz , can be expressed with respect to the 44 4ˆˆˆxyz-frame in terms of local coordinates (4on,4om and 4ol), where 4on and 4om are unknowns to be worked out and 4ol is numerically obtained from == Df 44 6 4ˆˆorll zz . The vector i 65ˆ rz which results from rotating i 65ˆ oz by an angle θ55ˆzmay be ex- pressed in the following form, () ()i 65 5 5 5 5 5 5 5 5 5 5 55ˆ ˆˆ ˆoo oo ornc ms ns mc l=− ++ + zx y z (27) where5c and 5s stand for 5 cosθand5sinθ respectively. A property of rotation about 4ˆz may be stated as, ()45 5 5 5 5 4 5 5 4ˆˆ ˆˆoo o oln s m c l=+ + yzz zDD (28) This last expression (28) is a linear equation in 5s and 5c. This equation may be re-expressed in a polynomial form as follows, − − ==¦2 2 2 00k k kbt (29) 200 Industrial Robo tics: Theory, Modelling and Control where t is the tangent of half θ5 and jbis the coefficient of the j th power term. It could be concluded from equation (29), which is a second degree polyno- mial, that the number of the wrist configurations, wristN , which correspond to the required orientation of f 6ˆzis≤ 2. Once5θ is obtained, m4o and n4o can be worked out as follows; ()45 5 5 5 45 5 5 5 5 4 5 5 4ˆˆ ˆˆoo o oo o onn c m s mn s m c l=− ½ ¾=+ +¿yy zy DD (30) Finally, 4rn,4rm,4on and 4om are employed in equation (6) to obtain the corre- sponding values of θ4. From the analysis presented in this and the previous sections, it can be con- cluded that the maximum number of configurations of a spherical-wrist ma- nipulator structure which correspond to any given position and orientation at the end-effector is eight. The actual number of configurations, N, is calculated by, =arm wrist NNN (31) In spherical-wrist manipulators, each arm configuration corresponds to two possible wrist configurations as indicated by equation (31). Completing the Full Pose Once the first five joints on the manipulator structure have performed con-secutive rotations ( θ = ˆ, where 1, 2,...5ii i z ) to place the sixth joint axis at its desired position and orientation, one final rotation ( θ66ˆz), will be performed to align any side axis on the end-effector with its desired direction. The term “side axis” here refers to any axis, on the end-effector Cartesian frame, whose direction is influenced by rotations performed about 6ˆz. This final part of the inverse kinematic procedure is a straight forward application of the model presented in equations (3) to (6) to calculate the angle of rotation. However, it worth noting here that this final step of the analysis is preceded by a direct ki-nematic procedure to calculate the updated direction of the side axis after five consecutive rotations, θθθθ θ55 44 33 22 11ˆˆˆˆ ˆ,,,a n d,zzzz z have been performed. Inverse Position Procedure for Man ipulators with Rotary Joints 201 The Inverse Solution Procedure Figure (5) depicts a flow chart that has been designed to explain the procedure proposed here for the inverse position analysis of manipulators. For spherical- wrist manipulators, the procedure produces eight sets of solutions in a non- iterative fashion. However, for calibrated robotic structures, the eight solu- tions are obtained in a simple iterative approach which does not involve any Jacobian matrix computations. By virtue of the concepts presented, the vari- ous solutions may be calculated simultaneously if parallel computing facilities are available. In the present approach, the arm is assigned the task of positioning any point on the sixth joint-axis at its required spatial location. The closest point on the sixth-joint axis to the fifth joint-axis may be conveniently selected for this pur- pose. This point will be referred to in the following discussion as 0pi. The four joint-displacement solutions which correspond to this positioning task are therefore obtained using the models presented above and saved in four three- element vectors, jv, where j=1,2,3 and 4. At arm configuration number j, the wrist joints align the sixth joint-axis with its required final orientation, as previously described, and the two correspond- ing solutions are accordingly obtained and saved in a pair of two-elements vectors, jkw, where k may assume the values of 1 or 2. To this end, a set of eight joint-displacement solutions have been obtained. If the robot was of the spherical-wrist type these solutions should accurately represent the required joint-displacements and no iterations would be required. Calibrated robots, however, are not likely to have their last three joint-axes in- tersecting at a common point (i.e. the spherical-wrist property is lost), the mo- tions performed by the wrist joints will displace the point which was previ- ously positioned by the arm to eight new locations, 0pjk, corresponding to the wrist solutions obtained. At location number jk, the instantaneous position vector, 0jkp, of the displaced point may be calculated, using a suitable direct kinematic procedure, and compared to the required position vector 0np where the net radial error, jke, is calculated as follows, 00jk n jke=−pp (32) 202 Industrial Robo tics: Theory, Modelling and Control ≤ ≤Read and Write Data Perform Inverse Position Analysis (IPA) of the Arm to Get 4 Solutions IPA of Wrist IPA of Wrist IPA of Wrist IPA of Wrist m=1 IPA of arm to save the solution with minimum norm. IPA of wrist to save the solution with minimum norm. θ = θθ + θ θ m m-1 new0jk Compare with the required position and work out the error e. eε Getpjk Compare to the required position and work out the error e. eεm=m+1Getp =1=2 =4 =3 =1 =2 kkj j j j =1k =1k =2k =2k=2k YesNoNoYes m StopCalculate θ6 Figure 5. Inverse Position Analysis of Robots Using Elementary Motions. If the calculated value for jke does not fall within an allowable error zone, the calculations proceed such that at iteration number m, the arm sets out from the most updated configuration number jk(m-1) to position point pjk m-1 in the re- quired location, 0np. The four solutions obtained may be stored in four three-Inverse Position Procedure for Man ipulators with Rotary Joints 203 element vectors whose norms are subsequently calculated and compared. Only the vector which corresponds to minimum norm, m jkv, may be saved in the memory and the other solutions would be discarded. This vector is re- ferred to here as the arm elementary-motions vector because it contains frac- tional quantities of elementary joint-displacements. The two corresponding wrist solutions may then be obtained and stored in a pair of two-element vectors whose norms will also be calculated and com- pared. The vector with minimum norm, m jkw, is subsequently saved while the other vector may be disposed of. In the current context, m jkw is designated as thewrist elementary-motions vector because it contains small values of joint- displacements. The new displaced location of the positioned point may then be calculated and compared with the required location as per equation (32). When the radial er- ror is small enough, the final joint-displacement vector, n jkv, of the arm group which corresponds to solution number jk may be calculated as follows, ==+¦ 1M nm jk jj k mvv v (33) where M is the corresponding number of iterations. The vector, n jkw, which corresponds to the jk-solution of the wrist is calculated as; ==+¦ 1M nm jk jk jk mww w (34) Once the jk-solution for the first five joint-displacem ents has been obtained, the corresponding displacement of the last joint may simply be calculated.The iterative technique presented here utilises the physical kinematic behav- iour of manipulator joints and therefore fast and singularity-proof conver- gence may be assured. The technique does not require initial guesses intro- duced into the model. In the next section a numerical example is given where the inverse position so- lutions will be produced for a PUMA-type robot of both calibrated and ideal structures.204 Industrial Robo tics: Theory, Modelling and Control Numerical Example A PUMA-like manipulator with six revolute joints is selected for the example. The dimensions of the spherical-wrist structure of the manipulator are given in Table (1). The dimensions of the non-spherical-wrist version of the same ma- nipulator are similar to those given in Table (1) except for the locations of the fourth and fifth joint-axes which were displaced to (-128.0, 818.51 and 205.04 mm) and (-130.5, 802.0 and 180.4 mm) respectively. Direction Cosines of Joint-axes Axes Locations (mm) Axes z x z y z z p x p y p z z1 -0.0871557 0.02255767 0.9848077 -1.0 -9.0 8.0 z2 -0.9961946 0.0001274 -0.0871557 5.0 -5.0 198.0 z3 -0.9961947 0.05233595 0.0696266 -68.0 438.0 195.0 z4 0.02233595 -0.9993908 0.02681566 -130.5 808.5 177.0 z5 0.99975050 -0.0223359 0.00009744 -130.5 808.5 177.0 z6 0.02489949 0.9996253 0.00012081 -130.0 808.5 177.0 Table 1. Cartesian Dimensions of a Spherical-wrist Manipulator. In both cases, the initial and final locations of the Tool Centre Point (TCP) of the end-effector are given with respect to the base coordinates as, -120.54, 1208.36 and 175.095 and, –400.0, –400.0 and 1009.0 mm respectively. The initial and final orientations of the end-effector are given in terms of an Euler ZYZ- system as: 88.5733, 89.9604 and 89.722 and, 120.0, –20.0 and 150.0 degrees re- spectively. The models proposed in this paper were used to calculate the inverse position solutions for both the spherical-wrist and general manipulator structures and the results are displayed in Tables (2) and (3) respectively. The angular dis- placements given in these tables are in degrees. 1θ2θ3θ4θ5θ6θ Sol. No. 1 -34.45 -163.09 64.67 86.12 -36.06 -130.97 Sol. No. 2 -34.45 -163.09 64.67 -85.75 31.73 58.63 Sol. No. 3 -47.14 -104.39 -72.4 19.01 -84.81 154.74 Sol. No. 4 -47.14 -104.39 -72.4 -160.03 80.47 -20.04 Sol. No. 5 104.39 -72.90 64.57 24.26 85.22 2.38 Sol. No. 6 104.39 -72.90 64.57 -156.27 -89.56 177.24 Sol. No. 7 117.07 -11.05 -72.30 68.50 28.82 68.23 Sol. No. 8 117.07 -11.05 -72.30 -120.58 -33.16 -122.18 Table 2. Inverse Position Solutions for the Spherical-wrist Robot. Inverse Position Procedure for Man ipulators with Rotary Joints 205 1θ2θ3θ4θ5θ6θ Sol. No. 1 -39.20 -162.93 66.79 86.5 -36.82 -125.19 Sol. No. 2 -30.78 -162.92 70.95 -73.54 32.47 68.51 Sol. No. 3 -48.12 -106.90 -68.18 19.18 -83.65 156.37 Sol. No. 4 -46.46 -103.38 -65.35 -158.64 72.85 -17.25 Sol. No. 5 105.11 -73.14 67.49 24.37 87.28 0.42 Sol. No. 6 103.60 -70.98 72.08 -154.89 -98.19 173.67 Sol. No. 7 120.24 -11.00 -68.57 65.31 29.99 60.59 Sol. No. 8 114.00 -11.34 -62.96 -133.30 -37.94 -134.91 Table 3. Inverse Position Solutions for the Non-spherical-wrist Robot. The solutions obtained for the spherical-wrist manipulator did not involve it- erations at all. However, a maximum of 4 iterations were used for the non- spherical-wrist manipulator. In most cases the number of iterations was 2 ex- cept for the second and first solutions were this number was 3 and 4 respec- tively. This demonstrates the numerical efficiency of the proposed models. Conclusions The work presented in this paper introduces a technique for inverse position analysis of revolute-joint manipulators. The analysis developed results in simplified solutions for both the arm and the wrist subassemblies. These solu-tions are obtained in form of polynomials whose coefficients can be simply calculated for a given manipulator structure. The technique can be used to ob- tain inverse kinematic solutions for both spherical-wrist and calibrated ma- nipulator structures. The technique results in obtaining multiple sets of the joint-motor displace- ments which correspond to a given pose at the end-effector. This enables the trajectory designer to the select the joint-trajectory which best fits a desired manipulator task.206 Industrial Robo tics: Theory, Modelling and Control Appendix A To relate a pair of successive axes on a manipulator structure, the direction co- sines of the two axes are given (with respect to a Cartesian base frame), to- gether with a position vector describing a point on each axis. These spatial particulars are defined in Figure (A) as ˆiz and 0ip for the joint axis number i, and1ˆi+z and 0( 1)i+p for joint-axis number i+1. The procedure kicks off by cal- culating the common normal, 1i+x as follows; ++=×11ˆˆii ixz z (A.1) where the following condition is employed; () () 11 0 ( 1 ) 0 0 ( 1 ) 0ˆˆ ˆ ˆ 0ii i i i i i i i if then++ + +ªº ×= = −− −¬¼zz x p p z p p z D (A.2) The unit vector, +1ˆix, is then calculated as follows; 1 1 1ˆi i i+ + +=xxx (A.3) 0ˆx 0ˆy0ˆz Base Coordinatesiˆz i+1 i+1ˆx ai+1 p0ipip(i+1)i p0(i+1) Figure A. Relating Successive Axes with a Common Normal. The shortest distance, +1ia, separating the two axes is calculated as follows; () ++ +=− D10 ( 1 ) 0 1ˆii i ia pp x (A.4) Inverse Position Procedure for Man ipulators with Rotary Joints 207 The intersection of +1ˆix with ˆiz is defined by a position vector ip, which is ob- tained from; =+0ˆii i i b pp z (A.5) where () () ()11 0 ( 1 ) 0 11ˆ ˆ ˆ ˆˆii i i i ii ib++ + ++×− =×zx p p zx zD D (A.6) which is subject to the condition, ()++×= =D11ˆ ˆˆ 00ii i i if then bzx z (A.7) The intersection of +1ˆix with +1ˆiz is defined by a position vector +(1 )iip , which is calculated from; ++ +=+(1 ) 1 1ˆii i i i a ppx (A.8) Appendix B Claim: Any two spatial circles intersect at two points if, and only if, their axes lie in one and the same plane. Proof: Figure (B) depicts two spatial circles, C 1 and C 2, and their axes, 1ˆz and 2ˆz re- spectively. The circles intersect one another at two points, 1s and 2s. To prove that1ˆz and 2ˆz must lie in one and the same plane, the centres of the two cir- cles, Pc 1 and Pc 2, are connected to the point, 3s, which divides the line 12ss into two equal parts. 1ˆz 2ˆz C2 C1 s1 s2s3Pc2 Pc1 Figure B. Two-point Intersection of Spatial Circles. 208 Industrial Robo tics: Theory, Modelling and Control •12ss lies in a plane perpendicular to 1ˆzand therefore 12ss is perpendicular to 1ˆz. •From planar geometry, ss12 is perpendicular to the line 13Pcs. •Therefore12ss is perpendicular to the plane which contains the two intersec- ting lines, 1ˆz and 13Pcs. Let this plane be referred to as PN1. •Similarly, it could be established that 12ssis also perpendicular to the plane which contains the two intersecting lines, z 2 and 23Pcs. This plane may be referred to as PN2. •A general conclusion may now be drawn that, PN1 is parallel to PN2. •However, PN1 and PN2 share one common point, 3s. •Therefore, the two planes coincide and 1ˆz,13Pcs,2ˆz and 23Pcs must all lie in one and the same plane. References Chiaverini, S., Siciliano, B. and Egeland, O. (1994), Review of the Damped Least-Squares Inverse kinematics with Experiments on an Industrial Ro- bot Manipulator, IEEE Trans. Control Syst. Technol., Vol. 2, No. 2, pp. 123-134. Coelho, P. H. G. and Nunes, L. F. A. (1986), Application of Kalman Filtering to Robot Manipulators, In: Recent Trends in Robotics: Modelling, Control and Education . Jamshidi, M., Luh, L. Y. S. and Shahinpoor, M. (Ed.), pp. 35-40, Elsevier Science Publishing Co., Inc. Denavit, J. and Hartenberg, R. S. (1955), A Kinematic Notation for Low Pair Mechanisms Based on Matrices, J. Appl. Mech.-Trans. ASME , Vol. 22, June 1955, pp. 215-221. Duffy, J. and Crane C. (1980), A Displacement Analysis of the General Spatial 7-Link, 7R Mechanism, Mech. Mach. Theory , Vol. 15, No. 3-A, pp. 153-169. Goldenberg, A. A., Benhabib, B. and Fenton, R. G. (1985), A Complete General- ised Solution to the Inverse Kinematics of Robots, IEEE. Trans. Robot Autom , Vol. RA-1, No. 1, pp. 14-20. Gu, Y.-L. and Luh, J. Y. S. (1987), Dual-Number Transformation and Its Appli- cation to Robotics, IEEE. Trans. Robot Autom , Vol. RA-3, No. 6, pp. 615- Gupta, K. (1984), A Note on Position Analysis of Manipulators, Mech. Mach. Theory , Vol. 19, No. 1, pp. 5-8. Hayati, S. and Roston, G. (1986), Inverse Kinematic Solution for Near-Simple Robots and Its Application to Robot Calibration, In: Recent Trends in Ro- botics: Modelling, Control and Education. , Jamshidi, M., Luh, L. Y. S. and Shahinpoor, (Ed.), M. Elsevier Science Publishing Co., Inc, pp. 41-50. Inverse Position Procedure for Man ipulators with Rotary Joints 209 Her, M.-G, Yen, C.-Y., Hung, Y.-C. and Karkoub, M. (2002), Approximating a Robot Inverse Kinematics Solution Using Fuzzy Logic Tuned by Genetic Algorithms, Int. J. Adv. Manuf. Technol , Vol. 20, pp. 372-380. Kohli, D. and Osvatic, M. (1993), Inverse Kinematics of General 6R and 5R,P Spatial Manipulators, ASME J. Mech. Des. , Vol. 115, Dec. 1993, pp. 922- Lee, H.-Y. and Liang, C. G. (1988a), A New Vector Theory for the Analysis of Spatial Mechanisms, Mech. Mach. Theory , Vol. 23, No. 13, pp. 209-217. Lee, H.-Y. and Liang, C. G. (1988b), Displacement Analysis of the General Spa- tial 7-Link 7R Mechanism, Mech. Mach. Theory , Vol. 23, No. 13, pp. 219- Lee, H.-Y., Reinholtz, C. F. (1996), Inverse Kinematics of Serial-Chain Manipu- lators, J. Mech. Des.-Trans. ASME , Vol. 118, Sept. 1996, pp. 396-404. Mahalingam, S. and Sharan (1987), A., The Nonlinear Displacement Analysis of Robotic Manipulators Using the Complex Optimisation Method, Mech. Mach. Theory , Vol. 22, No. 1, pp. 89-95. Manocha, D. and Canny, J. F. (1992), Real Time Inverse Kinematics for General 6R Manipulators, Proceedings of IEEE Conf. on Robotics and Automation , pp. 383-389, Nice-France, May 1992. Manseur, R. and Doty, K. (1992a), A Complete Kinematic Analysis of Four- Revolute-Axis Robot Manipulators, Mech. Mach. Theory , Vol. 27, No. 5, pp. 575-586. Manseur, R. and Doty, K. (1992b), Fast Inverse Kinematics of Five-Revolute- Axis Robot Manipulators, Mech. Mach. Theory , Vol. 27, No. 5, pp. 587-597. Manseur, R. and Doty, K. (1989), A Robot Manipulator with 16 Real Inverse Kinematic Solution Sets, Int. J. Robot Res , Vol. 8, No. 5, pp. 75-79. Manseur, R. and Doty, K. (1988), Fast Algorithm for Inverse Kinematic Analy- sis of Robot Manipulators, Int. J. Robot Res , Vol. 7, No. 3, pp. 52-63. Manseur, R. and Doty, K. (1996), Structural Kinematics of 6-Revolute-Axis Ro- bot Manipulators, Mech. Mach. Theory , Vol. 31, No. 5, pp. 647-657. Pieper, D. L. and Roth, B. (1969), The Kinematics of Manipulators Under Com- puter Control, Proceedings of 2nd Int. Congress on the Theory of Machines and Mechanisms , Vol. 2, Zakopane, Poland, pp. 159–168. Poon, J. K. and Lawrence, P. D. (1988), Manipulator Inverse Kinematics Based on Joint Functions, Proceedings of IEEE Conf. on Robotics and Automation , Philadelphia, pp. 669-674. Pradeep, A. K., Yoder, P. J. and Mukundan, R. (1989), On the Use of Dual- Matrix Exponentials in Robotic Kinematic, Int. J. Robot Res , Vol. 8, No. 54, pp. 57-66. Raghavan, M. and Roth, B. (1989), Kinematic Analysis of the 6R Manipulator of General Geometry, Proceedings of the 5th Int. Symposium on Robotics Re- search , Tokyo, pp. 263-269. 210 Industrial Robo tics: Theory, Modelling and Control Smith, D. R. and Lipkin, H. (1990), Analysis of Fourth Order Manipulator Kinematics Using Conic Sections, Proceedings of IEEE Conf. on Robotics and Automation , Cincinnati, pp. 274-278. Sultan, I. A. (2000), On the Positioning of Revolute-Joint Manipulators, J. of Ro- bot Syst , Vol. 17, No. 8, pp 429-438. Sultan, I. A. and Wager, J. G. (1999), User-Controlled Kinematic Modelling, Adv. Robot. , Vol. 12, No. 6, pp 663-677. Sultan, I. A. and Wager, J. G. (2001), A φ-Model Solution for the Inverse Posi- tion Problem of Calibrated Robots Using Virtual Elementary Motions, In- verse Probl. Eng. , Vol. 9, No. 3, pp. 261-285. Sultan, I. A. (2002), A Numerical Solution for Determinantal Polynomials with Application to Robot Kinematics, Proceedings of the 4th Int. Conf. on Model- ling and Simulation , Melbourne. Tsai, L.-W. and Morgan, A. P. (1985), Solving the Kinematics of the Most Gen- eral Six- and Five-Degree-of-Freedom Manipulators by Continuation Methods, ASME J. Mech, Transm and Autom Des , Vol. 107, June 1985, pp. 189-199. Tranter, C. J. (1980), Techniques of Mathematical Analysis . UNIBOOKS, Hodder and Stoughton, London. Wang, K. and Bjorke, O. (1989), An Efficient Inverse Kinematic Solution with a Closed Form for Five-Degree-of-Freedom Robot Manipulators with a Non-Spherical Wrist, Annals of CIRP , Vol. 38, pp. 365-368. Wang., L. T. and Chen, C. C. (1991), A Combined Optimisation Method for Solving the Inverse Kinematics Problem of Mechanical Manipulators, IEEE. Trans. Robot Autom , Vol. 7, No. 4, pp. 489-499. Yang, A. T. and Freudenstein, F. (1964), Application of Dual-Numbers Quater- nion Algebra to the Analysis of Spatial Mechanisms, J. Appl. Mech.-Trans. ASME , June 1964, pp. 300-308. Zhang, P.-Y., Lu, T.-S. and Song, L.- B. (2005), RBF networks-based inverse kinematics of 6R manipulator, Int J Adv Manuf Technol ., Vol. 26, pp. 144– 1472117 Cable-based Robot Manipulators with Translational Degrees of Freedom Saeed Behzadipour and Amir Khajepour Introduction Cable-based robots build upon mechanisms that not only use rigid links in their structures but also utilize unilateral force elements such as cables to de- liver the desired motion. Cables may be either connected to active winches to provide a variable length and hence to actuate the mechanism or may be only to provide a kinematic constraint to eliminate an undesired motion of the end- effector. Manipulators in which the cables have variable lengths are usually called cable-driven or wire-driven manipulators. Cable-based manipulators posses several advantages over conventional se- rial/parallel link manipulators including: Large workspace: An active winch can provide a large range of length change on the cables at a low cost. This facilitates building manipulators for very large working spaces which cannot be obtained by other robots. Low inertia: Materials provide their highest strength-to-mass ratio when they are under tensile loading. Using cables, which can be only in tension, maximizes the use of material strength and therefore reduces the mass and inertia of the manipulator. Low inertia is desirable in many applicati- ons including high speed/acceleration robotics. Simplicity in structure: Cables simplify the robot structure by utilizing bending flexibility as kinematic joints and reducing the fabrication cost by minimizing the machining process. Reconfigurability and transportability: Winch assemblies can be simply re- located to reconfigure and adjust the workspace of a cable-driven manipu- lator. The ease of assembly/disassembly of these manipulators also facili- tates their transportation and quick setup. Fully remote actuation: Using a fully cable-driven manipulator, all the ac- tuators and sensitive parts are located away from the end-effector and the actual working area. Such manipulators best suit harsh or hazardous envi- ronments.212 Industrial Ro botics: Theory, Modelling and Control It should be also noted that using cable structures in robot manipulators is ac- companied by theoretical and technical difficulties. The unilateral force of ca- bles complicates the workspace, kinematics and dynamics analysis. The con- straint of tensile force in all cables should be incorporated into the design and control procedure otherwise, the manipulator will collapse. Also, the low stiff- ness of the cables compared to rigid links may result in undesired vibrations requiring compensation by a proper control scheme. As it was mentioned before, maintaining positive tension (tensile force) in all the cables is an essential requirement for the rigidity of a cable-based manipu- lator and hence, this property should be studied thoroughly before the cable-based manipulator can be used in any real application. In other words, a cable- based manipulator can be treated as a rigid link manipulator only if all the ca- bles are in tension. As a result, most of the researchers’ efforts on this category of robot manipulators have been spent on analyzing and proving the rigidity of the cable-based structures. The general problem of rigidity in cable-based manipulators has been studied in the literature using different approaches and terminologies such as control- lable workspace (Verhoeven & Hiller, 2000), dynamic workspace (Barette & Gosselin, 2005), wrench closure (Gouttefarde & Gosselin, 2006), manipulability ( Gallina & Rosati 2002), fully constraint configuration (Roberts et al. 1998) and tensionability (Landsberger & Shanmugasundram, 1992). General formulation of this problem can be found in the works by (Ming & Higuchi 1994), (Tado- koro et al., 1996), and (Verhoeven et al., 1998). They showed that for the rigid- ity of a cable-based manipulator, it is necessary but not sufficient to have either actuation redundancy or separate external loading sources to produce tension in all cables. Ming (Ming & Higuchi 1994a,b) calls the first group Completely Restrained Positioning Mechanisms, CRPM, in which all the cables can be made taut with no external load while in an IRPM (Incompletely Restrained Positioning Mechanism), the manipulator cannot maintain its own rigidity and hence needs external load to make all cables taut. The useful workspace of a cable-based manipulator is a subset of its geometri- cal workspace in which the manipulator can be rigidified (either by actuation redundancy or external loading). Determination of this workspace is the most essential step in the design and operation of a cable-based manipulator and is usually done by numerical search after the synthesis of the manipulator is done. Examples of this approach can be found in (Kawamura et al., 1995; Fer- raresi, 2004; Ogahara, 2003; So-Ryeok et al., 2005a,b; Pusey et al., 2004). In this approach, if the workspace found through the search does not satisfy the de-sign requirements, the synthesis of the manipulator and the workspace deter- mination should be repeated. As a result and in order to avoid trial and error in the design, it is desired to have cable-based manipulators that can be rigidi- fied everywhere in their geometrical workspace or at least their workspace can be analytically expressed. In this regard, a geometrical explanation for the Cable-based Robot Manipulators with Trans lational Degrees of Freedom 213 workspace of a cable crane has been found (Landsberger & Shanmugasun- dram, 1992) which is an IRPM. An analytical study for the boundaries of the workspace in planar cable-based manipulators is also performed in (Barette & Gosselin, 2005), (Gouttefarde & Gosselin, 2006) and (Stump & Kumar, 2006). In this article, a series of cable-based manipulators with translational motion (Behzadipour, 2005) is studied with focus on their rigidity study. In these de- signs, cables are used to drive the end-effector as well as to eliminate its rota- tion by proper kinematic constraints. The significance of these new manipula- tors is that their rigidity can be guaranteed everywhere in their geometrical workspace by a certain set of conditions enforced on the geometry of the ma-nipulator. This will be proved in details for each manipulator and the condi- tions will be derived. By incorporating these conditions into the design and control, the cables will be always taut and hence the cable-based manipulator can be treated as its rigid link counterpart. In Section 2, the general structure of these manipulators will be presented and the critical concepts of rigidity and tensionability will be defined. In Section 3, a theorem is given to simplify the study of tensionability in these manipula- tors. In Sections 4 and 5, two spatial cable-based manipulators are introduced and their rigidity are proved. In Section 6, two planar manipulators with trans- lational motion are presented and their rigidity are thoroughly studied. General Structure and Definitions The general configuration of the cable-based manipulators studied in this pa- per is shown in Fig. 1. The four main elements of these manipulators are: 1.Base : The fixed part of the manipulator to which the global system of coordinate OXYZ is attached 2.End-effector : The moving body which carries the moving frame ZYXO ′′′′ . 3.Cables : The flexible tendon elements with negligible mass and diameter connected from one end to the end-effector at points ) ,...,2,1( m iPi= and pulled from the other end at Qi. The pulling actuator produces tension τi inside the cable and can be simply a winch which pulls and winds the cable or a separate mechanism that moves the cable's end ( Qi) without changing its length. Unit vectors ) ,...,2,1(ˆ m ii= u determine the direction of the cables and point towards the base. Depending on the structure of the manipulator, there may be some extra pulleys to guide the cables. The number of cables, m, is equal to the dimension of the motion space of the end-effector. Therefore, mis three and six for planar and spatial mecha- nisms, respectively. 214 Industrial Ro botics: Theory, Modelling and Control Figure 1. General configuration of the cable-based manipulators studied in this paper 4.Spine : The element that produces a force between the base and the end- effector in order to keep all the cables in tension. The spine can be an acti- ve element which generates a desired force. It can be also a passive ele- ment such as a cylinder energized by compressed air or a compressive spring designed properly to provide the sufficient force required to main- tain tension in the cables. The direction of the spine is shown by unit vec-tor wˆ pointing towards the end-effector. For any cable-based manipulator, an equivalent rigid link counterpart can be found by replacing each cable by a rigid link and ball-and-socket joints at the ends. If the cable has a variable length, then a cylindrical element should be used to represent the cable in the rigid link manipulator. This analogy is valid as long as the cable-based manipulator is rigid according to the following defi- nition: Rigidity : A cable-based manipulator is rigid at a certain pose with re- spect to a given external load (including dynamic loads) and spine force if and only if all cables are in tension, m ii ,...,2,1 0= ≥τ . A positive τi is considered as a tensile force in the cable. Cable-based Robot Manipulators with Trans lational Degrees of Freedom 215 It should be noted that the rigidity of a cable-based manipulator depends on the external load and therefore, dynamic forces should be also considered when the rigidity is evaluated. As a result, rigidity is not a property of the ge- ometry only. The rigidity analysis requires the motion, inertia and all exter- nally applied forces to be considered which complicates the process. To over- come this problem, another property called tensionability is defined and used which only depends on the geometry and expresses the potential of the ma- nipulator for being rigid. Tensionability : A cable-based manipulator is called tensionable at a given pose if and only if for any arbitrary external load there ex- ists a finite spine force and a set of finite cable tensions to make the manipulator rigid. Note that if a manipulator is tensionable and there is enough tensioning force available (by the spine and the cables), then the manipulator will be rigid un- der any external loading. In other words, tensionability and large enough ten- sioning force together provide a sufficient condition for the rigidity. The con- verse is that a manipulator may be rigid under a certain condition but not tensionable. It is important to note that both rigidi ty and tensionability deal with the exis- tence of the static equilibrium condition for the manipulator in which all the cables are in tension and hence, the manipulator does not collapse. However, they do not explain the nature of the equilibrium. Considering the stiffness of the manipulator, it may be rigid (meaning that it is in static equilibrium with all cables in tension) although the equilibrium might be an unstable one which implies that any small disturbance on the end-effector results in the collapse of the manipulator. It is known that the stability of the manipulator from the stiffness point of view is not specific to cable-based manipulators; however, it is shown in (Behzadipour & Khajepour, 2006) that the cable tensions may have a significant effect on the stiffness and even destabilization of the manipulator. Tensionability The goal of this section is to introduce an approach for the evaluation of ten- sionability in a cable-based manipulator. According to the definition, the ten- sionability of a manipulator must be evaluated for any arbitrary external load. In the following, a theorem is introduced which gives a sufficient condition for the manipulator to be tensionable.The core idea of this theorem is to show that if positive tension (tensile force) can be generated in all the cables to any desired extent while the static equilib-216 Industrial Ro botics: Theory, Modelling and Control rium is satisfied in the absence of the external loads, then the manipulator can be rigidified under any arbitrary external load by having enough pretension in the cables. Theorem 1. A kinematically non-singular configuration of a cable-based manipulator is tensionable if for an arbitrary positive spine force Fs (compressive force), the static equilibrium equations of the manipulator have a solution with all posi- tive cable tensions τi‘s. 0 F u = +¦ s iiiˆτ (1) 0 u r = ×¦ iii iˆτ (2) This theorem simply states that if the manipulator can stay rigid and statically balanced under an arbitrary compressive spine force, it is tensionable and thus can stay rigid for any external force and torque by choosing a large enough spine force. Proof: For the proof, it will be shown that such a manipulator can be made rigid for any arbitrary external load. The balance of forces for an arbitrary external force Fe applied at O′ and moment Me is: 0 FFu =++¦ e s iiiˆτ (3) 0 M u r = + ×¦ e iii iˆτ (4) The above equations have a set of nontrivial solutions for τi's since the manipu- lator is assumed to be kinematically non-singular. Since the above set of equa- tions is linear w.r.t. τi's, superposition can be applied to obtain the following two sets of equations: e iie i i e iie i M u r F u −= × −=¦ ¦ ˆ , ˆ τ τ (5) 0 u r F u = × −=¦ ¦ iis i i s iis iˆ , ˆ τ τ (6) Cable-based Robot Manipulators with Trans lational Degrees of Freedom 217 whereie is i τ τ τ = + for i=1,2,...,m . In this formulation, s iτ's are the cable forces to balance the spine force and are positive due to the assumption and e iτ's are the forces in the cables (positive or negative) due to the external force Fe and mo- ment Me. If all e iτ's are positive, then iτ's will be positive too and the cable- based manipulator is rigid. Otherwise, let )(min2 e iiτ α= − i.e. the most negative tension in the cables produced by the external load. Using the linearity of the static equilibrium equations in Eq. (6), cable tensions s iτ’s can be increased by increasing fs such that 2)(min α τ>s ii. As a result we have: 0)(min)(min)(min > + ≥e iis iiiiτ τ τ (7) Therefore, by increasing the spine force, the rigidity can be obtained and hence, the manipulator is tensionable. The above theorem gives a sufficient condition for tensionability meaning that there might be situations in which the spine force cannot produce tension in all cables but the manipulator can be still rigidified. In those cases, sources other than spine may be used to generate tension in cables. An example of such cases will be studied in Section 5.1. As a result from theorem 1, to evaluate the tensionability, instead of dealing with external load on the end-effector, we only need to show that the static equilibrium of the end-effector for an arbitrary spine force can be obtained by tensile forces in all of the cables. This will ensure that the manipulator is ten- sionable and thus can theoretically stand any external force and moment at the end-effector. By “theoretically” we mean that the required spine force and ca- ble tensions are finite, although these forces may not be feasible due to the practical constraints. The above approach is used later in this paper to evaluate the tensionability of the new cable-based manipulators. In the rest of this paper, some new designs of reduced DoF 1 cable-based ma- nipulators are introduced. The target application of these manipulators is high-speed pick-and-place operations in which, small objects (less than 1kg) are moved with high speeds (more than 100 cycles per minute). High speed and acceleration requires low inertia which makes cable-based manipulators potential designs. However, most of the current spatial cable-based manipula- tors have 6 DoF while in pick-and-place applications, three translational axes of motion with a possible rotational DoF for reorienting the object are suffi- cient. In the designs presented in this work, cables are used to constrain the ro- tational motion of the end-effector in order to provide a pure translational mo- 1 DoF: Degree of Freedom 218 Industrial Ro botics: Theory, Modelling and Control tion. A more complete set of these designs can be found in (Khajepour et al., 2003). One of these designs, DeltaBot , has been prototyped at the University of Waterloo (Dekker et al. 2006). It can perform up to 150 cycles/minute of stan- dard pick-and-place on small objects (less than 500gr). BetaBot InBetaBot , shown in Fig. 2, the upper triangle is the end-effector and the bot- tom one is the base. Three pairs of parallel cables are attached to the end- effector and wound by three winches after passing through guide holes on the winch frames. The winches are attached to the base. Each pair of cables forms a parallelogram such as ABCD as shown in the same figure. It is known that (Clavel, 1991), three parallelograms can eliminate the rotational motion of the end-effector. The spine is connected to the end-effector and base using two ball-and-sockets or one universal joint and one ball-and-socket. Therefore, the spine imposes no kinematic constraint on the end-effector. The equivalent rigid link manipulator for BetaBot is obtained by replacing each cable with a slider with two ball-and-sockets at the ends. In this equivalent manipulator, there are 13 bodies, 12 ball-and-socket and 6 prismatic joints. The Gruebler equation gives 13×6 − 12×3 − 6×5 = 12 degrees of freedom. There are 6 trivial DoF's due to the twist of the sliders and there is also one constraint on each pair of sliders which forces their displacements to be the same (because each pair of cables is wound using a single winch). Therefore, the end-effector has 12 − 6 − 3 = 3 DoF's which are translational. Since the size of the end-effector plays no role in the kinematics of BetaBot , the end-effector can be shrunk to a point with three winches moving towards the center of the base accordingly. As a result, the kinematics of BetaBot becomes identical to that of a tripod (Mianowski & Nazarczuk, 1990), or the Tsai ma- nipulator (Tsai, 1996). The geometrical workspace of BetaBot is only limited by the maximum and minimum lengths of the spine assuming that there are no limitations on the cables' lengths and therefore, the shape of the workspace is a half sphere above the base whose radius is determined by the maximum length of the spine. It is clear that there is no possibility of any interference between the cables because of the non-rotating motion of the end-effector. Cable-based Robot Manipulators with Trans lational Degrees of Freedom 219 Figure 2. BetaBot : a 3 DoF cable-based manipulator with pure translational motion 4.1 Tensionability of BetaBot BetaBot is tensionable everywhere in its workspace providing that certain con- ditions are enforced on the geometry of the manipulator as illustrated in Fig. 3: Condition 1. End-effector has a triangular shape as shown in Fig. 3. Each pair of the parallel cables is attached to one edge of the trian- gle, Condition 2 . The guide holes on the winch frames are all on the same plane and form a triangle called Base triangle. This triangle is similar (and parallel) to the triangle of the end-effector but larger. As a result, the end-effector along with the cables form a convex region or a polyhedral Condition 3. Any two cables never become in-line Condition 4. The connection points of the spine, O and O′ in Fig. 3, are on the base and end-effector triangles, respectively and have the same trilinear coordinates 2. A direct result is that the spine never intersects with the faces of the polyhedral of Condition 2 (even if the spine and cables are extended from the base side). 2 The ratio between their distances from the triangle vertices are the same 220 Industrial Ro botics: Theory, Modelling and Control Figure 3 . The prefered geometry of BetaBot which guarantees its tensionability To prove the tensionability, we use the theorem given in the last section. Therefore, for BetaBot to be tensionable, an arbitrary positive spine force should be balanced by positive cable tensions. For the proof, a geometrical ap-proach is employed which shows that the solution of static equilibrium equa- tions consists of a set of positive tensions. Since the proof is lengthy, it is pre- sented by four lemmas and one theorem. Lemma 1. IfBetaBot meets the above mentioned conditions, then the three planes each of which formed by one pair of parallel cables intersect at one point such as R (see Fig. 4 ). Proof. In Fig. 4, consider the plane that includes P 1, P2, B1 and B2: If B1P1 and B2P2 are extended, they meet at a point called R and form triangle ¨B1RB 2 (otherwise they will be parallel which implies the end-effector and the base triangle are equal contradicting Condition 2). In this triangle we have: 2121 22 21 21BBPP RBRPBBPP = (8) Cable-based Robot Manipulators with Trans lational Degrees of Freedom 221 Figure 4. The three planes formed by parallel cables and the spine meet at a point called R. Now, consider the second plane that includes P2, P3, B2 and B3: If B2P2 and B3P3 are extended, they meet at a point called R′. Note that R′ and R are both on the line of P2B2. In triangle ¨B2R′B3 we have: 3232 22 32 32BBPP BRPRBBPP =′′ (9) Also, we know from Condition 2 that ¨P1P2P3 is similar to ¨B1B2B3 and hence: 3232 2121 BBPP BBPP= (10) which, by considering Eqs. (8, 9), results in: 22 22 RBRP BRPR=′′ (11) 222 Industrial Ro botics: Theory, Modelling and Control Considering that R and R′ are on the same line, Eq. (11) states that R and R′ are coincident and a similar reasoning shows that the third plane also passes through R. Lemma 2. InBetaBot , the direction of the spine passes through point R as found in Lemma 1. Proof. Assume point R, as given in Fig. 4, is connected to O′and extended to intersect the base at point O′′ (not shown in the figure). It is needed to show that O′′ co- incides with O. This is shown by the following relations: 11 11 1 1 1:RBRP BOPOBOPO BOR =′′′′′ ′ ′′ Δ (12) 22 11 21 21 21:RBRP RBRPBBPP BRB = Δ (13) 22 22 2 2 2:RBRP BOPOBOPO BOR =′′′′′ ′ ′′ Δ (14) As a result: 22 22 11 11 BOPO RBRP RBRP BOPO ′′′= = =′′′ (15) and using a similar approach on ¨RO′′B3,¨RB 1B3 and ¨RO′′B1,we have: 33 33 11 11 BOPO RBRP RBRP BOPO ′′′= = =′′′ (16) which results in: 33 22 11 BOPO BOPO BOPO ′′′=′′′=′′′ (17) However, Condition 4 states that: 33 22 11 OBPO OBPO OBPO ′=′=′ (18) Cable-based Robot Manipulators with Trans lational Degrees of Freedom 223 By comparing Eqs. (17) and (18), it is concluded that O′ coincides with O′′. For the next two lemmas, Fig. 5 is used. In Fig. 5a, the region bounded by the cables is the polyhedral of Condition 2. The faces of this polyhedral are formed by the cables. This polyhedral has six faces Sij (i,j=1,2,3 and i<j) each of which formed by two cable directions: iuˆ and juˆ. In Fig. 5b, the force diagram of the end-effector is shown. Fs is the spine force and each force vector iiuˆσ repre- sents the force of two parallel cables and hence iσ is the total tension of the two parallel cables along iuˆ. Now, the next two lemmas follow. (a) (b) Figure 5. a) The polyhedra formed by the cables in BetaBot b) The cone of the cable forces Lemma 3. According to Fig. 5a, the half line Rl which starts from R in the direction of 1ˆu intersects line segment P1P2 at E. Proof. It is obvious that half line Rl intersects the line of P1P2 otherwise, they should be in parallel which implies that the first pair of cables are in-line contradicting Condition 3. The major effort of this proof is to show that the intersection oc- curs between P1 and P2 , i.e. E∈P1P2. For the proof, it is sufficient to show that E belongs to the polyhedral of Fig. 5a. Let Ebe the position vector of Ewith re- spect to OXYZ reference frame. It is known that: 224 Industrial Ro botics: Theory, Modelling and Control 1u REα+= (19) where R is the position vector of R and ǂis a positive real number. The poly- hedral of Fig. 5a is represented as a set of points in the Cartesian space by: { } 3,2,1, ˆ3ji jidij ij ≤ = ≤⋅ ∈ = ĳn ĭ Rφ (20) where the center of coordinate O is set to be inside the polyhedral, ijnˆ is the unit vector normal to face Sij pointing outward the polyhedral, and dij is the distance between face Sij and the center of coordinates O. In order to have ĭ∈E , the following six inequalities should be satisfied: ji jidij ij ≤ = ≤⋅ 3,2,1, ˆEn (21) Fori=j=1, we have: () 1 11 111 11 11 ˆˆ ˆˆ ˆ ˆ un Rnu R nEn ⋅ +⋅ =+⋅ =⋅ αα (22) since11SR∈ and 0 ˆˆ1 11 =⋅un , it is concluded that 11 11 11ˆ d d≤ =⋅En . Fori=j=2, we have: () 1 22 221 22 22 ˆ ˆ ˆˆ ˆ ˆ u n R nu R nE n ⋅ +⋅ =+⋅ =⋅ αα (23) it is known that 22SR∈ hence, we have: 22? 1 22 22 22 ˆ ˆ ˆ d d ≤⋅ + =⋅ u n E n α (24) which requires 0 ˆ ˆ1 22 ≤⋅u nα . To show this, an auxiliary point with position vec- tor1 2 u Pα+ is considered. This point is on cable 2 according to Fig. 5a and hence belongs to polyhedral Φ. Therefore, one of the inequalities that this point should satisfy is: ()22 1 2 22 ˆ ˆ d≤ + ⋅ u P n α (25) 2P is a vertex of the end-effector triangle and thus, 22 2PS∈ which implies that 22 2 22ˆnPd .⋅= Using this in Eq. (25) results: Cable-based Robot Manipulators with Trans lational Degrees of Freedom 225 () 0 ˆ ˆˆ ˆ ˆ ˆ 1 2222 1 22 22 1 2 22 ≤⋅≤⋅ + = + ⋅ u nu n u P n αα α d d (26) which was needed to satisfy inequality (24). Similar proof is used for i=j=3, by taking1 1 u Pα+ as the auxiliary point. Fori=1 and j=2, the inequality to be satisfied is: () 12 1 12 1212 1 1212 12 ˆˆ ˆ orˆ ˆ orˆ ddd ≤ +⋅≤ +⋅≤⋅ un Rnu R nEn αα (27) Again, since ĭ∈R , we have ˆ12 12 d≤⋅Rn . Therefore for inequality (27) to hold true, it is sufficient to show that 0 ˆˆ1 12=unα which is obvious because 1ˆu is normal to 12ˆn. A similar approach works for i=1, j=3. Finally, for i=2,j=3, we should have: () ˆ ˆ ˆ23 1 23 23 d≤ +⋅ =⋅ u R nE n α (28) Again, we have ĭ∈R and thus ˆ23 23 d≤⋅R n . It would be sufficient to show that 0ˆˆ1 23≤unα . For this purpose, consider the cone that is formed by extend- ingS12, S13and S23. This cone has a similar shape to the one of Fig. 5b. The edges of this cone are along 1ˆu,2ˆu and 3ˆu. Let the apex of this cone be called W and take 1u Wα+ as an auxiliary point which belongs to the cone and hence satisfies the following inequality: ()23 1 23 ˆ ˆ d≤ + ⋅ u W n α (29) Now, since 23 23ˆ d=⋅W n , it is concluded that 0 ˆˆ1 23≤unα which satisfies ine- quality (28) and hence ĭ∈E , which completes the proof. Lemma 4. According to the force diagram of Fig. 5b, the spine force is balanced by posi- tive σi'si=1, 2, 3 i.e.: sF u u u −= + +33 22 11 ˆ ˆ ˆ σ σ σ (30) Proof. We first show that the direction of spine force lies inside the cone formed by cables direction vectors: 1ˆu,2ˆu and 3ˆu. For this purpose, we use Condition 4 which states the spine never intersects any faces of the polyhedral of cables (Fig. 5a). Considering that the faces of the cone of Fig. 5b are parallel to S12, S13226 Industrial Ro botics: Theory, Modelling and Control and S23, respectively, it is understood that Fs never touches the faces of the cone and hence, is inside the cone. Based on the definition of a convex cone (Yamaguchi, 2002), the cone of Fig. 5b can be expressed as: { }0 ,, ˆ ˆ ˆ3 2 1 33 22 113≥ + + = ∈ = ıııııı u u uȥ Ȍ Rψ (31) Now, since Fs is always inside the cone, it can be considered as the position vector for a point inside the cone. As a result, the definition of the cone given in Eq. (31) states that: 0 ,, ˆ ˆ ˆ3 2 1 33 22 11 ≥ + + = − ııııııs u u u F (32) which completes the proof. Theorem 2. IfBetaBot satisfies Conditions 1-4 as explained before, it is tensionable every- where in its workspace. Proof. For the proof, we show that a positive spine force is statically balanced by positive tension in cables. For this purpose, first consider the force equilibrium of the end-effector (see Fig. 5b). According to Lemma 4, the force equilibrium on the end-effector is met by positive σ1,σ2 and σ3, where for instance, σ1 is the total tension of cables 1 ( τ1) and 2 ( τ2). Now, let: 1 211 2 1 212 1 σ τ σ τPPEP PPEP= = (33) therefore, we have τ1,τ2>0,τ1+τ2=σ1 . Since E is on P1P2 (Lemma 3) and using Eq. (33), the moments of 11ˆuτ and 12ˆuτ about E cancel each other. As a result, force vector 11ˆuσ applied at E is an equivalent for cable forces 11ˆuτ and 12ˆuτ . Note that the line of action of this equivalent force passes through R. Similarly, other cable forces can be replaced by equivalent forces whose lines of action pass through R. Now, based on Lemma 2, the direction of the spine also passes through the same point ( R) and hence, the equilibrium of the moments is also satisfied which completes the proof. Cable-based Robot Manipulators with Trans lational Degrees of Freedom 227 DishBot DishBot is another spatial cable-based manipulator with translational motion shown in Fig. 6. In DishBot , two independent sets of cables are used. The first set, called drive cables, moves the end-effector and the second set, named pas- sive cables, eliminates the rotation. The spine, in this design, is composed of a bar sliding inside a collar along with a spring. The collar is connected to the center of the base by a universal joint. The spring is fixed to the collar from one end and to the bar from the other end. It produces a compressive force to maintain tension in the drive cables. A ball-and-socket is used to connect the end-effector to the spine. As seen in Fig. 6b, drive cables are connected to the tip of the spine similar to the tripod design of Landsberger (Landsberger & Sheridan, 1985) or Mianowski's robot (Mianowski & Nazarczuk, 1990). Each cable is pulled and collected by a winch that is hinged to the base such that it can align itself with the cable direction. In Fig. 6c, the passive cables are shown. Each passive cable starts from the end- effector on the top and proceeds down to the base where it bends around a pulley (such as pulley i in Fig. 6c) and goes towards the spine. Using another pulley (such as pulley j) on the collar to guide the cable, it reaches the bottom end of the spine bar. Each passive cable is in series with a tensile pre- tensioning spring to produce tensile force in the cable. The length of the passive cables are constant which makes the end-effector stay parallel to the base. However, the perfect parallelness is only obtained if the radii of the two guiding pulleys are zero and the pulleys on the collar coincide with the center of the universal joint. Fig. 7 shows how the passive cables make the end-effector stay parallel to the base in a similar 2D manipulator. In practice, complete parallelness is not achieved since the pulleys have non-zero radius and they cannot be placed at the center of the universal joint; however, the error can be minimized by proper sizing and positioning of the pulleys. Assuming the passive cables are always taut and maintain the orientation of the end-effector, the kinematics of DishBot is identical to a tripod since it only depends on the drive cables. The inverse and direct kinematics have closed form solutions (Tsai, 1996). The geometrical workspace of DishBot is the half sphere above the base whose radius is the maximum length of the spine. Simi- lar to BetaBot , the size of the workspace is only limited by the maximum and minimum length of the spine. There is no possibility of interference between the cables and spine as long as: The spine is located inside the cone of drive cables, The cone of drive cables is inside the prism of passive cables. 228 Industrial Ro botics: Theory, Modelling and Control End-effector BaseU-jointSpine Electrical Motor winchCollar (a) Drive cablesPassive cables i j Pretensioner spring (b) (c) Figure 6. a) DishBot : a 3 DoF translational cable-based manipulator with two inde- pendent sets of cables. b) The configuration of the drive cables c) The configuration of the passive cables a c bd Figure 7. Assuming the lengths of the two cables ab and cd are equal, the end-effector always remains parallel to the base Cable-based Robot Manipulators with Trans lational Degrees of Freedom 229 5.1 Tensionability of DishBot For the tensionability of DishBot, Theorem 1 given in Section 3 is not sufficient. The reason is that the spine force only affects the tension of drive cables and has no influence on the passive ones. As a result, it cannot leverage all the ten- sions. However, it should be noted that each passive cable has a pre-tensioning spring to maintain the tension. Therefore, the tensionability can be still proved based on its definition in Section 2. For the proof of tensionability, we use the idea of Theorem 1 (not the theorem itself), i.e. tension can be generated in the cables to any extent while the static equilibrium is satisfied. The free body diagram of the end-effector is shown in Fig. 8. The passive ca- bles are in parallel with the spine and their tensions are shown by a super- script p while for the tension of drive cables, a superscript d is used. The static equilibrium equations are found to be: () 0w u u u F = − − − + + + =¦ ˆ ˆ ˆ ˆ3 2 1 3 3 2 2 1 1d d d sd d df τ τ τ τ τ τ (34) () () () 0 wr uwr wr M = × − × − × −=¦ ˆ ˆˆ ˆ1 3 1 2 2 1 1p p pτ τ τ (35) whereid iuˆτ 's are drive cable forces ( i=1,2,3), wˆp jτ 's are passive cable forces, rj's are the position vectors of the anchor points of the passive cables ( j=1,2,3) and wˆsf is the spine force. Figure 8. Free body diagram of DishBot’s end-effector 230 Industrial Ro botics: Theory, Modelling and Control A quick inspection of the above equations shows that Eq. (35), which is the equilibrium of the moments, is a set of homogenous equations independent from the spine force which, in general, results in zero tension for passive ca- bles. The tension of the drive cables are found from Eq. (34). Note that the drive cables form a cone which contains the spine and hence, using Lemma 4, the drive cable tensions are positive as long as the equivalent spine force, p p p sf3 2 1 τ τ τ − − − , is positive (compressive). As a conclusion, tension in the drive cables can be generated to any desired level by choosing a large enough spine force but it does not affect the tension in the passive cables. In order for DishBot to be tensionable, we also need to show that the tension in the passive cables can be increased to any desired level. For this purpose, note that, in Fig. 8, if O′ is the geometrical center of the three anchor points of the passive cables ( P1,P2 and P3) then Eq. (35) has non-zero solutions for passive cable tensions. In this case, the solution would be p p p pτ τ τ τ = = =3 2 1 where pτ is an arbitrary real value and thus can be positive. It is known that such a geometrical center coincides with the centroid of triangle ¨P1P2P3. As a result, ifO′ is the centroid of triangle ¨P1P2P3, positive equal tensions in passive ca- bles are determined only by the pre-tensioning springs. As a conclusion, DishBot is tensionable as long as the following conditions are met: 1.O′ is the centroid of ¨P1P2P3, The pretension of the pre-tensioning springs are equal (pτ) and positive (tensile), The spine lies inside the cone of the drive cables. The spine force satisfies 03 2 1 > − − −p p p sf τ τ τ which means p sf τ3> . Planar cable-based manipulators with translational motion Planar manipulators with translational motion (in XY plane) are sufficient for many industrial pick-and-place applications such as packaging and material handling. Simplicity of these manipulators compared to spatial ones further facilitates their applications where a two axis motion is sufficient (Chan, 2005). Two new designs of planar cables-based manipulators with translational mo- tion are studied here that are tensionable everywhere in their workspace. Schematic diagrams of these manipulators are shown in Fig. 9. The spine is connected to the base and end-effector by revolute joints. The end-effector is constrained by three cables. Two of the cables form a parallelogram which eliminates the rotation of the end-effector as long as the cables are taut. As a result, the end-effector can only move in X and Y directions. Cable-based Robot Manipulators with Trans lational Degrees of Freedom 231 Figure 9. Planar cable-based manipulators with pure translational degrees of freedom In the first design (Fig. 9a), the parallelogram is maintained by two winches with a common shaft which makes them move simultaneously and hence, keep the cable lengths equal. Similar to BetaBot and DishBot , the workspace of this manipulator is only limited by the minimum and maximum lengths of the 232 Industrial Ro botics: Theory, Modelling and Control spine and hence it can theoretically span a half circle above the base. In the second design (Fig. 9b), a pair of synchronous rotating arms preserves the par- allelogram without changing the length of the cables and therefore, possess a smaller workspace. The synchronization can be obtained by a pair of pulleys and a timing belt or a simple 4-bar parallelogram as seen in Fig. 9b. The kinematics of these manipulators consist of a single planar cone and hence easy to formulate for both direct and inverse solutions. In this paper, however, our main focus is on the their tensionability and rigidity which is presented in the following. 6.1 Tensionability of Planar Manipulators The planar manipulators of Fig. 9 are both tensionable everywhere in their workspaces. This can be proved using an approach similar to the one that was used for BetaBot . There are two geometrical conditions that should be met for the tensionability of these two manipulators. As depicted in Fig. 10a, these two conditions are as follows: Figure 10. a) The configuration of the cables and spine in planar manipulators, b) The free body diagram of the end-effector Condition 1. Cable 1 (Fid. 10a) is always on the right and Cable 3 is al- ways on the left side of the spine. This is obtained if the spine is hinged to the base at a proper point between the two sets of cables. Condition 2. On the end-effector, the spine and Cable 3 are concurrent at point E which is located somewhere between Cables 1 and 2. Cable-based Robot Manipulators with Trans lational Degrees of Freedom 233 To prove the tensionability, we show that a compressive spine force can be balanced by positive tensions in the cables. The proof is quite similar to the one of Theorem 2 and is briefly explained here. We first consider the force equilibrium of the end-effector subject to a com- pressive spine force. According to the free body diagram shown in Fig. 10b, we have: w u u 0w u u ˆ ˆ ˆ ˆ ˆ ˆ23 11 23 11 s s f f −= +  = + + τ σ τ σ (36) Due to Condition 1, the direction of the spine, wˆis located between 1ˆuand2ˆu (cable directions). Therefore, the projection of wˆsf− on 1ˆuand2ˆu will be posi- tive and hence 3 1,τσ >0. Now, let: 1 212 2 1 211 1 and σ τ σ τPPEP PPEP= = (37) It is clear that 1 2 1 σ ττ = + . Since 01>σ and due to the distribution given in Eq. (37), the moment of 11ˆuτ about E cancels the one of 12ˆuτ and hence, these two forces can be replaced by 11ˆuσ without violating the static equilibrium. Finally, since all three forces on the end-effector, 11ˆuσ ,11ˆuτ and 12ˆuτ , are concurrent at E, the equilibrium of the moments is also met which completes the proof. Conclusion In this paper, several new cable-based manipulators with pure translational motion were introduced and their rigidity where thoroughly studied. The sig-nificance of these new designs can be summarized in two major advantages over the other cable-based manipulators: Cables are utilized to provide kinematic constraints to eliminate rotational motion of the end-effector. In many industrial applications, reduced DoF m a n i p u l a t o r s a r e s u f f i c i e n t t o d o t h e j o b a t a l o w e r co s t ( l e s s n u m b e r o f axes). These manipulators can be rigidified everywhere in their workspace using a sufficiently large pretension in the cables. In order to study the rigidity of these manipulators, the concept of tensionabil- ity was used and a theorem was given to provide a sufficient condition for ten- sionability. Using this theorem, tensionability of each manipulator was proved 234 Industrial Ro botics: Theory, Modelling and Control using line geometry and static equilibrium in vector form. For each of these manipulators, it was shown that as long as certain conditions are met by the geometry of the manipulator, the tensionable workspace in which the manipu- lator can be rigidified, is identical to the geometrical workspace found from the kinematic analysis. BetaBot and the planar manipulators are tensionable everywhere and can be rigidified only by a sufficiently large spine force. In DishBot , on top of the geometrical conditions, a relation between the spine force and pre-tensioning springs of passive cables should be also satisfied to maintain the rigidity of the manipulator. References Barrette G.; Gosselin C. (2005), Determination of the dynamic workspace of ca- ble- driven planar parallel mechanisms, Journal of Mechanical Design , Vol. 127, No. 3, pp. 242-248 Behzadipour S. (2005), High-speed Cable-based Robots with Translational Motion , PhD Thesis, University of Waterloo, Waterloo, ON, Canada Behzadipour S.; Khajepour A., (2006), Stiffness of Cable-based Parallel Ma- nipulators with Application to the Stability Analysis, ASME Journal of Mechanical Design , Vol. 128, No. 1, 303-310 Chan E. (2005), Design and Implementation of a High Speed Cable-Based Planar Parallel Manipulator , MASc Thesis, University of Waterloo, Waterloo, ON, Canada. Clavel R., (1991), Conception d'un robot parallele rapide a 4 degres deliberate , PhD Thesis, EPFL, Lausanne Dekker R. & Khajepour A. & Behzadipour S. (2006), Design and Testing of an Ultra High-Speed Cable Robot”, Journal of Robotics and Automation , Vol. 21, No. 1, pp. 25-34 Ferraresi C.; Paoloni M.; Pastorelli S.; Pescarmona F, (2004), A new 6-DOF par- allel robotic structure actuated by wires: the WiRo-6.3, Journal of Robot- ics Systems, Vol. 21, No. 11, pp. 581-595 Gallina P; Rosati G., (2002), Manipulability of a planar wire driven haptic de- vice, Mechanism and Machine Theory , Vol. 37, pp. 215-228 Gouttefarde M.; Gosselin C. (2006), Analysis of the wrench-closure workspace of planar parallel cable-driven mechanisms, IEEE Transactions on Robotics , Vol. 22, No. 3, pp. 434-445 Kawamura S.; Choe W.; Tanak S. Pandian S.R., (1995),Development of an ul- trahigh speed robot FALCON usign wire driven systems, Proceedings of IEEE International Conference on Robotics and Automation , pp. 215-220, IEEE, 1995 Cable-based Robot Manipulators with Trans lational Degrees of Freedom 235 Khajepour A. & Behzadipour S. & Dekker R. & Chan E. (2003), Light Weight Parallel Manipulators Using Active/Passive Cables, US patent provisional file No. 10/615,595 Landsberger S.E.; Sheridan T.B., (1985), A new design for parallel link manipu- lators, Proceedings of the International Conference on Cybernetics and Society, pp. 81-88, Tuscon AZ, 1985 Landsberger S.E.; Shanmugasundram P. (1992), Workspace of a Parallel Link Crane, Proceedings of IMACS/SICE International Symposium on Robotics, Mechatron- ics and Manufacturing Systems , pp. 479-486, 1992 Ming A.; Higuchi T. (1994a), Study on multiple degree-of-freedom positioning mechanism using wires (Part1), International Journal of Japan Society of Precision Engineering , Vol. 28, No. 2, pp. 131-138 Ming A.; Higuchi T. (1994b), Study on multiple degree-of-freedom positioning mechanism using wires (Part2), International Journal of Japan Society of Precision Engineering , Vol. 28, No. 3, pp. 235-242 Ogahara Y.; Kawato Y.; Takemura K.; Naeno T., (2003), A wire-driven minia- ture five fingered robot hand using elastic elements as joints, Pro- ceedings of IEEE/RSJ International Conference on Intelligent Robots and Sys- tems , pp. 2672-2677, Las Vegas, Nevada, 2003 Oh s.; Makala K. K.; Agrawal S., (2005a) Dynamic modeling and robust con- troller design of a two-stage parallel cable robot, Multibody System Dy- namics , Vol. 13, No. 4, pp. 385-399 Oh s.; Makala K. K.; Agrawal S., Albus J. S. (2005b), A dual-stage planar cable robot: Dynamic modeling and design of a robust controller with posi- tive inputs, ASME Journal of Mechanical Design , Vol. 127, No. 4, pp. 612- 620 Pusey j.; Fattah A.; Agrawal S.; Messina E., (2004), Design and workspace analysis of a 6-6 cable-suspended parallel robot, Mechanisms and Ma- chine Theory , Vol. 39, No. 7, pp. 761-778 Robers G.R; Graham T.; Lippitt T. (1998), On the inverse kinematics, statics, and fault tolerance of cable-suspended robots, Journal of Robotic Sys- tems, Vol. 15, No. 10, pp. 581-597 Stump E.; Kumar V., (2006), Workspace of cable-actuated parallel manipula- tors, ASME Journal of Mechanical Design , Vol. 128, No. 1, pp. 159-167 Tadokoro S.; Nishioka S.; Kimura T. (1996), On fundamental design of wire configurations of wire-driven parallel manipulators with redundancy, ASME Proceeding of Japan/USA Symposium on Flexible Automation , pp. 151-158 Tsai L-W., (1996), Kinematics of A Three DOF Platform With Three Extensible Limbs, In Recent Advances in Robot Kinematics , Lenarcic J. and Parenti- Castelli V., pp. 401-410, Kluwer Academic, Netherlands 236 Industrial Ro botics: Theory, Modelling and Control Verhoeven R.; Hiller M.; Tadokoro S. (1998), Workspace, stiffness, singularities and classification of tendon-driven stewart platforms, In Advances in Robot Kinematics Analysis and Control , Lenarcic J. and Husty L., pp. 105- 114, Kluwer Academic, Netherlands Verhoeven R.; Hiller M. (2000), Estimating the controllable workspace of ten- don- based Stewart platforms, In Advances in Robot Kinematics , Lenarcic J. and Stanisic M., pp. 277-284, Kluwer Academic, Netherlands Yamaguchi F., (2002), A Totally Four-dimensional Approach / Computer-Aided Geometric Design , Springer-Verlag, Tokyo 2378 A Complete Family of Kinematically-Simple Joint Layouts: Layout Models, Associated Displacement Problem Solutions and Applications Scott Nokleby and Ron Podhorodeski Introduction Podhorodeski and Pittens (1992, 1994) and Podhorodeski (1992) defined a ki- nematically-simple (KS) layout as a manipulator layout that incorporates a spherical group of joints at the wrist with a main-arm comprised of success- fully parallel or perpendicular joints with no unnecessary offsets or link lengths between joints. Having a spherical group of joints within the layouts ensures, as demonstrated by Pieper (1968), that a closed-form solution for the inverse displacement problem exists. Using the notation of possible joint axes directions shown in Figure 1 and ar- guments of kinematic equivalency and mobility of the layouts, Podhorodeski and Pittens (1992, 1994) showed that there are only five unique, revolute-only, main-arm joint layouts representative of all layouts belonging to the KS family. These layouts have joint directions CBE, CAE, BCE, BEF, and AEF and are de- noted KS 1 to 5 in Figure 2. Figure 1. Possible Joint Directions for the KS Family of Layouts 238 Industrial Robotics: Theory, Modelling and Control KS 1 - CBE KS 2 - CAE KS 3 - BCE KS 4 - BEF KS 5 - AEF KS 6 - CCE KS 7 - BBE KS 8 - CED KS 9 - ACE KS 10 - ACF KS 11 - CFD KS 12 - BCF KS 13 - CED Figure 2. KS Family of Joint Layouts Podhorodeski (1992) extended the work of Podhorodeski and Pittens (1992, 1994) to include prismatic joints in the layouts. Podhorodeski (1992) con- cluded that there are 17 layouts belonging to the KS family: five layouts com- prised of three revolute joints; nine layouts comprised of two revolute joints and one prismatic joint; two layouts comprised of one revolute joint and two prismatic joints; and one layout comprised of three prismatic joints. However, four of the layouts comprised of two revolute joints and one prismatic joint (layouts he denotes AAE, AAF, ABF, and BAE) are not kinematically simple, by the definition set out in this chapter, due to an unnecessary offset existing between the second and third joints.A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 239 Yang et al. (2001) used the concepts developed by Podhorodeski and Pittens (1992, 1994) to attempt to generate all unique KS layouts comprised of two revolute joints and one prismatic joint. The authors identified eight layouts. Of these eight layouts, five layouts (the layouts they denote CAE, CAF, CBF, CFE, and CCE) are not kinematically simple, as defined in this chapter, in that they incorporate unnecessary offsets and one layout (the layout they denote CBE) is not capable of spatial motion. The purpose of this chapter is to clarify which joint layouts comprised of a combination of revolute and/or prismatic joints belong to the KS family. The chapter first identifies all layouts belonging to the KS family. Zero-displacement diagrams and Denavit and Hartenberg (D&H) parameters (1955) used to model the layouts are presented. The complete forward and inverse displacement solutions for the KS family of layouts are shown. The applica- tion of the KS family of joint layouts and the application of the presented for- ward and inverse displacement solutions to both serial and parallel manipula- tors is discussed. The Kinematically-Simple Family of Joint Layouts The possible layouts can be divided into four groups: layouts with three revo- lute joints; layouts with two revolute joints and one prismatic joint; layouts with one revolute joint and two prismatic joints; and layouts with three pris- matic joints. 2.1 Layouts with Three Revolute Joints Using arguments of kinematic equivalency and motion capability, Podhorode- ski and Pittens (1992, 1994) identified five unique KS layouts representative of all layouts comprised of three revolute joints. Referring to Figure 1, the joint directions for these layouts can be represented by the axes directions CBE, CAE, BCE, BEF, and AEF, and are illustrated as KS 1 to 5 in Figure 2, respec- tively. Fundamentally degenerate layouts occur when either the three axes of the main arm intersect to form a spherical group (see Figure 3a) or when the axis of the final revolute joint intersects the spherical group at the wrist (see Figure 3b), i.e., the axis of the third joint is in the D direction of Figure 1. Note that for any KS layout, if the third joint is a revolute joint, the axis of the joint cannot intersect the spherical group at the wrist or the layout will be incapable of fully spatial motion.240 Industrial Robotics: Theory, Modelling and Control (a) Layout CBF (b) Layout CBD Figure 3. Examples of the Two Types of Degenerate Revolute-Revolute-Revolute Lay- outs 2.2 Layouts with Two Revolute Joints and One Prismatic Joint Layouts consisting of two revolute joints and one prismatic joint can take on three forms: prismatic-revolute-revolute; revolute-revolute-prismatic; and revolute-prismatic-revolute. 2.2.1 Prismatic-Revolute-Revolute Layouts For a prismatic-revolute-revolute layout to belong to the KS family, either the two revolute joints will be perpendicular to one another or the two revolute joints will be parallel to one another. If the two revolute joints are perpendicu- lar to one another, then the two axes must intersect to form a pointer, other- wise an unnecessary offset would exist between the two joints and the layout would not be kinematically simple. The prismatic-pointer layout can be repre- sented by the axes directions CCE and is illustrated as KS 6 in Figure 2. For the case where the two revolute joints are parallel to one another, in order to achieve full spatial motion, the axes of the revolute joints must also be paral- lel to the axis of the prismatic joint. If the axes of the revolute joints were per- pendicular to the axis of the prismatic joint, the main-arm's ability to move the centre of the spherical group would be restricted to motion in a plane, i.e., fundamentally degenerate. In addition, a necessary link length must exist be- tween the two revolute joints. The axes for this layout can be represented with the directions BBE and the layout is illustrated as KS 7 in Figure 2. 2.2.2 Revolute-Revolute-Prismatic Layouts For a revolute-revolute-prismatic layout to belong to the KS family, either the two revolute joints will be perpendicular to one another or the two revolute joints will be parallel to one another. If the two revolute joints are perpendicu- lar to one another, then the two axes must intersect to form a pointer, other- wise an unnecessary offset would exist between the two joints and the layout would not be kinematically simple. The pointer-prismatic layout can be repre- sented by the axes directions CED and is illustrated as KS 8 in Figure 2.A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 241 For the case where the two revolute joints are parallel to one another, the axes of the revolute joints must also be parallel to the axis of the prismatic joint. In addition, a necessary link length must exist between the two revolute joints. The axes for this layout can be represented with the directions ADD. Note that for this configuration, the layout is fundamentally degenerate, unless an addi- tional link length is added between joints two and three, since without the ad- ditional link length, the axis of the second revolute joint would always pass through the centre of the spherical joint group (see Figure 4a). Figure 4b illus- trates the non-degenerate KS layout with an additional link length between the second revolute joint and the prismatic joint. However, the layout of Figure 4b is kinematically equivalent to KS 7 and therefore is not counted as a unique KS layout. (a) Layout ADD (b) Layout ADD with Offset Figure 4. Revolute-Revolute-Prismatic Layouts: a) Degenerate; b) Non-Degenerate 2.2.3 Revolute-Prismatic-Revolute Layouts For a revolute-prismatic-revolute layout, in order to achieve spatial motion and belong to the KS class, the axes of the two revolute joints must be or- thogonal to one another. The resulting KS layouts of axes can be represented by the axes directions ACE and ACF and are illustrated as KS 9 and KS 10 in Figure 2, respectively. 2.3 Layouts with One Revolute Joint and Two Prismatic Joints Layouts consisting of one revolute joint and two prismatic joints can take on three forms: prismatic-revolute-prismatic; prismatic-prismatic-revolute; and revolute-prismatic-prismatic. 2.3.1 Prismatic-Revolute-Prismatic Layouts For a prismatic-revolute-prismatic layout, the two prismatic joints must be perpendicular to each other. In order to achieve spatial motion and be kine-242 Industrial Robotics: Theory, Modelling and Control matically simple, the axis of the revolute joint must be parallel to the axis of one of the prismatic joints. The feasible layout of joint directions can be repre- sented by the axes directions CFD and is illustrated as KS 11 in Figure 2. 2.3.2 Prismatic-Prismatic-Revolute Layouts For a prismatic-prismatic-revolute layout, the two prismatic joints must be perpendicular to each other. In order to achieve spatial motion and be kine- matically simple, the axis of the revolute joint must be parallel to one of the prismatic joints. The feasible layout of joint directions can be represented by the axes directions BCF and is illustrated as KS 12 in Figure 2. 2.3.3 Revolute-Prismatic-Prismatic Layouts For a revolute-prismatic-prismatic layout, the two prismatic joints must be perpendicular to each other. In order to achieve spatial motion and be kine- matically simple, the axis of the revolute joint must be parallel to the axis of one of the prismatic joints. The feasible layout of joint directions can be repre- sented by the axes directions CCD. Note that this layout is kinematically equivalent to the prismatic-revolute-prismatic KS 11. Therefore, the revolute- prismatic-prismatic layout is not kinematically unique. For a further discus- sion on collinear revolute-prismatic axes please see Section 2.5. 2.4 Layouts with Three Prismatic Joints To achieve spatial motion with three prismatic joints and belong to the KS class, the joint directions must be mutually orthogonal. A representative lay- out of joint directions is CED. This layout is illustrated as KS 13 in Figure 2. 2.5 Additional Kinematically-Simple Layouts The layouts above represent the 13 layouts with unique kinematics belonging to the KS family. However, additional layouts that have unique joint struc- tures can provide motion that is kinematically equivalent to one of the KS lay- outs. For branches where the axes of a prismatic and revolute joint are collin- ear, there are two possible layouts to achieve the same motion. Four layouts, KS 6, 7, 11, and 12, have a prismatic joint followed by a collinear revolute joint. The order of these joints could be reversed, i.e., the revolute joint could come first followed by the prismatic joint. The order of the joints has no bearing on the kinematics of the layout, but would be very relevant in the physical design of a manipulator. Note that the d jandǉj elements of the corresponding rows in the D&H tables (see Section 3.2) would need to be interchanged along with A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 243 an appropriate change in subscripts. The presented forward and inverse dis- placement solutions in Sections 4.1 and 4.2 would remain unchanged except for a change in the relevant subscripts. In addition to the above four layouts, as discussed in Section 2.2.2, the layout shown in Figure 4b is kinematically equivalent to KS 7. Therefore, there are five additional kinematically-simple layouts that can be considered part of the KS family. Zero-Displacement Diagrams and D&H Parameters 3.1 Zero-Displacement Diagrams The zero-displacement diagrams ( ǉi = 0, for all revolute joints i ) for the KS family of layouts for Craig's (1989) convention of frame assignment are pre- sented in Figures 5 to 7. Note that the KS layouts in Figure 2 are not necessar- ily shown in zero-displacement. The rotations necessary to put each of the KS Layouts from zero-displacement configuration into the configuration illus- trated in Figure 2 are outlined in Table 1. KS Rotations KS Rotations 122πθ= 222πθ= 323πθ= 422πθ= & 23πθ= 522πθ −= & 23πθ= 623πθ −= 7 None 8 22πθ −= 923πθ= 10 None 11 None 12 23πθ= 13 None Table 1. Rotations Necessary to put Each of the KS Layouts from Zero-Displacement Configuration (Figures 5 to 7) into the Configuration Illustrated in Figure 2 244 Industrial Robotics: Theory, Modelling and Control 3.2 D&H Parameters Table 2 shows the D&H parameters for the kinematically-simple family of joint layouts. The D&H parameters follow Craig's frame assignment convention (Craig, 1989) and correspond to the link transformations: () () ( ) ( ) () () () ( ) () ( ) ( ) ( ) ( ) () ( ) () () () »»»» ¼º «««« ¬ª − −− == − − − −− − − −−− −− − − 1 0 0 0cos cos sin cos sin sinsin sin cos cos cos sin0 sin cos 1 1 1 11 1 1 11ˆ ˆ 1 ˆ 1 ˆ1 1 1 j j j j j j jj j j j j j jj j jj j j jj j ddaRotd Transa Trans Rot j j j j α α α θ α θα α α θ α θθ θθ αz z x x T (1) where T1−j jis a homogeneous transformation describing the location and orien- tation of link-frame jF with respect to link-frame 1−jF, ()1 ˆ1 −− jjRot αx denotes a rotation about the 1ˆ−jx axis by 1−jα, ()1 ˆ1 −− ja Trans jx denotes a translation along the1ˆ−jx axis by 1−ja, ()jd Trans jzˆ denotes a translation along the jzˆaxis by jd, and ()jjRot θzˆ denotes a rotation about the jzˆ axis by jθ. The homogeneous transformation of equation (1) is of the form: » ¼º « ¬ª=→− − −− 1 00011 1 1j j o oj j j j jp RT (2) where R1−j j is a 3x3 orthogonal rotation matrix describing the orientation of framejF with respect to frame 1−jF and j j o oj →− −11p is a vector from the origin of frame1−jF to the origin of frame jF.A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 245 KS 1 KS 2 KS 3 KS 4 KS 5 Figure 5. Zero-Displacement Diagrams for Layouts with Three Revolute Joints (KS 1 to 5) 246 Industrial Robotics: Theory, Modelling and Control KS 6 KS 7 KS 8 KS 9 KS 10 Figure 6. Zero-Displacement Diagrams for Layouts with Two Revolute Joints and One Prismatic Joint (KS 6 to 10) A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 247 KS 11 KS 12 KS 13 Figure 7. Zero-Displacement Diagrams for Layouts with One Revolute Joint and Two Primatic Joints (KS 11 and 12) or Three Prismatic Joints (KS 13) Forward and Inverse Displacement Solutions 4.1 Forward Displacement Solutions for the KS Family of Layouts The position and orientation of the spherical wrist frame sphF with respect to the base frame 0F is found from: » ¼º « ¬ª= =→ 1 00000 0 3 2 31 20 10spho o sph sph sphp RTTTT T (3) where the homogeneous transformation T1−j j is defined in equation (1). The transformation T0 sph is the solution to the forward displacement problem: R0 sph248 Industrial Robotics: Theory, Modelling and Control is the change in orientation due to the first three joints and spho o→00p is the loca- tion of the spherical wrist centre. The homogeneous transformations T0 sph for the KS family of layouts can be found in Tables 3 and 4. Note that in Tables 3 and 4, ic and is denote ()iθcos and ()iθsin , respectively. KS 1−jF1−jα1−jajdjθjF KS1−jF1−jα1−jajdjθjF 10F 0 0 0 1θ1F 20F 0 0 0 1θ1F 1F 2/π 0 0 2θ2F1F 2/π 0 0 2θ2F 2F 0 f 03θ3F2F 2/π− f 03θ3F 3F 2/π 0 g 0sphF3F 2/π 0 g 0sphF 30F 0 0 0 1θ1F 40F 0 0 0 1θ1F 1F 2/π 0 f2θ2F1F 0 f 02θ2F 2F 2/π− 0 0 3θ3F2F 2/π 0 0 3θ3F 3F 2/π 0 g 0sphF3F 2/π− 0 g 0sphF 50F 0 0 0 1θ1F 60F 0 0 1d 01F 1F 2/π f 02θ2F1F 0 0 0 2θ2F 2F 2/π− 0 0 3θ3F2F 2/π 0 0 3θ3F 3F 2/π 0 g 0sphF3F 2/π− 0 g 0sphF 70F 0 0 1d 01F 80F 0 0 0 1θ1F 1F 0 0 0 2θ2F1F 2/π 0 0 2θ2F 2F 0 f 03θ3F2F 2/π− 03d 03F 3F 2/π 0 g 0sphF3F 0 0 g 0sphF 90F 0 0 0 1θ1F 100F 0 0 0 1θ1F 1F 2/π 02d 2/π2F1F 2/π 02d 02F 2F 2/π 0 0 3θ3F2F 0 0 0 3θ3F 3F 2/π− 0 g 0sphF3F 2/π− 0 g 0sphF 110F 0 0 1d 01F 120F 0 0 1d 01F 1F 0 0 0 2θ2F1F 2/π 02d 02F 2F 2/π 03d 03F2F 0 0 0 3θ3F 3F 0 0 g 0sphF3F 2/π− 0 g 0sphF 130F 0 0 1d 01F 1F 2/π 02d 2/π2F 2F 2/π 03d 03F 3F 0 0 g 0sphF Table 2. D&H Parameters for the KS Layouts A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 249 KS T0 sph 1() () »»»» ¼º «««« ¬ª − −+ −+ 1 0 0 0023 2 23 2323 2 1 231 1 23123 2 1 231 1 231 gcfs c sgsfcs ssc csgsfcc sc s cc 2() () »»»» ¼º «««« ¬ª +− + − − ++ + + − − 1 0 0 032 2 32 2 3231 321 21 31 321 21 31 32131 321 21 31 321 21 31 321 gssfs ss c csgccscsfcsccscsss scccsgcssccfcccssccsc ssccc 3() () »»»» ¼º «««« ¬ª − + − − − ++ + + − − 1 0 0 032 32 2 3231 321 1 31 321 21 31 32131 321 1 31 321 21 31 321 gss ss c csgccscsfc ccscsss scccsgcssccfs cssccsc ssccc 4 »»»» ¼º «««« ¬ª − −− − − 1 0 0 003 3 3312 1 312 12 312312 1 312 12 312 gc c sgssfsss c csgscfcsc s cc 5() () »»»» ¼º «««« ¬ª − + − − ++ + + − − 1 0 0 032 32 2 3231 321 1 31 321 21 31 32131 321 1 31 321 21 31 321 gss ss c csgccscsfsccscsss scccsgcssccfccssccsc ssccc Table 3. Forward Displacement Solutions for KS 1 to 5 4.2 Inverse Displacement Solutions for the KS Family of Layouts For the inverse displacement solution, the location of the spherical wrist centre with respect to the base, spho o→00p , is known: °¿°¾½ °¯°®­ =→ zyx o o ppp sph 00p (4) Paul (1981) presented a methodology to solve the inverse displacement prob- lem of 6-joint manipulators with a spherical wrist. To demonstrate the appli- cation of this methodology to the inverse displacement problem for the KS family, KS 1 will be used as an example. 250 Industrial Robotics: Theory, Modelling and Control KS T0 sph KS T0 sph 6 »»»» ¼º «««« ¬ª +− −− − − 1 0 0 001 3 3 332 32 2 3232 32 2 32 dgc c sgss ss c csgsc sc s cc 7 »»»» ¼º «««« ¬ª − −+ 1 0 000 1000 123 2 23 2323 2 23 23 dgcfs c sgsfc s c 8() () () »»»» ¼º «««« ¬ª ++ − −+ − − − 1 0 0 003 2 2 23 21 21 1 213 21 21 1 21 gdc c sgdss ss c csgdsc sc s cc 9() () »»»» ¼º «««« ¬ª − −+ − − − −+ − 1 0 0 003 3 32 31 31 1 312 31 31 1 31 gs s cdgcc cc s scdgcs cs c ss 10 »»»» ¼º «««« ¬ª − − −+ − − − 1 0 0 003 3 321 31 31 1 3121 31 31 1 31 gc c sdcgss ss c csdsgsc sc s cc 11() () »»»» ¼º «««« ¬ª + − −+ 1 0 000 1000 13 2 2 23 2 2 2 ddgc c sdgs s c 12 »»»» ¼º «««« ¬ª +−− − 1 0 0000 100 1 3 3 323 3 3 dgc c sdgs s c 13 »»»» ¼º «««« ¬ª − −+ 1 00000101 0100 123 dddg Table 4. Forward Displacement Solutions for KS 6 to 13 From the forward displacement solution presented in Table 3 for KS 1, the fol- lowing relation exists: () () °° ¿°° ¾½ °° ¯°° ®­ = °° ¿°° ¾½ °° ¯°° ®­ −++ 1 123 223 2123 2 1 zyx ppp gcfsgsfcsgsfcc (5) where the left-hand-side of equation (5) is the last column of T0 sph. Pre- multiplying both sides of equation (5) by ()10 11 0−=T T isolates1θ to the right- hand-side of the expression: °° ¿°° ¾½ °° ¯°° ®­ + −+ = °° ¿°° ¾½ °° ¯°° ®­ −+ 1 101 11 1 23 223 2 zy xy x ppcpspspc gcfsgsfc (6) A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 251 From the second row of equation (6), a solution for 1θ can be found as: ( ) ( ) , atan2 or , atan21 1 x y x y p p pp − − = = θ θ (7) where atan2 denotes a quadrant corrected arctangent function (Paul, 1981). Squaring and adding the first three rows of equation (6) allows an expression for3s to be found thus yielding a solution for 3θ of: ( )2 where, 1, atan22 2 2 2 2 32 3 3 3fggf p p ps s sz y x − − + += − ± =θ (8) From rows one and three of equation (6), after substituting 32 32 23 sscc c − = and32 32 23 sccs s + = , expressions for 2s and 2c can be found thus yielding a solution for 2θ of: ()2 2 2 , atan2 cs =θ (9) where () () () ()31 1 3 2 22 3 31 1 3 2 22 32 2xy z xy zcgcpspf sgp sfg s f g fsgcpsp cgp cfg s f g++ + =++ ++ − =++ A similar procedure can be followed for the other KS layouts. Inverse dis- placement solutions for all 13 of the KS layouts are summarized in Tables 5 and 6. 252 Industrial Robotics: Theory, Modelling and Control KS Inverse Displacement Solutions 1 ( ) ( ) , atan2or , atan21 x y x y p p pp − − =θ ( )2 where, 1, atan22 2 2 2 2 32 3 3 3fggf p p ps s sz y x − − + += − ± =θ () ,, atan22 2 2 cs =θ ( )() () ( ) 2&2where 32 23 1 1 3 2 32 23 1 1 3 2fgs g fgpc pspcgsfcfgs g fpgsf pspcgcsz y x z y x + +− + +=+ ++ + += 2( )2 where, 1, atan22 2 2 2 2 32 3 3 3fggf p p ps s sz y x − − + += − ± =θ ( ) where, 1, atan2 322 2 2 2gsfps s sz += − ± =θ ()() () 2 23 2 3 1 2 23 2 3 1 1 1 1 & where,, atan2 y xy x y xx y p pgpcpcgsfcp pgpcpcgsfs cs+− +=++ += =θ 3( )2 where,, 1 atan22 2 2 2 2 3 32 3 3fggf p p pc ccz y x − − + += − ± =θ ( ) where, 1, atan2 322 2 2 2gsps s sz= − ± =θ ()() () 2 23 32 1 2 232 3 1 1 1 1 & where,, atan2 y xy x y xy x p ppgcf gpsccp pgpscpgcfs cs++−=++ += =θ 4( ) where,, 1 atan23 32 3 3 gp c ccz= − ± =θ ( )2 where,, 1 atan2 32 2 22 32 2 22 2 2fgsp p gsfc ccy x− − += − ± =θ ()() () 2 232 32 12 232 32 1 1 1 1 & where,, atan2 y xy xy xy x p pgpsspgscfcp ppgscf gpsss cs +− −=+− += =θ 5() () , , atan2 , atan2322 322 2 1 ¸¹·¨©§+ +− + ± = gscf gscf p p ppy x x y θ 2where2 2 2 2 2 32fgg f p p pscz y x − − + += ( ) () where,, 1 atan21 1 3 32 3 3 gpcps c ccy x− = − ± =θ ()gsf pspccgsps csy x z 31 1 2 32 2 2 2 & where,, atan2− += = =θ Table 5. Inverse Displacement Solutions for KS 1 to 5 A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 253 KS Inverse Displacement Solutions 6 2 2 2 1 g p p p dy x z + − −± = ( ) () where,, 1 atan21 3 32 3 3 gdp c ccz− = − ± =θ ()gspcgsps csx y 32 32 2 2 2 & where,, atan2−=−= =θ 7zp d=1 ( )2 where, 1, atan22 2 2 2 32 3 3 3fggf p ps s sy x − − += − ± =θ ()() ()() ()& where,, atan222 32 33 3 2 22 32 33 3 2 2 2 2gc gsfgpcpgsfc gc gsfpgsf gpcs csy x y x + +− += + ++ += =θ 8 ( ) ( ) , atan2or , atan21 x y x y p p pp − − =θ g p p p dz y x − + + ±=2 2 2 3 ()gdpcgdpspcs csz y x +=+− −= = 32 31 1 2 2 2 2 & where,, atan2 θ 9 ( ) ( ), atan2or , atan21 y x y x pp p p − − =θ 2 2 1 1 2 z y x p g pcps d − ± − = () ( )gdpcps cgp s csy x z 2 1 1 3 3 3 3 3 & where,, atan2 − − = −= =θ 10 ( ) gp c ccz= − ± =3 32 3 3 where,, 1 atan2 θ 22 32 2 2 gsp p dy x − + ±= ()2 22 3 1 2 22 3 1 1 1 1 & where,, atan2 y xy x y xx y p ppd gpscp ppd gpss cs+− −=++ −= =θ 11zp d=1 g p p dy x − + ±=2 2 3 ()gdpcgdps csy x +−=+= = 32 32 2 2 2 & where,, atan2 θ 12yp d −=2 2 2 1 g p p dx z + −± = () () gdp c gp s csz x 1 3 3 3 3 3 & where,, atan2 − = −= =θ 13 gp dx− =3 yp d −=2 zp d=1 Table 6. Inverse Displacement Solutions for KS 6 to 13 254 Industrial Robotics: Theory, Modelling and Control Referring to Tables 5 and 6, for KS 1 to 6, 8, 9, and 10, up to four possible solu- tions exist to the inverse displacement problem. For KS 7, 11, and 12, up to two possible solutions exist for the inverse displacement problem. For KS 13 there is only one solution to the inverse displacement problem. For the inverse displacement solutions presented, undefined configurations occur when the spherical wrist centre of the arm intersects either the first or second joint axes, provided the axes are for a revolute joint. In such a configu- ration, the inverse solution becomes undefined, i.e., an infinity of possible so- lutions exist. Looking at KS 3 of Figure 5 as an example, if 03=s as illustrated, the spherical wrist centre intersects the second joint axis and the solution for 2θ becomes arbitrary. Similarly, if 0= =y xp p , the spherical wrist centre inter- sects the first joint axis and the solution for 1θ becomes arbitrary. Table 7 reports all of the undefined configurations for the KS family of layouts. If an undefined configuration was encountered, a value would be assigned to the arbitrary joint displacement. KS Undefined Configurations KS Undefined Configurations 1 arbitraryis 01θ= =y xp p arbitraryis 0 22 32 2θ= + + fgs g f2 arbitraryis 01θ= =y xp p arbitraryis 02 3 θ= +gsf 3 arbitraryis 01θ= =y xp p arbitraryis 02 3 θ=s4 arbitraryis 01θ= =y xp p arbitraryis 02 3 θ=s 5 arbitraryis 01θ= =y xp p arbitraryis 02 3 θ=s6 arbitraryis 02 3 θ=s 7() arbitraryis 0222 32 3 θ= + + gc gsf 8 arbitraryis 01θ= =y xp p arbitraryis 02 3 θ=+gd 9 arbitraryis 01θ= =y xp p 10 arbitraryis 01θ= =y xp p 11 arbitraryis 02 3 θ=+gd 12 None 13 None Table 7. Undefined Configurations for the Inverse Displac ement Solutions of the KS Layouts A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 255 Discussion 5.1 Application of the KS Layouts The KS family of layouts can be used as main-arms for serial manipulators or as branches of parallel manipulators. For example, KS 1 is a common main- arm layout for numerous industrial serial manipulators. KS 4 is the branch configuration used in the RSI Research 6-DOF Master Controller parallel joy- stick (Podhorodeski, 1991). KS 8 is a very common layout used in many paral-lel manipulators including the Stewart-Gough platform (Stewart, 1965-66). KS 13 is the layout used in Cartesian manipulators. The choice of which KS layout to use for a manipulator would depend on fac- tors such as the shape of the desired workspace, the ease of manufacture of the manipulator, the task required, etc. For example, layout KS 1 provides a large spherical workspace. Having the second and third joints parallel in KS 1 al- lows for the motors of the main-arm to be mounted close to the base and a simple drive-train can used to move the third joint. 5.2 Reconfigurable Manipulators KS layouts are also very useful for reconfigurable manipulators. Podhorode- ski and Nokleby (2000) presented a Reconfigurable Main-Arm (RMA) manipu- lator capable of configuring into all five KS layouts comprised of revolute only joints (KS 1 to 5). Depending on the task required, one of the five possible lay- outs can be selected. Yang, et al. (2001) showed how KS branches are useful for modular recon- figurable parallel manipulators. 5.3 Application of the Presented Displacement Solutions 5.3.1 Serial Manipulators If a KS layout is to be used as a main-arm of a serial manipulator, the spherical wrist needs to be actuated. Figure 8 shows the zero-displacement configura- tion and Table 8 the D&H parameters for the common roll-pitch-roll spherical- wrist layout. The wrist shown in Figure 8 can be attached to any of the KS layouts.256 Industrial Robotics: Theory, Modelling and Control Figure 8. Zero-Displacement Diagram for the Roll-Pitch-Roll Spherical Wrist 1−jF1−jα1−jajdjθjF sphF 0 0 0 4θ4F 4F 2/π− 0 0 5θ5F 5F 2/π 0 0 6θ6F Table 8. D&H Parameters for the Roll -Pitch-Roll Spherical Wrist For the KS family of layouts with a spherical wrist, the forward displacement solution is: () ( ) TTT TTTT TTTT T6 60 6 5 64 5 43 2 31 20 10 eesph sph eesph sph ee = = (10) where T6 ee is the homogeneous transformation describing the end-effector frameeeF with respect to frame 6F and would be dependent on the type of tool attached, T0 sph is defined in equation (3), and Tsph 6 is: »»»» ¼º «««« ¬ª −+ − +− − − = 1 0 0 0000 5 65 6554 64 654 64 65454 64 654 64 654 6c ss csssccscs scccssccsscc ssccc sphT (11) For a 6-joint serial manipulator, Pieper (1968) demonstrated that for a manipu- lator with three axes intersecting, a closed-form solution to the inverse dis- placement problem can be found. As demonstrated by Paul (1981), for a 6- joint manipulator with a spherical wrist, the solutions for the main-arm and wrist displacements can be solved separately. Therefore, the presented inverse A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 257 displacement solutions for the KS family of layouts (see Section 4.2) can be used to solve for the main-arm joint displacements for serial manipulators that use KS layouts as their main-arm and have a spherical wrist. For the inverse displacement solution of the main-arm joints, the location ( 6 00 o o→p ) and orientation ( R0 6) of frame 6F with respect to the base frame in terms of the known value T0 ee can be found from: () » ¼º « ¬ª= = =→ 1 0006 00 0 6 601-6 0 0 6o o ee ee ee eep RTT TT T (12) where Tee 6 is constant and known. Since the manipulator has a spherical wrist: °¿°¾½ °¯°®­ = = = =→ → → → zyx o o o o o o o o ppp sph 4 0 5 0 6 0 00 0 0 0p p p p (13) wherexp,yp, and zp are found from equation (12). The inverse displacement solutions for the KS family of layouts discussed in Section 4.2 can now be used to solve for the main-arm joint displacements. For the inverse displacement solution of the spherical wrist joints, in terms of the known value T0 ee, the orientation of 6F with respect to the base frame, R06, was defined in equation (12). Note that: »»» ¼º ««« ¬ª = = = 33 32 3123 22 2113 12 11 0 63 00 60 33 6 r r rr r rr r r TRR RR R (14) Since the main arm joint displacements were solved above, the elements of matrix R3 0 are known values and thus the right-hand-side of equation (14) is known, i.e., ijr,i= 1 to 3 and j = 1 to 3, are known values. Substituting the elements of the rotation matrix RR Rsph sph 63 3 6= into equation (14) yields: »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª −+ − +− − − = =33 32 3123 22 2113 12 11 5 65 6554 64 654 64 65454 64 654 64 654 3 63 3 6 r r rr r rr r r c ss csssccscs scccssccsscc ssccc sphsph sph R RR R (15) 258 Industrial Robotics: Theory, Modelling and Control where R3 sph is dependent on the D&H parameter 3αfor the manipulator, i.e.: 2if, 01 01000012if, 0101 000010 if, 100010001 333333 παπαα −= »»» ¼º ««« ¬ª −== »»» ¼º ««« ¬ª − == »»» ¼º ««« ¬ª = RRR sphsphsph (16) Equation (15) can be used to derive expressions for the wrist joint displace- ments4θ,5θ, and 6θ. For example, if 23π α= , equation (15) becomes: »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª + − +− −− − −33 32 3123 22 2113 12 11 54 64 654 64 6545 65 6554 64 654 64 654 r r rr r rr r r ssccscs scccsc ss cssccsscc ssccc (17) Using element (2, 3) of equation (17) allows 5θ to be solved as: ( )23 5 52 5 5 where,, 1 atan2 r c cc −= − ± =θ (18) Using elements (1, 3) and (3, 3) of equation (17) allows 4θ to be solved as: () & where,, atan2 513 4 533 4 4 4 4srcsrs cs = = =θ (19) Using elements (3, 1) and (3, 2) of equation (17) allows 6θ to be solved as: ()6 6 6 , atan2 cs =θ (20) where 43 1 4 53 2 6 22 2 45 4 45 3 1 4 3 2 6 22 2 45 4cr scrssc c scr crcsc c−+=−− −−=−−A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 259 Note that if 05=s , joint axes 4 and 6 are collinear and the solutions for 4θ and 6θ are not unique. In this case, 4θ can be chosen arbitrarily and 6θ can be solved for. Similar solutions can be found for the cases where 3α equals 0 and 2π− . 5.3.2 Parallel Manipulators Two frames common to the branches of the parallel manipulator are estab- lished, one frame attached to the base (baseF) and the other attached to the plat- form (platF). The homogeneous transformations from the base frame baseF to the base frame of each of the m branches iF0 are denoted Tbase i0,i= 1 to m. The homogeneous transformations from the platform frame platF to the m passive spherical group frames isphF are denoted Tplat sphi,i= 1 to m. Note that for a given parallel manipulator all Tbase i0 and Tplat sphi would be known and would be con- stant. For the inverse displacement solution, for the ith branch, the location and orien- tation of the spherical wrist frame, isphF, with respect to the base frame of the branch, iF0, in terms of the known value Tbase plat can be found from: () » ¼º « ¬ª= = =→ 1 00000 0 01- 00isph ii i i ii i ii io o sph plat sphbase plat baseplat sphbase platbase sphp RTTT TT T T (21) where Ri isph0 is the orientation of isphF with respect to iF0 and isph ii o o→00p is the po- sition vector from the origin of iF0 to the origin of isphF with respect to iF0. The position vector is defined as: °¿°¾½ °¯°®­ =→ iii isph ii zyx o o ppp 00p (22) where ixp, iyp, and izp are known values. The inverse displacement solutions for the KS family of layouts shown in Section 4.2 can then be used to solve for the joint displacements for branches i =1 to m. Unlike the forward displacement problem of serial manipulators, the forward displacement problem of parallel manipulators is challenging. Raghavan 260 Industrial Robotics: Theory, Modelling and Control (1993) showed that for the general 6-61 Stewart-Gough platform up to 40 solu- tions could exist to the forward displacement problem. Note that the notation i-j denotes the number of connection points of the branches at the base and platform, respectively. Innocenti and Parenti-Castelli (1990) showed that for a class of parallel ma- nipulators that have the branches connected at three distinct points on the end- effector platform (e.g., 6-3 and 3-3 layouts), the forward displacement problem can be reduced to a 16th order polynomial of one variable leading to a maxi- mum of 16 possible solutions to the forward displacement problem. Numerous researchers (e.g., Inoue, et al. (1986); Waldron, et al. (1989); Cheok, et al. (1993); Merlet (1993); Notash and Podhorodeski (1994 and 1995); and Baron and Angeles (2000)) have shown that utilizing redundant sensing in parallel manipulators is necessary to achieve a unique solution to the forward displacement problem. For the purposes of the solutions presented here, it is assumed that the manipulator is redundantly sensed and that the positions of the passive spherical groups ( ip,i = 1 to m) would be known. Noting that: » ¼º « ¬ª=→ 1 000plat base o obase base plat base platp RT (23) For 6-3 and 3-3 layouts, the origin of platF can be found as: () 33 2 1 pppp++=→base o obase plat base (24) where1p,2p, and 3p are the positions of the passive spherical groups. The positions of the passive spherical groups can be found using the solutions pre- sented in Tables 3 to 4. The orientation of the platform frame can be found as: [] aon Rbase base plat= (25) where 1Note that the notation i-j denotes the number of connection points of the branches at the base and plat- form, respectively.A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 261 n a oc nc nappppn base base basebase basebase base basebase base 2 32 3 × =××=¸¸ ¹· ¨¨ ©§ −−= with ¸¸ ¹· ¨¨ ©§ −−= 2 12 1 ppppcbase base For 6-6 and 3-6 layouts, the origin of platF can be found as: () 66 5 4 3 2 1 ppppppp+++++=→base o obase plat base (26) where1p to 6p are the positions of the passive spherical groups. Note that it is assumed that the passive spherical groups are symmetrically distributed about the platform. The positions of the passive spherical groups can be found using the solutions presented in Tables 3 and 4. The orientation of the platform frame can be found as: [] aon Rbase base plat= (27) where n a oc nc nappppn base base basebase basebase base baseb cb cbase base × =××=¸¸ ¹· ¨¨ ©§ −−= with () () () 222 6 54 32 1 pp ppp ppp pp pp pc + =+ =+ =−−= cbab ab a base262 Industrial Robotics: Theory, Modelling and Control Conclusions The complete set of layouts belonging to a kinematically simple (KS) family of spatial joint layouts were presented. The considered KS layouts were defined as ones in which the manipulator (or branch of a parallel manipulator) incor- porates a spherical group of joints at the wrist with a main-arm comprised of successfully parallel or perpendicular joints with no unnecessary offsets or lengths between joints. It was shown that there are 13 layouts having unique kinematics belonging to the KS family: five layouts comprised of three revolute joints; five layouts comprised of two revolute joints and one prismatic joint; two layouts comprised of one revolute joint and two prismatic joints; and one layout comprised of three prismatic joints. In addition, it was shown that there are a further five kinematically-simple lay- outs having unique joint structures, but kinematics identical to one of the 13 KS layouts. Zero-displacement diagrams, D&H parameters, and the complete forward and inverse displacement solutions for the KS family of layouts were presented. It was shown that for the inverse displacement problem up to four possible solu- tions exist for KS 1 to 6, 8, 9, and 10, up to two possible solutions exist for KS 7, 11, and 12, and only one solution exists for KS 13. The application of the KS family of joint layouts and the application of the presented forward and in- verse displacement solutions to both serial and parallel manipulators was dis-cussed. Acknowledgements The authors wish to thank the Natural Sciences and Engineering Research Council (NSERC) of Canada for providing funding for this research. A Complete Family of Kinematically-Simple Joint Layouts: Layout Models… 263 References Baron, L. & Angeles, J. (2000). The Direct Kinematics of Parallel Manipulators Under Joint-Sensor Redundancy. IEEE Transactions on Robotics and Automation , Vol. 16, No. 1, pp. 12-19. Cheok, K. C.; Overholt, J. L. & Beck, R. R. (1993). Exact Methods for Determin- ing the Kinematics of a Stewart Platform Using Additional Displace-ment Sensors. Journal of Robotic Systems , Vol. 10, No. 5, pp. 689-707. Craig, J. J. (1989). Introduction To Robotics: Mechanics and Control - Second Edi- tion, Addison-Wesley Publishing Company, Don Mills, Ontario, Can- ada. Denavit, J. & Hartenberg, R. S. (1955). A Kinematic Notation for Lower-Pair Mechanisms Based on Matrices. Transactions of the ASME, Journal of Ap- plied Mechanics , June, pp. 215-221. Innocenti, C. & Parenti-Castelli, V. (1990). Direct Position Analysis of the Stewart Platform Mechanism. Mechanism and Machine Theory , Vol. 25, No. 6, pp. 611-621. Inoue, H.; Tsusaka, Y. & and Fukuizumi, T. (1986). Parallel Manipulator, In: Robotics Research: The Third International Symposium, Faugeras, O. D. & Giralt, G., (Ed.), pp. 321-327, MIT Press, Cambridge, Massachusetts, USA. Merlet, J.-P. (1993). Closed-Form Resolution of the Direct Kinematics of Paral- lel Manipulators Using Extra Sensors Data, Proceedings of the 1993 IEEE International Conference on Robotics and Automation - Volume 1 , May 2-6, 1993, Atlanta, Georgia, USA, pp. 200-204. Notash, L. & Podhorodeski, R. P. (1994). Complete Forward Displacement So- lutions for a Class of Three-Branch Parallel Manipulators. Journal of Ro- botic Systems , Vol. 11, No. 6, pp. 471-485. Notash, L. & Podhorodeski, R. P. (1995). On the Forward Displacement Prob- lem of Three-Branch Parallel Manipulators. Mechanism and Machine Theory , Vol. 30, No. 3, pp. 391-404. Paul, R. P. (1981). Robot Manipulators: Mathematics, Programming, and Control , MIT Press, Cambridge, Massachusetts, USA. Pieper, D. L. (1968). The Kinematics of Manipulators Under Computer Control . Ph.D. Dissertation, Stanford University, Stanford, California, USA. Podhorodeski, R. P. (1991). A Screw Theory Based Forward Displacement So- lution for Hybrid Manipulators, Proceedings of the 2 nd National Applied Mechanisms and Robotics Conference - Volume I , November 3-6, 1991, Cin- cinnati, Ohio, USA, pp. IIIC.2--1 - IIIC.2-7. Podhorodeski, R. P. (1992). Three Branch Hybrid-Chain Manipulators: Struc- ture, Displacement, Uncertainty and Redundancy Related Concerns, Proceedings of the 3rd Workshop on Advances in Robot Kinematics , Septem- ber 7-9, 1992, Ferrara, Italy, pp. 150-156. 264 Industrial Robotics: Theory, Modelling and Control Podhorodeski, R. P. & Nokleby, S. B. (2000). Reconfigurable Main-Arm for As- sembly of All Revolute-Only Kinematically Simple Branches. Journal of Robotic Systems , Vol. 17, No. 7, pp. 365-373. Podhorodeski, R. P. & Pittens, K. H. (1992). A Class of Hybrid-Chain Manipu- lators Based on Kinematically Simple Branches, Proceedings of the 1992 ASME Design Technical Conferences - 22nd Biennial Mechanisms Conference , September 13-16, 1992, Phoenix, Arizona, USA, pp. 59-64. Podhorodeski, R. P. & Pittens, K. H. (1994). A Class of Parallel Manipulators Based on Kinematically Simple Branches. Transactions of the ASME, Journal of Mechanical Design , Vol. 116, No. 3, pp. 908-914. Raghavan, M. (1993). The Stewart Platform of General Geometry Has 40 Con- figurations. Transactions of the ASME, Journal of Mechanical Design , Vol. 115, No. 2, pp. 277-282. Stewart, D. (1965-66). A Platform With Six Degrees of Freedom . Proceedings of the Institution of Mechanical Engineers, Vol. 180, Part 1, No. 15, pp. 371-386. Waldron, K. J.; Raghavan, M. & Roth, B. (1989). Kinematics of a Hybrid Series- Parallel Manipulation System. Transactions of the ASME, Journal of Dy- namic Systems, Measurement, and Control , Vol. 111, No. 2, pp. 211-221. Yang, G.; Chen, I.-M.; Lim, W. K. & Yeo, S. H. (2001). Kinematic Design of Modular Reconfigurable In-Parallel Robots. Autonomous Robots , Vol. 10, Issue 1, pp. 83-89. 2659 On the Analysis and Kinematic Design of a Novel 2-DOF Translational Parallel Robot Jinsong Wang, Xin-Jun Liu and Chao Wu Introduction The conceptual design of parallel robots can be dated back to the time when Gough established the basic principles of a device with a closed-loop kine- matic structure (Gough 1956), that can generate specified position and orienta-tion of a moving platform so as to test tire wear and tear. Based on this princi- ple, Stewart designed a platform for use as an aircraft simulator in 1965 (Stewart 1965). In 1978, Hunt (1978) made a systematic study of robots with parallel kinematics, in which the planar 3-RPS (R-revolute joint, P-prismatic joint, and S-spherical joint) parallel robot is a typical one. Since then, parallel robots have been studied extensively by numerous researchers. The most studied parallel robots are with 6 DOFs. These parallel robots pos- sess the advantages of high stiffness, low inertia, and large payload capacity. However, they suffer the problems of relatively small useful workspace and design difficulties (Merlet 2000). Furthermore, their direct kinematics possess a very difficult problem; however the same problem of parallel robots with 2 and 3 DOFs can be described in a closed form (Liu 2001). As is well known, there are three kinds of singularities in parallel robots (Gosselin and Angeles 1990). Moreover, not all singularities of a 6-DOF parallel robot can be found easily. But for a parallel robot with 2 and 3 DOFs, the singularities can always be identified readily. For such reasons, parallel robots with less than 6 DOFs, especially 2 and 3 DOFs, have increasingly attracted more and more research- ers’ attention with respect to industrial applications (Tsai & Stamper 1996; Ceccarelli 1997; Tonshoff et al 1999; Siciliano 1999; Liu et al. 2001; Liu et al. 2005; Liu & Kim 2003). In these designs, parallel robots with three translational DOFs have been playing important roles in the industrial applications (Tsai & Stamper 1996; Clavel 1988; Hervé 1992; Kim & Tsai 2002; Zhao & Huang 2000; Carricato & Parenti-Castelli 2001; Kong & Gosselin 2002; Liu et al. 2003), espe- cially, the DELTA robot (Clavel 1988), which is evident from the fact that the design of the DELTA robot is covered by a family of 36 patents (Bonev 2001). Tsai’s robot (Tsai & Stamper 1996), in which each of the three legs consists of a parallelogram, is the first design to solve the problem of UU chain. A 3-266 Industrial Robotics: Theory, Modelling and Control translational-DOF parallel robot, Star, was designed by Hervé based on group theory (Hervé 1992). Such parallel robots have wide applications in the indus- trial world, e.g., pick-and-place application, parallel kinematic machines, and medical devices. The most famous planar 2-DOF parallel robots (Asada & Kanade 1983; McCloy 1990; Gao et al. 1998) are the well-known five-bar mechanism with prismatic actuators or revolute actuators. In the case of the robot with revolute actuators, the mechanism consists of five revolute pairs and the two joints fixed to the base are actuated. In the case of the robot with prismatic actuators, the mecha- nism consists of three revolute pairs and two prismatic joints, in which the prismatic joints are usually actuated. The output of the robot is the transla- tional motion of a point on the end-effector, i.e., the orientation of the end- effector is also changed correspondingly. Accordingly, some versions of the 2-DOF translational parallel robot (TPR) have been disclosed. One of them has been applied in precise pick & place operations at high speed in IWF at Tech- nical University of Braunschweig. In 2001, another 2-DOF TPR has been pro- posed for the conceptual design of a 5-axis machine tool (Liu 2001). The struc- ture, kinematics and dynamics of the TPR were discussed in details (Liu et al., 2002; Liu et al., 2005). Recently, a 2-DOF TPR with revolute actuators was in- troduced (see Table 1 in (Liu & Wang, 2003); Huang et al., 2004). The TPR pre- sented in (Liu 2001; Liu et al., 2005) has been used in the design of a planer machine tool with a gantry structure instead of a traditional one with serial chains to improve its stiffness and inertia characteristics. However, all of these TPRs consist of at least of one parallelogram. Here, a novel 2-DOF TPR with only revolute and prismatic joints will be proposed. The robot can position an objective with constant orientation with high speed. As it is one of the most important and challenging issues in the parallel robot, optimal kinematic design has drawn more and more researchers’ attention (Gosselin & Angeles, 1989; Chablat & Wenger, 2003; Stock & Miller, 2004; Ot- taviano & Ceccarelli, 2002; Cervantes-Sánchez et al., 2001). The objective of op- timal kinematic design is determining the dimension or link length of a robot with respect to desired performance(s). Due to the parameter infinity and the instability of performance in a whole workspace, optimal kinematic design is one of the most challenging problems in the field of parallel robot. The com- monly used methods are first to develop an objective function and then to reach the result using the numerical method with an algorithm. These meth- odologies have the disadvantages in common, i.e., the objective function is dif- ficult to be established; the numerical procedure may lead to a solution that is quite far away from the optimal solution; the process is iterative and time con- suming; and, most fatally, only one optimal solution can be provided. To over- come the disadvantages, in this chapter, a new optimal design methodology will be proposed for the parallel robot. Using a normalization method, the di- mensional characteristic parameters of the robot will be normalized. The nor-On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 267 malization can guarantee that a dimensional robot and its corresponding nor- malized robot are similar not only in size but also in performance. The dimen- sional robot is defined as similarity robot (SR), and the normalized robot is re- ferred to as basic similarity robot (BSR). A design space which embodies all kinds of BSRs will be established. The space can be used not only in analysis but also in the optimal design of the parallel robot. Within the design space, the performance atlas that illustrates the relationship between a performance index and the BSRs can be plotted. The optimal kinematic design can be im-plemented with respect to the performance atlases. Design examples will be finally given in the chapter. Compared with the traditional design methods, the proposed optimal design methodology has some advantages as follows: (a) one performance index corresponds to one atlas; (b) for such a reason in (a), the fact that some performance indices are antagonistic is no longer a problem in the design; (c) the optimal design process can consider multi-objective func- tions or multi-indices, and also guarantees the optimal result; and finally, (d) the design method provides a set of possible solutions, and ideally, all the de- sign solutions. Description of the 2-DOF TPR and its Topological Architectures 2.1 Architecture description The novel 2-DOF translational parallel robot proposed here is shown in Fig. 1(a). A schematic of the robot is shown in Fig. 1(b). The end-effector of the ro- bot is connected to the base by two kinematic legs 1 and 2. Leg 1 consists of three revolute joints and leg 2 two revolute joints and one cylinder joint, or three revolute joints and one prismatic joint. In each leg, the revolute joints are parallel to each other. The axes of the revolute joints in leg 1 are normal to those of the joints in leg 2. The two joints attached to the end-effector are put in the adjacent sides of a square. The kinematic chain of the robot is denoted as RRR-RRC (C-cylinder joint) or RRR-RRRP. 2.2 Capability Here, a Plücker coordinate like $ j=(x,y,z;x,y,z) is used to describe the capability of an object j. In $j,Trj=(x,y,z) and Roj=(x,y,z) express the translation and rotation of the object, respectively. If an element in $ is equal to 0, there is no such a translation or rotation. If it is equal to 1, there is the capa- bility. For example, x=0 means that the object has no the translation along the x-axis; y=1 indicates that the object can rotate about the y-axis.268 Industrial Robotics: Theory, Modelling and Control Observing only the leg 1, the Plücker coordinate of the end-effector in the leg can be written as $1=(1, 1, 0; 0, 0, 1). Letting the leg 1 alone, the Plücker coordi- nate of the end-effector with the leg 2 can be expressed as $2=(1, 1, 1; 1, 0, 0). Then, the intersection of the two Plücker coordinates $1 and $2 is $, i.e., $=$ 1∩$1=(1, 1, 0; 0, 0, 1) ∩(1, 1, 1; 1, 0, 0)= (1, 1, 0; 0, 0, 0) (1) which describes the capability of the robot, i.e., the translations of the end- effector along the x and y axes. That means the end-effector has two purely translational degrees of freedom with respect to the base. (a) (b) Figure 1. The 2-DOF translational parallel robot: (a) the CAD model; (b) the schematic On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 269 2.3 Topological architectures Observing the robot shown in Fig. 1, it is not difficult to reach such a conclu- sion that if the axes of the joints in the leg 1 are normal to those of the joints in the leg 2 the robot will have two translational DOFs. Based on this idea, some topological architectures are shown in Fig. 2. It is noteworthy that the leg 2 shown in Fig. 1 and Fig. 2 can be also the kinematic chain RRR(Pa) shown in Fig. 3, where Pa means planar parallelogram. Kinematics Analysis Although the robot has some topologies, this chapter consideres only the ar- chitecture shown in Fig. 1. In this section, the inverse and forward kinematics of the robot will be given. 3.1 Inverse kinematics As illustrated in Fig. 1(b), a reference frame ℜ: xyO− is fixed to the base at the joint point A 1 and a moving reference frame ℜ′: yx O ′′−′ is attached to the end- effector, where O′ is the reference point on the end-effector. Vectors ℜip ( 2,1=i ) will be defined as the position vectors of points iP in frames ℜ, and vectorsℜib ( 2,1=i ) as the position vectors of points iB in frame ℜ. The geo- metric parameters of the robot are ()11 11 rR BA = , ()22 11 rR PB = , ()33rR PPi= , ()11 22 lL BA = , ()22 22 lL PB = , and the distance between the point A 1 and the guideway is ()33lL , where Rn and Ln (n=1,2,3) are dimensional parameters, and rn and ln non-dimensional parameters. The position of point O′ in the fixed frame ℜ is denoted as vector ()T,yx=ℜc (2) (a)270 Industrial Robotics: Theory, Modelling and Control (b) (c) Figure 2. Some topological architectures: (a) RRR-RRRP chain (arrangement is differ- ent from that shown in Fig. 1); (b) RPR-RRRP chain; (c) PRR-RRRP chain. The vectors of ℜ1b in the fixed frame ℜ can be written as ()T 1 1 1 sin cos θ θR R=ℜb (3) where θ is the actuated input for the leg 1. Vector ℜ1p in the fixed frame ℜ can be written as () ( )T 3T 3 1 0 yRx R −= + −=ℜ ℜ c p (4) Figure 3. One topological architecture of the leg 2 The inverse kinematics problem of the leg 1 can be solved by writing following constraint equation 2 1 1 R= −ℜ ℜb p (5) that is On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 271 () ()2 22 12 1 3 sin cos R Ry R Rx = −+ − − θ θ (6) Then, there is ()m1tan2−=θ (7) where aac b bm242− +−=σ (8) 1 or1 − =σ () ()1 32 22 12 2 3 2 RRx R R y Rxa − + − + + −= 14yR b−= () ()1 32 22 12 2 3 2 RRx R R y Rxc − − − + + −= For the leg 2, it is obvious that xs= (9) in which s is the input of the leg 2. From Eqs. (8) and (9), we can see that there are two solutions for the inverse kinematics of the robot. Hence, for a given ro- bot and for prescribed values of the position of the end-effector, the required actuated inputs can be directly computed from Eqs. (7) and (9). To obtain the configuration as shown in Fig.1, parameter σ in Eq. (8) should be 1. This con- figuration is called the “+“ working mode. When 1−=σ , the corresponding configuration is referred to as the “ ɔ“ working mode. 3.2 Forward kinematics The forward kinematic problem is to obtain the output with respect to a set of given inputs. From Eqs. (6) and (9),one obtains f ey σ+= (11) and sx= (12) where, θsin1Re= and ()2 1 32 2 cosθ R Rs Rf − −− = . Therefore, there are also two forward kinematic solutions for the robot. The parameter 1−=σ corre-272 Industrial Robotics: Theory, Modelling and Control sponds to the configuration shown in Fig. 1, which is denoted as the down- configuration . When 1=σ , the configuration is referred to as the up- configuration . These two kinds of configurations correspond to two kinds of as- sembly modes of the robot. Figure 4 illustrates two kinds of working modes of the robot. The two kinds of assembly modes are shown in Fig. 5. In this chapter, the robot with both the “+“ working mode and down-configuration will be considered only. (a) (b) Figure 4. Two kinds of working modes: (a) “+“ working mode; (b) “ ɔ“ working mode (a) (b) Figure 5. Two kinds of assembly modes: (a) down-configuration ; (b) up-configurationOn the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 273 Singularity Analysis 4.1 Jocabian matrix Equations (6) and (9) can be differentiated with respect to time to obtain the velocity equations. This leads to xs= (13) () [] () () y Ryx R Rx Rx yR    θ θ θθ θ sin cos sin cos1 1 3 3 1 −+ − −= −− (14) which can be written in an equation of the form pBqA= (15) where ()Tθs=q and ()Tyx=p are the joint and Cartesian space velocity vectors, respectively, and A and B are , respectively, the 22× matrices and can be expressed as () »» ¼º «« ¬ª − −= θ θ sin cos 00 1 3 1 1 RxR yRA , and »» ¼º «« ¬ª − − −= θ θ sin cos0 1 1 1 3 Ry R RxB (16) If matrix A is nonsingular, the Jacobian matrix of the robot can be obtained as () ()»» ¼º «« ¬ª − −− − −− − = =− θ θθ θ θθ sin cossin sin coscos0 1 3 1 11 3 1 11 31 RxR yRRy RxR yRR Rx BAJ (17) from which one can see that there is no any parameter of Ln (n=1,2,3) in this matrix. 4.2 Singularity In the parallel robot, singularities occur whenever A,B or both, become sin- gular. As a singularity leads to an instantaneous change of the robot’s DOF, the analysis of parallel robots has drawn considerable attention. For the paral- lel robot studied here, since there is no any parameter of the leg 2 involved in the Jacobian matrix (see Eqs. (16) and (17)), the singularity is actually only that of the leg 1. The stationary singularity occurs when A becomes singular but B remains invertible. 0=A leads to () 0 sin cos3 1 1 = − − θ θ RxR yR , i.e. ()3 tan Rxy − =θ .274 Industrial Robotics: Theory, Modelling and Control Physically, this corresponds to the configuration when leg 1 111PBA is com- pletely extended or folded. This singularity is also referred to as the serial sin- gularity. For example, for the robot with the parameters mm 2.11=R and mm8.02=R , two configurations of this kind of singularity are shown in Fig. 6. The loci of point P for this kind of singularity can be expressed as o firC_: ()2 2 12 2 3) ( R R y Rx + = + − (18) and i firC_: ()2 2 12 2 3) ( R R y Rx − = + − (19) For the above example, if mm5.03=R the loci of point P are shown in Fig. 7. Note that, 01=R leads to () 0 det =A as well. Therefore, 01=R also results in this kind of singularity. The uncertainty singularity, occurring only in closed kinematics chains, arises when B becomes singular but A remains invertible. 0=B results in θsin1Ry= . Physically, this corresponds to the configuration when link 11PB is parallel to the x-axis. Two such configurations are shown in Fig. 8. In such a singularity, the loci of point P can be written as r Csec_:2 12 2 2 3 ) ( R y R Rx = + − − (20) and l Csec_:2 12 2 2 3 ) ( R y R Rx = + + − (21) (a) (b) Figure 6. Two kinds configurations of the stationary singularity: (a) 111PBA is com- pletely extended; (b) 111PBA is completely folded On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 275 Figure 7. Singular loci of point P when the robot is in the stationary singularity (a) (b) Figure 8. Two kinds configurations of the uncertainty singularity: (a) point 1P is in the right of point 1B; (b) point 1P is in the left of point 1B It is noteworthy that the singular loci of a robot when 1R is greater than 2R is different from those when 2R is greater than 1R. The two cases are shown in Fig. 9. From Figs. 7 and 9, we can see that the uncertainty singular loci are al- ways inside the region bounded by the stationary singular loci; and there are usually tangent points between the two kinds of loci. The analysis on the kinematics of the robot shows that there are two solutions for both the inverse and forward kinematics. Any one of the singularities will result in the change of solution number of the kinematics. For example, the sta-tionary singularity leads to the loss of solution number of the inverse kinemat- ics. While in the uncertainty singular configuration, the solution number of the forward kinematics can be less or more than two. Then the stationary singular- ity can be called the inverse kinematic singularity, and the uncertainty singu- larity the forward kinematic singularity. 276 Industrial Robotics: Theory, Modelling and Control (a) (b) Figure 9. Singular loci of point P when the robot is in the stationary singularity: (a) 2 1R R≥ ; (b) 2 1R R< Workspace Analysis One of the most important issues in the design process of a robot is its work- space. For parallel robots, this issue may be more critical since parallel robots will sometimes have rather a limited workspace. 5.1 Theoretical workspace Theoretical workspace of the studied robot is defined as the region that the output point can reach if θ changes from 0 to π2 and s between ∞− and ∞ without the consideration of interference between links and the singularity. From Eq. (6), one can see that if θ is specified, the workspace of the leg 1 is a circle centered at the point ( )θ θ sin , cos1 3 1 R R R + with a radius of 2R. The circle is denoted as 11C. If iθ changes from 0 to π2, the center point is located at a circle centered at point ( )03R with a radius of 1R. The circle is denoted as12C. Then, the workspace of the leg is the enveloping region of the circle 11C when its center rolls at the circle 12C. Actually, the enveloping region is an an- nulus bounded by two circles o firC_ and i firC_ given in Eqs. (18) and (19), re- spectively. Especially, when 2 1R R= the workspace is the region bounded by the circle o firC_. Thinking about the architecture of the studied parallel robot, we can see that the workspace of leg 1 is limited with respect to the parameters 1R and 2R.On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 277 But, the workspace of leg 2 has the advantage along x-axis. That means the workspace can be infinite if the input s is not limited. Practically, this case can- not occur. However, to enlarge the workspace of the robot, we are sure to find a solution that the workspace of leg 1 can be embodied by that of leg 2. Actu- ally, enlarging the workspace is our pursuing objective. In this sense, the workspace of the robot should be that of the leg 1. The workspace of the leg 1 is then our research objective. For example, the theoretical workspace of leg 1 of the robot with parameters mm2.1 1=R , mm 8.02=R and mm5.03=R is shown as the shaded region in Fig. 10. The theoretical workspace and any other type of workspace of the ro- bot can be that which embodies the corresponding workspace of the leg 1 by assigning appropriate values to the parameters Ln (n=1,2,3), which will be de- scribed in details in the section 7.2. Therefore, in this chapter, the workspace of the leg 1 is regarded as the workspace of the parallel robot. The theoretical workspace is actually bounded by the stationary singularity loci i firC_ and o firC_. Its area can be calculated by []212 2 12 2 1 4 ) () ( RR R R R R Stw π π = − − + = (21) From Fig. 9, we can see that within the theoretical workspace there is station- ary singularity. Figure 10. Theoretical workspace of the robot 5.2 Usable workspace As there exist singular loci inside the theoretical workspace, if a robot wants to move from one point to another it maybe should passes a singular configura-tion. That means it maybe changes from one working mode to another. In practice, changing working mode during the working process is definitely im- possible. Therefore, we should find out a working space without singularity. 278 Industrial Robotics: Theory, Modelling and Control The usable workspace is defined as the maximum continuous workspace that contains no singular loci inside but bounded by singular loci outside. Accord- ing to this definition, not every point within the usable workspace can be available for a practical robot. The robot will be out of control at the points on the boundaries and their neighborhoods. But within this region, the robot with a specified working mode can move freely. In Section 4.2, two kinds of singular loci have been presented for the robot as shown in Fig. 9. The stationary singularity is actually the boundary of a theo-retical workspace. Then, a robot with every working mode can have such sin- gular loci. However, as the uncertainty singularity occurs inside the work- space, not every working mode has all such singularities. Normally, for most parallel robots studied here, there are four tangent points between the two kinds of singular loci. The points can be used to identify which singular loci a specified working mode can have. For example, all singular loci of the robot mm2.1 1=R , mm 8.02=R and mm5.03=R are shown in Fig. 9. Fig. 11 shows some singular configurations and singular loci of the robot. As shown in Fig. 11, there are four tangent points m,v,q and k between the four singular loci i firC_ , o firC_,l Csec_ and r Csec_. At these four points, both of the stationary and uncertainty singularities occur. The four points divide the singular curves l Csec_ and r Csec_ into four parts. At the arcs qm1 and kv3, the robot is in sin- gular only when it is with the “+” mode. At the arcs qm2 and kv4, the work- ing mode “–” is in singular. Figure 11. The uncertainty singular loci of a robot with different working modes What we are concerned about here is the robot with the “+” working mode. Fig. 12 shows all singular loci of such kinds of robots.On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 279 The theoretical workspace is divided into two parts by the singular loci shown in Fig. 12, which can be used to identify the usable workspaces of the robots with the “+” working mode and, at the same time, the down-configuration . In order to reduce the occupating space, the lower region shown in Fig. 12 is re- ferred to as the usable workspace of the parallel robot. They are shown as the shaded region in Fig. 13. Actually, the usable workspace is the half of the theo- retical workspace. The area can be calculated by []212 2 12 2 1 2 ) () (2RR R R R R Suw ππ= − − + = (22) (a) (b) Figure 12. Singular loci of the robot with the “+” working mode: (a) 2 1R R≥ ; (b) 2 1R R< (a) (b) Figure 13. Usable workspace of the robot with both the “+” working mode and down- configuration : (a) 2 1R R≥ ; (b) 2 1R R<280 Industrial Robotics: Theory, Modelling and Control 5.3 Workspace atlas To apply a specified robot in practice, we usually should determine the link lengths with respect to a desired application. This is actually the so-called op- timal kinematic design (parameter synthesis) of the robot. In such a process, one of the most classical tools that has been using is the chart. Chart is a kind of tool to show the relationship between concerned parameters. As it is well known, the performance of a parallel robot depends not only on the pose of the end-effector but also on the link lengths (dimensions). Disre-garding the pose, each of the links can be the length between zero and infinite. And there are always several links in a parallel robot. Then the combination of the links with different lengths will be infinite. They undoubtedly have differ- ent performance characteristics. In order to summarize the characteristics of a performance, we must show the relationship between it and geometrical pa-rameters of the parallel robot. To this end, a finite space that must contain all kinds of robots (with different link lengths) should be first developed. Next is to plot the chart considering a desired performance. In this paper, the space is referred to as the design space. The chart that can show the relationship be- tween performances and link lengths is referred to as atlas. 5.3.1 Development of a design space The Jacobian matrix is the matrix that maps the relationship between the veloc-ity of the end-effector and the vector of actuated joint rates. This matrix is the most important parameter in the field. Almost all performances are depended on this parameter. Therefore, based on the Jacobian matrix, we can identify which geometrical parameter should be involved in the analysis and kinematic design.For the parallel robot considered here, there are three parameters in the Jaco- bian matrix (see Eq. (17)), which are 1R,2R and 3R. Theoretically, any one of the parameters 1R,2R and 3R can have any value between zero and infinite. This is the biggest difficulty to develop a design space that can embody all ro- bots (with different link lengths) within a finite space. For this reason, we must eliminate the physical link size of the robots. Let () 33 2 1 R R R D + + = (23) One can obtain 3 non-dimensional parameters ir by means of DRr1 1= , DRr2 2= , DRr3 3= (24) On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 281 This would then yield 33 2 1 =++ rrr (25) From Eq.(25), the three non-dimensional parameters 1r,2r and 3r have limits, i.e., 3 ,, 03 2 1 < < rrr (26) Based on Eqs. (25) and (26), one can establish a design space as shown in Fig. 14(a), in which the triangle ABC is actually the design space of the parallel ro- bot. In Fig. 14(a), the triangle ABC is restricted by 1r,2r and 3r. Therefore it can be figured in another form as shown in Fig. 14(b), which is referred to as the planar-closed configuration of the design space. In this design space, each point corresponds a kind of robot with specified value of 1r,2r and 3r. For convenience, two orthogonal coordinates r and t are utilized to express 1r,2r and 3r. Thus, by using °¯°®­ =+ = 33 1 3 3 2 rtr r r (27) coordinates1r,2r and 3r can be transformed into r and t. Eq. (27) is useful for constructing a performance atlas. From the analysis of singularity and workspace, we can see that the singular loci and workspace shape of a robot when 2 1rr> are different from those of the robot when 2 1rr<. For the convenience of analysis, the line 2 1rr= is used to divide the design space into two regions as shown in Fig. 14(b). (a) (b) Figure 14. Design space of the 2-DOF translational parallel robot 282 Industrial Robotics: Theory, Modelling and Control 5.3.2 Workspace characteristics Using the normalization technique in Eqs. (23) and (24), the dimensional pa- rameters1R,2R and 3R were changed to non-dimensional ones 1r,2r and 3r. The kinematic, singularity and workspace analysis results can be obtained by replacing Rn (n=1,2,3) with rn (n=1,2,3) in Eqs. (2)-(22). Then, using Eq. (21), we can calculate the theoretical workspace area of each robot in the design space shown in Fig. 14(b). As a result, the atlas of the workspace can be plotted as shown in Fig. 15. To plot the atlas, one should first calculate the theoretical workspace area of each non-dimensional robot with 1r,2r and 3r, which is in- cluded in the design space. Using the Eq. (27), one can then obtain the relation- ship between the area and the two orthogonal coordinates r and t (see Fig. 14(b)). This relationship is practically used to plot the atlas in the planar sys-tem with r and t. The subsequent atlases are also plotted using the same method. Fig. 15 shows not only the relationship between the workspace area and the two orthogonal coordinates but that between the area and the three non-dimensional parameters as well. What we are really most concerned about is the later relationship. For this reason, r and t are not appeared in the fig- ure. From Fig. 15, one can see that The theoretical workspace area is inverse proportional to parameter 3r; The area atlas is symmetric with respect to 2 1rr=, which means that the area of a kind of robot with ur=1 , wr=2 (3,<wu ) and wu r −−=33 is identical to that of a robot with wr=1 , ur=2 (3,<wu ) and wu r −−=33 ; The area reaches its maximum value when 5 .12 1 ==rr and 03=r . The ma- ximum value is π9. Since the usable workspace area is the half of the theoretical workspace area, the atlas of usable workspace is identical with that of Fig. 15 in distribution but is different in area value. From Figs. 10 and 15, we can see that the theoretical workspaces of robots ur=1 and wr=2 , and wr=1 and ur=2 are identical with each other not only in area but also in shape. It is noteworthy that, al- though, the usable workspace area atlas is also symmetric about the line 2 1rr=, theusable workspace shape of the robot with ur=1 and wr=2 is no longer same as that of the robot with wr=1 and ur=2 . This result is not difficult to be reached from Fig. 13. On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 283 Figure 15. Atlas of the theoretical workspace of the parallel robot 5.3.3 Similarity robots From Fig. 15, one can know the workspace performance of a non-dimensional parallel robot. Our objective is usually the dimensional robot. If the workspace performance of a robot with parameters rn (n=1,2,3) is clear, one should know the corresponding performance of the robot with parameters Rn (n=1,2,3). Oth- erwise, the normalization of geometric parameters and the developed design space will be nonsense. Comparing Eqs. (21) and (22), it is not difficult to reach the following relationship tw tw SD S ′ =2 and uw uw SD S ′ =2 (28) wheretwS′ and uwS′ are the theoretical and usable workspace areas, respec- tively, of a non-dimensional robot. Eq. (28) indicates that the workspace of a dimensional robot is D2 times that of a non-dimensional robot. That means, from Fig. 15, one can also know the workspace performance of a dimensional robot. Therefore, the robot with normalized parameters rn (n=1,2,3) has a generalized significance. The workspace performance of such a robot indicates not only the performance of itself but also those of the robots with parameters Drn, i.e. Rn. Here, the robots with parameters Drn are defined as similarity robots; and the robot with parameters rn is referred to as the basic similarity robot. The analy- sis in the subsequent sections will show that the similarity robots are similar in terms of not only the workspace performance but also other performances, such as conditioning index and stiffness. For these reasons, the normalization of the geometric parameters can be reasonably applied to the optimal design of the robot. And it also simplifies the optimal design process. 284 Industrial Robotics: Theory, Modelling and Control Atlases of Good-Condition Indices From Section 5, one can know characteristics of the workspace, especially the usable workspace of a robot with given rn or Rn (n=1,2,3). Usually, in the de- sign process and globally evaluation of a performance, a kind of workspace is inevitable. Unfortunately, due to the singularity, neither the theoretical work-space nor the usable workspace can be used for these purposes. Therefore, we should define a workspace where each configuration of the robot can be far away from the singularity. As it is well known, the condition number of Jaco- bian matrix is an index to measure the distance of a configuration to the singu- larity. The local conditioning index, which is the reciprocal of the condition number, will then be used to define some good-condition indices in this sec- tion. 6.1 Local conditioning index Mathematically, the condition number of a matrix is used in numerical analy-sis to estimate the error generated in the solution of a linear system of equa- tions by the error in the data (Strang, 1976). The condition number of the Jaco-bian matrix can be written as 1−= JJ κ (29) where • denotes the Euclidean norm of the matrix, which is defined as () I W WJJ JntrT 1; = = (30) in which n is the dimension of the Jacobian matrix and I the nn× identity ma- trix. Moreover, one has ∞≤≤κ1 (31) and hence, the reciprocal of the condition number, i.e., κ1, is always defined as the local conditioning index (LCI) to evaluate the control accuracy, dexterity and isotropy of a robot. This number must be kept as large as possible. If the number can be unity, the matrix is an isotropic one, and the robot is in an iso- tropic configuration. 6.2 Good-condition workspace Let’s first check how the LCI is at every point in the workspace of the similar- ity robot with parameters mm 2.11=R , mm 8.02=R and mm5.03=R . Its us-On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 285 able workspace is shown in Fig. 13(a). Fig. 16 shows the distribution of the LCI in the workspace. Figure 16. Distribution of the LCI in the usable workspace From Fig. 16 one can see that, in the usable workspace , there exist some points where the LCI will be zero or very small. At these points the control accuracy of the robot will be very poor. These points will not be used in practice. They should be excluded in the design process. The left workspace, which will be used in practice, can be referred to as good-condition workspace (GCW) that is bounded by a specified LCI value, i.e., κ1. Then, the set of points where the LCI is greater than or equal to (GE) a specified LCI is defined as the GCW. Using the numerical method, by letting the minimum LCI be 0.3, the GCW area of each basic similarity robot in the design space shown in Fig. 14(b) can be calculated. The corresponding atlas can be then plotted as shown in Fig. 17, from which one can see that The GCW area is inverse proportional to parameter 3r; The area atlas is no longer symmetric with respect to the line 2 1rr=. In a- nother sense, this indicates that a large theoretical or usable workspace of a robot doesn’t mean that it has a large GCW; The maximum value of the GCW area is still that of the robot 5 .12 1 ==rr and 03=r . Since there is no singularity within the whole GCW, it can be used as a refer- ence in the definition of a global index, e.g. global conditioning index. 286 Industrial Robotics: Theory, Modelling and Control Figure 17. Atlas of the good-condition workspace when LCI ≥0.3 6.3 Global conditioning index Jacobian matrix is pose-dependent (see Eq. (17)). Then, the LCI is depended on the pose as well. This indicates that the LCI at one point may be different from that at another point. Therefore, the LCI is a local index. In order to evaluate the global behaviour of a robot on a workspace, a global index can be defined as (Gosselin & Angeles, 1989) ³³= W WJ J dW dWκ η 1 (32) which is the global conditioning index (GCI). In Eq. (32), W is the workspace. In particular, a large value of the index ensures that a robot can be precisely controlled. For the robot studied here, the workspace W in Eq. (32) can be the GCW when LCI ≥0.3. The relationship between the GCI and the three normalized parame- tersnr (n=1,2,3) can be studied in the design space. The corresponding atlas is shown in Fig. 18, from which one can see that the robots near 2 .11=r have large GCI. Some of these robots have very large GCW, some very small. 6.4 Global stiffness index Disregarding the physical characteristic, kinematically, there will be deforma- tion on the end-effector if an external force acts on it.On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 287 Figure 18. Atlas of the global conditioning index This deformation is dependent on the robot’s stiffness and on the external force. The robot stiffness affects the dynamics and position accuracy of the de- vice, for which stiffness is an important performance index. The static stiffness (or rigidity) of the robot can be a primary consideration in the design of a par-allel robot for certain applications. Equation (8) can be rewritten as pJq= (33) On the other hand, by virtue of what is called the duality of kinematics and statics (Waldron & Hunt, 1988), the forces and moments applied at the end- effector under static conditions are related to the forces or moments required at the actuators to maintain the equilibrium by the transpose of the Jacobian matrix J. We can write fJT=τ (34) where f is the vector of actuator forces or torques, and τ is the generalized vector of Cartesian forces and torques at the end-effector. In the joint coordinate space, a diagonal stiffness matrix pK is defined to ex- press the relationship between the actuator forces or torques f and the joint displacement vector qΔ according to288 Industrial Robotics: Theory, Modelling and Control qKf Δ =p (35) With »» ¼º «« ¬ª = 21 pp pkk K (36) in which pik is a scalar representing the stiffness of each of the actuators. In the operational coordinate space, we define a stiffness matrix K which re- lates the external force vector τ to the output displacement vector D of the end-effector according to DK=τ (37) The Eq. (33) also describes the relationship between the joint displacement vec- tor qΔ and the output displacement vector D, i.e., DJq=Δ (38) From Eqs. (34), (35) and (38), we get DJKJpT=τ (39) Thus, the stiffness matrix K is expressed as JKJ KpT= (40) Then, we have τ1−=KD (41) From Eq. (41), one can write () τ τ1 T1 T T − −= K K DD (42) Let the external force vector τ be unit, i.e., 1T 2= =ττ τ (43) On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 289 Under the condition (43), one can derive the extremum of the norm of vector D. In order to obtain the conditional extremum, using the Lagrange multiplier Dλ, one can construct the Lagrange equation as following =DL () −− −τ τ1 T1 TK KDλ )1 (T−ττ (44) The necessary condition to the conditional extremum is :0=∂∂ DDL λ01T=−ττ , and :0=∂∂ τDL() −− −τ1 T1K KDλ 0=τ (45) from which one can see that the Lagrange multiplier Dλ is actually an eigen- value of the matrix ()1 T1 − −K K . Then, the norm of vector D can be written as () τ τ1 T1 T T 2 − −= = K K DD D =TτDλτ=Dλ (46) Therefore, the extremum of 2D is the extremum of the eigenvalues of the ma- trix()1 T1 − −K K . Then, if 12 1 = =p pk k and 12=τ , the maximum and minimum deformations on the end-effector can be described as =maxD ()iDλ max and =minD ()iDλ min (47) whereiDλ (2 ,1=i ) are the eigenvalues of the matrix ()1 T1 − −K K .maxD and minD are actually the maximum and minimum deformations on the end- effector when both the external force vector and the matrix pK are unity. The maximum and minimum deformations form a deformation ellipsoid, whose axes lie in the directions of the eigenvectors of the matrix ()1 T1 − −K K . Its magni- tudes are the maximum and minimum deformations given by Eq. (47). The maximum deformation maxD , which can be used to evaluate the stiffness of the robot, is defined as the local stiffness index (LSI). The smaller the deforma- tion is, the better the stiffness is. Similarly, based on Eq. (47), the global stiffness index (GSI) that can evaluate the stiffness of a robot within the workspace is defined as =maxDη ³³ WW dWdWmaxD (48) 290 Industrial Robotics: Theory, Modelling and Control where, for the robot studied here, W is the GCW when 3.0 LCI ≥ . Usually, maxDη can be used as the criterion to design the robot with respect to its stiff- ness. Normally, we expect that the index value should be as small as possible. Figure 19 shows the atlas of maxDη , from which one can see that the larger the parameter3r, the smaller the deformation. That means the stiffness is propor- tional to the parameter 3r. Figure 19. Atlas of the global stiffness index Optimal Design based on the Atlas In this section, a method for the optimal kinematic design of the parallel robot will be proposed based on the results of last sections. 7.1 Optimum region with respect to desired performances Relationships between performance indices and the link lengths of the 2-DOF translational parallel robot have been studied. The results have been illustrated by their atlases, from which one knows visually which kind of robot can be with a better performance and which cannot. This is very important for us to find out a global optimum robot for a specified application. In this section, the optimum region will be shown first with respect to possible performances. On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 291 7.1.1 Workspace and GCI In almost all designs, the workspace and GCI are usually considered. From the atlas of the GCW (see the Fig. 17), we can see that the workspace of a robot when1r is near 1.5 and 3r is shorter can be larger. From the atlas of GCI (Fig. 18), we know that robots near 2 .11=r have better GCI. If the GCW area, de- noted as GCWS′, is supposed to be greater than 6 ( 6>′GCWS ) and the GCI greater than 0.54, the optimum region in the design space can be obtained shown as the shaded region in Fig. 20(a). The region is denoted as ( ) [ ]54.0 and6 |,,3 2 1 > >′ = Ω− J GCW GCI GCW Srrr η with performance restriction. One can also obtain an optimum region with better workspace and GCI, for example, the region GCI GCW − Ω′ where 7>′GCWS and 57 .0>Jη as shown in Fig. 20(b). In order to get a better result, one can decrease the optimum region with stricter restriction. Such a region contains some basic similarity robots , which are all possible optimal results. (a) (b) Figure 20. Two optimum region examples with respect to both GCI and GCW per- formance restrictions After the optimum region is identified, there are two ways to achieve the op- timal design result with non-dimensional parameters. One is to search a most optimal result within the region GCI GCW − Ω or GCI GCW − Ω′ using one classical searching algorithm based on an established object function. The method will yield a unique solution. This is not the content of this paper. Another one is to select a robot within the obtained optimum region. For example, the basic simi- larity robot with 2 .11=r , 65 .12=r and 15.03=r can be selected as the candidate if only workspace and GCI are involved in the design. Its GCW area and the 292 Industrial Robotics: Theory, Modelling and Control GCI value are 7.2879 and 0.5737, respectively. The robot with only rn (n=1,2,3) parameters and its GCW are shown in Fig. 21. Figure 21. The robot with parameters 2.11=r , 65.12=r and 15.03=r in the GCI GCW − Ω′ region and its GCW when LCI ≥0.3 Actually, we don’t recommend the former method for achieving an optimal result. The solution based on the objective function approach is a mathematical result, which is unique. Such a result is maybe not the optimal solution in practice. Practically, we usually desire a solution subjecting to our application conditions. From this view, it is unreasonable to provide a unique solution for the optimal design of a robot. Since we cannot predict any application condi-tion previously, it is most ideally to provide all possible optimal solutions, which allows a designer to adjust the link lengths with respect to his own de- sign condition. The advantage of the later method is just such an approach that allows the designer to adjust the design result fitly by trying to select another candidate in the optimum region. 7.1.2 Workspace, GCI, and GSI In this paper, stiffness is evaluated by the maximum deformation of the end-effector when the external force and the stiffness of each of the actuators are unit. A robot with smaller maxDη value usually has better stiffness. Since accu- racy is inherently related to the stiffness, actually, the stiffness index used here can also evaluate the accuracy of the robot. To achieve an optimum region with respect to all of the three indices, the GCW can be specified as 6>′GCWS , GCI 54 .0>Jη and GSI 0.7max<Dη . The optimal region will be ( ) [ ]7 and,54.0 ,6 |,,max 3 2 1 < > >′ = Ω− − D J GCW GSI GCI GCW Srrr η η shown in Fig. 22. For On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 293 example, the values of the GCW, GCI and GSI of the basic similarity robot with parameters 12 .11=r , 68 .12=r and 2.03=r in the optimum region are 6.8648=′GCWS , 0.5753>Jη and 6.5482max=Dη . Fig. 23 shows the robot and its GCW when LCI is GE 0.3. Figure 22. One optimum region example with respect to the GCI, GCW and GSI per- formance restrictions Figure 23. The robot with parameters 12.11=r , 68.12=r and 2.03=r in the GSI GCI GCW − − Ω region and its GCW when LCI ≥0.3294 Industrial Robotics: Theory, Modelling and Control 7.2 Dimension determination based on the obtained optimum example The final objective of optimum design is determining the link lengths of a ro- bot, i.e. the similarity robot . In the last section, some optimum regions have been presented as examples. These regions consist of basic similarity robots with non-dimensional parameters. The selected optimal basic similarity robots are comparative results, not final results. Their workspaces may be too small to be used in practice. In this section, the dimension of an optimal robot will be de- termined with respect to a desired workspace. As an example of presenting how to determine the similarity robot with respect to the optimal basic similarity robot obtained in section 7.1, we consider the ro- bot with parameters 12 .1 1=r , 68 .12=r and 2.03=r selected in section 7.1.2. The robot is from the optimum region GSI GCI GCW − − Ω , where the workspace, GCI and stiffness are all involved in the design objective. To improve the GCI and GSI performances of the robot, letting LCI be GE 0.5, the values of the GCW, GCI and GSI of the robot with parameters 12 .11=r , 68 .12=r and 2.03=r are 4.0735=′GCWS , 0.6977>Jη and 2.5373max=Dη . Fig. 24 shows the revised GCW. Comparing Figs. 23 and 24, it is obvious that the improvement of perform- ances GCI and GSI is based on the sacrifice of the workspace area. Figure 24. GCW of the robot with parameters 12.11=r , 68.12=r and 2.03=r when LCI≥0.5 The process to find the dimensions with respect to a desired practical work- space can be summarized as following: Step 1 : Investigating the distribution of LCI and LSI on the GCW of the basic similarity robot . For the aforementioned example, the distribution is On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 295 shown in Fig. 25 (a) and (b), respectively, from which one can see the distributing characteristics of the two performances. The investigation can help us determining whether it is necessary to adjust the GCW. For example, if the stiffness at the worst region of the GCW cannot satisfy the specification on stiffness, one can increase the specified LCI value to reduce the GCW. In contrary, if the stiffness is permissible, one can decrease the specified LCI value to increase the GCW. (a) (b) Figure 25. Distribution of LCI and LSI in the GCW of the basic similarity robot when LCI≥0.5: (a) LCI; (b) LSI Step 2 : Determining the factor D, which was used to normalize the parame- ters of a dimensional robot to those that are non-dimensional. The GCW area when LCI ≥0.5 of the selected basic similarity robot is 296 Industrial Robotics: Theory, Modelling and Control 4.0735=′GCWS . If the desired workspace area GCWS of a dimensional robot is given with respect to the design specification, the factor D can be obtained as GCW GCW S S D ′ = , which is identical with the relation- ship in Eq. (28). For example, if the desired workspace shape is similar to the GCW shown in Fig. 24 and its area mm005=GCWS , there is mm08.11 0735.4 500 ≈ =′ =GCW GCW S S D . Step 3 : Achieving the corresponding similarity robot by means of dimensional factor D. As given in Eq. (24), the relationship between a dimensional parameter and a non-dimensional one is n n rD R= (n=1,2,3). Then, if D is determined, nR can be obtained. For the above example, there are mm41.121=R , mm 61.182=R and mm22.23=R . In this step, one can also check the performances of the similarity robot . For example, Fig. 26 (a) shows the distribution of LCI on the desired workspace, from which one can see that the distribution is the same as that shown in Fig. 25 (a) of the basic similarity robot . The GCI is still equal to 0.6977. Fig. 26 (b) illustrates the distribution of LSI on the workspace. Compar- ing Fig. 26 (b) with Fig. 25 (b), one can see that the distributions of LSI are the same. The GSI value is still equal to 2.5373. Then, the factor D does not change the GCI, GSI, and the distributions of LCI and LSI on the workspaces. For such a reason, we can say that, if a basic similarity robot is optimal, any one of its similarity robots is optimal. Step 4 : Determining the parameters nL (n=1,2,3) that are relative to the leg 2. Since the parameters are not enclosed in the Jacobian matrix, they are not the optimized objects. They can be determined with respect to the desired workspace. Strictly speaking, the workspace analyzed in the former sections is that of the leg 1. As mentioned in section 5.1, to maximize the workspace of the 2-DOF parallel translational robot and, at the same time, to reduce the cost, the parameters nL (n=1,2,3) should be designed as those with which the workspace of leg 2 can just em- body the workspace of the leg 1. To this end, the parameters should be subject to the following equations 3 3 2 1 max RLLL Y +−+ = (49) 3 3 2 1 min R LLL Y +−− = (50) in which maxY and minY are y-coordinates of the topmost and lowest points of the desired workspace. For the desired GCW shown in Fig. 26, there are -3.32mmmax= Y and -29.92mmmin= Y . Substituting them On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 297 in Eqs. (49) and (50), we have .30mm 312=L . To reduce the manufac- turing cost, let 2 1L L=, which leads to .14mm323=L Step 5 : Calculating the input limit for each actuator. The range of each input parameter can be calculated from the inverse kinematics. For the ob- tained similarity robot , there are [ ]° ° ∈ 81.7649, 83.3040- θ and [ ] 25.49mm 6.10mm,-∈s . Then, the parameters of the optimal robot with respect to the desired work- space mm005=GCWS are mm 41.121=R , mm 61.182=R , mm22.23=R , .30mm312 1 = =L L , .14mm323=L , [ ]° ° ∈ 81.7649, 83.3040- θ and [ ] 25.49mm 6.10mm,-∈s . It is noteworthy that this result is only one of all possible solutions. If the designer picks up another basic similarity robot from the optimum region, the final result will be different. This is actually one of the advantages of this optimal design method. The designer can adjust the final result to fit his design condition. It is also worth notice that, actually, the de- sired workspace shape cannot be that shown in Fig. 26. It is usually in a regu- lar shape, for example, a circle, a square or a rectangle. In this case, a corre- sponding similar workspace should be first identified in the GCW of the basic similarity robot in Step 2 . This workspace, which is the subset of the GCW, is normally just embodied by the GCW. The identified workspace area will be used to determine the factor D with respect the desired workspace area in Step (a) (b) Figure 26. Distribution of LCI and LSI in the desired workspace of the obtained simi- larity robot : (a) LCI; (b) LSI 298 Industrial Robotics: Theory, Modelling and Control Conclusion and Future Works In this chapter, a novel 2-DoF translational robot is proposed. One advantage of the robot is that it can position a rigid body in a 2D plane while maintaining a constant orientation. The proposed robot can be used in light industry where high speed is needed. The inverse and forward kinematics problems, work-space, conditioning indices, and singularity are presented here. In particular, the optimal kinematic design of the robot is investigated and a design method is proposed. The key issue of this design method is the construction of a geometric design space based on the geometric parameters involved, which can embody all basic similarity robots . Then, atlases of desired indices can be plotted. These atlases can be used to identify an optimal region, from which an ideal candidate can be selected. The real-dimensional parameters of a similarity robot can be found by considering the desired workspace and the good-condition workspace of the selected basic similarity robot . Compared with other design methods, the pro- posed methodology has some advantages: (a) one performance criterion corre- sponds to one atlas, which can show visually and globally the relationship be- tween the index and design parameters; (b) for the same reason in (a), the fact that some performance criteria are antagonistic is no longer a problem in the design; (c) the optimal design process can consider multi-objective functions or multi-criteria, and also guarantees the optimality of the result; and finally, (d) the method provides not just one solution but all possible solutions. The future work will focus on the development of the computer-aided design of the robot based on the proposed design methodology, the development of the robot prototype, and the experience research of the prototype. Acknowledgement This work was supported by the National Natural Science Foundation of China (No. 50505023), and partly by Tsinghua Basic Research Foundation. References Asada, H. and Kanade, T. (1983). Desgin of direct-drive mechanical arms, ASME Journal of Vibration, Acoustics, Stress, and Reliability in Design, Vol.105, pp.312-316. Bonev, I. (2001). The Delta parallel robot-the story of success, http://www.parallelmic. org/Reviews/Review002p.html. Carricato, M. and Parenti-Castelli, V. (2001). A family of 3-DOF translational parallel manipulators, Proceedings of the 2001 ASME Design Engineering On the Analysis and Kinematic Design of a Novel 2-DOF Translati onal Parallel Robot 299 Technical Conferences , Pittsburgh, Pennsylvania, paper DETC2001/DAC- Cervantes-Sánchez, J.J., Hernández-Rodríguez, J.C. and Angeles, J. (2001) On the kinematic design of the 5R planar, symmetric manipulator, Mechanism and Machine Theory , Vol.36, pp.1301-1313 Chablat, D. & Wenger, P. (2003). Architecture optimization of a 3-DoF parallel mechanism for machining applications: the Orthoglide, IEEE Transactions on Robotics and Automation, Vol. 19, pp.403–410 Clavel, R. (1988). DELTA: a fast robot with parallel geometry, Proceedings of 18th Int. Symp. on Industrial Robot , pp. 91-100. Gao, F., Liu, X.-J. and Gruver, W.A. (1998). Performance evaluation of two de- grees of freedom planar parallel robots, Mechanisms and Machine Theory , Vol.33, pp.661-668. Gosselin, C. & Angeles, J. (1989). The optimum kinematic design of a spherical three-degree-of-freedom parallel manipulator, J. Mech. Transm. Autom. Des. , Vol.111, pp.202-207 Gosselin, C.M. & Angeles, J. (1990). Singularity analysis of closed loop kine- matic chains, IEEE Trans. on Robotics and Automation, Vol.6, pp.281-290. Gough, V. E. (1956). Contribution to discussion of papers on research in auto- mobile stability, control and tyre performance, Proceedings of Auto Div Inst Mech Eng , pp.392-395. Hervé, J. M. (1992). Group mathematics and parallel link mechanisms, Proceed- ings of IMACS/SICE Int. Symp. On Robotics, Mechatronics, and Manufacturing Systems , pp.459-464. Hunt, K. H. (1978). Kinematic geometry of mechanisms , Clarendon Press, Oxford. Kim, H.S. & Tsai, L.-W. (2002). Design optimization of a Cartesian parallel ma- nipulator, Proceedings of ASME 2002 Design Engineering Technical Confer- ences and Computers and Information in Engineering Conference , Montreal, Canada, paper DETC2002/MECH-34301 Kong, X. & Gosselin, C.M. (2002). Kinematics and singularity analysis of a novel type of 3-CRR 3-DOF translational parallel manipulator, International Journal of Robotics Research , Vol.21, pp.791-798. Liu, X.-J. (2001). Mechanical and kinematics design of parallel robotic mechanisms with less than six degrees of freedom , Post-Doctoral Research Report, Tsinghua University, Beijing. Liu, X.-J. & Kim, J. (2005). A new spatial three-DoF parallel manipulator with high rotational capability, IEEE/ASME Transactions on Mechatronics , Vol.10, No.5, pp.502-512. Liu, X.-J. & Wang, J. (2003). Some new parallel mechanisms containing the planar four-bar parallelogram, International Journal of Robotics Research , Vol.22, No.9, pp.717-732 Liu, X.-J., Jeong, J., & Kim, J. (2003). A three translational DoFs parallel cube- manipulator, Robotica , Vol.21, No.6, pp.645-653. 300 Industrial Robotics: Theory, Modelling and Control Liu, X.-J., Kim, J. and Wang, J. (2002). Two novel parallel mechanisms with less than six DOFs and the applications, Proceedings of Workshop on Fundamental Issues and Future Research Directions for Parallel Mechanisms and Manipulators , pp. 172-177, Quebec City, QC, Canada, October, 2002. Liu, X.-J., Wang, J., Gao F., & Wang, L.-P. (2001). On the analysis of a new spa- tial three degrees of freedom parallel manipulator, IEEE Transactions on Robotics and Automation , Vol.17, pp.959-968. Liu, X.-J., Wang, Q.-M., & Wang, J. (2005). Kinematics, dynamics and dimen- sional synthesis of a novel 2-DOF translational manipulator, Journal of Intel- ligent & Robotic Systems , Vol.41, No.4, pp.205-224. McCloy, D. (1990). Some comparisons of serial-driven and parallel driven mechanisms, Robotica , Vol.8, pp.355-362. Merlet, J.-P. (2000). Parallel robots , Kluwer Academic Publishers, London. Ottaviano, E. & Ceccarelli, M. (2002). Optimal design of CaPaMan (Cassino Parallel Manipulator) with a specified orientation workspace, Robotica , Vol.20, pp.159–166 Siciliano, B. (1999). The Tricept robot: inverse kinematics, manipulability analysis and closed- loop direct kinematics algorithm, Robotica, Vol.17, pp.437-445. Stewart, D. (1965). A platform with six degrees of freedom, Proc Inst Mech Eng , Vol.180, pp.371-386, Stock, M. & Miller, K. (2004). Optimal kinematic design of spatial parallel ma- nipulators: application to linear Delta robot, Journal of Mechanical Design , Vol.125, pp.292-301 Strang, G. (1976). Linear algebra and its application , Academic Press, New York Tonshoff, H.K., Grendel, H. and Kaak, R. (1999). Structure and characteristics of the hybrid manipulator Georg V, In: Parallel Kinematic Machines , C.R. Boer, L. Molinari- Tosatti and K.S. Smith (editors), pp.365-376, Springer- Verlag London Limited. Tsai, L. W. & Stamper, R. (1996). A parallel manipulator with only translational degrees of freedom, Proceedings of ASME 1996 Design Engineering Technical Conference , Irvine, CA, paper 96-DETC-MECH -1152. Waldron, K.J. & Hunt, K.H. (1988). Series-parallel dualities in actively coordi- nated mechanisms, Robotics Research , Vol.4, pp.175-181. Zhao, T. S. & Huang, Z. (2000). A novel three-DOF translational platform mechanism and its kinematics, Proceedings of ASME 2000 International De- sign Engineering Technical Conferences , Baltimore, Maryland, paper DETC2000/MECH-14101.30110 Industrial and Mobile Robot Collision–Free Motion Planning Using Fuzzy Logic Algorithms Tzafestas S.G. and Zavlangas P. Introduction Motion planning is a primary task in robot operation, where the objective is to determine collision-free paths for a robot that works in an environment that contains some moving obstacles (Latombe, 1991; Fugimura, 1991; Tzafestas, 1999). A moving obstacle may be a rigid object, or an object with joints such as an industrial manipulator. In a persistently changing and partially unpredict- able environment, robot motion planning must be on line. The planner re-ceives continuous flow of information about occurring events and generates new commands while previous planned motions are being executed. Off – line robot motion planning is a one – shot computation prior to the execution of any motion, and requires all pertinent data to be available in advance. With an automatic motion planner and appropriate sensing devices, robots can adapt quickly to unexpected changes in the environment and be tolerant to modeling errors of the workspace. A basic feature of intelligent robotic systems is the ability to perform autonomously a multitude of tasks without complete a pri- ori information, while adapting to continuous changes in the working envi- ronment. Clearly, both robotic manipulators and mobile robots (as well their combina- tion, i.e. mobile manipulators (Seraji, 1998; Tzafestas & Tzafestas, 2001)) need proper motion planning algorithms. For the robotic manipulators, motion planning is a critical aspect due to the fact that the end effector paths have al- ways some form of task constraints. For example, in arc welding the torch may have to follow a complex 3-dimensional path during the welding process. Specifying manually such paths can be tedious and time consuming. For the mobile robots (indoor and outdoor robots) motion planning and autonomous navigation is also a critical issue, as evidenced by applications such as office cleaning, cargo delivery, autonomous wheel chairs for the disabled,etc. Our purpose in this chapter is to present a solution of the motion planner de- sign problem using fuzzy logic and fuzzy reasoning. Firstly, the case of indus- trial robotic manipulators is considered, and then the class of mobile robots is treated. The methodology adopted is primarily based on some recent results 302 Industrial Robotics: Theory, Modelling and Control derived by the authors (Moustris & Tzafestas, 2005; Zavlangas & Tzafestas, 2000; 2001; 2002). To help the reader appreciate the importance of the tech- niques presented in the chapter, a short review is first included concerning the general robot motion planning problem along with the basic concepts and some recent results. A good promising practical approach is to use fuzzy logic along the path of behavior–based system design which employs Brooks’ sub- sumption architecture (Brooks, 1986; Izumi & Watanabe, 2000; Topalov & Tzafestas, 2001; Watanabe et al., 1996; Watanabe et al., 2005). Section 2 provides the overview of robot motion planning for industrial and mobile robots. Section 3 presents the authors’ technique for industrial manipu-lators’ fuzzy path planning and navigation. Section 4 extends this technique to mobile robots and discusses the integration of global and local path planning and navigation. Global path planning uses topological maps for representing the robot’s environment at the global level, in conjunction with the potential field method. Section 5 presents a representative set of experimental results for the SCARA Adept 1 robotic manipulator and the Robuter III mobile robot (which can be equipped with a robotic arm). Results for both local and global path planning / navigation are included for the Robuter III robot. Finally, a general discussion on the results of the present technique is provided, along with some indications for future directions of research. Robot Motion Planning : An Overview 2.1 Review of Basic Motion Planning Concepts Robot motion planning techniques have received a great deal of attention over the last twenty years. It can roughly be divided into two categories : global and local. Most of the research in global techniques has been focused on off-line planning in static environments. A plan is then computed as a geometric path. An important concept developed by this research is the Configuration space or C-space of a robot (Latombe, 1991; Lozano-Perez, 1983). The global techniques, such as road map (Latombe, 1991), cell decomposition (La- tombe, 1991) and potential fields methods (Khatib, 1986), generally assume that a complete model of the robot’s environment is available. The roadmap approach to path planning consists of capturing the connectivity of the robot’s free space in a network of one-dimensional curves (called the roadmap), lying in the free space. Once the roadmap has been constructed, it is used as a set of standardized paths. Path planning is thus reduced to connect- ing the initial and goal configuration to points in the roadmap and searching it for a path between these points (Latombe, 1991). Industrial and Mobile Robot Collisi on–Free Motion Planning…. 303 Cell decomposition methods are perhaps the motion planning methods that have been most extensively studied so far (Latombe, 1991). They consist of decom- posing the robot’s free space into simple regions, called cells, such that a path between any two configurations in a cell can be easily generated. A nondi-rected graph representing the adjacency relation between the cells is then con- structed and searched. This graph is called the connectivity graph . Its nodes are the cells extracted from the free space and two nodes are connected by a link if only the corresponding cells are adjacent. The outcome of the search is a se- quence of cells called a channel . A continuous free path can be computed from this sequence (Latombe, 1991). A straightforward approach to motion plan-ning is to discretize the configuration space into a fine regular grid of configura- tions and to search this grid for a free space. This approach requires powerful heuristics to guide the search. Several types of heuristics have been proposed. The most successful ones take the form of functions that are interpreted as po- tential fields (Latombe, 1991). The robot is represented as a point in configura- tion space, moving under the influence of an artificial potential produced by the goal configuration and the C-obstacles. Typically, the goal configuration generates an “attractive potential” which pulls the robot towards the goal, and the C-obstacles produce a “repulsive potential” which pushes the robot away from them. The generated gradient of the total potential is treated as an artifi- cial force applied to the robot. At every configuration, the direction of this force is considered to be the most promising direction of motion. The advantage of global approaches lies in the fact that a complete trajectory from the starting point to the target point can be computed off-line . However, global approaches are not appropriate for fast obstacle avoidance. Their strength is global path planning . Additionally, these methods were proven prob- lematic when the global world model is inaccurate, or simply not available, as it is typically the case in the most populated environments. Some researchers have shown how to update global world models based on sensory inputs, us- ing probabilistic representations. A second disadvantage of global methods is their low speed due to the inherent complexity of robot motion planning. This is particularly the case if the underlying world model changes with time, be- cause of the resulting requirement for repeated adjustments of the global plan. In such cases, planning using a global model is usually too expensive to be done repeatedly. Local approaches , on the other hand, use only a small fraction of the world model to generate robot control. This comes at the obvious disadvantage that they cannot produce optimal solutions. Local approaches are easily trapped at local minima. However, the key advantage of local techniques over global ones lies in their low computational complexity, which is particularly important when the world model is updated frequently based on sensor information. For example, potential field methods determine the next step by assuming that ob- stacles assert negative forces on the robot, and that the target location asserts a 304 Industrial Robotics: Theory, Modelling and Control positive force. These methods are extremely fast, and they typically consider only a small subset of obstacles close to the robot. However, such methods have often failed to find trajectories between closely spaced obstacles; they also can produce oscillatory behaviour in narrow spaces. 2.2 Motion Planning of Mobile Robots To be useful in the real world, mobile robots need to move safely in unstruc- tured environments and achieve their given goals despite unexpected changes in their surroundings. The environments of real robots are rarely predictable or perfectly known so it does not make sense to make precise plans before moving. The robot navigation problem can be decomposed into the following two problems (Ratering & Gini, 1995) : •Getting to the goal. This is a global problem because short paths to the goal generally cannot be found using only local information. The topology of the space is important in finding good routes to the goal. •Avoiding obstacles. This can often be solved using only local information, but for an unpredictable environment it cannot be solved in advance be- cause the robot needs to sense the obstacles before it can be expected to avoid them. Over the years, robot collision avoidance has been a component of high-level controls in hierarchical robot systems. Collision avoidance has been treated as a planning problem, and research in this area was focused on the development of collision-free path planning algorithms. These algorithms aim at providing the low-level control with a path that will enable the robot to accomplish its assigned task free from any risk of collision. However, this places limits on the robot’s real-time capabilities for precise, fast, and highly interactive operations in a cluttered and evolving environment. Collision avoidance at the low-level control is not intended to replace high-level functions or to solve planning problems. The purpose is to make better use of low-level control capabilities in performing real-time operations. A number of different architectures for autonomous robot navigation have been proposed in the last twenty years (La- tombe, 1991; Fugimura, 1991; Tzafestas, 1999). These include hierarchical ar- chitectures that partition the robot’s functionalities into high-level (model and plan) and low-level (sense and execute) layers; behaviour – based architectures that achieve complex behaviour by combining several simple behaviour- producing units; and hybrid architectures that combine a layered organization with a behaviour-based decomposition of the execution layer (see e.g., (Izumi & Watanabe, 2000; Watanabe et al., 1996; Topalov & Tzafestas, 2001; Watanabe et al., 2005; Lozano-Perez, 1983; Khatib, 1986; Ratering & Gini, 1995; Erdmann & Lozano-Perez, 1987; Griswold & Elan, 1990; Gil de Lamadrid & Gini, 1990; Industrial and Mobile Robot Collisi on–Free Motion Planning…. 305 Fibry, 1987; Gat, 1991; Sugeno & Nishida, 1985; Yen & Pflunger, 1992)). While the use of hybrid architectures is gaining increasing consensus in the field, a number of technological gaps still remain. As mentioned in Section 2.1, the classical approaches can be mainly divided into two categories : global path planning and local navigation (Latombe, 1991). The global approaches preassume that a complete representation of the con- figuration space has been computed before looking for a path. They are com- plete in the sense that if a path exists it will be found. Unfortunately, comput- ing the complete configuration space is very time consuming, worst, the complexity of this task grows exponentially as the number of degrees of free-dom increases. Consequently, today most of the robot path planners are used off-line. The planner is equipped with a model of the environment and pro- duces a path which is passed to the robot controller for execution. In general, the time necessary to achieve this, is not short enough to allow the robot to move in dynamic environments. The local approaches need only partial knowledge of the robot’s workspace. The decisions to move the robot are taken using local criteria and heuristics to choose the most promising direc- tion. Consequently, the local methods are much faster. Unfortunately, they are not complete, it may happen that a solution exists and cannot be found. The local approaches consider planning as an optimization problem, where finding a path to the goal configuration corresponds to the optimization of some given function. As an optimization technique, the local approaches are subject to get trapped in some local minima, where a path to the goal has not been found and from which it is impossible or, at least, very difficult to escape. From the above, it is very clear, that both global and local techniques have many advantages, as well as important disadvantages. The output of a global path planner is a continuous path along which the robot will not collide with obstacles. However, any model of the real world will be incomplete and inac- curate, thus collisions may still occur if the robot moves blindly along such a path. One conventional application is for the robot to track the global path. More recently, work has been done on increasing the level of competence, by including real-time collision avoidance capabilities. Such local or reactive be- haviours operate in real time but cannot solve the global problem of moving to an arbitrary goal. It is very clear that to built a complete system, the above ap- proaches must be combined. A path planner must provide the robot with a global path to the goal. A local controller then moves the robot along the global path while handling small changes in the environment and unexpected or moving obstacles.Some researchers have solved the navigation problem by solving these two sub-problems one after the other. A path is first found from the robot’s initial position to the goal and then the robot approximates this path as it avoids ob- stacles. This method is restrictive in that the robot is required to stay fairly close to or perhaps on a given path. This would not work well if the path goes 306 Industrial Robotics: Theory, Modelling and Control through a passageway which turns out to be blocked by an unforeseen obsta- cle. Solutions that are only local or reactive (Brooks, 1986) can lead the robot into local minima traps. Solutions that assume a priori knowledge of the posi- tion of the obstacles (e.g. (Fugimura, 1991; Erdmann & Lozano-Perez, 1987)), or select a path using only information on stationary obstacles, and determine the speed of the robot while following the path (e.g. (Griswold & Elan, 1990)), or solutions that require the robot to stay within some distance from its assigned path, while avoiding unknown moving obstacles (e.g., (Gil de Lamadrid & Gini, 1990)), are not always sufficiently flexible to deal with situations in which an obstacle blocks a path to the goal.In the general case, knowledge of the environment is partial and approximate; sensing is noisy; the dynamics of the environment can only be partially pre- dicted; and robot’s hardware execution is not completely reliable. Though, the robot needs to make decisions and execute actions at the time-scale of the envi- ronment. Classical planning approaches have been criticized for not being able to adequately cope with this situation, and a number of reactive approaches to robot control have been proposed (e.g. (Fibry, 1987; Gat, 1991)), including the use of fuzzy control techniques (e.g., (Martinez et al., 1994; Seraji & Howard, 2002; Sugeno & Nishida, 1985; Yen & Pflunger, 1992)). Reactivity provides immediate response to unpredicted environmental situations by giving up the idea of reasoning about future consequences of actions. Reasoning about fu- ture consequences (sometimes called “strategic planning” ), however, is still needed in order to intelligently solve complex tasks. Some recent developments in mobile robot navigation using fuzzy logic algo- rithms include (Parhi, 2005) and (El Hajjaji, 2004). In (Parhi, 2005) the fuzzy controller enables the robot to avoid obstacles that are not mobile robots. The fuzzy rules steer the robot according to whether there are obstacles or targets around it and how far they are from it. Fuzzy logic is suitable for this problem because this information is usually not precisely known. In (El Hajjaji, 2004) the case of 4-wheel automotive vehicles is considered which are modeled by a Takagi-Sugeno type of model. The fuzzy controller is then designed to im- prove the stability of the vehicle. A comprehensive study of the kinematics of nonholonomic mobile manipulators composed by an an-joint robotic arm and a nonholonomic mobile platform having two independently driven wheels is provided in (Bayle et al., 2003). Finally, a new approach to the navigation of mobile robots for dynamic obstacle avoidance is proposed in (Belkhous et al., 2005). This approach merges the static and dynamic modes of path planning to provide an algorithm giving fast optimal solutions for static environments, and produces a new path whenever an unanticipated situation occurs. Industrial and Mobile Robot Collisi on–Free Motion Planning…. 307 Fuzzy Path Planning and Navigation of Industrial Manipulators 3.1 Fuzzy Obstacle Avoidance Here, we will outline a technique developed by the authors (Zavlangas & Tzafestas, 2000), which has been primarily influenced by Khatib’s (1986) artifi- cial potential field method and the subsumption architecture developed by Brooks (1986). The local navigation approach is chosen because our main goal is to develop an on-line planner for fast collision – free trajectory generation. The proposed local navigator was implemented and applied to several practi- cal scenarios. Our experimental results, some of which will be presented in Section 5, are very satisfactory. The technique is based on separate fuzzy logic- based obstacle avoidance units, each controlling one individual link jl, 1, ,j n =! Each unit has two principal inputs : the distance between the link and the nearest obstacle jd, and the difference between the current link configuration and the target confi- guration, , jj t a r g e t jθθ θ−= Δ . The output variable of each unit is the motor command jτ. All these variables can be positive or negative, i.e., they inform both about the magnitude and the sign of displacement relative to the link – left or right. The motor command which can be interpreted as an actuation for the link motor is fed to the ma- nipulator at each iteration (Figure 1). For the calculation of the distance, the only obstacles considered are those which fall into a bounded area surround- ing each link and move along with it. In this implementation, each such area is chosen to be a cylindrical volume around each link. The area is as long as the link and reaches up to a predefined horizon. This area can be seen as a simpli- fied model for the space scanned by ranging sensors (for example, ultra-sonic sensors) attached to the sides of a link (Pedrycz, 1995). Of course, other shapes to describe the 3-dimensional scan areas are conceivable. It is, for example, ad- visable to deal with the blind zones near the joints when the magnitude of the angles is large so as to assure that small moving obstacles are not missed by the algorithm (Pedrycz, 1995).308 Industrial Robotics: Theory, Modelling and Control Figure 1. The Adept 1 industrial robotic manipulator connected to the corresponding fuzzy units. Each fuzzy unit receives via an input the difference be tween target and actual con- figuration, and, via a second input, two values in a sequential way represent- ing the distance between the corresponding link and the nearest obstacle on the left and on the right of this link. If no obstacle is detected inside the scan area, the fuzzy unit is informed of an obstacle in the far distance. Additionally, proximal units are informed about obstacles in the vicinity of more distal links. Besides an input from ultrasonic sensors, a camera can be used to acquire the environment. Either a stationary camera or a set of cameras which oversee the entire workspace can be utilised (Pedrycz, 1995; Jaitly & Fraser, 1996). The task of each fuzzy unit is to provide a control function which produces an appro- priate motor command from the given inputs. In broad lines, the control func- tion can be described as follows : on the one hand the function has to lead the corresponding link to its attracting end – position; on the other hand, it has to force the link to back up when approaching an obstacle which conveys a repel- ling influence. The fuzzy-rule-base (which represents the control function in each fuzzy unit) is built up by using common sense rules. In our particular implementation, at each iteration the distances of the nearest obstacle on the left ()jleftd and on the right ()jrightd of link jl are fed sequen- tially into the fuzzy unit. This process could also be carried out in a parallel fashion where two equivalent fuzzy controllers compute the response for the left and the right obstacle separately. The resulting two motor commands are superimposed, hence, both obstacles influence the final motor command which is applied to the link. The use of this method guarantees that the repul-sion caused by one obstacle on one side of the link does not result in a collision with a nearby obstacle on the opposite side. Only those obstacles are consid- ered which are the nearest on the left and right.Industrial and Mobile Robot Collisi on–Free Motion Planning…. 309 In addition, fuzzy units of distal links communicate information about the dis- tance to their nearest obstacles on the left and right to units of more proximal links. Once sent to fuzzy units of more proximal links, this information can be used by the decision process of those units to slow down or even reserve the motion of the more proximal links. Without this propagation of information the control strategy might fail in situations where one obstacle is “known” only to a fuzzy unit of a distal link, while proximal links continue their motion based on their local environment dictating an adverse motion for the rest of the arm. This is especially important, since the same change of angle occurring at a proximal link and at a distal link produces a different velocity at the ma-nipulator’s tip. Thus, the motion of a proximal link might not be sufficiently compensated by an adverse motion at a more distal link. Fuzzy units are only fed with the distance values of those obstacles which are inside the scan range. If no obstacle is detected inside a scan range, the fuzzy unit is informed of an obstacle which is far left or far right, respectively. 3.2 The Fuzzy Navigation Algorithm The first input of each fuzzy unit is the difference between the actual angle and the target angle, , jj t a r g e t j jθθ θ−= Δ ∈ Θ , 1, ,jn=! (n is the number of links). The value jθΔ is positive if the target is on the right, and negative if the target is on the left. The second input receives values describing the distance between linkjl and the nearest obstacles on the left and right in the “scanned” region, jjdD∈ . An obstacle on the left produces a negative distance value, while an obstacle on the right produces a positive one. The single output is the motor commandjjTτ∈. A positive motor command moves the link to the left and a negative one to the right (Althoefer, 1996; Althoefer & Fraser, 1996). Each universe of discourse jD can be partitioned by fuzzy sets () () 1,,jj pj μμ! . Each of the sets ()j pjμ, 1, ,jjp p =! , represents a mapping ()() [] :0 , 1j pj j jdD μ → by whichjd is associated with a number in the interval []0, 1 indicating to what degreejd is a member of the fuzzy set. Since jd is a signed value, “close_left” , for example, may be considered as a particular fuzzy value of the variable dis- tance and each jd is assigned a number () []_ 0, 1close left j d μ ∈ which indicates the extent to which that jd is considered to be close_left (Mamdani & Assilian, 1981). In an equivalent way, fuzzy sets () () 1,,jj qj ν ν! can be defined over the uni- verse of discourse jΘ. The Fuzzy Navigator is based on the Mamdani fuzzy model (Mamdani, 1974) and has an output set which is partitioned into fuzzy setsrjτ. There is a variety of functions that can be employed to represent fuzzy sets (Mamdani & Assilian, 1981). In the proposed controller asymmetrical trape-310 Industrial Robotics: Theory, Modelling and Control zoidal functions were employed to represent the fuzzy sets. The parameters, ()jml ,()jmr , which are the x-coordinates of the left and right zero crossing, re- spectively, and ()jmcl ,()jmcr , which describe the x-coordinate (left and right) where the fuzzy set becomes 1, define the following trapezoidal functions : ()()()() () ()()() () () () ()() () ()() ()min ,0 , 1, min ,0 .j jj jj j jj j jj jjj jpjj pj pjj pp jj j pj p j p j jpjj pj p jj ppdm l if ml d mcl mcl ml d if mcl d mcr dm r if mcr d mr mcr mrμ­§· −°¨¸ <≤°¨¸ −©¹° °=< ≤® °§·° −¨¸° <≤¨¸ − °©¹¯ (1) As commonly done, the trapezoidal functions are continued as constant values of magnitude 1 at the left and right side of the interval (Equations (2) and (3)) : ()()() () () () ()() () ()()() ()11 11 1 11 111, 1, min , 0 .jjj j j jj pj j j jj j jjjif ml d mcl d if mcl d mcr dm r if mcr d mr mcr mrμ­ °°<≤°°=< ≤® °§· − °¨¸ <≤ °¨¸ − °©¹¯ (2) and ()()()() () ()()() () () () () ()min , 0 , 1, 1.j jj jj j jj jjj jpjj pj pjj pp j jj pj p j p j j pj pdm l if ml d mcl mcl ml d if mcl d mcr if mcr d mrμ­§· −°¨¸ <≤°¨¸ −©¹° °=< ≤® ° <≤ ° ° °¯ (3) Note, that for the two fuzzy sets of Equations (2) and (3) : () () jjjj ppmcr mr = ,() () jjjj ppmcl ml = (4) Industrial and Mobile Robot Collisi on–Free Motion Planning…. 311 The fuzzy sets for jθΔ can be defined in the same way. The fuzzy sets () () 1,,jj p mm! and () () 1,,jj q nn! for link 2 as functions of the two inputs jd and jθΔ are shown in Figure 2, together with the output fuzzy set. Figure 2. Repeller, attractor and output fuzzy sets for link 2. The first diagram (a) is the fuzzy set of the distance between the link and the obstacle, and the second one (b) is the fuzzy set of the difference between the actual and target configuration. The output fuzzy set is shown in the third dia- gram (c). Additionally to the two inputs jd and jθΔ, each fuzzy unit (apart from the most distal one) uses the distance fuzzy sets of more distal links () ( ) 11,, jnjn ppμμ ++ ! for decision making to assure that proximal links are slowed down, in case a more distal link is about to collide with an obstacle. Thus, each unit uses the following fuzzy sets : () kk pμ, 1, , kj n=+! , and () jj qν. Each of the fuzzy sets () kk pμ and() jj qν are associated with linguistic terms () jj pA and () jj qB, respectively. Thus, for link jl the linguistic control rules () () 1,, jjj r R R! , which constitute the rule base, can be defined as : 312 Industrial Robotics: Theory, Modelling and Control () () () (): jj n j jjj n j rj p n p j q rR IF d is A AND AND d is A AND is B THEN θτΔ    ! where 1, ,jjrr=! ,jr, is the number of rules for the fuzzy unit of link jl, and jrτ is a numerical entry in the rule base used in the defuzzification process (Equation (5)). The most popular methods to calculate the fuzzy intersection (fuzzy – AND) are the minimum and product operators (Tzafestas & Venet- sanopoulos, 1994; Zadeh, 1965; 1973). If the minimum operator is used, the minimum of the inputs is chosen. If the product operator is chosen, the inputs are multiplied with each other. While the result of the first approach contains only one piece of information, the second approach produces results which are influenced by all inputs (Brown, 1994). Here, the fuzzy intersection is calculated by using the product operator “ ∗” : ()()()()()()()()()()()() ,, , , , , ** * jj j n n j j j j n n j jjn j j n j r pr j pr n qr j pr j pr n qr j dd d d σ μμ νθ μμ νθ =Δ = Δ            "" The output of the unit is given by the centroid defuzzification over all rules (Kosko, 1992) : ()() ()(), 1 , 1*j jj j jj j jj jjr j rp r r r j r j pr r rt tτμ τ μ= ==¦ ¦ (5) The fuzzy rule base for link 2 is displayed in Table I. Far leftLeft Close leftClose rightRight Far right Far left Ls Rs Rbb Lb Ls Ls Left Lss Rs Rbb Ls Lss Lss Contact nil nil nil nil nil nil Right Rss Rss Rs Lbb Ls Rss Far right Rs Rs Rb Lbb Ls Rs Lss, Rss : very small to the left / right Ls, Rs : small to the left / right Lb, Rb : big to the left / right Lbb, Rbb : very big to the left / right Table 1. FAM matrix (Fuzzy Associative Memory) for link 2 Industrial and Mobile Robot Collisi on–Free Motion Planning…. 313 Fuzzy Path Planning and Navigation of Mobile Robots 4.1 General Description Basically, the technique to be described for mobile fuzzy path planning and navigation is the same with that described in Section 3 for the case of industrial manipulators, i.e. it is based on Khatib’s potential field method (Khatib, 1986) and on Brooks subsumption structure (Brooks, 1986). Khatib computes an artificial potential field that has a strong repelling force in the vicinity of obstacles and an attracting force produced by the target location. The superposition of the two forces creates a potential field, which incorpo- rates information about the environment. Following the steepest gradient from a start position, a path can be found that guides the robot to the target position avoiding obstacles. In our approach the amount of computation, that is re- quired, is reduced by using only the nearest obstacles to determine the direc- tion of motion. The main idea of Brooks is a collection of modules, which are interconnected on different layers with different hierarchies. These modules are for example wall following, obstacle avoidance, goal reaching, etc. Depending on sensory input, a module becomes active and generates a command for the robot. While Brooks’ system resembles an expert system where for any input signal one specific reaction module or a specific combination of modules is ac- tive, our fuzzy approach is a parallel processing strategy where each input contributes to the final decision (see Section 3.2). The technique is based on two fuzzy – based controllers, one for steering con- trol, and the other for velocity control . The steering controller has three prin- cipal inputs : 1) the distance between the robot and the nearest obstacle jd, 2) the angle between the robot and the nearest obstacle jγ, and 3) the angle between the robot’s direction and the straight line connecting the current position of the robot and the goal configuration jj jθα β =− , wherejβ is the angular difference between the straight line connecting the robot’s current position and the goal configuration, and jα is the current direction of the robot (see Fig. 3). The output variable of this unit is the required change of angle jθΔ, and can be considered as a command for the robot’s steering actuators. The velocity controller has two principal inputs : 1) the distance between the robot and the nearest obstacle jd, 2) the distance between the robot and the goal configuration jgd.314 Industrial Robotics: Theory, Modelling and Control The output variable of this unit is an acceleration command jvΔ, and can be considered as a command for the robot’s drive actuators. All these variables can be positive or negative, i.e. they do not only inform about the magnitude, but also about the sign of displacement relative to the robot – left or right. The motor commands are fed to the mobile platform at each iteration. (a) (b) Figure3. (a) The Robosoft Robuter III mobile robot of IRAL / NTUA connected to the corresponding fuzzy-based obstacle avoidance unit. This steering control unit receives via an input the angle between the robot’s di- rection and the straight line connecting the current position of the robot and the goal configuration jj jθα β =− , and the distance and the angle to the nearest obstacle (),jjdγ (see (b)). If no obstacle is detected inside the scan area, the fuzzy unit is informed of an obstacle in the far distance. The output variable of this unit is the required change of angle jθΔ, and can be considered as a com- mand for the robot’s steering actuators. The velocity control unit has two in- puts : the distance between the robot and the nearest obstacle jd, and the dis- tance between the robot and the goal configuration jgd. The output variable of this unit is an acceleration command jvΔ and can be considered as a command for the robot’s driving actuators.The obstacles considered are those that fall into a confined area surrounding the robot and moving along with it. Here, this area is chosen to be a cylindrical volume around the mobile platform. This area is regarded as a simplified model for the space scanned by ranging sensors (for example ultrasonic sen- sors) attached to the sides of the robot (Pedrycz, 1995). Besides an input from ultrasonic sensors, a camera can also be used to acquire the environment. Mo-Industrial and Mobile Robot Collisi on–Free Motion Planning…. 315 bile robots are usually equipped with a pan / tilt platform where a camera is mounted. This camera can be utilized as shown in (Pedrycz, 1995; Jaitly et al., 1996; Kamon & Rivlin, 1997). If no obstacle is detected inside the scan area, the fuzzy units are informed of an obstacle in the far distance. The task of the fuzzy units is to provide a control function, that produces appropriate motor commands from the given inputs. This control function on the one hand has to lead the mobile robot to its attracting goal–position, and on the other hand it has to force the robot to back up when approaching an obstacle which conveys a repelling influence. The fuzzy–rule – base (which represents the control func- tion in the fuzzy unit) is constructed using common sense rules or by a neural network training algorithm (see e.g., (Tzafestas & Zavlangas, 1999)). An alter- native fuzzy motion control scheme of mobile robots which employs the slid- ing – mode control principle can be found in (Rigatos & Tzafestas, 2000). 4.2 Detailed Description As mentioned in Section 4.1 the proposed methodology is based on two fuzzy – based controllers, one for steering control, and the other for velocity control . The fuzzy controllers here are based on the functional reasoning control prin-ciples developed by Sugeno (see, for example, (Sugeno, 1985; Sugeno & Mura-kami, 1984)). For the steering controller, each input space is partitioned by fuzzy sets as shown in Fig. 4. Here, asymmetrical triangular and trapezoidal functions are utilized to describe each fuzzy set, which allow a fast computa-tion, essential under real – time conditions (see Eqs. (6) – (8) and (11)). The fuzzy sets of the three inputs jd,jγ and jθ are depicted in Figure 4. To calcu- late the fuzzy intersection, the product operator is employed (see Eq (10)). The final output of the unit is given by a weighted average over all rules (see Eq. (11)). Intuitively, the rules for obstacle – avoiding navigation can be written as sentences with three antecedents and one conclusion. This structure lends it-self to a tabular representation such as the one shown in Table 2. This table represents the prior knowledge of the problem domain. The tools of fuzzy logic allow us to translate this intuitive knowledge into a control system. To translate Table 2 into fuzzy logic, the universe of discourse jD which describes the distance jjdD∈ to the obstacle is partitioned by fuzzy sets () () 1,, jjj p μμ! , wherejp is the number of fuzzy sets. Each set () jj pμ, 1, ,jjp p =! , represents a mapping()() [] :0 , 1 jj pj jdD μ → by which jd is considered as a particular fuzzy value of the variable distance and each jd is associated with, e.g., a number in the interval [0,1] indicating to what degree jd is a member of the fuzzy set. Sincejd is a measure of distance, “very_close”, it may be assigned a number : () []_ 0,1very close j d μ ∈ which indicates the extent to which this particular jd is considered to be “very_close” (Mamdani & Assilian, 1981). 316 Industrial Robotics: Theory, Modelling and Control (a) Distance to Obstacle (b) Angle to Goal Position (c) Angle to Obstacle (d) Steering Motor Command Fig. 4. Fuzzy sets for the mobile robot : (a) distance to obstacle, (b) angle between ro- bot and goal position, (c) angle between robot and obstacle, and (d) steering motor command. Note that the output is not partitioned into fuzzy sets, but consists of crisp values. jjvμ very close close far very far far right right big right small left very big left very big right right big right small left big left big quite right right big right small left small left small close right right big right small left very small left very small forward null null null null close left right very smallright very smallright very smallright very small quite left right small right small right small right small left right big right big right big right big far left right very big right very big right very big right very big This rule-base is a translation of the common – sense knowledge of the problem do-main into the language of fuzzy logic. Rows represent the fuzzy measures of the dis- tance to an obstacle, while columns are fuzzy representations of the angle to the goal. Each element of the table can be interpreted as a particular motor actuation com-mand. Table 2. A rule – base for the mobile robot when jγ is “far_left”. Industrial and Mobile Robot Collisi on–Free Motion Planning…. 317 Similarly, fuzzy sets () () 1, jjj q vv! can be defined over the universe of discourse jΘ which represents the angle between the robot’s direction and the straight line connecting the current position of the robot and the goal configuration : jjθ∈Θ . Finally, fuzzy sets () () 1,, jjj g uu! can be defined over the universe of dis- coursejΓ that represents the angle to the nearest obstacle jjγ∈Γ . In contrast to the Mamdani’s controller, Sugeno’s controller (see (Sugeno, 1985; Sugeno & Murakami, 1984; Tzafestas & Zikidis, 2001)), of which ours is an example, has an output set which is not partitioned into fuzzy sets (see Fig. 2). Thus, the rule conclusions merely consist of scalars jrθΔ, 1, ,jjrr=! . The fuzzy sets () jj pμ, 1, ,jjp p =! , are described by asymmetrical triangular and trapezoidal functions. Defining the parameters, () jj pml and () jj pmr as the x-co- ordinates of the left and right zero crossing respectively, and () jj pmcl and () jj pmcr as the x-co-ordinates of the left and right side of the trapezoid’s plateau, the trapezoidal functions can be written as : ()()()()() ()() ()() () () ()()() ()() ()()max / , 0 1 max / , 0jj j j j jj jj j jjj j j jp p p j p j jj pj pj p jj j j jp p p j pdm l m c l m l i f dm c l di f m c l d m c r d mr mcr mr if d mcrμ­−− <° °=≤ ≤® °° −− >¯        (6) with 1, ,jjp p =! . Triangular functions can be achieved by setting () () jjjj ppmcl mcr = . At the left and right sides of the interval, the functions are continued as con- stant values of magnitude one, i.e. : ()()() ()()() ()() ()()1 1 11 1 11 max / , 0j jj j jj j j jjif d mcr d dm r m c r m r i f dm c rμ­ ≤°=®−− > °¯ (7) and ()()()()() ()() ()() ()max / , 0 1jj j j j jjj j j jp p p j pj pjj jpdm l m c l m l i f dm c l d if d mclμ­−− ≤°=® ° >¯ (8) The fuzzy sets for jθ and jγ are defined analogously. Figure 4 shows the fuzzy sets() () 1,, jjj p μμ! ,() () 1,, jjj q vv! and () () 1,, jjj g uu! .318 Industrial Robotics: Theory, Modelling and Control Every fuzzy set, () jj pμ,() jj qv and () jj gu, is associated with linguistic terms () jj qA,() jj qB and() jj gC respectively. Thus, for the mobile robot, the linguistic control rules () () 1,, jjj r R R! which constitute the rule base can be defined as : () () () ()() () :1 , , jj j j jjj j j rj p j q j g r j jR di s A i s B i s C f r r θγ τ = IF AND AND THEN    ! (9) where the AND operations use the t-norm product operator : ()()()()()()()()()()()() ,,, , , , ** jj j j j j j j j j j j jjjj j j j rp r jq r jg r j p r j q r j g r j dv u d v u σ μ θ γμ θ γ =∩ ∩ =            (10) Finally, the output of the unit is given by a weighted average over all rules (see Fig. 2 and (Topalov & Tzafestas, 2001)) : 1 1j j j j j j jr rr r j r r rσθ θ σ= =⋅Δ Δ=¦ ¦    (11) Eq. (9) together with Eqs. (10) and (11) define how to translate the intuitive knowledge reflected in Table 2 into a fuzzy rule – base. The details of this translation can be modified by changing the number of fuzzy sets, the shape of the sets (by choosing the parameters, () jj pml and () jj pmr,() jj pmcl,() jj pmcr as well as the value jrθΔ of each of the rules in Eq. (11). A technique for the automated selection of the above parameters is provided in (Tzafestas & Zikidis, 2001). As an example, the control rules for the particular mobile robot are shown in Ta- ble 2. In this application, the number of fuzzy sets which fuzzify the obstacle distancejd, the angle to the goal jθ and the angle to the nearest obstacle jγ are chosen to be four, nine and seven, respectively. All the other parameters were refined by trial and error.Industrial and Mobile Robot Collisi on–Free Motion Planning…. 319 (a) Distance to Obstacle (b) Angle to goal configuration (c) Drive Motor Command Figure 5. Fuzzy sets for the velocity control unit of the mobile robot : (a) the distance between the robot and the nearest obstacle, and (b) the distance between the robot and the goal configuration. Note that the output is an acceleration command and is not partitioned into fuzzy sets, but consists of crisp values. For the velocity controller, each input space is partitioned by fuzzy sets as shown in Figure 5. Asymmetrical triangular and trapezoidal functions have also been used to describe each fuzzy set, which allow a fast computation, es- sential under real-time conditions (see Eqs. (12) – (13)). To calculate the fuzzy intersection, the product operator is employed (see Eq. (16)). The final output of the unit is given by a weighted average over all rules (see Eq. (17)). Intuitively, the rules for the velocity controller can be written as sentences with two antecedents and one conclusion. This structure is represented by Table 3 which provides the prior knowledge of the problem domain. The tools of fuzzy logic allow us to translate this intuitive knowledge into a control system. 320 Industrial Robotics: Theory, Modelling and Control ()( )jjgvd d μvery close close far very far contact negative high negative high negative high negative high very close negative high negative high negative negative low close negative high negative nil nil far negative high negative positive low positive very far negative high negative positive positive high Rows represent the fuzzy measures of the distance to an obstacle, while columns are fuzzy representations of the distance between the robot and the goal configu-ration. Each element of the table can be interpreted as a particular drive motor actuation command for the acceleration and deceleration of the mobile robot. Table 3. The rule – base for the velocity controller. The fuzzy sets () jj pμ, 1, ,jjp p =! , are described by asymmetrical triangular and trapezoidal functions. Defining the parameters, () jj pml and () jj pmr as the x-co- ordinates of the left and right zero crossing respectively, and () jj pmcl and () jj pmcr as the x-co-ordinates of the left and right side of the trapezoid’s plateau, the trapezoidal functions can be written as : ()()()()() ()() ()() () () ()()() ()() ()()max / , 0 1 max / , 0jj j j j jj jj j jjj j j jp p p j p j jj pj pj p jj j j jp p p j pdm l m c l m l i f dm c l di f m c l d m c r d mr mcr mr if d mcrμ­−− <° °=≤ ≤® °° −− >¯        (12) with 1, ,jjp p =! . Triangular functions can be achieved by setting () () jjjj ppmcl mcr = . At the left and right side of the interval the functions are continued as constant values of magnitude one : ()()() ()()() ()() ()()1 1 11 1 11 max / , 0j jj j j jj j jjifdm c r d dm r m c r m r i fdm c rμ­ ≤°=®−− > °¯ (13) and ()()()()() ()() ()() ()max / , 0 1jj j j j jjj j j jp p p j pj pjj jpdm l m c l m l i f dm c l d if d mclμ­−− ≤°=® ° >¯ (14) Industrial and Mobile Robot Collisi on–Free Motion Planning…. 321 The fuzzy sets for gjd are defined analogously. Figure 5 shows the fuzzy sets () () 1,, jjj p μμ! and () () 1,, jjj q vv! . The linguistic control rules () () 1,, jjj r R R! , which constitute the rule base, are de- fined as : () () ()() () :1 , , jj j jjj j rj p g j q r jR dA d B f v r r Δ= IF is AND is THEN   ! (15) where the AND operations use the t-norm product operator, defined as : ()()()()()()()() ,, , , * j jj jj j jj jj jjj j j r p rj q r g p rj q r g dvd d vd σμ μ=∩=        (16) Finally, the output of the velocity control unit is given by a weighted average over all rules (Eq. 16) : 1 1j jj j j j jr rr r j r r rv vσ σ= =⋅Δ Δ=¦ ¦    4.3 Integrated global and local path planning The path planner and navigator presented in Sections 4.1 and 4.2 is of the reac- tive type and is used at the local level. The full path following problem in- volves also a global path planner at a higher level (called geometric level) as shown in Fig. 6. The authors have derived and implemented a global path planner based on the potential field method which was selected for its mathe- matical elegance and simplicity. However, as it is evident, more complex / complete global path planning techniques can be embedded into our system. Global path planning strategies are more easily planned using a topological map, where the planner can decide the sequence of rooms and corridors to be traversed (Dudek et al., 1991; Ryu & Yang, 1999; Kortenkamp & Weymouth, 1994; Thrun, 1999; Kuipers & Levitt, 1988). 322 Industrial Robotics: Theory, Modelling and Control Figure 6. Three – level path planning and navigation. The topological maps (networks) are placed at the top level of the hierarchical structure. The authors have conducted a number of experiments where both the topological and local metric maps were given to the robot a priori. The enormous compactness of topological maps when compared to the underlying grid-based map, increases substantially the efficiency of global planning. The paths are planned using the abstract topological map of the robot’s environ- ment (Fig. 7). Shortest paths on the topological maps can be easily found using one of the standard graph search algorithms, such as Dijkstra’s or Floyd and Warshal’s shortest path algorithm, the A * algorithm, or dynamic program- ming. In our case we have used the Dijkstra’s shortest path algorithm. This al- gorithm finds the best (shortest) path on the topological map going from the sector that contains the current location of the robot to the one which contains the goal. For example, a plan to get from the “start” position in Fig. 7 to an of- fice desk in room 2R may be : (a)Industrial and Mobile Robot Collisi on–Free Motion Planning…. 323 (b) Figure 7. (a) The topological map used for the experiments, and (b) the corresponding network of the local metric maps. Experimental Results 5.1 Industrial Manipulator To test the functionality and performance of the basic algorithms, the fuzzy navigator was applied to a simulated 3-dof industrial manipulator (Adept 1). All experiments were carried out on a personal computer (Pentium II, 350 MHz). 324 Industrial Robotics: Theory, Modelling and Control Figure 8. Simulation results using the ADEPT 1 industrial manipulator. The proposed fuzzy navigator was successfully tested for the path planning / obsta- cle avoidance problem in three working scenarios with different obstacle constella-tions (a), (b) and (c), each time providing the manipulator with a collision – free trajec-tory. The fuzzy navigator was developed using Microsoft C and for the visualiza- tion and animation of the robot’s path Workspace 4 software package was used. The performance of the fuzzy navigator for the Adept 1 industrial manipulator was tested in a variety of environments, with different obstacle constellations and working scenarios, even in dynamic environments with moving obstacles. In all cases, the fuzzy navigator provided the system with a collision free mo- tion. Simulation results obtained in three different working scenarios (with dif- ferent obstacle constellations) are presented in Figure 8.(a) (c)Industrial and Mobile Robot Collisi on–Free Motion Planning…. 325 5.2 Mobile Robot local path planning The experimental results were first derived for the simulated omnidirectional mobile robot of the IRAL Laboratory (Robosoft Robuter III) using a Personal Computer (Pentium IV, 1.3 GHz) and the Matlab 5.2 software package. The fuzzy navigator was tested in a variety of environment scenarios (with both static and moving obstacles). In all cases a collision – free motion was ob- tained. A representative set of results are shown in Fig. 9 for four distinct working scenarios. 326 Industrial Robotics: Theory, Modelling and Control Figure 9. Simulation results using the Robosoft Robuter III mobile robot. The proposed strategy was successfully tested in four working scenarios with different obstacle constellations each time providing the mobile robot with a collision – free movement. In (a) the path of the robot with only steering con- trol is shown, and in (b) the path with the steering and velocity controllers is shown. 5.3 Mobile robot global path planning The topological – map based global path planning technique was applied to the simulated Robosoft Robuter III mobile robot using the environment de- picted in Fig. 7. Inexperiment 1, the mobile robot was in corridor 1C and was instructed to go t o a n o ffi ce d esk i n ro o m 2R. The output sequence / plan of the topological Industrial and Mobile Robot Collisi on–Free Motion Planning…. 327 planner is : first follow corridor 1C up to junction 1J, then traverse junction 1J, then follow corridor 2C up to door 4D, get-close-to door 4D, then cross it, then traverse room 2R, and finally get-close-to the desk. The robot moved to its goal configuration following the local paths generated by the path planner. Inexperiment 2, the mobile robot was in room 1R and was instructed to go to a position in corridor 1C. The output sequence / plan of the topological plan- ner is : first traverse room 1R up to door 1D, get-close-to door 1D, then cross it, then reverse junction 1J, then follow corridor 1C and finally get-close-to goal position. The robot moved to its goal configuration following the local paths generated by the path planner. 328 Industrial Robotics: Theory, Modelling and Control Figure 10. Illustration of mobile robot global path planning experiments. Inexperiment 3, the mobile robot was in room 1R and was instructed to go to an office book – case in room 4R. The output sequence / plan of the topologi- cal planner is : first traverse room 1R up to door 1D, get-close-to door 1D, then cross it, then traverse corridor 2Cup to door 7D, then get-close-to door 7D, then cross it, then traverse room 4R, and finally get-close-to the bookcase. The robot moved to its goal configuration following the local paths generated by the path planner. Inexperiment 4, experiment 3 was repeated. The mobile robot was in room 1R and was instructed to go to an office bookcase in room 4R. The output se- quence / plan of the topological planner is : first traverse room 1R up to door 1D, get-close-to door 1D, then cross it, then traverse corridor 2C up to door 7D, then get-close-to door 7D, then cross it, then traverse room 4R, and finally get- close-to the bookcase. The robot moved to its goal configuration following the local paths generated by the path planner. However, an unexpected obstacle occurred in room 4R and the local reactive planner made the appropriate ad- justments to the robot’s motion in order to avoid the collision. Industrial and Mobile Robot Collisi on–Free Motion Planning…. 329 Conclusions and Directions for Research In this chapter the problem of collision – free path planning and navigation was studied for both robotic manipulators and omnidirectional mobile robots. A short review of the problem itself was provided along with a number of fundamental and recent references. The methodology followed was based on fuzzy logic and reasoning and a promising fuzzy path planner and navigator was developed, that can be applied to both industrial and mobile robots. This path planner / navigator has been tested by simulation in a variety of working scenarios with different obstacle constellations, both static and dynamic, pro- viding each time a collision-free trajectory for the robotic manipulator. This lo- cal planning method has shown a robust and stable performance and the ex- perimental results were very satisfactory. The difference between the presented approach and the existing obstacle avoidance techniques is that the proposed navigator considers only the nearest obstacle to decide upon the ro- bot’s next move. This clearly leads to a large reduction in the required remote sensing and computations. A drawback is that, this reduction in information about the robot’s environment, leads to an increased possibility of getting trapped in local minima. There may be routes leading to the goal that avoid the obstacles, which our navigator will not be able to find. Concerning the mobile robots both local and global path planners were devel- oped and tested. The local geometric information was encoded in a set of local sectors, whereas the global topological information was encoded in a network connecting these sectors. Each sector is a Cartesian representation, with its own reference system, that covers a limited area of the environment, like a room, a hall, or a corridor, and includes an approximate geometric description of the boundaries of the objects in the environment. The environment at the lo- cal level was represented by local metric maps connected to the topological network. In this way one can use maps that are not metrically consistent on the global scale although they are metrically consistent locally. This structure al- lows also the combination of abstract global reasoning and precise local geo- metric computations. To navigate in the environment, the robot uses, at the higher level of abstraction, the topological information to plan a sequence of sectors and gateways to traverse, and, to the lower level, uses the metric in- formation in each sector to perform geometric path planning and navigation, and to locally move within the sector and to the next one. The system has shown a very stable and robust performance, providing each time the mobile robot with a collision free movement. The proposed fuzzy navigator is very fast and can be used in real time. Future research may be devoted to the application of neural learning mecha- nisms applied on the fuzzy navigator providing an adaptive neurofuzzy plan- ner (Topalov & Tzafestas, 2001; Brown, 1994; Tzafestas & Zavlangas, 1999; Tzafestas & Zikidis, 2001; Wang, 1994; Stamou & Tzafestas, 2000). The authors’ 330 Industrial Robotics: Theory, Modelling and Control group is also investigating the motion planning and control problem of mobile robots equipped with manipulator arms, i.e., mobile manipulators (Tzafestas & Tzafestas, 2001; Bayle et al., 2003; Tzafestas et al., 2000; Erden et al., 2004). Other potential directions for future research needed in both industrial and non-industrial (e.g., service, medical) applications include multirobotic sys- tems involving industrial manipulators, mobile robots and mobile manipula- tors, and the application of behavior-based techniques to both single robotic and multiple cooperating robots (Erden et al., 2004; Hsu & Liu, 2005; Arai et al., 1999; Balch & Arkin, 1998; Yamaguchi et al., 2001; Wang, 1991). References Althoefer, K. (1996). Fuzzy obstacle avoidance for robotic manipulators, Neural Network World, 6(2), 131-142 Althoefer, K. & Fraser, D. A. (1996). Robotic manipulators amidst moving ob- stacles : Fuzzy – based obstacle avoidance, in Proc. of EUFIT ’96 – The 4th European Congress on Intelligent Techniques and Soft Computing, Aachen. Arai, T.; Pagello, E. & Parker, L. E. (1999). (Guest Editorial), IEEE Trans. on Ro- botics and Automation, 15(5), 818-828. Balch, T. & Arkin, R. C. (1998). Behavior – based formation control for multi- robot teams, IEEE Trans. Robotics and Automation, 14(6), 926-939. Bayle, B.; Renaud, M. & Fourquet, J.-Y. (2003). Nonholonomic mobile manipu- lators: kinematics,velocities and redundancies, J. Intell. and Robotic Sys- tems, 36(1), 45-63. Beaufrere B. & Zeghloul, S. (1995). A mobile robot navigation method for using a fuzzy based method : Simulation and experimental results, Intl. J. Robot- ics and Automation, 10(3), 106-113. Belkhous, S.; Azzouz, A.; Saad, M.; Nerguizian, C. & Nerguizian, V. (2005). A novel approach for mobile robot navigation with dynamic obstacles avoidance, J. Intell. and Robotic Systems, 44(3), 187-201. Boem, H. R. & Cho, H. S. (1995). A sensor-based navigation for a mobile robot using fuzzy – logic and reinforcement learning, IEEE Trans. Systems, Man and Cybernetics, 25(3), 464-477. Brooks, R. A. (1986). A robust layered control system for a mobile robot, IEEE J. Robotics and Automation, 2(1), 14-23, 1986. Brown, M. (1994). Neuro-Fuzzy Adaptive Modelling and Control, Prentice-Hall, UK.Industrial and Mobile Robot Collisi on–Free Motion Planning…. 331 Dudek, G.; Jenkin, M.; Milios, E. & Wilkes, D. (1991). Robotic exploration as graph construction, IEEE Trans. on Robotics and Automation, 7(6), 859-865. ajjaji, A. El. (2004). A Ciocan and D. Hamad, Four wheel steering control by fuzzy approach, J. Intell. and Robotic Systems, 41(2-3), 141-156. Erden, M. S.; Leblebicioglu, K. & Halici, U. (2004). Multi – agent system – based fuzzy controller design with genetic tuning for a mobile manipula- tor robot in the hand over task, J. Intell. and Robotic Systems, 39(3), 287-306. Erdmann, M. & Lozano-Perez, T. (1987). On Multiple Moving Obstacles, Algo- rithmica 2(4),477-521. Fibry, J. R. (1987). An Investigation into Reactive Planning in Complex Do- mains, Proc. AAAI Conference. Fugimura, K. (1991). Motion Planning in Dynamic Environments, Springer, To- kyo. Gat, E. (1991). Reliable Goal-Directed Reactive Control for Real – World Autonomous Mobile Robots, PhD Dissertation, Virginia Polytechnic Insti- tute and state University. Gil de Lamadrid, J. & Gini, M. (1990). Path Tracking through Uncharted Mov- ing Obstacles, IEEE Transactions on System, Man, and Cybernetics, 20(6), 1408-1422. Griswold, N. C. & Elan, J. (1990). Control of Mobile Robots in the Presence of Moving Obstacles, IEEE Transactions on Robotics and Automation 6(2). Hsu, H. C.-H. & Liu, A. (2005). Multiagent – based multi-team formation con- trol for mobile robots, J. Intell. and Robotic Systems, 42(4), 337-360. Ishikawa, S. (1995). A method of autonomous mobile robot navigation by us- ing fuzzy control, Advanced Robotics, 9(1), 29-52. Izumi, K. & Watanabe, K. (2000). Fuzzy behavior – based control trained by module learning to acquire the adaptive behaviors of mobile robots, Mathem. and Computers in Simulation, 51(3/4), 233-243. Jaitly, R.; Althoefer, K. & Fraser, D. (1996). From vision to path planning : A neural-based implementation, Proc. 2nd international conference on engineer- ing applications of neural networks, 209-212, London, UK. Jaitly, R. & Fraser, D. A. (1996). Automated 3D object recognition and library entry system, Neural Network world, 6(2), 173-183. Kamon, I. & Rivlin, E. (1997). Sensory-based motion planning with global proofs, IEEE Trans. Robotics and Automation, 13(6). Khatib, O. (1986). Real – time obstacle avoidance for manipulators and mobile robots, Internat. J. Robotics Res. 5(1), 90-98. Kortenkamp, D. & Weymouth, T. (1994). Topological mapping for mobile ro- bots using combination of sonar and vision sensing, Proc. AAAI Conf., Menlo Park, CA, USA, 979-984. Kosko, B. (1992). Neural Networks and Fuzzy Systems. A Dynamical Systems Ap- proach to Machine Intelligence, Prentice – Hall, Englewood Cliffs, NJ, 2-3, 314-316.332 Industrial Robotics: Theory, Modelling and Control Kuipers, B. & Levitt, T. (1988). Navigation and mapping in large scale space, AI Magaz., 9, 25-43. Latombe, J. C. (1991). Robot Motion Planning, Kluwer, Boston. Lozano-Perez, T. (1983). Spatial planning : A configuration space approach, IEEE Trans. Comput. 32(2), 108-120. Mamdani, E. H. (1974). Applications of fuzzy algorithms for simple dynamic plant, Proc. IEE 121(12), 1585-1588. Mamdani, E. H. & Assilian, S. (1981). An experiment in linguistic synthesis with a fuzzy logic controller, in : Fuzzy Reasoning and its Applications, Aca- demic Press, New York, 311-323. Martinez, A.; Tunstel, E. & Jamshidi, M. (1994). Fuzzy – logic based collision – avoidance for a mobile robot, Robotica, 12 (6), 521-527. Moustris, G. & Tzafestas, S. G. (2005). A robust fuzzy logic path tracker for non-holonomic mobile robots, Intl. J. Artif. Intelligence Tools, 14(6), 935- Parhi, D. R. (2005). Navigation of mobile robots using fuzzy logic, J. Intell. and Robotic Systems, 42(3), 253-273. Pedrycz, W. (1995). Fuzzy Sets Engineering, CRC Press, Boca Raton, FL, 3-7. Ratering, S. & Gini, M. (1995). Robot Navigation in a Known Environment with Unknown Obstacles, Autonomous Robots, 149-165. Rigatos, G. G.; Tzafestas, C. S. & Tzafestas, S. G. (2000). Mobile robot motion control in partially unknown environments using a sliding mode fuzzy controller, Robotics and Autonomous Systems, 33(1), 1-11. Ryu, B. S. & Yang, H. S. (1999). Integration of reactive behaviors and enhanced topological map for robust mobile robot navigation, IEEE Trans. on Sys- tems, Man and Cybernetics, 29(5), 474-485. Seraji, H. (1998). A unified approach to motion control of mobile manipulators, Intl. J. Robotics Research, 17(2), 107-118. Seraji H. & Howard, A. (2002). Behavior – based robot navigation on challeng- ing terrain : A fuzzy logic approach, IEEE Trans. Robotics and Automation, 18(3), 308-321. Stamou G. B. & Tzafestas, S. G. (2000). Neural fuzzy relational systems with a new learning algorithm, Mathem. and Computers in Simulation, 51(3-4), 301- Sugeno, M. (1985). An Introductory Survey of Fuzzy Logic, Information Science, 36, 59. Sugeno, M. & Murakami, K. (1984). Fuzzy Parking Control of Model Car, Proc. 23rd IEEE Conf. on Decision and Control, 902, Las Vegas, USA. Sugeno, M. & Nishida, M. (1985). Fuzzy Control of a Model Car, Fuzzy Sets and Systems, 16, 103-113. Thrun, S. (1999). Learning metric-topological maps for indoor mobile robot navigation, Artificial Intelligence, 1, 21-71.Industrial and Mobile Robot Collisi on–Free Motion Planning…. 333 Topalov, A. V. & Tzafestas, S. G. (2001). Fuzzy – neural – genetic layered multi – agent reactive control of robotic soccer, In : D. Braha (ed.), Data Mining for Design and Manufacturing, Kluwer, Dordrecht / Boston, 417-422. Tzafestas, S. G. (1999) (ed.), Advances in Intelligent Autonomous Systems, Kluwer, Dordrecht / Boston. Tzafestas, S. G; Melfi, A. & Krikochoritis, T. (2000). Modelling and Control of an Omnidirectional Mobile Manipulators, Proc. BASY ‘2000 : 4th IEEE/IFIP Intl. Conf. on Inf. Technology for Balanced automation Systems, Berlin, Sept. 27-29. Tzafestas, C. S. & Tzafestas, S. G. (2001). Full-state modeling, motion planning and control of mobile manipulators, Studies in Informatics and Control, 10(2), 109-127. Tzafestas, S. G. & Zavlangas, P. G. (1999). Adaptive neuro-fuzzy navigation for industrial manipulators, Proc. 1999, ICIMS-NOE Advanced Summer Insti- tute : Production Management, Control and Supervision (ASI ’99), Leuven, Belgium. Tzafestas S. G. & Zikidis, K. C. (2001). NeuroFast : On – line Neuro-Fuzzy ART-based Structure and Parameter Learning TSK Model, IEEE Trans. Syst., Man, and Cybernetics, Part B : Cybernetics, 31(5). Tzafestas, S. G. & Venetsanopoulos, A. N. (1991) (eds.), Fuzzy Reasoning in In- formation, Decision and Control Systems, Kluwer, Dordrecht / Boston, 1994. Wang, P. K. C. (1991). Navigation strategies for multiple autonomous mobile robots moving in formation, J. Robotic Systems, 8(2), 177-195. Wang, L. X. (1994). Adaptive Fuzzy Sets and Control : Design and Stability Analy- sis, Prentice Hall Int., U.K. Watanabe, K.; Izumi, K.; Maki, J. & Fujimoto, K. (2005). A fuzzy behavior – based control for mobile robots using adaptive fusion units, J. Intell. and Robotic Systems , 42(1), 42-27. Watanabe, K.; Tang, J.; Nakamura, M.; Koga, S. & Fukuda, T. (1996). A fuzzy – Gaussian neural network and its application to mobile robot control, IEEE Trans. Control Systems Technol., 4(2), 193-199. Yamaguchi, H.; Arai, T. & Beni, G. (2001). A distributed control scheme for multiple robotic vehicles to make group formations, Robotics Auton. Syst., 36(4), 125-147. Yen, J. & Pflunger, N. (1992). A Fuzzy Logic Based Robot Navigation System, Proc.AAAI Fall Symposium on Mobile Robot Navigation, 195-199, Boston / MA, USA. Zadeh, L. (1965). Fuzzy sets, Inform. & Control , 8, 338-353. Zadeh, L. (1973). Outline of a new approach to the analysis of complex systems and decision processes, IEEE Trans. Systems Man Cybernetics, 1, 28-44. Zavlangas, P. G. & Tzafestas, S. G. (2000). Industrial robot navigation and ob- stacle avoidance employing fuzzy logic, J. Intell. and Robotic Systems, 27(1- 2), 85-97.334 Industrial Robotics: Theory, Modelling and Control Zavlangas, P. G. & Tzafestas, S. G. (2001). Integrated fuzzy global path follow- ing and obstacle avoidance for mobile robots, Systems Science, 27(4), 85-96. Zavlangas, P. G. & Tzafestas, S. G. (2002). Integration of topological and metric maps for indoor mobile robot path planning and navigation, Image Proc- essing and Communications, 8(1), 55-64.33511 Trajectory Planning and Control of Industrial Robot Manipulators S. R. Munasinghe and Masatoshi Nakamura Introduction Industrial robot manipulators are used in various applications in order to achieve fast, precise, and quality production. In pick-and-place operations such as part handling, assembly, etc., the end-effector of the manipulator has to travel between two specific points in the workspace, and the path it takes in between is of no concern. In trajectory tracking applications such as welding, cutting, painting, etc., the end-effector has to follow a specific trajectory in 3- space as closely as possible, while maintaining rated velocity as much as pos- sible (Munasinghe, 2001). In the latter case, planning the trajectory can be complex when there are constraints on the end-effector velocity, joint accelera- tion, and trajectory error. Trajectories planned without proper consideration to these constraints often result in poor performance such as trajectory over- shoots, end-effector deviations from the planned trajectory, and undue veloc- ity fluctuations (Nakamura, et. al., 2000). Performance could be even more de- teriorated especially at sharp corners in the Cartesian trajectory (Nakamura, 20001). Lot of trajectory planning algorithms have been proposed so far start- ing from simple Cartesian path control (Paul, 1979) to time optimized trajecto- ries (Shin, 1985). However, the industrial systems experience difficulties ac- commodating most of these methods because of at least two specific reasons; 1) These techniques often require hardware changes in the existing setup and the manufacturing process has to be interrupted for system reconfigurations, which usually takes a longer period of time, and 2) Many of these methods of- ten consider only one constraint, and often they pay less concern about indus- trial requirements and actual constraints set by applications. Therefore, they find difficulties in industrial implementation. In this view, we present a new trajectory planning algorithm which considers end-effector velocity limit, joint acceleration limit, and error tolerance set by the application. These are the actual constraints in most industrial applica- tions. Another technical problem in industrial manipulators is their delay dy- namics, which causes the end-effector to overshoot at trajectory corners. To remedy this problem, we have designed a feed-forward compensator (Goto, 336 Industrial Robotics: Theory, Modelling and Control 1997), which slightly alters the corners of the trajectory so that to make sure that the end-effector actually traces the trajectory even with the presence of the delay dynamics. The new trajectory planning algorithm together with the feed- forward compensator appears as a single front end block in the control system, and it can be easily accommodated to existing industrial manipulator systems without taking the risk and time of hardware reconfigurations. A trajectory planning algorithm can generate position, velocity, and accelera- tion profiles for all of the joints of the manipulator. In most industrial manipu- lators, the system input is the joint position data, which are widely known in the industry as taught data. Paul (Paul, 1979) described how homogeneous transformations (Mittal & Nagrath, 2003) can be used in representing position and orientation of a serial link manipulator in order to control it through a Cartesian trajectory. The work by Shin et. al. (Shin et al. 1985) looks similar to ours, however it is difficult to be implemented in industrial systems as it needs to know many link/joint parameters of the manipulator. In industrial manipu- lator systems, most of these parameters are not precisely known. In our previous works we have addressed acceleration and velocity constraints for 2-space trajectory planning (Munasinghe, 2001), and in this work we ex- tend it to 3-space, while also considering error tolerance of the trajectory. The proposed method has been tested on a Performer MK-3s industrial manipula- tor, and its effectiveness has been experimentally verified. Industrial Robot Manipulators 2.1 System Architecture The industrial robot manipulator Performer MK-3s is shown below. The reference input generator is a dedicated, or a networked computer which is connected to the servo controller through digital-to-analog (DAC) and ana-log-to-digital (ADC) converters. Servo controller has motor driver boards to control manipulator joints individually as shown in Fig.1. The reference input generator contains taught data sequences ju where j=1, 2, 3 stands for the joint. Joint position jθ is fed back to the reference input generator from the servo controller. Trajectory Planning and Control of Industrial Robot Manipulators 337 Figure 1. Performer MK-3s industrial robot manipulator With the taught data and position feedback, reference input generator deter- mines the control commands for each joint, and send those commands to the servo controller, which actuates joint motors accordingly. Refering to Fig.1, ki- nematics of the manipulator is given by ) cos( cossin)] sin( sin [cos)] sin( sin [ 3 2 3 2 21 3 2 3 2 2 11 3 2 3 2 2 1 θ θ θθ θ θ θθ θ θ θ + + =+ + + =+ + + = L L zL L L yL L L x (1) where ),,( zyx is the end-effector position, and 3 2 1,,θθθ is the corresponding joint configuration. jL is the length of link . By differentiating (1) it is possible to find the velocity relationship between Cartesian velocity and joint velocity as follows: »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª321 )( θθθ   șJ zyx (2) where Jacobean is given by »»» ¼º ««« ¬ª + − + − −+ + + + + ++ + + + + + − = ) sin( ) sin( sin 0) cos( sin )] cos( cos[ sin )] sin( sin [ cos) cos( cos )] cos( cos[ cos)] sin( sin [ sin )( 3 2 3 3 2 3 2 23 2 1 3 3 2 3 2 2 1 3 2 3 2 2 1 13 2 1 3 3 2 3 2 2 1 3 2 3 2 2 1 1 θ θ θ θ θθ θ θ θ θ θ θ θ θ θ θθ θ θ θ θ θ θ θ θ θ θ L L LL L L L L LL L L L L L șJ in that []T 3 2 1 θ θθ=ș is the arm configuration. 338 Industrial Robotics: Theory, Modelling and Control 2.2 Joint Dynamics of Industrial Robot Manipulators Industrial robot manipuators are designed to meet the performance level re- quired by the application such as welding, cutting, part handling, etc. The spe-cifications in general are limited only to a certain degree of accuracy, velocity, and complexity. Therefore, most industrial robot manipulators are designed with linear proportional-integral-derivetive (PID) servo controllers with cur- rent limiting power amplifiers. This saturating current determines the accele- ration limit of the joint. Furthermore, joints are independently controlled, whe- reas unknown inertia torques, coriolis and centrifugal torques, and torques due to friction and gravity are treated as disturbances to be rejected by the controller. To support this assumption, manipulator links are designed with low inertia, and joints are driven through high gear reductions (Sage et. al. 1999). These controllers are simple, and also provide sufficient robustness. Fi- gure 2 illustrates three degree of freedom decoupled joint dynamic model of an industrial manipulator. Figure 2. Three degree of freedom joint dynamic model of an industrial robot manipu- lator This model also includes power amplifier saturation of joint actuators. p jK and v jK are the servo controller gains in the position loop and velocity loop of joint j, and these gains are periodically tuned by the trained operators to maintain the level of performance. As only two tunning prameters are involved, controller tuning process is quite simple. Within the linear reagion of joint ac-Trajectory Planning and Control of Industrial Robot Manipulators 339 celeration, joint dynamics is given by v jp jv jv jp j jj KKsK sKK sUs + +=Θ 2 )()( 2 (3) And, the joint dynamics when joint acceleration saturates is given by }])( ))( )( { sat[)( )t t t(uKK tj j jp jv j j θ θ θ   − − = (4) where °¯°®­ −< −≤> = max maxmaxmax max )(sat j jjj j zz zz z θ θθθ θ    in that max jθis the mximum aceleration of joint j. In this view, the objective of the trajectory planning is to make the best use of joint acceleration capability, while avoiding saturation. 2.3 Problem Statement In this work, we consider the following three major issues which are practi- cally applicable in industrial robot manipulator applications. ρθ θ ≤¯®­ ≤≤=≤ evvv trj j cornersatline straight along maxmax  (5) (6)(7) where maxand,,t r v vv are end-effector velocity, rated velocity, and maximum tangential velocity (at a rounded corner), respectively. ρand,e are the trajec- tory error and error tolerance. Constraint (5) describes the linear region for joint acceleration, within which linear dynamics (3) is maintained. A violation of this coinstraint results in nonlinear joint dynamics (4), which causes the end- effector to deviate from the planned trajectory. Consraint (6) specifies the velo- city limit while end-effector moves along straight lines and through corners. Rated velocity of the joint rω is given by ).60/( ..2G r r N RPMπ ω= , where r RPM is the rated RPM (revolutions per minute) of the joint and GNis the gear reduction ratio. Then, the rated velocity L vr rω= , where L is the link length. 340 Industrial Robotics: Theory, Modelling and Control At trajectory corners the tangential velocity is lowered heuristically to main- tain centripetal acceleration within constraint (5), and it can also be theore- tiaclly determined as described in (Munasinghe & Nakamura, 2002) Trajectory Planning 3.1 The Algorithm The proposed trajectory planning algorithm is illustrated in Fig. 3. The objective trajectory O(s) is specified by the application, and it is segmented into a sequence of a) corners and b) straight line segments. Corners are planned in Cartesian space using specified tangential velocity max tvv= , and transformed into joint space using inverse kinematics. Straight line segments are generated in joint space as piecewise in that every straight line segment has three pieces; forward(acceleration), middle(uniform velocity), and rever- se(deleleration). Forward/reverse pieces are planned in such a way that at le- ast one joint moves with its maximum acceleration/deceleration as long as end-effector velocity constraint (6) is not violated (b1 and b2 in Fig.3). Figure 3. Proposed trajectory planning algorithmTrajectory Planning and Control of Industrial Robot Manipulators 341 Middle segment is planned in Cartesian space maintaining uniform end- effector velocity rvv=, and then it is transformed into joint space (b3 in Fig. 4). Finally, all corners and straight line segments in joint space are merged in the correct sequence. This trajectory in joint space is called the realizable trajectory P(s). 3.2 Trajectory Planning for a Corner Figure 4(a) illustrates a sharp corner of the objective trajectory O(s) with the er- ror tolerance (dashed line). Error tolerances are quite common in industrial applications, and it can be used to effectively plan the realizable trajectory P(s). It is required however, to make sure that the realizable trajectory is contained within the error tolerance. Referring to Fig. 4, the largest possible circular arc should pass through point R, and it should be tangential to the section of the tolerance cylinder on the plane of ABCΔ . In order to construct this curve, points C BA ′ ′′ and,, are determined from C BA and,, according to the following procedure: In ABCΔ2 2 2) () () (B A B A B A zz y y x x AB − + − + − = , and { }...2/) ( cos2 2 2 1BCAB AC BC AB − + =−β .A′is located using point coordinates of Aand C. For exmple, x coordinate of A′ can be determined by A A C A A x AC x x x + − =′ ′ /) ( ε , where AAˆsin/ρ ε=′ . Adopting the same procedure B′could be located with point coordina tes of )2/ sin(/ and,, β ρ ε=′B BF .C′ could also be located with point coordinates of A, C, and CCBˆsin/ρ ε= . F is located with point coordinates )}.2/ tan(ˆ /{tan)2/ tan(ˆtan and,, β β ε + = C C BC CAF Figure 4(b) illustrates the circular arc constructed at a corner with radius r is given by {} )2/ sin(1/2 β ρ − =r (8) 342 Industrial Robotics: Theory, Modelling and Control Figure 4 (a) A sharp corner of the objective trajectory, and (b) A planned corner of the realizable trajectory D and E are the terminal points of the circular arc and they could be located on CB BA ′′ ′′and as {} )2/ cos()2/ sin(/2 β β ρ+=′ =′ r BE BD . Along the circular arc, from D to E trajectory is sampled at each δas marked by M. Sampling angle is given by rtvs t /max=δ (9) wherest is the sampling interval. Number of sampling points is determined by upward roounding of δ βπ 2/) (− =N to the closest whole number. Then, sampling angle is readjusted by .2/) ( N βπ δ − =′ M′could be located on DB′as ). tan( δ′ =′ n r MD Mcould be located on MG′since the ratio MGr ′ / is known. 3.3 Trajectory planning for a Straight Line 3.3.1 Forward and Reverse Segments Figure 6 illustrates details of straight line trajectory planning. 21PPis the straight line segment of the objective trajectory, for which a realizable trajec- tory has to be planned. The two end points of the straight line are either start and end ponts of the objective trajectory, or terminal points of a circular arc. Either way, position and velocity at these points are known. From 2 1 toP P , tra- jectory is segmented by equidistance via points indexed by !2,1,0=k The for- ward trajectory is planned from 2 1 toP P , whereas the reverse trajectory is gen- erated1 2 to from P P . Both segments are planned in joint space in the two directions using the same algorithm described below. Trajectory Planning and Control of Industrial Robot Manipulators 343 Figure 5. Trajectory planning for straight line segments The minimum time )(mink tj each joint takes to move from kth via point to (k+1) th via point is given by °° ¯°° ®­ < Δ+ Δ +> Δ− Δ + = 0)( if)( )( 2)(0)( if)( )( 2)( )( j maxmax 2j maxmax 2 min kk k kkk k k kt jj j j jjj j j j j θθθ θ θ θθθθ θ θ θ    (10) where )( )1( )( k k kj j j θ θ θ −+ = Δ . The minimum feasible time between the two via points without letting any of the joints to saturtion is the longest min jtcon- sidering all of the joints as follows. {} )( max)(min minkt ktjj= (11) Using )(mink t for planning the trajectory between the two via points guaran- tees minimum time motion, and resulting joint accelerations are 2 minmin )}( {))()( )( (2 )( k tktk k kj j jθ θ θ − Δ = (12) Then, the trajectory is planned in joint coordinates as follows. t ktkt tk k tkj j j )1( ; )( )( ),( +<< + = θ θ θ   (13) 1 ;)(5.0)( )( ),(2)t (ktkttk tk k tkj j j j +<< + + = θ θ θ θ   (14) 344 Industrial Robotics: Theory, Modelling and Control This algorithm continues as via point advances k= 0, 1, 2…, and in the same time end-effector velocity is calculated using (2) together with (13) and (14). When the end-effector velocity reaches rated velocity the algorithm terminates (b1 in Fig. 3). As illustrated in Fig. 5, end-effector reaches the rated velocity at FPin the forward direction, and at RP in the reverse direction. 3.3.2 Middle Segment Referring to Fig. 5 RFPP is the middle segment of the straight line. This seg- ment is planned in Cartesian space by maintaining rated velocity rv as fol- lows. »»» ¼º ««« ¬ª + »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª )()()( )()()(FFF z ry rx r PzPyPx vvv tztytx (15) wherez ry rx r v vv and,, are the velocity components of rv along major axes, and )(FPx , )(FPy and )(FPz are the cartesian position coordinates of FP. Middle segment is transformed into joint coordinates using inverse kinematics. 3.4 Compensation of Delay Dynamics Planned corners and straight lines are merged to form the realizable trajectory. As shown in Fig. 3, taught data is obtained by compensating realizable trajec- tory for delay dynamics. In (Goto et. al., 1997) pole placement with linear state feedback were used to develop a feed-forward delay compensator as described by ) )( )( ()( 2 10 12 23 3 γ μ μ − − −+ + +−=s s sasasasasFj (16) Where {} {} γ μμ μ μγγμμγ μμ μ μγγμμγ μμ μ μγγμμ v jv jv j v jp jv jp jv jv jv j p jp jv jv jv jo K K K KKaKKK K K KaK K K K aa + + + + + =− + + + + + =− + + + + + =−= 212 2 1 321 212 2 1 221 212 2 1 121 ) )( (1) )( (1/ ) )( ( in that 2 1andμ μ are the regulator poles, and γ is the observer pole. These poles can be tentatively tuned for better performance. A theoretical determination of compensator poles can be found in (Munasinghe & Nakamura, 2003) Trajectory Planning and Control of Industrial Robot Manipulators 345 Results and Discussion 4.1 Experimental Conditions The objective trajectory was set as follows: start (0.35, 0, 0.1)[m], first cor- ner(0.41, 0.1, 0.15)[m], second corner (0.28, -0.1, 0.3)[m], and end (0.35, 0, 0.35)[m]. Rated velocity and tangential velocity were set to 15.0=rv [m/s2] and 02.0max=tv [m/s2]. Maximum joint acceleration for all joints were set to 72.0max=jθ [rad/s2]. Trajectory error tolerance was set to 001.0=ρ [m]. Servo con- troller gains were set to 15=p jK [1/s] and 15=v jK [1/s]. In the delay compensa- tor, regulator poles were set to 602 1 −= =μ μ , and the observer pole was set to 200−=γ . In order to compare performance of the new method, we simulated a conventional trajectory planning algorithm in that uniform end-effector veloc- ity of 0.05 [m/s] was used to plan the trajectory in Cartesian space through the mentioned objective trajectory. 4.2 Evaluation of Results Figure 6 illustrates the results. 346 Industrial Robotics: Theory, Modelling and Control Figure 6. End-effector velocity and joint acceleration profiles under the control of con- ventional and proposed methods. One important observation to be made is the close similarity between simula- tion and experimental results of the proposed method, i.e., the experiment produces end-effector velocity and joint acceleration profiles that are very similar to what is obtained by the simulation under the assumption of linear decoupled dynamics. This conveys the validity of the trajectory planning and delay compensation used in the proposed method. The arrow sequence ↑N1,↓N2,↑N3,↓N4,↑N5,↓N6 confirms that at least one of the three joints moves with its maximum acceleration or deceleration within the entire motion, except at corners C1, C2, and middle segment M. End- effector velocity has been kept on or below the rated velocity within the entire motion. On the contrary, the conventional method shows in its simulation a significant saturation in joint acceleration profiles as indicated by S1, S2, and S3. Figure 7 shows the motion of the end-effector in 3-space with projections to X-Y, Y-Z, and Z-X planes. In Fig. 7(b), huge trajectory errors are observed at cor- ner C1 as a result of acceleration saturation in joint 2 and joint 3 as indicated by S2 and S3. Similar errors are resulted at corner C2 due to acceleration satura- tion in joint 1 as indicated by S1. On the other hand, proposed method has made the end-effctor accurately follow the objective trajectory. 4.3 Discussion The proposed trajectory planning algorithm takes the crude objective trajec- tory and the constraints for velocity, acceleration and error tolerance, and plans the realizable trajectory. The realizable trajectory is compensated for de- lay dynamics. The proposed method brings the best possible performance as it Trajectory Planning and Control of Industrial Robot Manipulators 347 always maintains at least one of the given constraints (5), (6), or (7) within the entire motion. Figure 7. Profiles of the end-effector in 3-space, (a) objective trajectory, (b) resulting motion under conventional method (simulation), and (c) resulting motion under pro-posed method. Conclusion This chapter presented a new trajectory planning algorithm for industrial ro- bot manipulators. This algorithm considers joint acceleration constraint, rated end-effector velocity, and trajectory error tolerance, and plans the realizable trajectory accordingly so that all these constraints are maintained in the best possible manner during the entire motion. A feed-forward compensator is also used to compensate the realizable trajectory against delay dynamics of the joints. The method was successfully tested on Performer MK-3s industrial ro- bot manipulator using a complex three dimensional trajectory, in that very ac-348 Industrial Robotics: Theory, Modelling and Control curate motion was realized without violating any of the constraints. The pro- posed method appears as a single feed-forward block in the control system, therefore, it could be conveniently incorporated into existing industrial ma- nipulators without undertaking a significant cost or risk. References Goto, S.; Nakamura, M., & Kyura, N.; (1997). Modified taught data method for industrial mechatronic servo-controller to achieve accurate contour control performance, Proceedings of the IEEE/ASME International Conference on Advanced Intelligent Mechatronics , 525B, June 1997 Mittal, R. K. & Nagrath I. J. (2003). Chapter 2, In: Robotics and Control, 35-69, Tata McGraw Hill, 0-07-048293-4, New Delhi Munasinghe, S. R. & Nakamura, M. (2001). Optimum contouring of industrial robot arms under assigned velocity and torque constraints. IEEE Transac- tions on Systems, Man, and Cybernetics-Part C, Vol. 31, No. 2., (May, 2001) 159-167 Munasinghe, S. R. & Nakamura, M.; (2002). Determination of maximum tan- gential velocity at trajectory corners in robot manipulator operation un- der torque constraint, Proceedings of the Annual Conference of the Society of Instrumentation and Control Engineers(SICE), MA17-2, 1170-1175, August, 2002 Munasinghe, S. R., Nakamura, M., Goto S., & Kyura, N., (2003). Pole selection of feedforward compensators considering bounded control input of in- dustrial mechatronic systems. IEEE Transactions on Industrial Electronics, Vol. 50, No. 6, (December, 2003) 1199-1206 Nakamura, M., Munasinghe, S. R., Goto, S., and Kyura, N., (2000). Enhanced contour control of SCARA robot under toque saturation constraint. IEEE/ASME Transactions on Mechatronics, Vol. 5, No. 4, (December, 2000) 437-440 Paul, R. (1979). Manipulator Cartesian path control. IEEE Transactions on Sys- tems, Man, and Cybernetics, Vol. 9, No. 11., (Nov., 1979) 702-711 Sage, H. G., De Mathelin M. F., & Ostertag F., (1999). Robust control of indus- trial manipulators: a survey. International Journal of Control, Vol. 72, No. 16, (Nov., 1999) 1498-1522 Shin, K. G., & Mckay N. D., (1985). Minimum-time control of robotic manipu- lators with geometric path constraints. IEEE Transactions on Automatic Control, Vol. 30, No. 6, (Jun., 1985) 531-541 34912 Collision Free Path Planning for Multi-DoF Manipulators Samir Lahouar, Said Zeghloul and Lotfi Romdhane Introduction Path planning is a very important issue in robotics. It has been widely studied for the last decades. This subject has gathered three interesting fields that were quite different in the past. These fields are robotics, artificial intelligence and control. The general problem of path planning consists of searching a collision free trajectory that drives a robot from an initial location (position and orienta-tion of the end effector) to a goal location. This problem is very wide and it has many variants such as planning for mobile robots, planning for multiple ro- bots, planning for closed kinematic chains and planning under differential constraints. It includes also time varying problems and molecular modeling, see (LaValle, 2006) for a complete review. In this study we focus on the case of multi-Degrees of Freedom (DoF) serial manipulators. The first works on serial manipulators path planning began in the seventies with Udupa (Udupa, 1977), then with Lozano-Pérez and Wesley (Lozano- Pérez & Wesley, 1979) who proposed solving the problem using the robot's configuration space (CSpace). Since then, most of path planning important works have been carried out in the CSpace. There are two kinds of path plan- ning methods: Global methods and Local methods. Global methods (Paden et al., 1989; Lengyel et al., 1990; Kondo, 1991) generally act in two stages. The first stage, which is usually done off-line, consists of making a representation of the free configuration space (CSFree). There are many ways proposed for that: the octree, the Voronoï diagram, the grid discretization and probabilistic road- maps. For each chosen representation, an adapted method is used in order to construct the CSFree, see (Tournassoud, 1992; LaValle, 2006). The representa- tion built in the first stage is used in the second one to find the path. This is not very complicated since the CSFree is known in advance. Global methods give a good result when the number of degrees of freedom (DoF) is low, but diffi- culties appear when the number of DoF increases. Moreover, these methods are not suitable for dynamic environments, since the CSFree must be recom- puted as the environment changes. Local methods are suitable for robots with a high number of DoF and thus they are used in real-time applications. The 350 Industrial Robotics: Theory, Modelling and Control potential field method proposed by Khatib (Khatib, 1986) is the most popular local method. It assumes that the robot evolves in a potential field attracting the robot to the desired position and pushing its parts away from obstacles. Because of its local behavior these methods do not know the whole robot's en- vironment, and can easily fall in local minima where the robot is stuck into a position and cannot evolve towards its goal. Constructing a potential field with a single minimum located in the goal position, is very hard and seems to be impossible, especially if there are many obstacles in the environment. Faverjon and Tournassoud proposed the constraint method (Faverjon & Touranssoud, 1987), which is a local method acting like the potential field method in order to attract the end effector to its goal and dealing with the ob- stacles as constraints. Although it yields remarkable results with high DoF ro- bots, this method suffers from the local minima problem. Probabilistic methods were introduced by Kavraki et al. (Kavraki et al., 1996) in order to reduce the configuration free space complexity. These methods generate nodes in the CSFree and connect them by feasible paths in order to create a graph. Initial and goal positions are added to the graph, and a path is found between them. This method is not adapted for dynamic environments since a change in the environment causes the reconstruction of the whole graph. Several variants of these methods were proposed: Visibility based PRM (Siméon et al., 2000), Medial axis PRM (Wilmarth et al., 1999) and Lazy PRM (Bohlin & Kavraki, 2000). Mediavilla et al. (Mediavilla et al., 2002) proposed a path planning method for many robots cooperating together in a dynamic environment. This method acts in two stages. The first stage chooses off-line, a motion strategy among many strategies generated randomly, where a strategy is a way of moving a robot. The second stage is the on-line path planning process, which makes each robot evolve towards its goal using the strategy chosen off-line to avoid obstacles that might block its way. Helguera et al. (Helguera & Zeghloul, 2000) used a local method to plan paths for manipulator robots and solved the local minima problem by making a search in a graph describing the local environment using an A* algorithm until the local minima is avoided. Yang (Yang 2003) used a neural network method based on biology principles. The dynamic environment is represented by a neural activity landscape of a topologically organized neural network, where each neuron is characterized by a shunting equation. This method is practical in the case of a 2-DoF robot evolving in a dynamic environment. It yields the shortest path. However, the number of neurons increases exponentially with the number of DoF of the ro- bot, which makes this method not feasible for realistic robots. Here, we propose two methods to solve the path planning problem. The first method (Lahouar et al., 2005a ; Lahouar et al., 2005b) can be qualified as a Collision free Path Planning for Multi-DoF Manipulators 351 global method. It is suitable for serial robot manipulators in cluttered static environments. It is based on lazy grid sampling. Grid cells are built while searching for the path to the goal configuration. The proposed planner acts in two modes. A depth mode while the robot is far from obstacles makes it evolve towards its goal. Then a width search mode becomes active when the robot gets close to an obstacle. This mode ensures the shortest path to go around an obstacle. This method reduces the gap between pre-computed grid methods and lazy grid methods. No heuristic function is needed to guide the search process. An example dealing with a robot in a cluttered environment is presented to show the efficiency of the method. The second method (Lahouar et al., 2006) is a real-time local one, which is used to solve the path planning problem for many manipulator robots evolving in a dynamic environment. This approach is based on the constraints method cou- pled with a procedure to avoid local minima by bypassing obstacles using a boundary following strategy. The local planner is replaced by the boundary following method whenever the robot gets stuck in a local minimum. This method was limited to 2-DoF mobile robots and in this work we show how it can be applicable to a robot with n degrees of freedom in a dynamic environ- ment. The path planning task is performed in the configuration space and we used a hyperplane in the n dimensional space to find the way out of the dead- lock situation when it occurs. This method is, therefore, able to find a path, when it exists and it avoids deadlocking inherent to the use of the local method. Moreover, this method is fast, which makes it suitable for on-line path planning in dynamic environments. Sampling and construction of the CSpace Many planning algorithms need samples of CSpace in order to compute a tra- jectory. There are many ways of sampling; the easiest way is to use a grid with a given resolution. The number of the grid cells grows exponentially according to the number of DoF of the robot. In the same way, the time and the memory space required to compute and store the grid increase. Random sampling was introduced in order to reduce the number of samples needed to represent the CSpace. It consists of choosing random configurations and constructing a graph representing feasible paths between them. This method needs a long time of computation. We give an example of sampling using a grid with a low resolution and we de- fine constraints used to detect if there is a free path between two neighboring cells. On one hand, these constraints make the path between two neighboring cells in the CSfree safe even if the step is quite large, and on the other hand they speed up the collision checking process as the constraints computed in a cell are useful to check all the neighboring cells. There is no need to check for collision in all cells of the grid before starting to search for a path. The con-352 Industrial Robotics: Theory, Modelling and Control straints calculated in a cell allow us to judge whether a path exists to a neighboring cell or not. 2 neighbor cells in 1D 8 neighbor cells in 2D 26 neighbor cells in 3D Figure 1. Each cell has 3N-1 neighbors Therefore, the constraints-calculating process is equivalent to 3N-1 times the collision checking process, as a cell has 3N -1 neighbors (Fig. 1). The number N represents the number of DoF of the robot. Non-collision constraints Here, we define non-collision constraints necessary to accelerate the global method (see paragraph 4) and useful for the local planner of the second method (see paragraph 5). Non-collision constraints as proposed by Faverjon and Tournassoud are written as follows: i s isddddddd ≤−−−≥ if ξ (1) With d is the minimal distance between the robot and the object and d is the variation of d with respect to time. id is the influence distance from where the objects are considered in the optimization process, sd is the security distance and ξ is a positive value used to adjust the convergence rate. Collision free Path Planning for Multi-DoF Manipulators 353 Object 1 Object 2 0 1 1 / VR R x∈&0 2 2 / VRRx∈& n& 1x2x Figure 2. Two objects evolving together 051015202530354045 0 4 8 12 16 20 2428 32 36 40 44 48 52 56 60 64 68 72 76 80 84 881=ξ 2=ξ 3=ξid sd td Figure 3. Evolution of the distance according to the convergence rate If we consider two mobile objects in the same environment as shown in Fig. 2, d can be written as follows: () ( ) n n . V. V 0 1 1 0 2 2 / /T RRxT RRx d∈ ∈ − = (2) Where()0/ VRRxi i∈ is the velocity vector evaluated at the point ix of object i hav- ing the minimal distance with the second object and n is the unit vector on the line of the minimal distance. The non-collision constraints, taking into account the velocities of objects, are written as: 354 Industrial Robotics: Theory, Modelling and Control () ( ) s is T RRxT RRxdddd −−≤ −∈ ∈ ξn n . V. V 0 2 2 0 1 1 / / (3) A robot evolving towards an obstacle, if it respects constraints given by equa- tion (1), it will evolve exponentially to the security distance without going closer than this distance (see Fig. 3). Fig. 4 shows a PUMA robot placed next to a static obstacle. The constraint cor- responding to that obstacle is written as: () s is T RRxdddd −−≤∈ ξn. V 0 1 1 / (4) By introducing ()qx1J , the Jacobian matrix of the robot in configuration q de- fined in point 1x, we get: Figure 4.The distance between a robot and an obstacle () s is xT ddddqq−−≤Δ ξ 1Jn (5) Condition (5) will be written in the following manner: [] [ ] b q q a aT N N ≤ Δ Δ 1 1 (6) Collision free Path Planning for Multi-DoF Manipulators 355 with [] JnT Na a =1 , []T Nq q q Δ Δ=Δ 1 and i si ddddb−−=ξ Figure 5. shows two PUMA robots evolving together. We consider that each robot is controlled separately. In that manner, each robot is considered as a moving obstacle by the other one. Figure 5. Two PUMA robots working in the same environment The motion of the two robots must satisfy the following conditions: () i si T RRxdddd −−≤∈ ' . V 0 1 1 / ξn and () i si T RRxd ddd −−≤ −∈ ' . V 0 2 2 / ξn (7) Where ξ ξ21'= . While adding the two conditions of equation (7), we notice that the non-collision constraint defined by (3) is satisfied. So with a suitable choice of the parameters ξ,id and sd, it is possible to use only condition (5) to avoid collisions with all objects in the environment. In the next paragraph, we propose an approach that does not construct the whole grid, representing the CSpace. Only cells necessary to find the path to the goal position are checked for collision. 356 Industrial Robotics: Theory, Modelling and Control Path planning in static cluttered environments The planner we propose uses two modes. The first one makes the robot evolve towards its goal position if there is no obstacle obstructing its way and the sec- ond mode is active near the obstacles and enables the robot to find the best way to avoid them. This latter mode is the most important as it needs to gen- erate all the cells near the obstacle until it is avoided. For this reason, we do not have to store all the cells but just the ones near the obstacles which are suf- ficient to describe the CSfree. 4.1 Definitions In order to explain the algorithm of this method, we need to define some terms. A Cell The algorithm we propose is based on a “Cell” class in terms of object oriented programming. A cell c i is made of: A pointer to the parent cell (c i.parent) : the path from the initial configuration to the goal is made of cells. Each one of these cells has a pointer to the parent cell, that generated it previously. Start- ing from a cell, the next one in the path is the one that is closest to the goal and respecting the non-collision constraints. When the goal cell is reached the al- gorithm stops and the path is identified by all the selected cells. A configuration defining a posture of the robot : each cell corresponds to a point in the CSpace. If a cell configuration is written as []T1 1 1 1 Nq q q = where N is the number of DoF of the robot, and let qΔ be the step of the grid, the neighboring cells are then defined as the configura- tions belonging to the following set: () [] () { } ( ) { }0,,0/1,0,1 ,,;1T1 11 1 1   N N N N s s qs q qsqq qVic −∈ Δ+ Δ+ == (8) A distance to the goal( c i.distance_to_goal) : it represents the distance in configuration space between the goal configura- tion and the cell configuration. This distance allows the planner’s first mode to choose the closest cell to the goal configuration. While the robot is far from ob- stacles, the shortest path to the goal configuration is a straight line in CSpace. A boolean “collision” variable (c i.collision) : it takes false if the cell verifies the constraints and true if it does not.Collision free Path Planning for Multi-DoF Manipulators 357 A boolean “computed” variable( c i.computed) : used by the planner in order to know whether the cell has already been used to search for the path or not. A boolean “near an obstacle” variable (c i.near_an_obstacle) : used by the second mode of the planner allowing it to stay stuck to the obsta-cle while performing its width search in order to find the best direction to go around the obstacle. Queue Another important item in our approach is the Queue, Q, which is defined as an ordered set of cells. The first cell in the Queue is named head and denoted h(Q). While the last cell is the tail of the Queue and denoted t(Q). If the Queue is empty we write () () 0 t Qh /= =Q . In order to handle the Queue Q, we use some operators that we define here. ()1cQ,h+ adds the cell 1c to the head of Q. ()1cQ,t+ adds 1c to the tail of Q. ()Qh− removes the head cell from Q. ()Qt− removes the tail cell from Q. Stop Condition We define the stop condition as the co ndition for which we judge that the goal position has been found. We write this condition as follows: q q qgoal Δ<− (9) wheregoalq is the goal configuration, q is the configuration of the cell verifying the stop condition and qΔ is the step of the grid. If the algorithm can no longer evolve and the stop condition is not satisfied, it means that there is no possible solution for the given density of the grid. 4.2 Algorithm The algorithm outlined in Fig. 6, starts by constructing the initial cell in step 1. It sets the parent pointer to NULL and evaluates the distance to the goal. The algorithm uses a variable c representing the cell searched by the algorithm. ℵ is the set of explored cells and 1ℵis the set of unexplored cells in the vicinity of cell c. Step 6 computes non-collision constraints using distances between obstacles and robot parts evaluated in the posture defined by cell c. Steps 8 to 13 con- struct unexplored cells in the vicinity of cell c. For each cell the parent pointer 358 Industrial Robotics: Theory, Modelling and Control is set to c, the distance to goal is evaluated and the non-collision constraints are checked. A cell is considered a collision if it does not verify constraints given by equation (3). Step 15 determines the nearest cell to the goal in the vicinity of c, using the dis- tance to goal already evaluated. If that cell is not an obstacle, it is placed in the head of the queue Q at step 17. This makes the planner perform a depth search since there is no obstacle bothering the robot. However, if the cell computed by step 15 is a collision, all non-collision cells in the vicinity of c that are close to collision cells are placed in the tail of the queue Q by step 22. This makes the planner perform a depth search until the obstacle is bypassed. Construct initial cell1c Set 1cc= Let {}1c=ℵ While 0c/=/ and c does not satisfy the stop condition do c.computed=true Compute non-collision constraints for the configuration represented by the cell c ()ℵ =ℵ \1 cVic For each cell1 2cℵ∈ do Set c 2.parent = c Evaluate c 2.distance_to_goal Verify the non-collision constraints and determine c 2.collision Set c 2.computed to false End for 1ℵ∪ℵ=ℵ Choose c 3 in 1ℵ with the minimal distance to goal If c 3.collision=false then ()3cQ,h+ Else (c 3.collision=true) For each ()cVicc∈2 such as c 2.collision=true do For each () ℵ∩ ∈2 3 cVicc set c 3.near_an_obstacle=true End for For each ()Q\2 cVicc= such as c 2.Near_an_obstacle = true and c 2.collision=false and c2.computed=false do ()2cQ,t+ For each Q2∈c such as () ℵ⊂2cVic remove c 2 from the Queue Q and set c2.computed=true End if ()Qh=c ()Qh− End while Figure 6. Pseudo-code of the method Collision free Path Planning for Multi-DoF Manipulators 359 1q2q 2l1l x&y& Figure 7. A 2 DoF robot Steps 19 to 21 evaluate the “near an obstacle” property. This property is set to false when the cell is constructed. Then for each cell in the vicinity of a colli- sion cell, itself in the vicinity of the cell c, this property is set to true. Step 23 removes from the queue Q all cells for which their vicinity has been al- ready explored and sets their computed property to true, so they do not return to the queue when the algorithm evolves. The search procedure is stopped when a cell verifying the stop condition is found and the path is done by join- ing this cell to the initial cell by going back through the parent cells using the pointer of each cell. The procedure can also be stopped if the Queue Q is empty, in that case there is no possible path for the chosen resolution of the grid. -1001020 01 0 2 0 3 0x&y& 1O 2O 3O Start positionGoal positionObstacles Figure 8. Path planning consists of moving the robot from the start position to the goal position while avoiding obstacles 360 Industrial Robotics: Theory, Modelling and Control Obstacle O 1 O2 O3 x 16 4 10 y 12 10 4 Table 1. Position of obstacles 4.3 A planar example In order to illustrate the proposed algorithm we consider a 2D example, of a 2R robot (Fig. 7) evolving among point obstacles. The simulations are made us- ing three point obstacles defined by table 1. The start configuration is []T30 20 ° °−=sq and the goal configuration is []T45 50 °−° =gq . Fig. 8 shows the robot in its starting and goal positions, re- spectively, and the three point obstacles. We set the lengths of the arms of the robot 102 1 ==ll . Fig. 9 shows the CSpace of the robot, the dark regions correspond to CSpace obstacles. 1q2q Goal configuration Start configuration Figure 9. The configuration space Collision free Path Planning for Multi-DoF Manipulatorsbstacle cells Start cell Goal cell Investi gated cells Generated path 1q2q Figure 10. Cell generation order The construction order of cells is shown in Fig. 10. The algorithm evolves to- wards its goal using the depth-search mode while there is no obstacle bother- ing it. When an obstacle is detected the algorithm uses the width-search mode. The algorithm overlaps the obstacle in order to find the best direction to by- pass it. When the obstacle is avoided the depth search mode is resumed. The algorithm gives the best way to go around the C obstacle (which is the portion of CSpace corresponding to a collision with one obstacle).362 Industrial Robotics: Theory, Modelling and Control -10-505101520 Figure 11. Simulation results for the planar robot 1 2 3 4 5 6 7 8 9 Figure 12. Simulation results for the PUMA robot Collision free Path Planning for Multi-DoF Manipulators 363 The result of the simulation is shown in Fig. 11. Moreover, out of 5329 cells, which corresponds to 73 points on each axis, only 375 cells were computed. This represents less than 10% of the whole workspace. 4.4 Simulation and results The simulation has been performed on a robotic-oriented-Software named SMAR (Zeghloul et al., 1997). This software is made of two modules: a model- ing module and a simulation one. The modeling module is used to generate a model of the robot in its environment. The simulation module is used to simu- late the motion of the robot in its environment. It contains a minimal distance feature we used to implement our algorithm. Fig. 12 shows the simulation results of a 5 DoF ERICC robot carrying a large object and standing in an environment containing ladder-shaped obstacles. The planner determines the path in 20 steps. The robot is carrying a beam whose length is greater than the width of the ladder-shaped obstacle. Regular local path planners would be stuck in the initial position. The proposed method explores all possible configurations capable of going around the ob- stacle and chooses the one that yields the minimum distance to the goal. The sequence of frames shown in Fig. 12, shows the solution found by the pro- posed planner. In this case the total number of cells is 12252303 while the number of computed cells is only 220980, which represents less than 2% of the whole workspace. Real-time path planning in dynamic environments The method described above is useful in the case of cluttered static environ- ments. It can be used offline to generate repetitive tasks. In many cases robots evolve in dynamic environments, which are unknown in advance. That is why we propose to solve the path planning problem for many manipulator robots evolving in a dynamic environment using a real-time local method. This ap-proach is based on the constraints method coupled with a procedure to avoid local minima by bypassing obstacles using a boundary following strategy. 5.1 Local Method In this method, we use a local planner based on an optimization under con- straints process (Faverjon & Touranssoud, 1987). It is an iterative process that minimizes, at each step, the difference between the current configuration of the robot and the goal configuration. When there are no obstacles in the way of the robot, we consider that it evolves towards its goal following a straight line in the CSpace. The displacement of the robot is written as follows: 364 Industrial Robotics: Theory, Modelling and Control max maxif q q q q q qq qqgoal goalgoal goal Δ>− Δ −−= Δ (10) max if q q q q q qgoal goal goal Δ≤− − = Δ (11) wheregoalq is the goal configuration of the robot, q is the current configura- tion of the robot and maxqΔ is the maximum variation of each articulation of the robot. If there are obstacles in the environment, we add constraints (defined in paragraph 3) to the motion of the robot in order to avoid collisions. Path plan- ning becomes a minimization under constraints problem formulated as: s constraint collision-non Under Minimizegoalq qΔ−Δ (12) where qΔ is the change of the robot joints at each step. We can formulate then the planning problem as follows: i si T goalddddq q q−−≤Δ Δ−Δ ξ s constraint linear Under Minimize Jn (13) The local planner can be represented by an optimization problem of a nonlin- ear function of several parameters, subject to a system of linear constraint equations. In order to solve this problem, we use Rosen's gradient projection method described in (Rao, 1984). When the solution of the optimization prob- lem qΔ corresponds to the null vector, the robot cannot continue to move us- ing the local method. This situation corresponds to a deadlock. In this case, the boundary following method is applied for the robot to escape the deadlock situation. In the next section, we define the direction and the subspace used by the boundary following method. 5.2 Boundary following method Before explaining the method in the general case of an n-DoF robot, we present it for the 2D case. The proposed approach to escape from the deadlock situa- tion is based on an obstacle boundary following strategy. The 2D case This method was first used in path planning of mobile robots (Skewis & Lu- melsky, 1992; Ramirez & Zeghloul, 2000). When the local planner gets trapped in a local minimum (see Fig. 13), it be- comes unable to drive the robot farther. At this point the boundary following Collision free Path Planning for Multi-DoF Manipulators 365 method takes over and the robot is driven along the boundary of the obstacle until it gets around it. The robot in this case has the choice between two direc- tions on the line tangent to the obstacle boundary or on the line orthogonal to the vector to the goal (Fig. 13). It can go right or left of the obstacle. Since the environment is dynamic and unknown in advance, we have no idea whether going left or going right is better. The choice of the direction is made ran- domly. Once the obstacle is avoided the robot resumes the local method and goes ahead towards the goal configuration. Goal position Dead lock positionDirection 1 Direction 2 C Obstacle Solution 2 Solution 1 Figure 13. Two possible directions to bypass the obstacle in the case of a 2DoF robot Goal position C Obstacle Dead lock positionChosen direction Figure 14. The case where there is no feasible path to the goal 366 Industrial Robotics: Theory, Modelling and Control If the boundary following method drives back the robot to the original dead- lock position, one can conclude that there exists no feasible path to reach the goal (Fig. 14) and the process is stopped. Fig. 15 shows the two feasible paths leading the robot to the goal position. Each path corresponds to one choice of the direction of the motion to follow the boundary of the obstacle. Therefore, and since the environment can be dy- namic, the choice of the direction (left or right) is made once and it stays the same until the goal is reached. This unique choice guarantees a feasible path in all situations whenever a deadlock position is found by the local planner (even if in certain cases the choice seems to be non optimal as it is the case for the path 2 using the left direction in Fig. 15). Goal position C Obstacle Dead lock positionLeft direction Right direction Path 1 Path 2 Figure 15. If a solution exists any chosen direction will give a valid path Goal configuration Dead lock position C Obstacle Random direction Plane of possible directions (TCplane) qgoal qlock Figure 16. Definition of the TCplane Collision free Path Planning for Multi-DoF Manipulators 367 The n-dimensional case In the case of a 3-DoF robot, the choice of a direction avoiding the obstacle be- comes more critical. Indeed, the directions perpendicular to the vector point- ing towards the goal configuration are on a hyperplane of the CSpace, which is in this case, a plane tangent to the obstacle and normal to the vector pointing to the goal position (Fig. 16). This plane will be called TCplane (Tangent C plane). The path planner can choose any direction among those included in this plane. As in the case of 2-DoF case, we have no idea about the direction to choose in order to avoid the obstacle. In this case, an earlier method, proposed by Red et al. (Red et al., 1987), consists of using the 3D space made of the robots primary DoF. Then, by using a graphical user interface (GUI), the user moves the screen cursor to intermediate interference free points on the screen. A path is then generated between the starting and the final configurations going through the intermediate configurations. Goal configuration C Obstacle Dead lock position Chosen direction Bypassing Plane (P) qgoalqlimqlim qlock Figure 17. Definition of the Bypassing Plane This method is applicable only to the primary 3-DoF case when the 3D graphi- cal model can be visualized. Also, the user can choose paths using only the primary DoF, which eliminates other possibilities using the full DoF of the ro- bot. Moreover, this method cannot be applied in real-time applications. One possible strategy is to make a random choice of the direction to be fol- lowed by the robot in the TCplane. This strategy can lead to zigzagged paths and therefore should be avoided. In our case, whenever the robot is in a dead-lock position, we make it evolve towards its upper joint limits or lower joint limits, defined by the vector limq. This strategy allowed us to find a consistent 368 Industrial Robotics: Theory, Modelling and Control way to get out of the deadlock position. This chosen direction is defined by the intersection of the TCplane and the bypassing plane (P) containing the three points:limq,lockq and goalq (Fig. 17). In the general case of robots with many DoF, the TCplane becomes a hyper- plane which is normal to the vector pointing from lockq to goalq and containing lockq. The direction chosen to go around the obstacle is defined by the intersec- tion of the TCplane and the plane (P) defined by the three points : limq,lockq andgoalq. New constraints, reducing the motion of the robot to the plane (P), are defined with respect to non-collision constraints. The boundary following method will follow these constraints until the obstacle is avoided. This plane (P) will be characterized by two vectors 1U and 2U, where1U is the vector common to all possible subspaces pointing out to the goal configuration. Vector 1U is given by: q qq q goalgoal −−=1U (14) 2U is the vector that defines the direction used by the robot in order to avoid the obstacle. This vector is defined by the intersection of plane (P) and the TCplane. It is not the only possible direction, any random direction can define a bypassing plane that can be used in the boundary following method. The systematic use of limq in the definition of 2U avoids the problem of zigzagged paths. As the robot evolves in a dynamic environment, it has no prior knowl- edge of obstacles and of their motion and it can not compute the best direction to bypass obstacles. In order to define 2Uwe use the vector V given by: q qq q −−= limlimV (15) whereinf lim q q= if the chosen strategy makes the robot move towards the lower limits of its joints, and sup lim q q= if the chosen strategy makes the robot move towards the upper limits of its joints. 2U is the unit vector orthogonal to 1U and located in the plane ()V,U1. Vector 2U is given by: () ()() ( ) ()21 1 1 1 11 1 2 UVUV UVUVUVUVU »¼º «¬ª− −−= TTTT (16) Collision free Path Planning for Multi-DoF Manipulators 369 While avoiding the obstacle, the robot will move in the defined subspace (P), and qΔ could be written as 2 2 1 1 U U u u q Δ+ Δ=Δ (17) Where,1uΔ is the motion along the 1U direction and 2uΔ is the motion along the2U direction. Whenever an object is detected by the robot, which means that the distance be- tween the robot and the obstacle is less then the influence distance, a constraint is created according to equation (6). Constraints are numbered such that the i th constaint is written as: [] [ ]iT N iN i b q q a a ≤ Δ Δ 1 1 (18) If we replace qΔ by its value in the subspace, we get [] ()i iN i b u u a a ≤ +2 2 1 1 1 UǻUǻ  (19) Let []1 1 1 UiN i i a a au  = (20) []2 1 2 UiN i i a a au  = (21) The projected constraints on the bypassing plane are written as i i bu≤ΔTA (22) with []T i i i au au2 1 A= (23) []Tu u u2 1Δ Δ=Δ (24) 370 Industrial Robotics: Theory, Modelling and Control 1U2U AlockSuΔ Figure. 18. Boundary following result 1U2U AlockSuΔAblock Figure 19. Constraint switching In order to escape from deadlocks, we follow the projected constraints corre- sponding to the obstacles blocking the robot. To do so, we use the Boundary following method described in the next section. The boundary following Algorithm This method uses the distance function defined as: ()goalqq q −= V (25) which is the distance from the current position of the robot to the goal posi- tion. The value of the distance function is strictly decreasing when the robot is evolving towards its goal using the local planner. When a deadlock is detected, we define goal lock lock q q d − = as the distance function in the deadlock configura-Collision free Path Planning for Multi-DoF Manipulators 371 tion. While the robot is going around the obstacles using the boundary follow- ing method, the distance function, V( q), is continuously computed and com- pared to lockd. When the value of the distance function is lower than lockd, the robot has found a point over the C obstacle boundary that is closer to the goal than the deadlock point. At this moment, the robot quits the boundary follow- ing method and continues to move towards the goal using the local planner. The vector of the followed constraint is named lockA . It corresponds to the vec- tor of the projected constraint blocking the robot. The boundary following method can be stated as follows: Initiate the parameters lockA and lockd Evaluate the distance function. If it is less than lockd then quit the bound- ary following method and resume the local planner Find and update the followed constraint lockA Find the vertex enabling the robot to go around the obstacle 5. Move the robot and go to step 2 Fig. 18 shows the followed vertex uΔ. It is the point on the constraint lockA in the direction of S and it satisfies all the projected constraints. []1 2 Slock lock au au−= (26) where []T lock lock lock au au2 1 A = (27) At each step the algorithm tracks the evolution of the followed constraint among the set of the projected constraints. The tracked constraint is the one maximizing the dot product with lockA . In certain cases the resultant vertex uΔ is null when there is another projected constraint blocking the robot (Fig. 19). This is the case of point B in Fig. 20. In this case, the robot switches the fol-lowed constraint. It uses the blocking constraint to escape from the deadlock. Fig. 20 shows the case of a point robot moving from point S to point goalq. The robot moves from point S to point 1lockq using the local planner. 372 Industrial Robotics: Theory, Modelling and Control Figure 20. An illustrating example The point 1lockq corresponds to a deadlock position where the robot can no longer move towards the obstacle while respecting the security distance, sd, from the obstacle. This point corresponds also to a local minimum of the dis- tance function, ()1lockdq= V . At this point, the robot starts to follow the bound- ary of the blocking obstacle and the distance function ()qV is continuously compared to 1lockd . In point B there is another obstacle preventing the robot from following the first one. In that case, the boundary following module changes the path of the robot to follow the new obstacle. In point C the dis- tance to the goal has decreased and becomes equal to 1lockd , which means that the robot bypassed the obstacle and the local planner is resumed. When reach- ing point 2lockq , a second deadlock position occurs. Therefore, the boundary following module is activated again until point D is reached, which corre- sponds to a distance from the goal equal to 2lockd . At this point the local method is resumed to drive the robot to its goal position. lockd ABC SG Boundary following module Local method 2lockd sd sdsdDCollision free Path Planning for Multi-DoF Manipulators 373 1 2 3 4 5 6 7 8 Figure 21. Results using two 5-DoF robots374 Industrial Robotics: Theory, Modelling and Control 5.3 Simulation and results In order to evaluate the efficiency of the method, we present several examples. All the simulations have been performed on SMAR (Zeghloul et al., 1997). This method was added to the simulation module. All the following examples were simulated on a Pentium IV. Path planning was performed in real time and did not slow down the motion of the robot compared to the case without obstacles. The first example is made of two 5-DoF robots, where each one is taking an ob- ject from an initial position to a final one (Fig. 21). The two robots come closer to each other and they have to avoid collision. Frames 4, 5 and 6 show the two robots following the boundary of each other by keeping a security distance. This task would not be possible if we used only the local planner, because it would be stuck as soon as two faces of the two ob- jects become parallel, which happens in Frame 3. Fig. 22 shows the results using three PUMA robots. Each one of the three ro- bots considers the two other robots as moving obstacles. Each robot moves to- wards its goal, once a deadlock position is detected, the robot launches the boundary following method. Until Frame 3 the local planner is active for the three robots. As soon as the robots get close to each other the boundary follow- ing module becomes active (Frame 4). When each robot finds a clear way to the goal the local planner takes over (Frame 13) to drive each robot to its final position. In these simulations, robots anticipate the blocking positions. If the value of the joint velocity given by the local method is less than 30% of the maximum joint velocity, the robot starts the boundary following method. Elsewhere, the boundary following method is stopped and local method is resumed when the distance function is less then 0.8 lockd. These values are found by performing some preliminary simulations. Anticipating the deadlock position makes the resultant trajectories smoother, as the robot does not wait to be stopped by the deadlock position in order to begin the boundary following method. Collision free Path Planning for Multi-DoF Manipulators 375 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Figure 22. Results using three PUMA robots 376 Industrial Robotics: Theory, Modelling and Control Conclusion In this paper, we presented two methods of free path planning. The first one is based on lazy grid methods. It searches for a path without using a heuristic function. This method reduces the gap between classic grid methods where all the grid cells must be computed before searching for a path, and lazy grid methods where the grid is computed while searching for the path. The pro-posed planner is very general and is guaranteed to find a path, if one exists, at a given resolution. However, this algorithm depends on the resolution of the grid. The higher this resolution is, the closer the robot can squeeze between obstacles. This method reduces the number of computed cells and gives the best direction to go around a C obstacle. It can be combined with quasi- random methods and it replaces the A* searching module, where quasi- random sampling of the CSpace appears to offer performance improvements in path planning, see for instance (Branicky et al., 2001). The second part of this work was concerned with a novel method for path planning suitable for dynamic environments and multi-DoF robots. This method is a combination of the classical local method and the boundary fol- lowing method needed to get the robot out from deadlock positions in which the local method gets trapped. The local path planner is based on non-collision constraints, which consists of an optimization process under linear non- collision constraints. When a deadlock, corresponding to a local minimum for the local method, is detected, a boundary following method is launched. A similar method can be found for the 2D cases, and we show in this work how it can be applied to the case of multi-DoF robots. When the robot is stuck in a deadlock position, we define the direction of motion of the robot, in the con- figuration space, as the intersection of a hyperplane, called TCplane, a plane defined by the vector to its goal and a vector to its joint limits. This direction of motion allows the robot to avoid the obstacle by following its boundary until it finds a path to the goal, which does not interfere with the obstacle. Starting from this point the classical local planner takes over to drive the robot to its goal position. This method is fast and easy to implement, it is also suitable for several cooperating robots evolving in dynamic environments. Collision free Path Planning for Multi-DoF Manipulators 377 References Bohlin, R. & Kavraki, L. (2000). Path planning using lazy prm, Proceedings of IEEE International Conference on Robotics and Automation , pp. 521–528, San Francisco, CA, April 2000. Branicky, M.; LaValle, S.; Olson, K. & Yang, L. (2001). Quasi-randomized path planning, Proceedings of IEEE International Conference on Robotics and Auto- mation , pp. 1481-1487, Seoul, Korea, May 2001. Faverjon, B. & Touranssoud, P. (1987). A local based approach for path plan- ning of manipulators with a high number of degrees of freedom, Proceed- ings of IEEE International Conference on Robotics and Automation , pp. 1152– 1159, Raleigh, March 1987. Helguera, C. & Zeghloul, S. (2000). A local-based method for manipulators path planning in heavy cluttered environments, Proceedings of IEEE Inter- national Conference on Robotics and Automation , pp. 3467–3472, San Fran- cisco, CA, April 2000. Kavraki, L.; Svestka, P.; Latombe, J-C. & Overmars M. (1996). Probabilistic roadmaps for path planning in high dimensional configuration spaces. IEEE Transactions on Robotics and Automation , Vol. 12, No. 4, (august 1996), pp. 566–580, ISSN 1042-296X. Khatib, O. (1986). Real-time obstacle avoidance for manipulators and mobile robots. The International Journal of Robotics Research , Vol. 5, No. 1, (1986), pp. 90–99. Kondo, K. (1991). Motion planning with six degrees of freedom by multistrate- gic bidirectional heuristic free-space enumeration, Proceedings of IEEE In- ternational Conference on Robotics and Automation , pp. 267–277, Sacramento, CA, April 1991. Lahouar, S.; Zeghloul, S.; Romdhane, L. (2005a). Path planning for manipula- tor robots in cluttered environments. WSEAS Transactions On Systems , Vol. 4, No. 5, (May 2005) pp. 555-560. ISSN 1109-2777. Lahouar, S.; Zeghloul, S.; Romdhane, L. (2005b). Path planning for manipula- tor robots in cluttered environments. International Design Engineering Technical Conferences & Computers and Information In Engineering Confer- ence, DETC2005-84993. Long Beach, CA, September 2005. Lahouar, S.; Zeghloul, S.; Romdhane, L. (2006). Real-time path planning for multi-DoF robot manipulators in dynamic environment. International Journal of Advanced Robotic Systems , Vol. 3, No. 2, (June 2006) pp. 125-132. ISSN 1729-8806. LaValle, S. (2006). Planning Algorithms , Cambridge University Press, ISBN Lengyel, J.; Reichert, M.; Donald, B. & Greenberg D. (1990). Real-time robot motion planning using rasterizing computer graphics hardware. Com- puter Graphics , Vol. 24, No. 4, (August 1990), pp. 327–335. 378 Industrial Robotics: Theory, Modelling and Control Lozano-Pérez, T. & Wesley, M. (1979). An algorithm for planning collision-free paths among polyhedral obstacles. Communications of the ACM , Vol. 22 , No. 10, (October 1979), pp. 224–238, ISSN 0001-0782. Mediavilla, M.; Gonzalez, J.; Fraile, J. & Peran, J. (2002). Reactive path planning for robotic arms with many degrees of freedom in dynamic environ- ments, Proceedings of 15 th Triennial Word Congress , Barcelona, Spain, 2002. Paden, B.; Mess, A. & Fisher, M. (1989). Path planning using a jacobian-based free space generation algorithm. Proceedings of IEEE International Confer- ence on Robotics and Automation , pp. 1732–1737, Scottsdale, Arizona, 1989. Ramirez, G. & Zeghloul, S. (2000). A new local path planner for nonholonomic mobile robot navigation in cluttered environments, Proceedings of IEEE In- ternational Conference on Robotics and Automation , pp. 2058–2063, San Fran- cisco, CA, April 2000. Rao, S.S. (1984). Optimization theory and applications , Wiley, ISBN 0470274832, New York. Red, W.; Troung-Cao, H. & Kim, K. (1987). Robot path planning in three- dimensions using the direct subspace. ASME Journal of Dynamics, Meas- urement and Control, Vol. 109, pp.238–244. Siméon, T.; Laumond, J-P. & Nissoux, C. (2000). Visibility-based probalistic roadmaps for motion planning. Advanced Robotics Journal , Volume 14, No. 6, pp. 477--494, 2000, ISSN 0169-1864. Skewis, T. & Lumelsky, V. (1992). Experiments with a mobile robot operating in a cluttered unknown environment, Proceedings of IEEE International Conference on Robotics and Automation , pp. 1482–1487, Nice, France, May Tournassoud, P. (1992). Planification et contrôle en robotique: Application aux ro- bots mobiles et manipulateurs , Hermes, ISBN 2866013220, Paris. Udupa, S. (1977). Collision Detection and Avoidance in Computer Controlled Ma- nipulators , PhD thesis, Dept. of Electrical Engineering, California Institute of Technology, 1977. Wilmarth, S.; Amato, N. & Stiller, P. (1999). Maprm: A probabilistic roadmap planner with sampling on the medial axis of the free space, Proceedings of IEEE International Conference on Robotics and Automation , pp. 1024–1031, Leuven, Belgium, May 1999 Yang, S. (2003). Biologically inspired robot behavior engineering, Biologically inspired neural network approaches to real-time collision free robot motion plan- ning , pp. 143–172, Springer Verlag, ISBN 3790815136. Zeghloul, S.; Blanchard, B. & Ayrault, M. (1997). Smar: A robot modeling and simulation system. Robotica , Vol. 15, No. 1, (january 1997), pp. 63–73, ISSN 0263-5747. 37913 Determination of Location and Path Planning Algorithms for Industrial Robots Yung Ting and Ho-Chin Jar Introduction Before path planning, it is significant to determine the robot location, which very few researches have addressed in this topic. Determination of a suitable robot location is influential to prepare for the subsequent path search with bet- ter solution or even to ensure the possibility of finding a path. In particular, the environment with complex obstacles, the inspection is demanding. In this arti- cle, a method by use of the intersection theorem (Danielle & Mark, 2001) is proposed to determine the robot location. Path planning has been studied with numerous researches on the topics of minimum time, minimum energy, and obstacle avoidance, etc. Obstacle avoid-ance is probably the most distinguished one investigated for many application purposes. Distance maps is one of the earlier method to divide the space by grids with equal distance. The obstacle is mapped in this 2D diagram. The rest of the area is considered to be passable and marked with integer numbers, which indicates the distance to the obstacle (Latombe, 1991; Pobil et al., 1992; Jarvis, 1993). Wave expansion method is derived based on the distance maps. It starts to mark the passable nodes with sequential integer numbers from the selected initial position to expand outward, and then begins the path search at the final position (Barraquand et al., 1992; Ralli & Hirzinger, 1994). Configuration space concept is proposed by (Lozano-Perez, 1987; Banski, 1996; Red & Truong-Cao, 1996). It attempts to illustrate the robot manipulation ge- ometry in terms of the joint space. For an n degree-of-freedom robot, there is n dimensional vector in the configuration space, where the collision occurs in the workspace can be expressed. In this study, three path-planning methods, the neighboring search method, the depth-first search method, and the extensile search method, are developed. The path searching capability, manipulation steps and time are discussed with comparison. A practical automobile baggage trunk welding process in association with an industrial robot, ABB IRB1400, is selected as an example to be investigated with simulation on the Robot Studio S4-lite software. The proposed extensile 380 Industrial Robotics: Theory, Modelling and Control neighboring search method, in particular, is more reliable to find a path and shows autonomous capability of reducing manipulation steps. Determination of Robot Location Inappropriate location of the robot may cause inconvenient operation, or even unexpected damage. Especially, it may provide no solution for path planning when dealing with complex obstacles in the working environment. Therefore, investigating the feasible location area of the robot in the Cartesian coordinate system before path planning is the primary task.The shapes of miscellaneous obstacles are difficult to express by simple mathematical description. An easy way is to segment the obstacle into analyz- able geometric shapes such as triangle or rectangle. The unavoidable error due to this approximation approach is tolerable because it does not affect the de- termination of robot location and the following path planning obviously. For example, the top view of an automobile baggage trunk in 2D is shown in Fig- ure 1. The solid line represents the boundary of the baggage trunk. The seg- mented rectangular areas bounded by the dashed lines replace the original practical trunk shapes. For instance, the robot needs to pass the four (A,B,C,D) working points. The possible location area to cover each of the passing points (A,B,C,D) is represented R A,RB,RC, and RD, respectively. Via inspection on the intersection with the obstruction area of the obstacle, the possible location area is obtained and can be mathematically described by ) () ( O R O R RB A = (1) where ” O” represents the obstruction area of one of the segmented rectangular obstacles, and ” R” represents the inspected possible region that the robot can be located for the working points A and B. To check each rectangular shape in sequence, the possible location areas are searched, so that the robot location is determined. Similarly, the passable area for considering all of the segmented obstacles ( O1, O2, …, On) etc., are defined as )] () [( )] () [()] () [( 22 1 1 n B n A BA B A O R O R O RO R O R O R R " = (2) Concerning all of the desired working passing points (A,B,C,D, …), the possi- ble location region R is inspected with the same process in (2). In case that the intersection area is none, that is, R =[ ], then, there may not have suitable robot Determination of Location and Path Planning Al gorithms for Industrial Robots 381 location for the subsequent path planning. On the other hand, large space of R may provide better solution for searching a suitable path. As shown in Figure 1, each of the fours bigger circles represents the possible location area while the robot stretches out to pass each of the points A,B,C,D, respectively. Similarly, the other four smaller circles represent the possible lo- cation area while the robot withdraws to pass the points A,B,C,D, respectively. Similar tests are also carried on in the other Y-Z and Z-X planes, which are not addressed in detail here. It is concluded that the shaded area is the possible re-gion for robot location. Via numerical analysis, the point E in Figure 1 is se- lected as the robot location. A B C D ERA RBRCRD(Stretch out) (Withdraw) Figure 1. Segmented Obstacles and Robot Location Collision Inspection The robot and the obstacle need to be defined in the geometric space. Since the last three joints inherited with limited manipulation space for most of the six DOF industrial robots, the robot structure can be lumped to express by the first three arms of the elbow (Ting et al., 2002). The robot and the obstacle can be described in a discretized space by the dis- tance maps method. In this 2D map, the perpendicular grids intersect on the nodes and cut the space into numerous equivalent squares (Pobil et al., 1992). 382 Industrial Robotics: Theory, Modelling and Control Configuration space method is a tool to transfer the robot manipulation ge- ometry into the joint space so that robot collision inspection can be achieved in the same space. The configuration space is established by the joint variables, which is tantamount to the dimension of degree-of-freedom of the robot. Thus, it is convenient to transform the robot and the obstacle structure in the dis- tance maps into the configuration space for further investigation. According to the robot shape, the boundary function Plane (P) is used to check an arbitrary point P whether the collision appears (Ting et al., 2002). Via colli-sion inspection, the nodes of the obstacle and the unreachable region of the ro- bot in the configuration space are marked –1, and those of the movable range are marked 0. Path Planning Wave expansion method provides an appropriate approach for path planning (Pobil et al., 1992; Ting et al., 2002). Via the previous collision inspection re-sults, the passable area marked 0 can be expanded outward either from the ini- tial position or the final position and marked with a specified integer number in the configuration space. The number is marked with 1 at the chosen start node, and gradually increased to n at the end node (Ting et al., 2002). For ex- ample, the passable nodes are marked with numbers shown in Figure 2. 21211 11111111 11111111111 11 1 111 111111111 12 2322 2 222222222 2 2222222222 32222222222 2 2 2 2 2222 2 33333333 3 3 3333333333333 3 3333333333 3 3 3 3 3 333 3 3 34 4444444444 44 4 4 444444 4 4 4 444444444444 5 5 5 5 5 5555 5 5 5 5 5555555555555 5 5 55 5 55556 66 6 666 677 7Y X Figure 1. Marked numbers on the nodes Determination of Location and Path Planning Al gorithms for Industrial Robots 383 4.1 Neighboring Search Method While searching for suitable path, it is suggested to start from the node of final position with the largest marked number since there is no guarantee to have a solution to start on the initial position. All of the passable nodes with one unit distance around the start node, 8 nodes at most for two dimension and 26 no- des at most for three dimensions, are checked to see whether there exists at le- ast one passable neighboring node. If the marked number of the start node is n, the node around it with the smallest number, for example, n-1 or n-2, is the desired node as the next passable destination. Then, from that node, the sub- sequent search is continued until the marked number of the desired passable node is 1. To conjoin these searched nodes, thus determines the path. In case that the chosen passable node does not eventually search a path successfully, it needs to switch to another node with smaller number, and then continues the path search from there again. 4.2 Depth-first Search Method The depth-first method is derived based upon the data structure concept of the computer system. It starts at the node of the final position with the largest marked integer number n, and searched the neighboring node whose marked number (n–1) must be smaller than it by one. For instance, the searched path in the tree structure is illustrated in Figure 3. The white nodes are the likely nodes to pass through, and the black nodes indicate the obstructive area or the robot unreachable area. The start node means the initial position to begin wave expansion, and the end node means the final position to begin the marked number. The Null indicates the termination of search with no solution. 4 3 2 11 123 2 1 Start Start Null Null Start Null Start NullEndM1 M2 M3 M4 M5M6 M7 M8M9 M10 Figure 3. Depth-first search method 384 Industrial Robotics: Theory, Modelling and Control As the depth-first search method is used in data structure, a path is obtained from the top to the bottom and from left to right on the tree structure (Tarjan, 1972; Ting & Lei, 1999). In this example, the path searching process is followed by M 1→ M2→ M4→ M7→ M8→ M3→ M5→ M9→ M6→ M10 Hence, several likely paths are concluded as below. (1) M 1→M2→M4→M7 (2) M 1→M2→M4→M8 (3) M 1→M3→M5→M9 (4) M 1→M3→M5→M10 To reduce the robot manipulation steps, an easy way is to merge the nodes in the same manipulation direction (Lei, 1999). 4.3 Extensile Neighboring Search Method Via many experimental testing, the neighboring search method does not obtain a good path in comparison with the depth-first search method. It is interesting to dig out why the former one searching 26 neighboring nodes along various directions cannot obtain better outcome than the latter one searching only 6 neighboring nodes. It is attempted to develop an extensile neighboring search method that outperforms the depth-first search method by solving the defects of the neighboring search method as described below. While using the wave expansion method, the start and the end nodes are se-lected to be either the initial or the final positions. Once the initial position is chosen, the wave expansion begins at that nodal point. An investigation is car- ried out to examine whether there is different wave expansion solution by ex- changing the initial and the final destinations. As illustrated in Figure 4, two paths, the solid and the dotted lines, are obtained by interchanging the initial with the final destinations. The bold line represents the passable region of both cases. It is obviously to see that the searched two paths are not the same. 02q 1q(degree) (degree)mutually passing area Figure 4. Two searched paths by exchanging the initial with the final positions Determination of Location and Path Planning Al gorithms for Industrial Robots 385 Therefore, the selection of the start node for wave expansion and the end point for backward numbering is important, and may seriously affect the search re- sult. This situation is more obvious in the 3D environment for the search neighboring nodes are increased from 8 (2D) to 26 directions. To double-check on the searched path by interchanging the initial with the final position is nec- essary. In Figure 4, a solid line is searched on condition that the furthest left node is selected as the initial position to start wave expansion process, and the furthest right node is the final position to begin the path search. On contrary, the initial and the final positions are exchanged to obtain the dotted path. It is seen that the difference of the searched paths between the two cases appears two paral- lelogram areas. In these areas, it is for sure that no collision occurs. Thus, it is likely to merge the two searched paths into one as shown in Figure 5. 02q 1q(degree) (degree) Figure 6. Merge of the two paths into one solution While using the neighboring search method, the robot path must pass the grid nodes of the same square so that a saw tooth type of path is likely obtained. Thus, it limits the searched path no matter how small the grid is planned. This defect may result in the searched path is not flexible and the manipulation time is elongated because of passing more nodes. This phenomenon is illus- trated in Figure 6. ABC D 1q2q3qE F XY (a) (b) Figure 6. Reduction of path in 2D and 3D 386 Industrial Robotics: Theory, Modelling and Control On the assumption that the path A →B→C shown in Figure 6(a) is the original searched path, it can be reduced to A →C. It is not solvable by the neighboring search method since the searched path has to move along the grid nodes in the range of a unit square. The nodes D and E on the unit square ABED are con- sidered to inspect collision (Ting et al., 2002). Since the triangle ΔABE includes the dotted line across the parallelogram, it is necessary to check only the node E. To extend to the 3D environment shown in Figure 6(b), the path X →Y is de- sired, and it only needs to check the area is enveloped in the grid nodes in-cludes the dotted line. This method is useful to reduce the path. For example, once the circled grid nodes shown in Figure 7 are ensured no collision occurs, then the path is defined to be P →Q, which thus saves many manipulation steps. PQ 2q 1q Figure 7. Further reduction of searched path by checking the circled nodes It is quite difficult to intuitively choose the grid nodes for checking in the 3D space. A recursive program is developed to systematically inspect the collision of the nodes around the unit square where the considered path intersects. The algorithm is described as below. Recursive Algorithm: Assuming the kth grid node is located at (a,b,c), and the (k+2)th grid point is at (x,y,z). Provided that the distance along the X-Y-Z direction is defined with |x- a|≥|y-b| ≥|z-c|, and the grid unit distance is designated with d degree. Let the grid number N is defined as N= |x-a|/d, and the checked nodes (p,q,r) is defined as (p,q,r)=(x-a,y-b,z-c)/N, and the plus or minus symbol of the checked nodes is defined by (u,v,w)=sgn(p,q,r), respectively. By use of the above definitions, three conditions are defined as below. Determination of Location and Path Planning Al gorithms for Industrial Robots 387 While |p|=|q|=|r|, then inspects the nodes at (a+du, b+dv, c+dw),…, (a+(N-1)du, b+(N-1)dv, c+(N-1)dw). While |p|=|q| ≠|r|, then inspects nodes at (a+du, b+dv, c), (a+du, b+dv, c+dw),…, (a+(N-1)du, b+(N-1)dv, c+(N-2)dw), (a+(N-1)du, b+(N- 1)dv, c+(N-1)dw). While |p| ≠|q| ≠|r|, then inspects (a+du, b, c), (a+du, b+dv, c), (a+du, b, c+dw), (a+du, b+dv, c+dw),…, (a+(N-1)du, b+(N-2)dv, c+(N-2)dw), (a+(N-1)du, b+(N-1)dv, c+(N-2)dw), (a+(N-1)du, b+(N-2)dv, c+(N-1)dw), (a+(N-1)du, b+(N-1)dv, c+(N-1)dw). After the inspection procedures described above, the original path k→k+1→k+2 can be simplified to be k →k+2 on condition that there is no col- lision occurs at the checked nodes around the unit square. Thus, if the path is searched to pass n nodes, it may be reduced at most (n-1) nodes. The extensile neighboring search method is able to obtain a path near the ob- stacle. It is advantageous to deal with a complicated environment such as complex obstacles or limited passable area. Also, unlike the neighboring and the depth-first search methods need intuitive decision to reduce the manipula- tion steps along the same moving direction, it is autonomous to complete path search by the developed recursive algorithm. Moreover, there may be a situa- tion that the depth-first search method is infeasible. This method inspects the up, down, left, and right directions in 2D. For instance, the obstacle is trans-ferred into the configuration space as depicted in Figure 8. 02q 1q(degree) (degree)1 1 112 22 2 22223 3 3 3 3 3 33333344 4 4 4 4 4 4 44444445 5 5 5 5 5 5 5 5555555 5 6 666666666666 6 6 6 77777 7 7 7 7 7 7 7 75676 7 888888 889 9 9 9 9 9 91 010101010 81 1 11 9 11 11 11 12121081212 1311971313139876789 1 0 1 1 1 0 98789 1 0 1 1 11 10 9 8 9 10 11 12121212 12 11 10 9 10 11 12 13 121086121414141413131313 14141414 13 15 15 15 15 15 15 15 13 11 9 5 7 9 11 1086810121416 101616161412 87 989 67791011121312111091011 111213 12131415 891011111213121314151314151616 141513141516 17 1717 17 18 start (initial position)end (final position) 16 9 Figure 8. Unsuccessful path planning by depth-first search 388 Industrial Robotics: Theory, Modelling and Control It is seen that there is no subsequent node to continue with when the path search meets the grid number 11. That is, the depth-first search method is not workable if the grid node of number (n-1), number 10 in this example, does not neighbor to the current searched node. On the other hand, the extensile neighboring search method checks the surrounding nodes with number (n-2), number 9 in this example, so that it is able to find a path. Manipulation Time As a matter of fact, the manipulation time is more concerned than the manipu- lation steps. In general, any type of motion profile can be planned by motion programming method (Tesar & Matthew, 1976). In this study, for example, ac- cording to the driving motor of ABB IRB-1400 industrial robot (ABB, 1996), a polynomial form to express the motion profile is given by S(t)=C 5t5+ C 4t4+ C 3t3+ C 2t2+ C 1t1+ C 0 (3) Two cases of motion profiles are presented in Figure 9. In Figure 9(a), the ini- tial time is at t 0. The time between t 0 and t 1 is the time needs to arrive at the maximum speed. The time between t 1 and t 2 is the time to manipulate with the maximum speed. The time between t 2 and t 3 is the time needs to reduce the speed to zero. In case the motor of the robot does not reach its maximum speed due to too short distance of the manipulation step, the motion profile is illustrated in Figure 9(b). Once the coefficients in (3) are defined, the manipula- tion time following the designed motion profile is then computed for both cases. It is noted that the distance of each piece of straight line in the joint space formed by the passable nodes may be different. For example, some pass- able nodes are connected to form a straight line. That is, more manipulation steps are accompanied with. Therefore, the motion profile planned for each piece of straight line is different. The entire manipulation time is the sum of the manipulation time of each piece of the passing straight line. Time(sec )Velocity Vmax 0t1t 2t3t1S2S3S (a)Vmax 0t1t3t1S3S Time(sec )Velocity (b) Figure 9. Motion profile for different situation Determination of Location and Path Planning Al gorithms for Industrial Robots 389 Simulation and Results An ABB IRB-1400 industrial robot with 6 DOF is selected as an example to in- vestigate the path planning. The maximum motor speed of the robot is limited to be 30 cm/sec. The shape of the first three links is assumed to be cylinder with radius r1,r2,r3 and corresponding link length l1,l2,l3. The last three joints of the wrist of most the industrial robots have limited manipulation range. For example, the workspace of the fifth joint of ABB IRB-1400 industrial robot is negligible because of short link length and small joint working area, and inef- fective to the rest two joints. The radius r3 of the third link is intended to ex- pand to include the workspace of the fifth link. Hence, the simplified first three joints with joint variables ( q 1,q2,q3) of the elbow are considered for the path planning (Ting et al., 2002). A practical automobile baggage trunk is depicted with simplified picture shown in Figure 10. The dimension of this obstacle is about 900mm ×1800mm × 5 0 0 m m . T h e d e s i g n a t e d p a s s i n g p o i n t s a r e a s s u m e d t o b e A , B , C , D , E , F , where points A and F are the start and the end positions, respectively, and the rest of them are the welding positions. These points mapped into the configu- ration space in terms of the three joints are (90 o, 0o, 0o), (30o, 20o, 10o), (25o, 15o, 10o), (-25o, 15o, 10o), (-30o, 20o, 10o), and (-90o, 0o, 0o), respectively, in reference to the robot base. In this example, it is quite uneasy to find a solution by robot teaching method from many practical experimental tests. The searched path is critical and inef- ficient for the robot. Especially, inappropriate location of the robot may cause the path planning unlikely. The obstacles are arbitrarily segmented into sev- eral rectangular pieces with a 2D top view shown in Figure 2. The location of the robot is investigated by (2) with all the passed points. According to the off- line computation, the robot is located at (0, -850) in reference to the center of the obstacle (0,0) in the X-Y Cartesian coordinate. The results of path planning via the neighboring, the depth-first and the exten- sile neighboring methods are presented in Figures 11, 12 and 13, respectively. Though, these methods are able to search a path, the first one needs 33 ma- nipulation steps, the second one needs 16 manipulation steps, and the third one needs 13 steps. In terms of the manipulation time by (3), the first one spends 18.7661 seconds, the second one spends 9.6716 seconds, and the third one spends 8.5054 seconds. It is obvious that the extensile neighboring method saves more manipulation steps, even better than the depth-first search method. 390 Industrial Robotics: Theory, Modelling and Control ABCDEF Figure 10. Diagram of automobile baggage trunk Figure 11. Path planning by neighboring search Figure 12. Path planning by depth-first search Determination of Location and Path Planning Al gorithms for Industrial Robots 391 Figure 13. Path planning by extensile neighboring search Conclusion Investigation of robot location is a necessary procedure previous to path plan- ning. Checking the passable region R by (2) is significant that ensures whether the later path planning is feasible. As to the measure of R in terms of a per- formance index, large space of R may provide more selections of robot loca- tion. Via the wave expansion method, the passable nodes are marked with num-bers. Three methods are proposed for path planning of the industrial robots. The plain neighboring search method is expected to find the path with more manipulation steps. The depth-first method can search a path with fewer ma- nipulation steps, however, it may fail when there does not exist a neighboring node with marked number fewer than the number of the current node. Exten-sile neighboring search method provides a further reduction of manipulation steps. In general, the searched path needs fewer manipulation steps implies less manipulation time. Also, it is convenient to use the recursive search algo- rithm to find a path with fewer manipulation steps without the need of intui- tively merging the path in the same direction either by the neighboring or the depth-first search methods (Ting et al., 2002). This method, above all, has bet- ter performance on searching a path successfully. A practical automobile baggage trunk is studied to show the capability of de- termination of robot location and path planning with the developed methods. The extensile neighboring search method not only can trace 26 directions in 3D space, but also can autonomously reduce manipulation steps; therefore, it is an ideal candidate for path planning of industrial robots. Acknowledgement This research is supported by NSC90-2212-E-033- 009. 392 Industrial Robotics: Theory, Modelling and Control References ABB Robotics, Inc. (1996). Training Manual S4Lite Robot Studio Banski, B. (1996). Local Motion Planning Manipulators Based on Shrinking and Growing Geometry Models, IEEE International Conference on Robotics and Automation , pp. 3303-3308, ISSN:1050-4729, Minneapolis, Apr 22-28, USA Barraquand J.; Langlois B. & Latombe J. C. (1992). Numerical Potential Field Techniques for Robot Path Planning, IEEE Transactions on Systems, Man and Cybernetics , Vol. 22, No. 2 (March/April), pp. 222-241, ISSN:0018-9472 Danielle, S. & Mark, H. O. (2001). Motion Planning in Environments with Dan- ger zones, IEEE International Conference on Robotics and Automation , pp.1488-1493, ISSN:1050-4729, Seoul, May 21-26, Korea Jarvis, R. A. (1993). Distance Transform Based Path Planning for Robot Navi- gation, Recent Trends in Mobil Robotics Latombe, J. C. (1991). Robot Motion Planning , Kluwer Academic Publication, Boston Lei W.-I. (1999). The Study of Obstacle Avoidance Methods for Industrial Robots , Master Thesis, Department of Mechanical Engineering, Chung Yuan Christian University, Taiwan Lozano-Perez, T. (1987). A Simple Motion Planning Algorithm for General Ro- bot Manipulators, IEEE Journal of Robotics and Automation , Vol. 3, No. 3 (June), pp. 224-238, ISSN:0882-4967 Pobil, A. P. D. ; Serna, M. A. & Liovet, J. (1992). A New Representation for Col- lision Avoidance and Detection, IEEE International Conference on Robotics and Automation , pp. 246-251, Nice, May 12-14, France Ralli E. & Hirzinger G. (1994). Fast Path Planning for Robot Manipulators Using Numerical Potential Fields in the Configuration Space, Proceedings of IEEE/RSJ IROS , pp.1922-1929, Munich, Sep 12-16, Germany Red, W. E. & Truong-Cao, H. V. (1996). Unifying Configuration Space and Sen- sor Space for Vision-Based Motion Planning, IEEE International Conference on Robotics and Automation , pp. 3572-3577, Minneapolis, Apr 22-28, USA Tarjan R. (1972). Depth-first Search and Linear Graph Algorithms, SIAM Jour- nal of Computing , Vol. 1, No. 2, pp.146-149 Tesar, D. & Matthew, G. K. (1976). The dynamic synthesis, analysis, and design of modeled cam systems , Lexington, MA: Lexington Books, USA Ting Y. & Lei W.-I. (1999). Using the Hierarchy Tree Method for Robot Path Planning, IASTED International Conference on Robotics and Applications , pp. 153~157, Santa Barbara, USA Ting, Y. ; Lei, W.-I. & Jar, H.-C. (2002). A Path Planning Algorithm for Indus- trial Robots, International Journal of Computers & Industrial Engineering , Vol. 42, No. 2-4 (April), pp. 299~308, ISSN:0360-8352 39314 Homogeneous Approach for Output Feedback Tracking Control of Robot Manipulators Luis T. Aguilar Introduction The problem of robust tracking control of electromechanical systems has been studied and solved by many different approaches within the robot control community (see e.g. Sage et al., 1999; Kelly et al., 2005 and references therein) in order to ensure accurate motion in typical industrial tasks (painting, naviga-tion, cutting, etc). In the last decade, the homogeneity approach attracted con- siderable interest from the research and engineering communities (see e.g. Le- bastard et al., 2006; Ferrara et al., 2006; Bartolini et al., 2006) because it was demonstrated that homogeneous systems with homogeneity degree 0<η ex- hibit robustness and finite-time convergence properties (Bhat & Bernstein, 1997; Hong et al., 2001; Orlov, 2005). Control laws based on the homogeneity approach (Bhat & Bernstein, 1997; Hermes, 1995; Orlov, 2003a; Rosier, 1992) are attractive in robotic applications because they can cope with many mechanical perturbations, including external vibrations, contact forces, and nonlinear internal phenomena such us Coulomb and viscous friction, dead zone and backlash, while it is possible to ensure ex- act tracking to continuously differentiable desired trajectories. Several homogeneous controllers and studies have been proposed in the litera- ture. For example, Rosier (1992) constructed a homogeneous Lyapunov func-tion associated with homogeneous dynamic systems. Hermes (1995) addressed the homogeneous stabilization control problem for homogeneous systems. Bhat and Bernstein (1997) examined the finite time stability of homogeneous systems. Levant (2005a, 2005b) developed robust output-feedback high-order sliding mode controllers that demonstrate finite-time convergence (see also (Fridman & Levant, 1996; Fridman & Levant, 2002)) where the controller de-sign is based on homogeneity reasoning while the accuracy is improved in the presence of switching delay, and the chattering effect is treated by increasing the relative degree. Orlov et al. (2003a, 2003b) proposed applying homogene-ous controller to solve the set-point problem dealing with mechanical imper-fections such as Coulomb friction, viscous friction, and backlash. Orlov et al., (2005) extended the finite time stability analysis to nonlinear nonautonomous switched systems.394 Industrial Robotics: Theory, Modelling and Control Motivated by the above-mentioned features, and taking into account that only incomplete and imperfect state measurements are available, the main objective of this paper is introduce an output feedback homogeneous controller for tracking the trajectories of robot manipulators. The control design proposed here is inspired by the passivity-based approach, which consists of an observer part, a precomputed reference trajectory, and a controller part, but is aug- mented with a relay part in both the controller and the observer, which yields a certain degree of robustness under disturbances and finite-time stability of the closed-loop system. We note that the passivity-based approach, which is represented by the Slotine and Li + observer controller, allows semi-global sta-bility and the addition of the relay terms ensures robustness, despite the pres- ence of the observer without destroying the closed-loop stability. This paper is organized as follows: In Section 2 homogeneous systems are de- fined. Section 3 states the problem and introduces the Euler-Lagrange repre- sentation of the robot manipulator, along with some fundamental properties of the dynamic model. Section 4 presents the homogeneous controller and its sta- bility analysis. Section 5 provides a simulation study for a 2-DOF robot ma- nipulator using the controller described in Section 4 as well as performance of the controller for external perturbations. Section 6 establishes final conclusions. The following notation will be used throughout the paper. The norm 2x, with nRx∈ , denotes the Euclidean norm and nx x x ++ =!1 1 stands for the sum norm. The minimum and maximum eigenvalues of a matrix nnRA×∈ are de- noted by {}Aminλ and {}Amaxλ , respectively. The vector sign( x) is given by sign( x)=[sign( x1),…,sign( xn)]T where the signum function is defined as . ,, ],[, )( °¯°®­ ∈∀ < −= −> = Ry yifyifyif y sign 0 10 110 1 (1) Basic definitions Let us begin by recalling some definitions of homogeneity for nonautonomous nonlinear systems governed by ),(txfx= (2) whereT nx x x ),,(!1= is the state vector, t is the time, and T nf f f ),,(!1= is a piece-wise continuous function (Orlov, 2005). The function n nR Rf61+: i s piece-wise continuous if and only if 1+nR is partitioned into a finite number of Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 395 domains1+⊂n jR G , N j ,,!1= , with disjoints interiors and boundaries jG∂ of measure zero such that f is continuous within each of these domains and for all N j ,,!1= it has a finite limit ) ,(txfj as the argument jG tx ∈),(* *approaches a boundary point . ),(jG tx ∂∈ Throughout, the precise meaning of the differen- tial equation (2) with a piece-wise continuous right-hand side is defined in the sense of Filippov (Filippov, 1988). An absolutely continuous function )(⋅x de- fined on an interval I, is said to be a solution of (2) if it satisfies the differential inclusion ),(txFx∈ (3) almost everywhere on I. Definition 1 (Orlov, 2005): A piece-wise continuous function n nR Rf →+1: i s said to be homogeneous of degree R∈η with respect to dilation ()nrr!1 where 0>ir , n,,i!1= if there exists a constant 0>c and a ball nR B⊂δ such that )( ) , ,, ( xfctcxc xcfir nr r ii n +η η−= !11. for all 0cc> and almost all . ),( R Btx × ∈δ When continuous, a globally homogeneous time-invariant vector field )(xf of degree 0<η with respect to dilation ),,(nr r!1 is known to be globally finite time stable whenever it is globally asymptotically stable (Orlov 2005, Thm 3.1) and an upper estimate of the settling time is given by () ()δ δ−+ τ≤η− ηs L Ex xtTL1 0 0 0211),(),( where 0 0x tx =)( a n d {} TttRtE xttx T ExL xtxL +≥ ∈∀∈ ≥ = τ ⋅0 00 000 0 0, ),,(: inf sup),( ),,( and , , sup)(¸¸ ¹· ¨¨ ©§τ =δ δ∈δ 210 0Ex s Ex396 Industrial Robotics: Theory, Modelling and Control whereLEdenotes an ellipsoid of the form , : °¿°¾½ °¯°®­ ≤¸¹·¨©§∈ =¦ =1 12 n iri n LiLxRx E LEis located within a homogeneity ball, Lc0≥δ , and 00>c is a lower estimate of the homogeneity parameter. Dynamic model and problem statement We here present a homogeneous tracking control for an n-degrees-of-freedom rigid serial links robot manipulator governed by the following equation of mo- tion (Spong, 1989): wUqgqqqCqqM += + + )( ),( )(  (4) where q is the n×1 vector of joint positions and is considered to be the only in- formation available for feedback; U is the n×1 vector of applied joint torques; w is the n×1 unknown perturbation vector; M(q) is the n ×n symmetric positive- definite inertia matrix; qqqC),( is the n×1 vector of centripetal and Coriolis forces; and g(q) is the n×1 vector of gravitational torques. The dynamic equa- tion (4) has the following properties, which will be used in the closed-loop sta- bility analysis (Kelly et al., 2005): •The inertia matrix M(q) is bounded above and below for all nRq∈ ; that is, Im)q(MIm2 1 ≤ ≤ where m 1 and m 2 are positive scalars and I is the identity matrix. •The matrix )q,q(C is chosen such that the relation 0 2 = − qqqC qMqT )],( )([ holds for all nRq,q∈ . •The vector C(q,x)y satisfies C(q,x)y=C(q,y)x and C(q,z+αx)y=C(q,z)y+αC(q,x)y for all nRz,y,x,q ∈ and R∈α . •The matrix C(q,x) satisfies xk)x,q(Cc≤ for all nRqx∈, a n d kc is a positive constant. We further assume •A known constant, W>0, is the upper boundary for the perturbation vector, w, that is, W w≤ .Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 397 The control objective is established formally as follows: given bounded and continuously differentiable desired joint trajectories n d Rtq ∈)( , w e m u s t d e - sign a discontinuous control law U such that the joint positions q(t) reach the desired trajectories qd(t) asymptotically; that is, . )t(q)t(qlimdt0= − ∞→ (5) Homogeneous controller In this section, we present the nonadaptive Slotine-and-Li controller (Slotine & Li, 1987) augmented with a homogeneous part to achieve asymptotic stability of the closed-loop system equilibrium point. Proposition 1. Consider the equation of the robot (2) along with the following control law: °° ¯°° ®­ Λ− =−Λ− =− − − −− − + + = β α z qˆ q)qqˆ( q q)qq(signK)e(signKeK)qq(K)q(g q)q,q(Cq)q(M U d d rr Pr D r r   000 0 (6) and the homogeneous observer, ° ¯° ®­ − + −γ+− +Λ+ =+Λ+ = β α−− )]q q(signK)e(signK)[q(M)]z(signez[K)q(Mzlq pz)Il (p qˆ rP d rd  011 2 (7) where e=q-q d is the n ×1 tracking error vector; qˆ is the n ×1 estimated velocity vector; qqz ˆ−= is the n ×1 observation error vector; Λ, K P, K D, K α,Kβ,γ are n ×n diagonal positive definite matrices and l d is a positive constant. Then, for any initial condition some sufficiently large gains of the controller (6), (7) always exist such that (5) holds. Proof. First, the equations of the closed-loop system [(4), (6), (7)] must be intro- duced in terms of the tracking and observation errors, which are given, respec- tively, by398 Industrial Robotics: Theory, Modelling and Control = »»»» ¼º «««« ¬ª rsze dtd »»»» ¼º «««« ¬ª γ−− + −+ − − − −− − − −+ − − −β−β α− )]( ) ( )( ),( ),( )[()] ( )( ),( ),( )[( z sign rs signKrqMlwzKsKsqqCqrqCrKq Mrs signKe signKsKweKsqqCqrqCrKq Mze d P D r DD P r D    11 (8) where ) (ze e qqsr −Λ+= −=  and z z qqr Λ−= −= 0 . It should be noted that the nonlinear nonautonomous closed-loop system (8) is a differential equation with a right-hand discontinuous side. Thus, the precise meaning of solutions of the differential equation with the discontinuous func- tions is defined in the Filippov sense (Filippov, 1988), as for the solutions of a certain differential inclusion with a multi-valued right-hand side. In fact, the control law (6)-(7) can be seen as a second-order sliding mode. To conclude that the origin is asymptotically stable, consider the following Lyapunov function candidate for the closed-loop system (8): ¦¦ ==+ + + + + =n in iii iiT PT T PTz eK rqMr zKz sqMs eKe txV 11)(21 21)(21 21),( γα (9) whereiKα and iγ are the elements of the main diagonal of αK and γ, respec- tively. The time derivative of V(x,t) along the solution of (8) yields ).( )()( )( )( )( ),( z signze signKerqMr rqMrzKzsqMs sqMseKe txV T TT T PT T T PT γ+ ++ + + + + = α      21 21 Substituting equations (8) in ) ,(txV and employing properties H2 and H3, it follows that .) ()()( ) ( ) ()( ] )[,(] )[,( ] )([ ),( wrs e signKzz sign zrs signKrs e signKeqrsqCrqsrqCsrKlqMrsKszKzzKeeKe txV T TT T T TT D dT DT PT PT PT ++ Λ+γΛ−− −− Λ−− +− + − − − Λ− Λ+ Λ−= αβ α  (10) Using properties H1, H2, and H5; and employing the well-known inequality the following boundary is obtained Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 399 ,2 22 h g hg + ≤ , ,nRhg∈ (11) {} {} {} {} {} .}{}{} {} {),( max min minmaxminmax min minmin rsW rsK eKrs sk K lm qkqk rk K rsz Kze KK zetxV Qc D d cc c DTQ QPPT + λ+− λ− Λ λ−» ¼º « ¬ª » ¼º « ¬ª − λ−− λ » ¼º « ¬ª−»» ¼º «« ¬ª Λ λ−γΛ λ−» ¼º « ¬ª »¼º «¬ª Λ λΛ λ » ¼º « ¬ª−= β αα    32 1 100 21 (12) We now derive sufficient conditions for ) ,(txV to be locally negative definite. Firstly, Q 1will be positive definite by selecting positive definite matrices Λ and KP. Notice that Q 2 will be positive definite if {} {} .max min αΛ λ>γΛ λ K Finally, Q 3 is positive definite if {} x KkD c> λmin1 and {} .max D d K lm λ>1 Thus it is always possible to find some controller gains to ensure that all the above inequalities hold. Therefore, (12) is locally negative definite almost eve- rywhere and the equilibrium point is exponentially stable. Finally, we define the domain of attraction and prove that it can be enlarged by increasing the controller gains. For this, we first find some positive constant α1,α2 such that . ),(2 2 22 2 1 x txV x α≤ ≤ α (13) Notice from (8) that {} {} []2 12 2 12 21rm zK sm eK VP P + λ+ + λ>min min400 Industrial Robotics: Theory, Modelling and Control so we define α1 as {} {} ., minmin 1 121m KP λ =α Figure 1. Schematic diagram of the 2-DOF robot manipulator. In a similar manner, an upper bound on (8) is {} {} [ {} {} () ]22 22 22 2221 z n Krm sm e K n K V PP γ λ+ λ++ + λ+ λ ≤α max maxmax max ) ( so we define {} {} () {} {} () {} . ,, maxmax max max max γ λ+ λ λ+ λ =αα n K m K n KP P 2 22 2 From (12), (13) we conclude that the domain of attraction contains the set {} .1 21 minααλD cKkx≤ (14) q1 q2 l2l1x y lc2lc1Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 401 Simulation results To study the performance of the controllers, we generate simulations in which a two-link manipulator was required to follow the joint trajectory ), cos( ft qdi ππ+π= 22 21,i= where f=10 Hz. The position and velocity initial conditions were set to 200 0 R q q ∈= = )()( . The motion of the 2-DOF manipulator with rotational joints, depicted in Figure 1, was governed by (4) where ,. ) cos(. .) cos(. .) cos(. .)( »¼º «¬ª ++ +=620 510 760510 760 022 778 22 2 qq qqM ,) sin(.) )( sin(. ) sin(.),( »¼º «¬ª + − −=0 510510 510 1 22 1 2 2 2 qqqqq qqqqC And »¼º «¬ª ++ +=) sin(.) sin(.) sin(..)( 2 12 1 1 630630 6789qqqq qqg were taken from (Berghuis & Nijmeijer, 1993a). In the simulation, the control gains were selected as follows: KP=diag{10,10} KD=diag{5,5} Kα=diag{5,5} Kβ=diag{2,2} γ=diag{12,12}. The resulting position and observation errors of the closed-loop system (8) for the unperturbed and perturbed case are depicted in Figure 2. This figure also shows the control input. The figure demonstrates that the homogeneous con- troller asymptotically stabilizes the manipulator in the desired trajectory, thus satisfying the control objective (5). Figure 3 shows chattering due to the relay part of the control law (last two terms of (6)): ). ( )(r h qq sign Ke sign K u − − −=β α 0 For the sake of comparison, both controllers (6)-(7) and the controller without a 402 Industrial Robotics: Theory, Modelling and Control relay part ( Kα=Kβ=γ=0) that were proposed by Berghuis and Nijmeijer (1993b) were simulated assuming permanent disturbances ( w=10). In contrast to the proposed controller, the simulations results depicted in Figure 4 show that the continuous controller drives position of each joint of the manipulator to a steady-stable error of 0.3 [rad]. We repeated the last simulations for a reference trajectory consisting of a circle in task space with radius r=0.25 [m] and center (1,1/2) which is given by ° ¯° ®­ +=+= );. sin(). cos( t yt x dd 1041 2110411 where xd and yd are coordinates in the Cartesian space and the initial position in task space is fixed at 2 0=)(x [m] and 0 0=)(y [m]. The corresponding trajec- tory in the joint space is () ()¸¸ ¹· ¨¨ ©§ +−¸¸ ¹· ¨¨ ©§=− − 2 2 12 2 1 1 1 dd dd dq llq l yxqcossintan tan ,¸¸ ¹· ¨¨ ©§ − − +=− 212 22 12 2 1 22lll l y xqd d dcos where1l and 2l are the lengths of links 1 and 2 respectively. Figure 5 illustrates the effectiveness of the controller. Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 403 Figure 2. Joint position errors, observation errors, and control input for the unper- turbed case ( left column ) and perturbed case ( right column ).404 Industrial Robotics: Theory, Modelling and Control Figure 3. Chattering signal due to discontinuous terms in the input control. Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 405 Figure 4. Joint position errors for the continuous controller (i.e., K α=K β=γ=0): The perturbed case. (a)406 Industrial Robotics: Theory, Modelling and Control (b) Figure 5: Motion of the end effector of the manipulator following a circular path (x) using the homogeneous controller ( a) and the continuous controller ( b). Conclusions We developed a controller that exploits the advantages of homogeneity theory and that is applicable to the tracking control problem for n-degrees of freedom robot manipulators, assuming that position information is the only available feedback data. The basis of this work is the passivity-based approach, which consists of a tracking controller plus an observer complemented with a relay part that yields a certain degree of robustness in comparison with its continu- ous counterpart. Stability analysis was developed within the nonsmooth Lyapunov function framework (Baccioti & Rosier, 2005) where semi-global asymptotical stability has been concluded. The effectiveness of the controller was supported by simulations made for a two degrees-of-freedom robot ma- nipulator taking into account the unperturbed and perturbed cases.Homogeneous Approach fo r Output Feedback Tracking Control of Robot Manipulators 407 References Baccioti, A. & Rosier, L. (2005). Liapunov functions and stability in control theory: 2nd edition , Springer, 978-3-540-21332-1, Berlin. Bartolini, G., Orani, N.; Pisano, A. & Usai, E. (2006). Higher-order sliding mode approaches for control and estimation in electrical drives, In: Ad- vances in variable structure and sliding mode control , C. Edwards, E. Fossas & L. Fridman, (Ed.), 423-445, Springer, 3-5403-2800-9, London. Berghuis, H. & Nijmeijer, H. (1993a). Global regulation of robots using only position measurements. Systems and Control Letters , Vol. 21, 289-293, 0167-6911. Berghuis, H. & Nijmeijer, H. (1993b). A passivity approach to controller- observer design for robots. IEEE Transactions on Automatic Control , Vol. 9, No. 6, 740-754, 0018-9286. Bhat, S. & Bernstein, D. (1997). Finite time stability of homogeneous systems, Proceedings of the 1997 American Control Conference , pp. 2513-2514, 0- 7803-3832-4, Alburquerque, USA, June 1997, IEEE. Ferrara, A.; Giacomini, L. & Vecchio, C. (2006). Control of nonholonomic sys- tems with uncertainties via second order sliding modes, Proceedings of the 2006 American Control Conference , pp. 5384-5389, 1-4244-0210-7, Min- neapolis, USA, June 2006, IEEE. Filippov, A.F. (1988). Differential equations with discontinuous right-hand sides , Kluwer academic, 9-0277-2699-X, Dordrecht. Fridman, L. & Levant, A. (1996). Higher order sliding modes as a natural phe- nomenon in control theory, In Robust Control via Variable Structure and Lyapunov Techniques Garofalo & Glielmo, (Ed.), Lectures notes in control and information science, 217, 107-133, Springer, 3-5407-6067-9, Berlin. Fridman, L. & Levant, A. (2002). Higher order sliding modes, In Sliding mode control in engineering , W. Perruquetti and J.P. Barbot, (Ed.), 53-102, Mar- cel Dekker, 0-8247-0671-4, New York. Hermes, H. (1995). Homogeneous feedback control for homogeneous systems. Systems and Control Letters , Vol. 24, 7-11, 0167-6911. Hong, Y.; Huang, J. & Xu, Y. (2001). On an output feedback finite-time stabili- zation problem. IEEE Transactions on Automatic Control , Vol. 46, No. 2, 305-309, 0018-9286. Kelly, R.; Santibañez, V. & Loría, A. (2005). Control of robot manipulators in joint space , Springer, 1-8523-3994-2, London. Lebastard, V.; Aoustin, Y.; Plestan, F. & Fridman, L. (2006). Absolute orienta- tion estimation based on high order sliding mode observer for a five link walking biped robot. Proceedings. of the International Workshop on Variable Structure Systems , pp. 373-378, 1-4244-0208-5, Alghero, Italy,. Levant, A. (2005a). Homogeneity approach to high-order sliding mode design. Automatica , Vol. 41, 823-830, 0005-1098. 408 Industrial Robotics: Theory, Modelling and Control Levant, A. (2005b). Quasi-continuous high-order sliding-mode controllers. IEEE Transactions on Automatic Control , Vol. 50, No. 11, 1812-1816, 0018- Orlov, Y.; Aguilar, L. & Cadiou, J.C. (2003a). Switched chattering control vs. backlash/friction phenomena in electrical servo-motors. International Journal of Control , Vol. 76, 959-967, 0020-7179. Orlov, Y.; Alvarez, J.; Acho, L. & Aguilar, L. (2003b). Global position regulation of friction manipulators via switched chattering control. International Journal of Control , Vol. 76, 1446-1452, 0020-7179. Orlov, Y. (2005). Finite time stability and robust control synthesis of uncertain switched systems. SIAM J. Control Optim. , Vol. 43, No. 4, 1253-1271, . Rosier, L. (1992). Homogeneous Lyapunov function for homogeneous con- tinuous vector field. Systems & Control Letters , Vol. 19, 467-473, 0167- Sage, H.; De Mathelin, M. & Ostertag, E. (1999). Robust control of robot ma- nipulators: a survey. International Journal of control , Vol. 72, 1498-1522, 0020-7179. Slotine J., & Li, W. (1987). On the adaptive control of robot manipulators. In- ternational Journal of Robotics Research , Vol. 6, No. 3, 49-59. Spong M. & Vidyasagar, M. (1989). Robot dynamics and control , John Wiley & Sons, 0-4716-1243-X, New York. 409 15 Design and Implementation of Fuzzy Control for Industrial Robot Muhammad Suzuri Hitam Introduction The dynamic equations of motion for a mechanical manipulator are highly non-linear and complex. It is therefore, very difficult to implement real-time control based on a detailed dynamic model of a robot, if not impossible (Luh et al., 1980; Lee et al., 1982). The control problem becomes more difficult if adap- tive control is necessary to accommodate changing operational conditions. Such a requirement frequently exits in the manufacturing environment; there- fore, an alternative design approach would be attractive to the industrial prac- titioner. A better solution to the complex control problem might result if hu-man intelligence and judgement replaces the design approach of finding an approximation to the true process model. A practical alternative would be the use of fuzzy logic. It has been reported that fuzzy logic controllers performed better, or at least as good as, a conventional controller and can be employed where conventional control techniques are inappropriate (Li et al., 1989; Sugeno, 1985; Ying et al., 1990). In contrast to adaptive control, fuzzy logic al- gorithms do not require a detailed mathematical description of the process to be controlled and therefore the implementation of fuzzy logic should, theoreti- cally, be less demanding computationally. Fuzzy logic algorithms can be de- signed for environments where the available source information is not accu-rate, subjective and of uncertain quality. Furthermore, these algorithms provide a direct means of translating qualitative and imprecise linguistic statements on control procedures into precise computer statements. In this chapter, a proposed fuzzy logic design to control an actual industrial robot arm is outlined. The description of fuzzy logic controller is described in Sec-tion 2. It includes the methodology for the design of a fuzzy logic controller for use in robotic application. Section 3 presents the robot control system architec- ture. In Section 4, the relevant issues that arise relating to the design tech- niques employed are discussed in detailed. These issues include choise of sampling time, fuzzy rules design strategy, and controller tuning strategy. To evaluate the effectiveness of the proposed design strategy, studies are made to 410 Industrial Robotics: Theory, Modelling and Control investigate which design strategy leads to the best control performance under various robot conditions. Section 5 concludes this chapter. Description of Fuzzy Logic Controller Architecture The basic structure of the fuzzy logic controller (FLC) most commonly found in the literature is presented in Fig. 1 (Lee, 1990a). The basic configuration of a fuzzy system is composed of a fuzzification interface, a knowledge base, a fuzzy inference machine and a defuzzification interface as illustrated in the upper section of Fig. 1. The measured values of the crisp input variables are mapped into the corresponding linguistic values or the fuzzy set universe of discourse at the fuzzification interface. The knowledge base comprises both the fuzzy data and fuzzy control rules. The fuzzy data base contains all the necessary definitions used in defining the fuzzy sets and linguistic control rules whereas, the fuzzy control rule base includes the necessary control goals and control policy, as defined by an experts, in the form of a set of linguistic rules. The fuzzy inference engine emulates human-decision making skills by employing fuzzy concepts and inferring fuzzy control actions from the rules of inference associated with fuzzy logic. In contrast to the fuzzification stage, the defuzzification interface converts the values of the fuzzy output variables into the corresponding universe of discourse, which yields a non-fuzzy control ac-tion from the inferred fuzzy control action. In general, for a regulation control task, the fuzzy logic controller maps the significant and observable variables to the manipulated variable(s) through the chosen fuzzy relationships. The feedback from the process output is normally returned a crisp input into the fuzzification interface. The crisp or non-fuzzy input disturbance, illustrated in Fig. 1, would normally include both error and change in error, and these are mapped to their fuzzy counterparts at the fuzzi- fication stage. These latter variables are the inputs to the compositional rules of inference from which the fuzzy manipulated variable is obtained. At the out- put from the defuzzification process, a crisp manipulated variable is available for input to the process. In conclusion, it can be stated that to design a fuzzy logic controller, six essential stages must be completed: Input and output variables to be used must be identified. Design the fuzzification process to receive the chosen input variables. Establish the data and rule bases. 4. Select the compositional rule of inference for decision making. Decide which defuzzification process is to be employed. Develop the computational units to access the data and rule bases. Design and Implementation of Fuzzy Control for Industrial Robot 411 Figure 1. The general form of the fuzzy logic control architecture 2.1 Input and Output Variables In any fuzzy logic control system, the observed input must be fuzzified before it is introduced to the control algorithm. The most commonly used antecedents at this fuzzification stage are the state variables, error and rate of change in er- ror. For the case of positioning a joint within a robot arm, the first variable is the difference (error) between the desired and the current joint position. The value of the second state variable is the numerical difference between two suc-cessive values of error (change in error). These two state variables give a good indication of the instantaneous performance of the system and both variables are quantifiable by fuzzy sets. In this project, error (E) and change in error (CE) are defined as the input fuzzy sets and the controlled action (CU) as the output fuzzy set. The evaluation of the error and the change in error at sample interval, k, is calculated as follows : Error( k) = Demand( k) - Actual position( k) (1) Change in error( k) = Error( k) - Error( k - 1) (2) 2.2 Method of Representing Fuzzy Sets According to Lee (1990a), there are two methods for defining a fuzzy set; nu-412 Industrial Robotics: Theory, Modelling and Control merical and functional, depending on whether the universe of discourse is dis- crete or continuous. In the case of a discrete universe, a numerical definition is employed where the value of the membership function is represented by a vector; the order of the vector dependent on the degree of discretisation. The user has to specifically define the grade of membership of each cardinal in the fuzzy sets. For a continuous universe of discourse, a functional definition can be utilised to define the membership function of a fuzzy set. The triangle, trapezoidal and the bell shaped functions are the popular types found in many engineering applications. In this Chapter, this latter form of representation is adopted. The evaluation of the membership function is evaluated on-line dur- ing process operation. A combination of bisected trapezoidal, trapezoidal and triangular shaped fuzzy set templates are used to represent the input and out- put variables; template shapes that are readily evaluated and require the minimum of computer memory storage. At present, researchers are still look- ing for the best guidance to determine the best shape for a fuzzy set to provide an optimum solution to a specific control problem. In general, the use of sim- ple shapes could provide satisfactory performance. The geometry of these templates can be defined by the base width and the side slope when mapped to the universe of discourse. 2.2.1 Mapping Fuzzy Sets to the Universe of Discourse In any application, it is essential for a practitioner to identify the most appro-priate parameters prior to the mapping of the fuzzy sets to the chosen universe of discourse; the determination of the size of both the measurement and con- trol spaces; the choice of the discretisation levels for both the measurement and control spaces, the definition of the basic fuzzy sets within these discre- tised spaces and finally the sample interval to be used. The size of both the measurement and control spaces can be directly determined by estimating the probable operating range of the controlled system. However, the choice of the discretisation levels in both the measurement and control spaces, and the fuzzy set definitions can only be defined subjectively and are normally based on the experience and judgement of the design engineer. From a practical point of view, the number of quantisation levels should be large enough to provide an adequate resolution of the control rules without demanding exces- sive computer memory storage. Generally 5 to 15 level of discretisations are found to be adequate. It should be emphasised that the choice of these parame- ters has a significant influence on the quality of the control action that can be achieved in any application (Lee, 1990a). The use of higher resolution in the discretisation levels will result in an increase in the number of control rules and thereby make the formulation of these control rules more difficult. It should also be emphasised that the fuzzy sets selected should always com- pletely cover the whole of the intended working range to ensure that proper Design and Implementation of Fuzzy Control for Industrial Robot 413 control action can be inferred for every state of the process. The union of the support sets on which the primary fuzzy sets are defined should cover the as- sociated universe of discourse in relation to some value, ǆ. This property is re- ferred to as the " ǆ-completeness" by Lee (1990a). To ensure a dominant rule always exists, the recommendation is that the value of ǆ at the crossover point of two overlapping fuzzy sets is 0.5. At this value of ǆ, two dominant rules will be fired. To define the input fuzzy sets, error (E) and change in error (CE), the following procedure is adopted. In the case of the former fuzzy sets, the maximum range of error for a particular joint actuator is calculated. For exam- ple, a robot waist joint with a counter resolution of 0.025 degree per count, and a maximum allowable rotation of 300.0 degree would result in a maximum po- sitional error of 12000 counts. A typical schematic representation for the error fuzzy set universe of discourse would be as illustrated in Fig. 2. The linguistic terms used to describe the fuzzy sets in Fig. 2 are: {NB,NM,NS,ZE,PS,PM,PB} where N is negative, P is positive, B is big, M is medium, S is small and ZE is zero; a notation that is used throughout this chapter. Combinations of these letters are adopted to represent the fuzzy variables chosen, for example Posi- tiveBig, PositiveMedium and PositiveSmall. As a result, 7 discretisation levels are initially defined for each input and output domain. The size and shape of the fuzzy sets displayed in Fig. 2 are chosen subjectively and tuned during process operation to obtain the most appropriate response. The proposed tun- ing methodology of these fuzzy sets is detailed later in Figure 4.2. Figure 2. Universe of discourse: error fuzzy sets To determine the domain size for the change in error variable in this project, an open loop test was conducted. In this test, a whole range of voltage (from the minimum to the maximum) was applied to each of the robot joint actuator and the respective change in angular motion error was recorded every sample interval. From this information, the fuzzy sets illustrated in Fig. 3 for the change in error were initially estimated. Although the open loop response of 414 Industrial Robotics: Theory, Modelling and Control the system will be different from the close loop response, it will give a good initial guide to the size of the domain appropriate for use with the fuzzy logic controller. Figure 3. Change in error fuzzy sets domain of discourse It should be noted that the choice of sampling interval is very important be-cause it will affect the maximum change in error value recorded. It was found that the use of a very high sampling rate caused the recorded maximum change in angular motion error to be close to zero and this made it impossible to define the location of each fuzzy set in the domain of discourse. For exam- ple, a sampling period of 0.001 seconds will result in a maximum change in waist positional error of 2 counts; a value found experimentally. In a similar manner, the control variable output fuzzy sets were selected. However, in this particular case, the dimentionality of the space is determined by the resolution of the available D/A converters. The D/A converters adopted are of an 8-bit type which yield 256 resolution levels as indicated on the horizontal axis in Fig. 4(a). Again, the universe of discourse was partitioned into 7 fuzzy set zones as depicted in Fig. 4(b). Figure 4(a). A typical characteristic for the waist joint actuator Design and Implementation of Fuzzy Control for Industrial Robot 415 It should be noted that the fuzzy set labelled Zero is defined across the dead zone of the dc-servo motor in order to compensate for the static characteristics of the motor in this region. The initial sizes and distribution of the fuzzy sets are tuned during operation to improve the closed loop performance of the sys- tem. Figure 4(b). Control action domain of discourse 2.2.1.1 Transforming a Crisp Input to a Fuzzy Variable Consider the trapezoidal representation of an error fuzzy set as illustrated in Fig. 5. Let an input error at sample interval kbe ∈E e( k ) U and the correspond- ing membership grade of the fuzzy set ⊂iEEU be defined by the template [a, b, c, d]. Therefore, its membership ership function, iEǍ can be directly evalu- ated using the expression: (3) where the gradients slope.ab and slope.cd are calculated from the expressions; (4) (5)416 Industrial Robotics: Theory, Modelling and Control In a similar manner the properties of a triangular or bisected trapezoidal fuzzy set template can be defined. Figure 5. Trapezoidal representation of an error fuzzy set. 2.3 Defining the Fuzzy Rule Base The fuzzy rule base employed in FLC contains fuzzy conditional statements which are currently chosen by the practitioner from a detailed knowledge of the operational characteristics of the process to be controlled. The fuzzy rule base can be derived by adopting a combination of four practical approaches which are mutually exclusive, but are the most likely to provide an effective rule base. These can be summarised as follows (Lee, 1990a): 1. Expert experi- ence and control engineering knowledge. In nature, most human decision making are based on linguistic rather than numerical descriptions. From this point of view, fuzzy control rules provide a natural framework for the charac- terisation of human behaviour and decision making by the adoption of fuzzy conditional statements and the use of an inference mechanism. 2. Operational experience. The process performance that can be achieved by a human opera- tor when controlling a complex process is remarkable because his reactions are mostly instinctive. An operator through the use of conscious or subconscious conditional statements derives an effective control strategy. These rules can be deduced from observations of the actions of the human controller in terms of the input and output operating data. 3. Fuzzy model of the process. The lin- guistic description of the dynamic characteristics of a controlled process may be viewed as a fuzzy model of a process. Based on this fuzzy model, a set of fuzzy control rules can be generated to attain an optimal performance from a dynamic system. 4. Learning. Emulation of human learning ability can be car- ried out through the automatic generation and modification of the fuzzy con- trol rules from experience gained. The rule base strategy adopted in this work Design and Implementation of Fuzzy Control for Industrial Robot 417 is developed from operational and engineering knowledge. The initial control rule base adopted is displayed in the look-up table, Table 1. This table should be read as: (6) Table 1. Initial rules selected for fuzzy logic controller 2.4 Fuzzy Inference Mechanism One virtue of a fuzzy system is its inference mechanisms which is analogous to the human decision making process. The inference mechanism employs the fuzzy control rules to infer the fuzzy sets on the universe of possible control action. The mechanism acts as a rule processor and carries out the tasks of ma-noeuvring the primary fuzzy sets and their attendant operations, evaluating 418 Industrial Robotics: Theory, Modelling and Control the fuzzy conditional statements and searching for appropriate rules to form the output action. As mention earlier, the input and output variables of error, change in error and control action, UE,UCE and UCU.respectively, are all chosen to be discrete and finite, and are in the form of; (7) where indicates a fuzzy subset. As a result of selecting 7 discretisation levels for each fuzzy input and output variable, i.e. PB,PM,PS, etc., 49 fuzzy control rules result. These control rules are expressed in the form of fuzzy conditional statements; (8) At sample interval k, the jth fuzzy control rule, equation (8), can be expressed as; (9) where e(k), ce(k)and cu(k)denote the error, change in error and manipulated control variable respectively. The jthfuzzy subsets Ej,CE jand CU jare defined as; (10) Alternatively, Equation (9) can be evaluated through the use of the composi- tional rule of inference. If the minimum operator is utilised, the resulting membership function can be expressed as; (11) where the symbol  indicates the fuzzy implication function and j jj jEC EC U ℜ= × × denotes the fuzzy relation matrix on (12) In term of the membership functions, this can be expressed as; (13)Design and Implementation of Fuzzy Control for Industrial Robot 419 To use the result of Equation (13), a defuzzification process is necessary to produce a crisp output for the control action value. 2.5 Choosing Appropriate Defuzzification Method Several approaches (Lee, 1990b) have been proposed to map the fuzzy control action to a crisp value for input to the process. Basically, all have the same aim that is, how best to represent the distribution of an inferred fuzzy control ac- tion as a crisp value. The defuzzification strategies most frequently found in the literature are the maximum method and centre of area method: The maximum method. Generally, the maximum method relies on find- ing the domain value, zo,that maximises the membership grade which can be represented by; (14) In the case when there is more than one maximum membership grade inW,the value of zois determined by averaging all local maxima in W. This approach known as mean of maximum method (MOM) is ex- pressed as; (15) where T iczwzm a xǍ(z) ∈= T iczwzm a xǍ(z) ∈= and nis the number of times the membership function reaches the maximum support value. The center of area method (COA). The center of area method sometimes called the centroid method produces the center of gravity of the possi- bility distribution of a control action. This technique finds the balance point in the output domain of the universe of discourse. In the case when a discrete universe of discourse with m quantisation levels in the output, the COA method produces; (16) where ziis the ith domain value with membership grade of Ǎ (zi).420 Industrial Robotics: Theory, Modelling and Control Experimental Setup The robot control system is composed of the host computer, the transputer network, and the interface system to a small industrial robot. The schematic representation of the control structure is presented in Fig. 6. Figure 6. Schematic representation of robot control architecture. The controller structure is hierarchically arranged. At the top level of the sys- tem hierarchy is a desktop computer which has a supervisory role for support- ing the transputer network and providing the necessary user interface and disc storage facilities. The Transputer Development System acts as an operating system with Occam II as the programming language. At the lower level are the INMOS transputers; in this application one T800 host transputer is resident on the COMET board and mounted in one of the expansion slots of the desktop Design and Implementation of Fuzzy Control for Industrial Robot 421 computer with the remaining three transputers resident in a SENSION B004 system. The robot is the RM-501 Mitsubishi Move Master II, with the proprie- tary control unit removed to allow direct access to the joint actuators, optical encoders and joint boundary detection switches. The host transputer also pro- vides an interface facilities to the user, for example, input and output opera- tion from the keyboard to the screen. The three transputers resident in the SENSION B004 system are a T414 transputer which is resident on the GBUS-96 board and provides a memory mapped interface to the robot through a Pe-ripheral Interface Adapter (PIA) Card. The remaining two T800 root transput- ers are used to execute the controller code to the robot. The PIA card allows a parallel input and output interface to the robot joint actuators and conforms to the interface protocol implemented on the GBUS-96 which is known as a GESPIA Card. The actual hardware arrangement together with the interfacing employed is shown in Fig. 7, with the Mitsubishi RM-501 robot shown in Fig. Figure 7. System hardware and interfacing. (a) host computer, (b) B004 transputer system, (c) GESPIA card, (d) DAC cards, (e) counter cards and (f) power amplifier. 422 Industrial Robotics: Theory, Modelling and Control Figure 8. The Mitsubishi RM-501 Move Master II Industrial Robot. 3.1 The Mitsubishi RM-501 Move Master II Robot This industrial robot is a five degree of freedom robot with a vertical multi- joint configuration. The robot actuators are all direct current servo motors, but of different powers. At the end of each joint, a sensor is provided to limit the angular movement. The length of link and its associated maximum angular motion is listed in Table 2. Fig. 9(a) and 9(b) illustrate the details of the robot dimensions1 and it’s working envelop. The maximum permissible handling weight capacity is 1.2 kg including the weight of the end effector. Table 2 The Mitsubishi RM-501 Move Master II geometry. Join Link Length (mm) Maximum Rotation (De- gree) Waist 250 300 Shoulder 220 130 Elbow 160 90 Wrist roll 65 +-90 Wrist pitch 65 +-180 Table 2. The Mitsubishi RM-501 Move Master II geometry Design and Implementation of Fuzzy Control for Industrial Robot 423 Figure 9(a). Range of movement of waist joint and robot dimensions (all dimensions are measured in millimeter). Figure 9(b). Robot dimension and range of movement when hand is not attached. 424 Industrial Robotics: Theory, Modelling and Control Experimental Studies A program code for the development of a FLC was written in the Occam lan- guage and executed in a transputer environment. This approach would enable the evaluation of the robustness of the controller design proposed and applied to the first three joint of a RM-501 Mitsubishi industrial robot. A T800 tran-sputer is assigned to position each joint of the robot independently. To deter- mine the effect on controller performance of changing different controller pa- rameters, one joint only is actuated and the other two are locked. In the first experiment the impact on overall robot performance of changes in sample in- terval was assessed. This was followed by an investigation into how best to tune a controller algorithm and whether guide-lines can be identified for fu- ture use. The problem is to overcome the effect of changing robot arm configu- ration together with a varying payload condition. 4.1 The Choice of Sampling Time Inputs (error and change in error) to the fuzzy logic control algorithm that have zero membership grades will cause the membership grades of the output fuzzy sets to be zero. For each sample period, the on-line evaluation of the al- gorithm with 49 control rules has been found by experiment to be 0.4 millisec- onds or less. Hence, to shorten the run time, only inputs with non-zero mem-bership grades are evaluated. For times of this magnitude, real-time control is possible for the three major joint controllers proposed. It has been cited in the literature that it is appropriate to use a 0.016 seconds sampling period (60 Hertz) because of its general availability and because the mechanical resonant frequency of most manipulators is around 5 to 10 Hz (Fu et al., 1987). Experi-ments have been carried out to determine how much improvement can be achieved by shorten the sampling period from 0.02 seconds to 0.01 seconds. In the first experiment, the waist joint is subjected to a 60.0 degree (1.047 radian or 2400 counter count) step disturbance with all other joints in a temporary state of rest. The results shown in Fig. 10 suggest that very little improvement in transient behaviour will be achieved by employing the shorter sampling pe- riod. The only benefit gained is a reduction in the time to reach the steady state of 0.4 seconds. In a second test, the waist joint is commanded to start from its zero position and to reach a position of 5 degree (0.0087 radian or 20 counter count) in 2 seconds; it remains at this position for an interval of 1 second after which it is required to return to its home position in 2 seconds as showed in Fig. 11. Again the benefit is only very marginal and of no significance for most industrial applications. Despite these results, it was decided that the higher of the two sampling rates would generally ensure better transient behaviour, hence the 0.01 seconds sampling period is used throughout this project.Design and Implementation of Fuzzy Control for Industrial Robot 425 Figure 10. Waist response to a step input for different sampling periods. Figure 11. Waist trajectory tracking at different sampling periods. 426 Industrial Robotics: Theory, Modelling and Control 4.2 Controller Tuning Strategies Tuning of a FLC may be carried out in a number of ways; for instance modify- ing the control rules, adjusting the support of the fuzzy sets defining magni- tude and changing the quantisation levels. The objective is always to minimise the difference between the desired and the actual response of the system. Be- cause of the large number of possible combinations available and the different operational specifications that exist, no formal procedure exists for tuning the parameters of a FLC. In practice, trial and observation is the procedure most commonly employed. This can be tedious and time consuming and may not result in the selection of the most suitable parameters and in many practical situations does require safeguards to prevent excessive output variations and subsequent plant damage. To establish a rule base for a FLC, it is necessary to select an initial set of rules either intuitively or by the combination of methods described in Figure 2.3 for the process to be controlled. Rule modifications can be studied by monitoring the response of the close loop system to an aperiodic disturbance in a phase plane for error and change in error in this case. This trial and observation procedure is then repeated as often as required until an acceptable response is produced. In this project, three different ways for tun-ing the controller have been investigated. The initial control rules were initially selected by modifying the rule based initiated by Daley (1984). The modifica- tions made to the rule base given in Daley (1984) were necessary to ensure a faster transient response with minimum overshoot and steady state error for the robot arm. The rule base listed in Table 1 was found to be the most appro-priate for the robotic control process. A second procedure for tuning a FLC is investigate in this section and the final method will be presented in the next section. The use of two inputs and one output means that there is a three di- mensional space in which to select the optimal solution. In most reported cases, scaling factors or gains were introduced to quantified these three uni-verses of discourse. Hence, making it possible to tune a controller by varying the values of these gain terms. However, in this project, the functional forms of the fuzzy sets were utilised and these were mapped directly to the correspond- ing universe of discourse. Thereby, tuning is carried out by adjusting or rede- fining each fuzzy set location in the universe of discourse. The strategy devel-oped in this project is to show the effect of changing each of the input and an output definitions to establish the impact on the overall performance of the ro- bot. The initial estimate for the fuzzy sets employed in the three domains of discourse were made off-line as detailed in Figure 2.2.1. Fig. 12 shows the es- timates for the error fuzzy set definitions. The corresponding estimates for the change in error and controlled action fuzzy set definitions are plotted in Fig. 13 and Fig. 14, respectively. Tuning of the error fuzzy sets is made by gradually moving the fuzzy set locations in the universe of discourse closer to the zero value of error. A similar procedure is adopted to tune the output fuzzy sets, Design and Implementation of Fuzzy Control for Industrial Robot 427 however, the initial selection positioned these fuzzy sets as close as possible to the equilibrium point. For these sets, tuning is executed by gradually moving the fuzzy sets away from the equilibrium point until an acceptable close loop response is found. To demonstrate the effect of changing the error fuzzy sets definition, three choices of error fuzzy sets definition were made and are plot- ted in Fig. 12(a) - 12(c) named Case 1, 2 and 3. The other two fuzzy set defini- tions remained unchanged and are shown in Fig. 13 and 14. A step disturbance of 30.0 degree (1200 counter counts or 0.523 radian) was introduced at the waist joint and the other joints, shoulder and elbow, were locked at 10 degrees and 90 degrees respectively2. This robot arm configuration was chosen to ex- clude variations in inertia, gravitational force and cross coupling resulting from the movement of these two joints. The impact from the use of an inap- propriate definition for the output fuzzy sets is significant when variations in these forces are present and this is studied in latter experiments. The joint re- sponse to a 30.0 degree step disturbance is shown in Fig. 15(a) and the associ- ated control signals are shown in Fig. 15(b). Notice that in Figure 15(a), at about 1.0 second the joint response for error fuzzy set definition Case 1 started to deviate from the other two cases because of the large spread in the fuzzy sets in comparison to the other two cases depicted in Fig. 12(a). There is no no- ticeable difference in transient response between Cases 2 and 3 because the fuzzy set definitions are close to the equilibrium point. However, differences start to emerge as the two responses approach the chosen set point, Case 3 re- sponse is more oscillatory. This corresponds to the excessive voltage variations that can be observed in Fig. 15(b). This phenomenon occurred because of the use of a very tight definition for error (close to zero) in Case 3 (Fig. 12(c)) which leads to a large overshoot and hunting around the set point. The use of the fuzzy set definition, Case 2 gives a good accuracy throughout the whole envelope of operation for the waist joint with this particular robot arm con-figuration. The maximum steady state error is found to be 0.0013 radian (3 counter count) as a result of the coarseness of the fuzzy sets used; fuzzy set la- belled ZERO is defined between -5 to +5 counts.428 Industrial Robotics: Theory, Modelling and Control Figure 12(a). Case 1; error fuzzy set definition. Figure 12(b). Case 2; error fuzzy set definition. Figure 12(c). Case 3; error fuzzy set definition. Design and Implementation of Fuzzy Control for Industrial Robot 429 Figure 13. Change in error fuzzy set definition. Figure 14. Control action fuzzy set definition. This performance, however, is degraded when the robot arm configuration is changed. For example, when the shoulder and elbow joints are at full stretch and locked at 100.0 and 90.0 degree respectively, large overshoot cannot be avoided due to the increased inertia on the waist joint. Fig. 16 is provided as an illustration of the waist response to a small step disturbance of 1.0 degree (40 counter count or 0.017 radian). The blue line included in this figure is a waist response for the re-tune fuzzy sets definition which will be discussed later in this section. It can be seen that that despite exhaustive tuning of both the input fuzzy sets a large overshooting cannot be avoided for the second robot arm configuration. From these results, it can be concluded that to provide a better control a new combination of fuzzy sets have to be defined. A way of achiev- ing this is to reduce the waist speed of operation. By redefining a smaller error, change in error and control action fuzzy sets in this region of operation, finer control around the equilibrium can be achieved but of a reduced operational speed. The smaller tuned fuzzy set combinations are plotted in Fig. 17, 18 and The blue line in Fig. 16 shows the waist response and the corresponding controlled input signals for the smaller tuned fuzzy set combinations for com-430 Industrial Robotics: Theory, Modelling and Control parison with the Case 2 combination previously defined. Figure 15(a). Waist response for different error fuzzy set definitions. Figure 15(b). Control signals for different error fuzzy set definitions. Design and Implementation of Fuzzy Control for Industrial Robot 431 Figure 16. Waist response at different arm configurations. The drawback of using the smaller fuzzy set combinations is obvious when the waist is subjected to a large step disturbance, for example at 30.0 degrees (1200 counter count or 0.523 radian) with the arm in the second configuration. The subsequent waist response is plotted in Fig. 20 together with the response for the second definition of the fuzzy set combinations. The waist response when using the smaller fuzzy set combinations of Fig. 16 and Fig. 20 show that the controller could position the waist with a smaller overshoot of 0.025 degree (1 counter count) and zero steady state error, however, the penalty to be paid is an increase in rise time. The zero steady state error is achieved because of the use of a fuzzy singleton definition in the error fuzzy set labelled ZERO, i.e. the error fuzzy set is defined between ± 1 in the universe of discourse as is de-picted in Fig. 17. Although the Case 2 fuzzy set combinations can provide a faster response (about 1.2 seconds quicker for a 30.0 degree step input), the overshoot (0.25 degree) and steady state error (0.075 degree) are both greater, Fig. 20. These results deteriorate when the controller operates under gravita- tional force and variable payload. A further comparison to evaluate the per-formance between the smaller fuzzy set combinations and the Case 2 fuzzy set combinations is conducted by subjecting the waist to a sinusoidal signal dis- turbance of 30.0 degree amplitude and 4.0 seconds time periods. Fig. 21(a) shows clearly that trajectory following with the Case 2 fuzzy set combinations 432 Industrial Robotics: Theory, Modelling and Control is by far the better result. Fig. 21(b) illustrates that the use of a smaller range of voltage in the output fuzzy sets definition could not generate an adequate con- trolled signal. These results suggest that tuning can never optimise simultane-ously speed of response and accuracy. If fuzzy logic is to be used successfully in industrial process control, a method which can provides a fast transient re- sponse with minimum overshoot and steady state error must be found. One way to achieve this is to partition the problem into coarse and fine control, an approach suggested by Li and Liu (1989). Figure 17. Smaller error fuzzy set definition. Figure 18. Smaller change in error fuzzy set definition. Design and Implementation of Fuzzy Control for Industrial Robot 433 Figure 19. Smaller control action definition of fuzzy sets. Figure 20. Waist response for different tuned fuzzy sets at second robot arm configu- ration.434 Industrial Robotics: Theory, Modelling and Control Figure 21(a). Response of the smaller and Case 2 fuzzy set combinations to sinusoidal tracking. Figure 21(b). Control signal in Fig. 21(a). Having investigated the problems associated with the control of the waist joint, the investigation was extended to the more difficult upper-arm link, the Design and Implementation of Fuzzy Control for Industrial Robot 435 shoulder joint. The control of this joint is difficult because of the gravitational force acting on it. For example, when the elbow is fully stretched and the shoulder is at 30.0 degree location to the working envelop, a load of 0.4 kg. is enough to drag the shoulder joint downwards with 0 voltage (127 DAC input value) applied to the actuator. The use of a single output fuzzy set definition was found only suitable for a limited range of operation and not applicable for the robot employed in this study. To illustrate this limitation, Fig. 22 shows the effect of using a single output definition in 4 different operational regions when the elbow is fully stretched. To compensate for the gravitational loading effect, 4 operational regions were identified, and each was assigned a different output fuzzy set. The switches 1, 2, 3 and 4 would control the choice of the output fuzzy set in the range of 0 to 10 degrees, 10 to 30 degrees, 30 to 90 de- grees and 90 to 130 degrees of the shoulder joint working envelop, respec-tively. The four switched output fuzzy sets are presented in Fig. 23(a) - 23(d) and these have been tuned as previously discussed. In all four modes of opera- tion, the input fuzzy set combinations of Case 2 were utilised. From Fig. 23(a) - 23(d), it is obvious that the fuzzy sets labelled ZERO is moving towards the right of the plot from the left as the region of operation moves from 1 to 4. This is to compensate for the gravitational load which forces the joint to overshoot when moving downwards as can be seen in Fig. 20. It should be noted that the use of the switches in selecting the output fuzzy set definition is just a coarse estimate, and as a result can give up to a maximum steady state error of 0.125 degrees (5 counter count) for the shoulder joint working envelop. If more accu-rate positional control is needed, it will be necessary to increase the number of switching regions or alternatively a different method will have to be found. Figure 22. Shoulder response in different regions of operation.436 Industrial Robotics: Theory, Modelling and Control Figure 23(a). Switch 1; control action fuzzy set definitions for shoulder. Figure 23(b). Switch 2; control action fuzzy set definitions for shoulder. Figure 23(c). Switch 3; control action fuzzy set definitions for shoulder. Design and Implementation of Fuzzy Control for Industrial Robot 437 Figure 23(d). Switch 4; control action fuzzy set definitions for shoulder. It should also be mentioned that the use of a trapezoidal function to represent the dead-zone area, mention in Section 2.2.1, is not suitable for implementation at this joint because of the unsymetrical nature of the actuator dead-zone in different regions of operation. Therefore, as an alternative the triangular func-tion was used because it provides a more operational acceptable definition for the fuzzy sets. From the experiments gained in this section, it can be concluded that by using a trial and observation procedure, tuning of the FLC parameters can be successfully accomplished. To reduce the design time consumed adopt- ing the trial and observation tuning method, a good initial estimate for the fuzzy set definitions is essential. Conclusion In this chapter, a methodology for the application of fuzzy logic theory to the development of a fuzzy logic controller had been presented and successfully implemented. The developed algorithm had been shown to be of simple de- sign and implementable for real-time operation of a three joint industrial robot using joint space variables for control. The methodology to estimate the initial fuzzy sets has been presented. The use of the function form of template to rep- resent the fuzzy sets provides a way to directly map these fuzzy sets into the corresponding universe of discourse. Unfortunately, this design could only be arrived at by the use of a trial and observation procedure and would suggest a more formal procedure must be developed for industrial applications. Fur- thermore, design by a trail and observation procedure cannot be guaranteed to yield the best result. In conclusion, it had been shown that a FLC can be de- signed to match specific process dynamics without the use of a process model within the control loop. Therefore, if automatic tuning can be introduced into the FLC design a very robust control approach will result and this could be di- rectly applied to any poorly defined non-linear process. 438 Industrial Robotics: Theory, Modelling and Control References Lee, C.S.G., chung, M.J., Turney, J.L. & Mudge, T.N. (1982). On the control of mechanical manipulators, Proceedings of the Sixth IFAC Conference in Estimation and Parameter Identification, pp.1454-1459, Washington DC, June, 1982. Li, Y.F. & Lau, C.C. (1989). Development of fuzzy algorithms for servo sys- tems, IEEE Control Systems Magazine, pp.65-71, April 1989. Luh, J.Y.S., Walker, M.W. & Paul, R. (1980). Resolved acceleration control of mechanical manipulators, IEEE Transaction on Automatic Control, Vol. AC-25, No.3, 468-474. Sugeno, M. (1985). An introductory survey of fuzzy control, Information Sci- ence, vol.36, pp.59-83, 1985. Ying, H., siler, W. & Buckley, C. (1990). Fuzzy control theory : A nonlinear case, Automatica, Vol.26, No.3, pp.513-520, 1990. Lee, C.C. (1990a). Fuzzy logic in control systems : Fuzzy logic controller – Part I, IEEE Transactions on Systems, Man & Cybernatics, Vol.20, No.2, pp.404-418, March/April 1990. Lee, C.C. (1990b). Fuzzy logic in control systems : Fuzzy logic controller – Part II, IEEE Transactions on Systems, Man & Cybernatics, Vol.20, No.2, pp.419-453, March/April 1990. Fu, K.S., Gonzalez, R.C. & Lee, C.S.G. (1987). ROBOTICS : Control, Sensing, Vision and Intelligence, McGraw-Hill International Edition, New York, Daley, S. (1984). Analysis of fuzzy logic control algorithms and their applica- tion to engineering systems, Ph.D theses, University of Leeds, UK. 1984. Li, Y.F. & Lau, C.C. (1989). Development of fuzzy algorithms for servo sys- tems, IEEE Control System Magazine, pp.65-71, April 1989. 43916 Modelling of Parameter and Bound Estimation Laws for Adaptive-Robust Control of Mechanical Manipulators Using Variable Function Approach Recep Burkan Introduction Two different approaches have been actively studied to maintain performance in the presence of parametric uncertainties: adaptive control and robust con- trol. The basic philosophy of adaptive controller is that incorporates some sort of parameter estimation and adaptive controller can learn from experiences in the sense that parameters are changed. Some of the adaptive control laws in- troduced by Craig et al.(1987), Middleton&Goodwin (1988), Spong&Ortega (1990) require the acceleration measurements and/or the computation of the inverse of the inertia matrix containing estimated parameters. Later, Slotine&Li (1987, 1988) Spong et.al (1990), Egeland&Godhavn (1994) have de- rived adaptive control algorithms without using the joint accelerations and the inverse of inertia matrix. Other adaptive control laws are proposed in refer-ences (Carelli et al 1995, Kelly et al 1989, Burkan&Uzmay 2005, Burkan 2005, Burkan, 2006). Comparative studies of adaptive control laws are given in ref- erences (Ortega&Spong 1989, Colbaugh at al 1996). On the other hand, robust control has been successfully used to design control- ler with disturbance, unmodelled dynamics and other sources of uncertainty. The papers about application these techniques for the background of robotic application are given in survey papers (Abdullah at al 1991, Sage at al 1999). Based on the approach of Corless-Leitmann (1981), Spong (1992) developed a new robust control law. In this approach (Spong 1992), the Leitmann (1981) or Corless-Leitmann (1981) approach was used to design a robust controller. Dif- ferent extension of the scheme by Spong (1992) has been developed by Liu&Goldenberg (1996a, 1997), Yaz (1993), Candudas de Wit et al. (1996). An adaptive scheme of uncertainty bound is given in the papers (Koo&Kim 1994, Burkan and Uzmay 2003b, Burkan and Uzmay 2005). Similar algorithms have proposed by Dawson at. al. (1993) and Zenieh&Corless (1997). Comparative studies of robust controllers are given in the references (Liu & Goldenberg 1996b, Jaritz & Spong (1996).440 Industrial Robotics: Theory, Modelling and Control In pure adaptive control laws, parameters are updated in time and there is no additional control input. However, parameters are not adaptive and fixed (or adaptive) uncertainty bound is used as an additional control input in robust control laws. In the studies (Burkan, 2002; Uzmay & Burkan 2002, Burkan & Uzmay 2003 a, Burkan & Uzmay 2006) adapts previous results on both robust and adaptive control techniques for robot manipulators in an unified scheme, so an adaptive-robust control law is proposed. As distinct from previous stud- ies, variable functions are used in derivation, and parameter and bound esti- mation laws are updated using exponential and logarithmic functions depend- ing on the robot link parameters and tracking error. Adaptive Control Law In the absence of friction or other disturbances, the dynamic model of an n-link manipulator can be written as (Spong &Vidyasagar, 1989) Ĳ= + + G(q)q)qC(q,q M(q)  (1) where q denotes generalised coordinates, Ĳ is the n-dimensional vector of ap- plied torques (or forces), )q(M is the nxn symmetric positive definite inertia matrix, q)qC(q, is the n-dimensional vector of centripetal and Coriolis terms and G(q) is the n-dimensional vector of gravitational terms. Equation (1) can also be expressed in the following form. )ʌq,q Y(q, G(q)q)qC(q,q M(q)   = + + (2) whereǑ is a constant (px1) dimensional vector of inertia parameters and Y is an nxp matrix of known functions of the joint position, velocity and accelera- tion. For any specific trajectory consider known the desired position, velocity and acceleration vectors q d,dqanddq and measured the actual position and velocity errors q qq~ d− = , and q qq~ d− = . Using the above information a cor- rected desired velocity and acceleration vectors for nonlinearities and decoup- ling effects are proposed as: q~q qd r Λ+ = qd r~q q Λ+ = (3) where Λ is a positive definite matrix. Then the following control law is consid- ered. Kı G(q) q)qC(q, q M(q) + + + =r r Ĳ  (4) Modelling of Parameter and Bound Estimation Laws …………….. 441 where q~q~q-qr Λ+= =σ is a corrected velocity error and K σ is the vector of PD action. Suppose that the computational model has the same structure as that of the manipulator dynamic model, but its parameters are not known exactly. The control law (4) is then modified into Kı+ˆ)q,q,q Y(q,=Kı+Gˆ+q)q(q,Cˆ+q(q)Mˆ= r rr r πτ  (5) where πˆ represents the available estimate on the parameters, and accordingly, Mˆ,Cˆ,Gˆ denote the estimated terms in the dynamic model. Substituting (5) into (2) gives ʌ~)q,q,q -Y(q,G~-q)q(q,C~-q(q)M~- Kı )qC(q,ı M(q)r r r r   = = +σ + (6) where πππ −=ˆ~ is the property of linearity in the parameter error. Error quan- tities concerning system parameters are characterised by MMˆ M~− = , CCˆC~−= , GGˆ G~−= (7) The Lyapunov function candidate is defined as 0ʌ~Kʌ~ 21q~Bq~ 21M(q)ıı21)ʌ~,q~,V(ʌT T T> + + = σ (8) where π is a p dimensional vector containing the unknown manipulators and load parameters, ʌˆ is its estimate and ʌʌˆʌ~−= denotes the parameter estima- tion error vector. B and πKare positive definite, usually diagonal matrix. Us- ing the property 0 )]q,q(C2-)q(M[T=σ σ  nR∈∀σ and choosing K2B Λ= , the time derivative of V along the trajectory of system (6) is ))ıq,q,q(q,Y-~(Kʌ~q~ȁKȁ q~-q~Kq~-Vr rT ʌT T T   π + = (9) If the estimate of the parameter vector is updated as the adaptive law )ıq,q,q(q,YKˆr rT -1 ʌ =π (10) Equation (9) becomes q~ȁKȁ q~-q~Kq~-VT T= (11) 442 Industrial Robotics: Theory, Modelling and Control So,. Vis negative semidefinite and Equation (6) is stable. It should be noted that ʌ~ʌˆ=(π is constant) (Sciavicco & Siciliano, 1996). The parameter estima- tion law (10) can also be written as )0(ˆ dt)ıq,q,q(q,YK ˆr rT -1 ʌ π π + =³ (12) where )0(ˆπ is the initial estimation of the parameters. The resulting block dia- gram of the adaptive control law is given in Fig. 1 (Sciavicco & Sciliano, 1996) Figure 1. Implementation of the adaptive control law (10) (Sciavicco & Siciliano, 1996). Robust Control Law Consider the nominal control vector for the model system described by Equa- tions (1) and (2). Kı )ʌq,q,q Y(q,Kı (q)G q)q(q,C q(q)MĲ 0 r r0 r 0 r 0 0 − =− + + =   (13) The definition of the nominal control law τ0 is based on the adaptive algorithm of Slotine and Li (1987). It is important to understand that the nominal control vector τ0 in Equation (13) is defined in terms of fixed parameters which are not changed or updated in time as would be an adaptive control strategy. The control input τ can be defined in terms of the nominal control vector τ0and a compensation vector for parameter variations as: Kı- u(t)) )(ʌq,q,q Y(q, )u(t)q,q,q Y(q,ĲĲ0 r r r r 0 + = + =   (14) Modelling of Parameter and Bound Estimation Laws …………….. 443 where dqqq −=~; q~q qd r Λ− = ; q~q qd r Λ− = (15) It is supposed that the parameter estimation vector π is uncertain and it is as- sumed that both π0εRpandǒεR are known a priori, such that ȡʌ-ʌʌ~ 0≤ = (16) Letε>0 and the additional control vector as defined by Spong (1992) as: °° ¯°° ®­ ≤ −> − = İıY ifİıYȡİıYif ıYıYȡ u(t) TTT TT (17) Considering adaptive control law (Sciavicco & Siciliano, 1996), the block dia- gram of the pure robust controller is given in Fig. 2. Figure 2 Block diagram of the robust control law. (Burkan &Uzmay, 2003 c) Since the controller which is defined by Equation (17) consists of two different input depending on ε, the matrices A and A’ are introduced to select appropri- ate control input. The A matrix is diagonal with ones and zeros on the diago- nal. When 0TYǔǆ >,− a one is present in A, a zero is present in A’ and the first additional control input is in effect. When 0TYǔǆ−≤ a zero is present in A, a one is present in A’, and so the second additional control input is in ef-444 Industrial Robotics: Theory, Modelling and Control fect. Hence, the matrices A and A’ are simple switches which set the mode of additional control input to be used (Burkan & Uzmay, 2003 c). As a measure of parameter uncertainty on which the additional control input is based, ǒ can be defined as 1/2p 1i2 iȡȡ¸¸ ¹· ¨¨ ©§=¦ = (18) Having a single number ǒ to measure the parametric uncertainty may lead to overly conservative design, higher than necessary gains, ect. For this reason we may be interested in assigning different “weights” or gains to the compo- nents of τ. We can do this as follows. Suppose that we have a measure of un- certainty for each parameter i~π separately as: ¬¼ i iȡʌ~≤ i=1,2,..,p (19) Letiȣdenote the ith component of the vector ıTY ,iİ=i=1,2....p i represent the ith component of ε, and define the ith component of the control input iĲ as (Spong, 1992), then ¯®­ ε≤υ υερ−ε>υ υυρ−= i i i i ii i i ii iif )/(if /)t(u (20) Adaptive-Robust Control Law Considering the dynamic model of a n-link robot manipulator given by Equa- tions (1) and (2), the control input vector that comprises the parameter estima- tion and the additional control input is defined as Kı+į(t))+ˆ)(q,q,q Y(q,=Ĳr r π (21) Substituting (21) into (1) and some arrangements yield (t))q,q,q Y(q,~)q,q,q Y(q, Kı )qC(q, M(q)r r r r δ −π −= +σ +σ    (22) Adaptive robust parameters are identical as adaptive control law in the known parameter case such as ǔ, qr,ƭ and K. It is assumed that the parameter error is unknown such that ȡ(t)=π−π=πˆ~ (23) Modelling of Parameter and Bound Estimation Laws …………….. 445 whereʌˆ is the estimate of the available parameters and updated in time. The upper bounding function (t)ȡˆis assumed to be unknown, and should be de- termined using the estimation law to control the system properly. Finally the errorȡ(t) shows the difference between parameter error and upper bounding function as (t) (t)-ȡ(t) (t)ȡ ρ−π−π=ρ = ˆ ˆ ˆ~ (24) Theorem (Burkan & Uzmay, 2003 a): Letǂ>0 be a positive number, π be the unloaded and lower bound of parame- ter, and ρ be the upper uncertainty bound of Equation (16). The three of them are supposed to be known initially. If the estimate of parameter ʌˆ and the ad- ditional control input į(t)in control law (21) are defined, respectively as ʌ+)q,q,q(q,YeĮ2-=ʌˆr rTĮt- ;Įt 2(t) eδρ−= (25) and substitute them in the control input (21) for the trajectory control of the model manipulator, then the tracking errors q~ and q~ will converge to zero. Proof: By taking into account above parameters and control algorithm, the Lyapunov function candidate is defined as (t)ȡ~(t)ȡ~ 21q~Bq~ 21M(q)ıı21(t))ȡ~,q~,V(T T TΓ + + = σ (26) Apart from similar studies, Γis the positive definite diagonal matrix and change in time. The time derivative of Equation (26) is written as )t(q~(t)ȡ~(t)ȡ~(t)ȡ~ 21q~Bq~(q)ı M21ı M(q)ıVTT T T T.     Γ + Γ + + +σ = (27) where (t)ȡˆ-ʌ-ʌˆ (t)ȡˆ-ȡ(t) (t)ȡ~= = ; (t)ȡˆʌˆ (t)ȡˆ(t) (t)ȡ~ −= −ρ= (28) Let K2B Λ= and use the property 0 )]q 2C(q,-(q)M[T=σ σ   ,nRσ∀∈ , the time derivative of V along the system (22) is )t(q~(t)ȡ~(t)ȡ~(t)ȡ~ 21(t)Yı(t)Yıq~ȁKȁ q~-q~Kq~-VT T T T T T.  Γ + Γ +ρ −δ − = (29) 446 Industrial Robotics: Theory, Modelling and Control Since K>0, and Λ>0 the first terms of Equation (29) are less or equal to zero that is: 0q~ȁKȁ q~-q~Kq~-T T≤ (30) So, in order to find conditions to make 0V. ≤ we concentrate on the remaining terms of the equation. If the rest of Equation (29) is equal to or less than zero, the system will be stable. Substituting Equation (24) into the remaining terms of Equation (29) the following equation is obtained: 0])t(ˆ (t)ȡ[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[21(t)Yı(t)Yı-T.T T T= ρ− Γ −ρ+ −ρΓ −ρ+ρ −δ (31) Now, in considering δ(t) as an estimated term of uncertainty bound, that is, δ(t)=- )t(ˆρ then Equation (31) is written as: 0])(ˆ (t)ȡ[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[21(t)Yı(t)ȡˆYıT.T T T= − Γ − + − Γ − + − tρ ρ ρ ρ ρ (32) Taken (t)]ȡˆ (t)[ −ρ as a common multiplier, Equation (32) is written as: 0])t(ˆ (t)ȡ[ (t))ȡˆ (t)[21ıY[(t)]ȡˆ (t)[(.T T= ρ− Γ+ −ρΓ+ − −ρ (33) Hence, we look for the conditions for which the equation 0])t(ˆ (t)ȡ[ (t))ȡˆ (t)[21ıY.T= ρ− Γ+ −ρΓ+ − is satisfied. The terms constituting the above equation are expressed as (t)ȡȡ(t) (t)ȡ ˆ~- = ; π−π= =π ˆ~ȡ(t) ;. ˆπ=(t)ȡ. ; )t(ˆˆ)t(ˆ)t( )t(~ρ−π=ρ−ρ=ρ (34) Substituting the parameters in Equation (34) into Equation (33) yields 0])t(ˆˆ[ (t)]ȡˆʌʌˆ[21ıYT= ρ−πΓ+ −−Γ+ −  (35) Then 0])t(ˆ (t)ȡˆ 21[ˆʌ)ʌˆ(21ıY. .T= ρΓ+ Γ−πΓ+−Γ+ −  (36) Modelling of Parameter and Bound Estimation Laws …………….. 447 A solution for Equation (36) can be derived if it is divided into two equations as: 0ˆʌ)ʌˆ(21ıYT=πΓ+−Γ+ −  (37) 0))t(ˆ (t)ȡˆ 21( = ρΓ+ Γ− (38) Equation (37) can also be written as; σ =πΓ+−Γ )q,q,q(q,Yˆʌ)ʌˆ(21 r rT   (39) For the proposed approach, īand its time derivative are chosen as a positive definite diagonal matrix of the form IĮe ,IeĮt Įt=Γ =Γ  (40) where I is a pxp dimensional matrix. Substitution of Equation (40) into Equa- tion (39) yields; σ =− +π )q,q,q(q,Yʌ)ʌˆ(Įe21ˆer rT Įt Įt  (41) Dividing Equation (41) by the factor t2Į eresult in the following expression. ʌĮe21)q,q,q(q,YeʌˆĮe21ˆet2Į r rTt2Įt2Įt2Į +σ = +π−  (42) Equation (42) can be arranged as ʌĮe21)q,q,q(q,Ye)ʌˆ(edtd t2Į r rTt2Į- t2Į +σ =  (43) For a given instant, YT and ı can be assumed to be constant. Integrating both sides of Equation (43) yields; Cʌe )q,q,q(q,YeĮ2-dtʌ)Įe21)q,q,q(q,Ye( )ʌˆ(et 2Į r rTt 2Į- t 2Į r rTt 2Į- t 2Į + +σ = +σ =³  (44) 448 Industrial Robotics: Theory, Modelling and Control If Equation (44) is divided by t 2eα , the result is t21 r rTt-Ce )q,q,q(q,Ye2-ˆαα+π+σα=π  (45) If the initial condition is πˆ(0)=Ǒ, the constant C becomes zero. So, the parame- ter adaptation algorithm is derived as π+σα=πα)q,q,q(q,Ye2-ˆr rTt- (46) Adaptive parameter estimation law is obtained as a solution of Equation (37). As a result of Equation (38), robust parameter estimation law (t)ȡˆ can be also obtained. Substitution of Equation (40) into Equation (38) yields; 0 (t))ˆĮe21(t)ˆ(e-Įt Įt= ρ +ρ (47) By dividing Equation (47) by the factor t2Į e, the following expression is found. 0 (t))ˆĮe21(t)ˆ(e-t 2Įt 2Į = ρ +ρ (48) If Equation (48) is arranged according to (t)ȡˆ 0 (t)))ˆ ((edtd t2Į = ρ − (49) Integrating both sides of Equation (49) yields t 2Įt 2Į Ce (t))ˆ( C (t))ˆ(e-−= ρ−= ρ (50) If ȡ)0(ȡˆ= is taken as an initial condition, the constant C is equivalent to ȡ. So, the robust parameter estimation algorithm is derived as t 2Į e (t)ˆ−ρ−=ρ (51) Since )t(ˆ )t( ρ δ −= , the control vector can be written as Modelling of Parameter and Bound Estimation Laws …………….. 449 σ+ ρ++σ − =τ−−K)]eʌ )q,q,q(q,YeĮ2)[q,q,q Y(q,t 2Į r rTĮt r r  (52) The block diagram of adaptive-robust control law is shown in Fig. 3. Figure 3. Block diagram of the adaptive-robust control law (52) (Burkan & Uzmay, 2003a) If Equation (46) and (51) are substituted in Equation (29) it will become a nega- tive semidefinite function of the form of Equation (30). So, the system (22) will be stable under the conditions assumed in the theorem. At this point, it is very important to choose the variable function Γ in order to solve the Equations (38) and (39), and there is no a certain rule for selection of Γ for this systems. We use system state parameters and mathematical insight to search for appropriate function of Γ as a solution of the first order differen- tial in Equations (38) and (39). For the second derivation, we choose variable function Γ and its derivative such that (Uzmay & Burkan, 2002). dtıYTdtıYT T eY ; e³σ =Γ³=Γ  (53) whereǱ is a pxp dimensional identity matrix. Substitution of (53) into (39) yields σ =−³σ +π³ TdtıYTdtıYYʌ)ʌˆ( eY21ˆ eT T (54) Remembering that π=πˆ~ (π is constant). Dividing Equation (54) by dtıYT e³ yields450 Industrial Robotics: Theory, Modelling and Control ıʌY21ıY eʌˆıY21ˆT TdtıYTT +³= +π− (55) Multiplying Equation (55) by the factor dtıY 21 T e³ results ʌ eY21Y e eʌˆ eY21ˆ edtıY21 T TdttıY dtıY21dtıY21 TdtıY21 T T T T T³σ +σ³³=³σ +π³ − (56) Equation (56) can be arranged as π³σ +σ³=π³− dtıY 21 T TdtıY 21dtıY 21 T T T eY21Y e)ˆ (edtd (57) Integrating both sides of Equation (57) yields dt eY21ıdtY e ˆ edtıY 21 T TdtıY 21dtıY 21 T T T³σπ +³=π³³³− (58) C e e2 ˆ edtıY 21dtıY 21dtıY 21 T T T +³π+³−=π³− (59) By dividing both sides of Equation (59) by dtıY 21 T e³, the following result is ob- tained. dtıY 21 dtıYT T Ce e2 ˆ³+π+³−=π− − (60) If the condition of πˆ(0)=Ǒ is taken as an initial condition, the constant C is equivalent to 2. Hence, the parameter adaptation law is derived as π+³−³=³+π+³−=− − − −) e e(2 2e e2ʌˆdtıY dtıY 21dtıY 21 dtıYT T T T (61) In order to drive )t(ˆρ, Equation (53) is substituted into (38) yields 0)t(ˆ eY21)t(ˆ edtıYTdtıY 21T T =ρ³σ +ρ³−− (62) By dividing dtıY 21 T e³Equation (62), the following expression is found Modelling of Parameter and Bound Estimation Laws …………….. 451 0))t(ˆ eY21)t(ˆ e(dtıY21 TdtıY21 T T = ρ³σ +ρ³− (63) Equation (63) is arranged according to 0)t(ˆ e(dtd dtıY 21 T =ρ³− (64) Integrate both side of Equation (64) yields C )t(ˆ e(dtıY 21 T −=ρ³ (65) Then dtıY 21 T eC )t(ˆ³−=ρ− (66) If ρ= ρ)0(ˆ is taken as an initial condition, the constant C will be equivalent to ǒ. Hence the bound estimation law is derived as dtıY 21 T e )t(ˆ³ρ−=ρ− (67) As a result, the adaptive-robust control law is obtained as (Uzmay & Burkan, 2002). σ+³ρ+π+³−³=τ− − −K)] e ) e e(2)[q,q,q Y(q,dtıY 21 dtıY dtıY 21 r rT T T  (68) The block diagram of adaptive-robust control law is shown in Fig. 4. Figure 4. Block diagram of the adaptive-robust control law (68)452 Industrial Robotics: Theory, Modelling and Control Theorem 2: (Burkan & Uzmay, 2006): Letǂ∈R+,³≥ α 0ıdt)Y(iT, i=1,2……p, ρi i=1,2……p be the initial estimation of the upper bounding function )t(ˆρ and it is assumed to be known initially. If the estimation of parameter ʌˆ, estimation of the upper bounding function )t(ˆρ and the additional control input į(t) are defined respectively as »»»»» ¼º ««««« ¬ª πππ + »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ++ α++ α++ α α =π³³³³³³ p21 pTpT2T2T1T1T ...... 1ıdt) Y(Į)1ıdt) Y ln((.....1 dt)Y(Į1)ıdt) Y ln((1ıdt) Y(Į)1ıdt) Y ln(( )/1(ˆ ; »»»»»»»»»» ¼º «««««««««« ¬ª +++ −=³³³ 1dtı) (Į......1dtı) (Į1dtı) (Į )(ˆ pT2T21T1 YYY t pρρρ ρ ; »»»»»»»»»» ¼º «««««««««« ¬ª +ρ+ρ+ρ =δ³³³ 1dtı) Y(Į......1dtı) Y(Į1dtı) Y(Į )t( pTp2T21T1 (69) where )(ˆ )( t t ρ δ −= . Substitute ʌˆ and į(t)into the control input (21) for the tra- jectory control of the model manipulator, then the tracking errors q~ and q~ will converge to zero. Proof: In the previous approaches, it is difficult to derive another parameter and bound estimation law because selection of appropriate variable function Ǳ and solution of the differential equation are not simple. However, the selection of theǱ and solution of the differential equation are simplified in the studies (Burkan 2005, Burkan & Uzmay, 2006) In order to simplify selection of the variable function Ǳ and simplify the solution of the differential equation, the following Lyapunov function is developed (Burkan & Uzmay, 2006). (t)ȡ~(t)ȡ~ 21q~Bq~ 21M(q)ıı21(t))ȡ~,q~,V(2 T T TΓ + + = σ (70) whereīis a pxp dimensional diagonal matrix and change in time. The time derivative of Equation (70) is written as (t)ȡ~ī(t)ȡ~(t)ȡ~īī(t)ȡ~q~Bq~(q)ı M21ıı M(q)ıV2 T T T T T      + + + + = (71) Let K2B Λ= and use the property 0 )]q 2C(q,-(q)M[T=σ σ   ,nRσ∀∈ , the time derivative of V along the system (22) is determined as Modelling of Parameter and Bound Estimation Laws …………….. 453 )(p~(t)ȡ~(t)ȡ~(t)ȡ~(t)Yı(t)Yıq~ȁKȁ q~-q~Kq~-V2 T T T T T Tt   Γ + ΓΓ + − − = ρ δ (72) Substituting Equation (24) into Equation (72) yields the following equation. 0])t(ˆ)t([ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[(t)Yı(t)Yı-2 T T T T= ρ−ρΓ −ρ+ −ρΓΓ −ρ+ρ −δ  (73) Now, let’s consider δ(t)=- )t(ˆρ, then Equation (73) is written as: 0])t(ˆ)t([ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[ (t)]ȡˆ (t)[(t)Yı(t)ȡˆYı2 T T T T= ρ−ρΓ −ρ+ −ρΓΓ −ρ+ρ −  (74) Taking (t)]ȡˆ (t)[ −ρ as a common multiplier, Equation (74) is arranged as: 0 ))]t(ˆ)t(( (t))ȡˆ (t)(ıY[(t)]ȡˆ (t)[(2 T T= ρ−ρΓ+ −ρΓΓ+ − −ρ  (75) Substituting the parameters in Equation (34) into (75) yields 0])t(ˆˆ[ (t)]ȡˆʌʌˆ[ıY2 T= ρ−πΓ+ −−ΓΓ+ −  (76) Then 0]ȡˆī (t)ȡˆī[īʌˆīʌ)ʌˆ(īīıY2 2 T= + − +− + −   (77) A a result, two different equations can be obtained from Equation (77) as fol- lows. 0ˆʌ)ʌˆ(ıY2 T=πΓ+−ΓΓ+ −  (78) 0))t(ˆ (t)ȡˆ(2= ρΓ+ ΓΓ−  (79) Equation (79) can also be written as ʌıY ˆ ˆT 1Γ+ Γ=Γ+Γ− π π (80) since π=πˆ~ ( π is a constant). Equation (80) is arranged as ʌıY )ʌˆ(dtdT 1Γ+ Γ=Γ− (81) Integration both sides of Equation (81) yields dtʌıdtYʌˆT 1³³Γ+ Γ=Γ−  (82) Then, Equation (82) is arranged as454 Industrial Robotics: Theory, Modelling and Control CʌıdtYʌˆT 1+Γ+ Γ=Γ³− (83) In Equation (83), πˆ and Ǳ are unknown and in order to derive πˆ,Ǳ must be de- fined. There is no a certain rule for definition of Γ for this systems. We use sys- tem state parameters and mathematical insight to search for appropriate func- tion of Γ as a derivation of the πˆ. For the third derivation, we choose Γ and Γ-1, such that (Burkan & Uzmay, 2006). »»»»»»» ¼º ««««««« ¬ª + α+ α+ α =Γ³³³ 1)ıdt Y(... 0... ... .....0 ...1)ıdt Y( 00 ... 0 1)ıdt Y( pT2T1T ; »»»»»»»»»»»» ¼º «««««««««««« ¬ª + α+ α+ α =Γ³³³ − 1)ıdt Y(1... 0... ... .....0 ... 1)ıdt Y(100 ... 0 1)ıdt Y(1 pT2T1T 1 (84) whereǱ and Ǳ-1 are pxp dimensional diagonal matrices. Substitution of Equa- tion (84) into Equation (83) yields »»»» ¼º «««« ¬ª + »»»»» ¼º ««««« ¬ª »»»»» ¼º ««««« ¬ª +++ +»»»»»»»»» ¼º ««««««««« ¬ª +++ = »»»»» ¼º ««««« ¬ª »»»»» ¼º ««««« ¬ª +++³³³³ ³³³ ³³³ 1....11 C....x 1)ıdtY(... 0... ... .....0 ...1)ıdtY( 00 ... 0 1)ıdtY(1)ıdtY() (Y....1)ıdtY() (Y1)ıdtY() (Y ˆ....ˆˆ x 1)ıdtY(... 0... ... .....0 ...1)ıdtY( 00 ... 0 1)ıdtY( 21 T2T1TTT2T2T1T1T 21 T2T1T p pppp pdt πππ αααασασασ πππ ααα (85) After integration, the result is Modelling of Parameter and Bound Estimation Laws …………….. 455 »»»» ¼º «««« ¬ª + »»»»» ¼º ««««« ¬ª »»»»» ¼º ««««« ¬ª +++ +»»»»» ¼º ««««« ¬ª +++ = »»»»» ¼º ««««« ¬ª »»»»» ¼º ««««« ¬ª +++ ³³³³³³ ³³³ 1....11 C....x 1)ıdtY(... 0... ... .....0 ...1)ıdtY( 00 ... 0 1)ıdtY(1))ıdtY ln((....1))ıdtY ln((1))ıdtY ln(( )/1( ˆ....ˆˆ x 1)ıdtY(... 0... ... .....0 ...1)ıdtY( 00 ... 0 1)ıdtY( 21 T2T1TT2T1T 21 T2T1T p pp p p πππ αααααα α πππ ααα (86) Multiplying both sides of Equation (86) by Ǳ-1 and taken initial condition as πˆ(0)=Ǒ, the constant C will be equivalent to zero. Hence, the parameter adap- tation law is derived as »»»»» ¼º ««««« ¬ª πππ + »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ++ α++ α++ α α =π ³³³³³³ p21 pTpT2T2T1T1T ...... 1ıdt) Y(Į)1ıdt) Y ln((.....1 dt)Y(Į1)ıdt) Y ln((1ıdt) Y(Į)1ıdt) Y ln(( )/1(ˆ (87) Adaptive parameter estimation law is obtained as a solution of Equation (83). As a result of Equation (78), robust parameter estimation law (t)ȡˆ can be also obtained. Equation (78) is arranged as 0 (t))ȡˆī (t)ȡˆī( = + − (88) If Equation (88) is arranged according to (t)ȡˆ 0 (t))ˆ dtd(- = Γρ (89) Integrating both sides of Equation (89) yields C (t)ȡˆ C (t))ȡˆ(ī-1−Γ−== (90) 456 Industrial Robotics: Theory, Modelling and Control If ȡ)0(ȡˆ= is taken as an initial condition as would be defined in Equation (90), the constant C will be equivalent to ȡ. So, the robust parameter estimation al- gorithm is derived as »»»»»»»»»» ¼º «««««««««« ¬ª +ρ+ρ+ρ −=ρΓ−= ³³³ − 1dtı) Y(Į......1dtı) Y(Į1dtı) Y(Į (t)ȡˆ pTp2T21T1 1 (91) Since )t(ˆ )t( ρ δ −= , the control vector in Equation (21) can be written as σ+ »»»»»»»»»» ¼º «««««««««« ¬ª +ρ+ρ+ρ + »»»»» ¼º ««««« ¬ª πππ + »»»»»»»»»»»»» ¼º ««««««««««««« ¬ª ++ α++ α++ α α =τ ³³³ ³³³³³³ K] 1dtı) Y(Į......1dtı) Y(Į1dtı) Y(Į ...... 1ıdt) Y(Į)1ıdt) Y ln((.....1 dt)Y(Į1)ıdt) Y ln((1ıdt) Y(Į)1ıdt) Y ln(( )/1([)q,q,q Y(q, pTp2T21T1 p21 pTpT2T2T1T1T r r (92) The resulting block diagram of the proposed adaptive-robust control law is given in Fig. 5. Figure 5. Implementation of the adaptive-robust control law (92) (Burkan & Uzmay, 2006).Modelling of Parameter and Bound Estimation Laws …………….. 457 For the fourth derivation, Γ and Γ-1 are chosen such that »»»»»»»»» ¼º ««««««««« ¬ª β+σ αβ+σ αβ+σ α =Γp pTp2 2T21 1T1 ) Y(1... 0... ... .....0 ... ) Y(100 ... 0 ) Y(1 (93) »»»»» ¼º ««««« ¬ª β+σ αβ+σ αβ+σ α =Γ− p pTp2 2T21 1T1 1 ) Y(... 0... ... .....0 ... ) Y( 00 ... 0 ) Y( Substitution of Equation (93) into Equation (83) yields 11 11 22 220 00 0T 1 TT 1 1 TT T 2 22 2 TT p pp p p T pp p10. . .(ǂYǔ)ǃˆǑ ((ǂYǔ)ǃ)(Yǔ)1... ˆǑ ((ǂYǔ)ǃ)(Yǔ)(ǂYǔ)ǃ xd t.... ............... ... ...ˆǑ ((ǂYǔ)ǃ)(Yǔ)1...(ǂYǔ)ǃªº «»+«» + ªºªº«» «»«»+ «» «»«» + =«» «»«»«» «»«»+ «» «»«»¬¼¬¼«» + «»¬¼³ (94) 11 220 1 00 1 1 0T 1 1 2 T 2 p T pp p10 ...(ǂYǔ)ǃǑ1... Ǒ(ǂYǔ)ǃ xC.... ......... ... ...Ǒ1...(ǂYǔ)ǃªº «»+«» ªºªº«» «»«»«» «»«» + ++«» «»«»«» «»«»«» ¬¼¬¼«» + «»¬¼458 Industrial Robotics: Theory, Modelling and Control After integration, the result is 2 11 11 1 2 22 2 22 20 00 0T TT 1 1 1 TT T 2 2 2 TTpp pp p T pp p10. . .(ǂYǔ)ǃ0.5ǂ(Yǔdt)ǃ(Yǔ) ˆǑ1... ˆǑ 0.5ǂ(Yǔdt)ǃ(Yǔ)(ǂYǔ)ǃ x.... ............... ... ...ˆǑ 0.5ǂ(Yǔdt)ǃ(Yǔ)1...(ǂYǔ)ǃªº «»+ª + «» ªº« «» «»+ «» «» + =«» «»«» «»«» «» + ¬¼¬«» + «»¬¼³³ ³³ ³³º » « » « » « » « »¼ (95) 11 220 1 00 1 1 0T 1 1 2 T 2 p T pp p10 ...(ǂYǔ)ǃǑ1... Ǒ(ǂYǔ)ǃ xC.... ......... ... ...Ǒ1...(ǂYǔ)ǃªº «»+«» ªºªº«» «»«»«» «»«» + +«» «»«»«» «»«»«» ¬¼ ¬¼«» + «»¬¼ Multiplying both sides of Equation (95) by Ǳ-1 and taken initial condition as πˆ(0)=Ǒ, the constant C will be equivalent to zero. Hence, the parameter adap- tation law is derived as »»»»» ¼º ««««« ¬ª πππ + »»»»»» ¼º «««««« ¬ª β+ α β+σ αβ+ α β+σ αβ+ α β+σ α =π³³³³³³ p21 pT 12 pT p p pT p2T 12 2T 2 2 2T 21T 12 1T 1 1 1T 1 ...... )dtı)Y( )ıdtY( )(0.5 )Y(.. .......... .......... ..........)dtı)Y( )ıdtY( )(0.5 )Y()dtı)Y( )ıdtY( )(0.5 )Y( ˆ (96) If ȡ)0(ȡˆ= is taken as an initial condition as would be defined in Equation (90), the constant C will be equivalent to ȡ. So, the upper bounding function is de- rived as »»»»» ¼º ««««« ¬ª ρβ+σ αρβ+σ αρβ+σ α −=ρp p pT p22 2T 211 1T 1 ) )Y(.. .......... .......... ..........) )Y() )Y( )t(ˆ (97) Modelling of Parameter and Bound Estimation Laws …………….. 459 As a result, the fourth adaptive-robust control law is derived as σ ρβ σ αρβ σ αρβ σ απππ β α β σ αβ α β σ αβ α β σ α τ K YYYdt Ydt Ydt Y pT pTTp p p pT pTT + »»»»» ¼º ««««« ¬ª +++ +»»»»» ¼º ««««« ¬ª + »»»»» ¼º ««««« ¬ª + ++ ++ + =³ ³³ ³³ ³ ] ) ) (.. .......... .......... ..........) ) () ) (...... )ı)Y( )ıdtY( )(0.5 ) (.. .......... .......... ..........)ı)Y( )ıdtY( )(0.5 ) ()ı)Y( )ıdtY( )(0.5 ) ( [)q,q,q Y(q, p p2 2 2 21 1 1 121 pT 12 T p2T 12 2T 2 2 2 21T 12 1T 1 1 1 1 r r (98) The resulting block diagram of the proposed adaptive-robust control law is given in Fig. 6. Figure 6. Implementation of the adaptive-robust control law (98) 460 Industrial Robotics: Theory, Modelling and Control Dynamic Model and Parametric Uncertainties As an illustrations, a two-link robot arm manipulators shown in Fig. 7. The ro- bot link parameters are π1=m 11c12+m 2l12+I1Ǒ2= m 2lc22+I2Ǒ3=m 2l1lc2 (99) Ǒ4=m 1lc1Ǒ5=m 2l1Ǒ6=m 2lc2 Figure 7. Two-link planar robot (Spong, 1992) With this parameterization, the dynamic model in Equation (1) can be written as Ĳ )ʌq,q Y(q, = (100) The component y ijof )q,q Y(q, are given as 1 11q y=;2 1 12 qq y + = ; )qq2 q)( sin(q)qq)(2 cos(q y212 2 2 2 1 2 13  + − + = ; y14= g ccos(q 1); y15= g ccos(q 1); y16= g ccos(q 1+q2) ; (101) y21=0; 2 1 22 qq y + = ; )q)( sin(qq) cos(q y2 1 2 1 2 23 + = ; y24=0 ;xy l2 l1lc2 lc1m2, I2 m1, I1 q1q2Modelling of Parameter and Bound Estimation Laws …………….. 461 y25=0 ; y26= g ccos(q 1+q2). )q,q,q Y(q,r r has the component r1 11q y= ; 2r r1 12 q q y + = ; )qq qq qq)( sin(q)q q)(2 cos(q yr22 r21 2r1 2 2r r1 2 13  + + − + = ; y14=gccos(q 1); y15= g ccos(q 1) ; y16= g ccos(q 1+q2) (102) y21=0; 2r r1 22 q q y + = ; )qq)( sin(q q) cos(q yr11 2 r1 2 23 + = ; y24=0 ; y25=0 ; y26= g ccos(q 1+q2). For illustrated purposes, let us assume that the parameters of the unloaded manipulator are known and the chosen values of the link parameters are given by Table 1. Using these values in Table 1, the ith component of Ǒ obtained by means of Equation (99) are given in Table 2. These parametric values also show lower and unloaded robot parameters. m 1 m 2 l 1 l 2 l c1 l c2 I 1 I 2 10 5 1 1 0.5 0.5 10/12 5/12 Table 1. Parameters of the unloaded arm (Spong, 1992) 1ʌ 2ʌ3ʌ 4ʌ 5ʌ 6ʌ 8.33 1.67 2.5 5 5 2.5 Table 2. Ǒi for the unloaded arm (Spong, 1992) If an unknown load carried by the robot is regarded as part of the second link, then the parameters m 2, lc2, and I 2 will change m 2+Ʀm2, lc2+Ʀlc2 and I 2+ƦI2, re- spectively. A controller will be designed that provides robustness in the inter-vals462 Industrial Robotics: Theory, Modelling and Control 10ǻm 02≤ ≤ ; 0.5ǻl 0c2≤ ≤ ;1215I02≤≤ (103) π0is chosen as a vector of nominal parameters and it also has the loaded arm parameters and their upper bounds. The computed values for ith component ofǑ0 are given in Table 3. π01 π02 π03 π04π05π06 13.33 8.96 8.75 5 10 8.75 Table 3. Nominal parameter vector Ǒ0 (Spong, 1992) With this choice of nominal parameter vector π0 and uncertainty range given by (103), it is an easy matter to calculate the uncertainty bound ρ as follows: ¦ =≤ π−π =π6 1i2 i 0i226.181) (~ (104) and thus 46.13 26.181 = =ρ . Since extended algorithm (20) is used, the uncer- tainty bounds for each parameter separately are shown in Table 4. The uncer- tainty bounds ρi in Table 4 are simply the difference between values given in Table 3 and Table 2 and that the value of ǒ is the Euclidean norm of the vector with components ǒi (Spong, 1992). ǒ1 ǒ2 ǒ3 ǒ4 ǒ5ǒ6 5 7.29 6. 25 0 5 6.25 Table 4. Uncertainty bound (Spong, 1992) Conclusion In the studies (Burkan, 2002; Uzmay & Burkan 2002, Burkan & Uzmay 2003 a), it is very difficult to use different variable functions for other derivation, and derivation of parameter and bound estimation laws are also not simple. How- ever, in the recent studies (Burkan, 2005; Burkan & Uzmay 2006), first of all, a new method is developed in order to derive new parameter and bound esti- mation laws based on the Lyapunov function that guarantees stability of the uncertain system and the studies (Burkan, 2002; Uzmay&Burkan, 2002; Bur- kan&Uzmay, 2003a) provides basis of this study. In this new method, deriva-Modelling of Parameter and Bound Estimation Laws …………….. 463 tion of the parameter and bound estimation laws are simplified and it is not only possible to derive a single parameter and bound estimation laws, but also it is possible to derive various parameters and bound estimation laws using variable functions. Parameters and bound estimation laws can be derived depending the variable function Γ, and if another appropriate variable function Γ is chosen, it will be possible to derive other adaptive-robust control laws. In derivation, other inte- gration techniques are also possible to use in derivation for the new parameter and bound estimation laws. πˆ and )(ˆtρ are error-derived estimation rules act as a compensators, that is, estimates the most appropriate parameters and upper bounding function to reduce tracking error. The aim of this approach is to solve for finding a control law that ensures limited tracking error, and not to determine the actual pa- rameters and upper bounding function. πˆ is considered as an adaptive com- pensator, )(ˆtρ is implemented as a robust controller and both of them are em- ployed during the control process. This has the advantages that the employed adaptive controller increases the learning, while the employed robust control- ler offers the ability to reject disturbance and ensures desired transient behav- iour. This improvement is achieved by computation of the upper bounding function. References Abdullah, C.; Dawson, D.; Dorato, P & Jamshidi, M. (1991) Survey of robot control for rigid robots, IEEE Control System Magazine , Vol 11, No. 2, 24- 30, ISSN: 1066-033X Burkan, R. (2002). New approaches in controlling robot manipulators with pa- rametric uncertainty, Ph.D. Thesis, Erciyes University, Institute of Science, Turkey. Burkan R, Uzmay ú. (2005). A model of parameter adaptive law with time varying function for robot control, Applied Mathematical Modelling, Vol. 29, 361-371, ISSN: 0307-904 X Burkan, R. (2005). Design of an adaptive control law using trigonometric func- tions for robot manipulators, Robotica , Vol.23, 93-99, ISSN:0263-5747. Burkan, R. & Uzmay, ú. (2003 a). Variable upper bounding approach for adap- tive- robust control in robot control, Journal of Intelligent & Robotic Systems , Vol.37, No.4, 427-442, ISSN:0921-0296. Burkan, R. & Uzmay, ú. (2003 b). Upper bounding estimation for robustness to the parameter uncertainty in trajectory control of robot arm, Robotics and Autonomous Systems , Vol.45 , 99-110, ISSN: 0921-8890 Burkan, R. & Uzmay, ú. (2003 c). A Comparison of Different Control Laws in Trajectory Control for a Revolute-Jointed Manipulator, Turkish Journal of 464 Industrial Robotics: Theory, Modelling and Control Engineering and Environmental Sciences , Vol.27, No.5, 315-331, ISSN:1300- Burkan, R & Uzmay, ú. (2005). Logarithmic Based Robust Approach To Para- metric Uncertainty For Control of Robot Manipulators, International Jour- nal of Robust and Nonlinear Control, Vol.15, 427-436, ISSN: 1049-8923. Burkan, R. (2006). Modelling of a logarithmic parameter adaptation law for adaptive control of mechanical manipulators, Robotica , Vol. 24, No.4, 523- 525, ISSN: 0263-5747 Burkan, R. & Uzmay, ú. (2006), Application of logarithmic–based parameter and upper bounding estimation rules to adaptive- robust control of robot manipulators, European Journal of Control , Vol. 12, No.2, 156-170, ISSN: 0947-3580. Canudas De Wit, C.; Siciliano, B. & Bastin, G. (1996). Theory of Robot Control, ISBN:3-540-76054-7 ,Springer, London Carelli, C.; Camacho, E. F. & Patino, D. (1995). A neural-network-based feed- forward adaptive controller for robots, IEEE Transactions on Systems and Cybernetics , Vol.2, 1281-1288, ISSN: 1083-4427. Colbaugh, R.; Glass, K. & Seraji, H. (1996). Adaptive tracking control of ma- nipulators: Theory and experiments, Robotics & Computer-Integrated Manufacturing, Vol.12, No.3, 209-216, ISSN: 0736-5845 Corless, M. & Leitmann, G. (1981). Continuous feedback guaranteeing uniform ultimate boundedness for uncertain dynamic systems, IEEE Transactions Automatic Control, Vol.26, 1139-1144, ISSN: 0018-9286. Craig, J. J.; Hsu, P. & Sastry, S. S. (1987). Adaptive control of robot manipula- tor,The International Journal of Robotics Research, Vol.6 ,16-28, ISSN: 0278- 3649 Dawson, D. M.; Qu, Z. & Duffie, J. (1993). Robust tracking control of robot manipulators: Theory, simulation and implementation, Robotica, Vol.11 , 201-208, ISSN:0263-5747 Egeland, O. & Godhavn, J. M. (1994). A note on Lyapunov stability for adap- tive robot control, IEEE Transactions on Automatic Control, Vol.39, No.8, 1671-1673, ISSN: 0018-9286 Jaritz, A. & Spong, M. W. (1996). An experimental comparison of robust con- trol algorithms on a direct drive manipulators, IEEE Transactions on Con- trol Systems Technology , Vol.14, No.6, 627-640, ISSN: 1063-6536 Koo, K. M. & Kim, J. H. (1994). Robust control of robot manipulators with pa- rametric uncertainty, IEEE Transactions Automatic Control, Vol. 39, No.(6, 1230-1233. ISSN: 0018-9286 Modelling of Parameter and Bound Estimation Laws …………….. 465 Kelly, R.; Carelli, R. & Ortega, R. (1989). Adaptive motion control design of ro- bot manipulators: an input output approach, International Journal of Con- trol, Vol.50, No.6, 2563-2581. ISSN: 0020-7179 Leitmann, G. (1981). On the efficiency of nonlinear control in uncertain linear system, Journal of Dynamic Systems Measurement and Control , Vol.102, 95- 102, ISSN:0022-0434. Liu, G. & Goldenberg, A. A. (1996a). Uncertainty decomposition-based robust control of robot manipulators, IEEE Transactions on Control Systems Tech- nology , Vol.4, 384-393, ISSN: 1063-6536. Liu, G. & Goldenberg, A. A. (1996b). Comparative study of robust saturation- based control of robot manipulators: Analysis and experiments, Interna- tional journal of Robotics Research, Vol.15, 474-491, ISSN: 0278-3649. Liu, G. & Goldenberg, A. A. (1997). Robust control of robot manipulators based on dynamics decomposition, IEEE Transactions on Robotics and Automation , Vol.13, 783-789, ISSN: 1552-3098. Middleton, R. H. & Goodwin, G. C. (1988). Adaptive computed torque control for rigid link manipulators, System Control Letters, Vol.10, 9-16, ISSN:0167-6911. Ortega, R. & Spong, M. W. (1989). Adaptive motion control of rigid robots: A tutorial. Automatica , Vol.23, No.6, 877-888, ISSN: 0005-1098. Sage, H. G.; De Mathelin, M. F. & Ostretag, E. (1999). Robust control of robot manipulators: A survey, International Journal of Control , Vol.72, No.16, 1498-1522, ISSN: 0020-7179 Sciavicco, L. & Siciliano, B. (1996). Modelling and Control of Robot Manipulators , The McGraw-Hill Companies, ISBN:0-07-057217-8, New York. Spong, M. W. & Ortega, R. (1990). On adaptive inverse dynamics control of rigid robots, IEEE Transactions on Automatic Control, Vol.35, No.1, 92-95, ISSN: 0018-9286. Spong, M. W. & Vidyasagar, M. (1989). Robot Dynamics and Control , Willey, New York, 1989, ISBN:0-471-50352-5. Slotine, J. J. & Li, W.(1987). On the adaptive control of robotic manipulator, The International Journal of Robotics Research, Vol.6, No.3, 49-59,ISSN:0278- Slotine, J. J. & Li, W. (1988). Adaptive manipulator control: A case study, IEEE Transactions on Automatic Control, Vol.33, No.11, 994-1003, ISSN: 0018- Spong, M. W; Ortega, R & Kelley, R. (1990). Comment on adaptive manipula- tor control: A case study, IEEE Transactions on Automatic Control, Vol.35, No.6, 761-762, ISSN: 0018-9286. Spong, M. W. (1992). On the robust control of robot manipulators, IEEE Trans- actions on Automatic Control, Vol.37, 1782-1786, ISSN: 0018-9286. 466 Industrial Robotics: Theory, Modelling and Control Uzmay, ú. & Burkan, R. (2002). Parameter estimation and upper bounding ad- aptation in adaptive-robust control approaches for trajectory control of robots, Robotica, Vol.20, 653-660, ISSN: 0263-5747 Yaz, E.( 1993). Comments on the robust control of robot manipulators, IEEE Transactions on Automatic Control, Vol.38, No.38, 511-512, ISSN: 0018-9286. Zenieh, M. & Corless, M. A. (1997). A simple robust r- α tracking controllers for uncertain fully-actuated mechanical systems, Journal of Dynamics Systems, Measurement and Control , Vol.119, 821-825, ISSN:0022-0434.46717 Soft Computing Based Mobile Manipulator Controller Design Abdessemed Foudil and Benmahammed Khier Introduction During the last decades, numerous papers have been written on how to apply neuronal networks, fuzzy (multi-valued) logic, genetic algorithms and related ideas of learning from data and embedding structured human knowledge. These concepts and associated algorithms form the field of soft computing. They have been recognized as attractive alternatives to the standard, well es- tablished hard computing (conventional) paradigms. Traditional hard comput-ing methods are often too cumbersome for today’s problems. They always re- quire a precisely stated analytical model and often a lot of computation time. Soft computing techniques which emphasize gains in understanding system behaviour in exchange for unnecessary accuracy have proved to be important practical tools for many real world problems. Because they are universal ap- proximators of any multivariate function, the neuronal networks and fuzzy logic are of particular interest for modelling highly nonlinear, unknown or partial known complex systems. Due to their strong learning and cognitive ability and good tolerance to uncertainties and imprecision, soft computing techniques have found wide applications in robotic systems control. According to Zadeh (Zadeh, 1994), the basic premises of soft computing are •The real world is pervasively imprecise and uncertain. •Precision and certainty carry a cost. And the guiding principle of soft computing, which follows from these prem- ises, is exploit tolerance for imprecision, uncertainty, and partial truth to achieve tractability, robustness, and low solution costs. Both the premises and the guiding principle differ strongly from those in clas- sical hard computing, which require precision, certainty, and rigor. However, since precision and certainty carry a cost, the soft computing approach to computation, reasoning, and decision making should exploit the tolerance for imprecision (inherent in human reasoning) when necessary. A long standing tradition in science gives more respect to theories that are quantitative, formal, and precise than those that are qualitative, informal, and approximate. Many 468 Industrial Robotics: Theory, Modelling and Control contemporary problems do not lend themselves to precise solutions such as the mobile robot coordination. Usually, learning implies acquiring knowledge about a previously unknown or partially known system. Learning from experimental data (statistical learn- ing) and fuzzy logic are the most important constituents of soft computing. In nowadays, the soft computing is considered as a discipline that includes an emerging and more or less established family of problem stating and solving methods that attempt to imitate the intelligence found in nature. Very often, the devices and algorithms that can learn from data are characterized as intel- ligent. With the increasing complexity of industrial processes, the link among ambiguity, robustness and performance of these systems has become increas- ingly evident. This may explain the dominant role of emerging intelligent sys- tems. The human mental abilities of learning, generalizing, memorizing and predicting should be the foundations of any intelligent system. The intelligent system is supposed to possess human like expertise within specific domain, adapts itself and learns to do better in changing environments and explains how it makes decisions and takes actions. It should be capable to deal with the large amount of data coming from different sensors, to plan under large uncer- tainties, to set the hierarchy of priorities, and to coordinate many different tasks simultaneously. The behaviour coordination architectures can be divided into two categories: arbitration and command fusion schemes. In arbitration, the selected dominant behaviour controls the robot until the next decision cycle, whereas the motor commands of the suppressed behaviours are completely ignored. The com- mand fusion approaches aggregate the control actions of multiple concurrently active behaviors into a consensual decision. Fuzzy rule based hierarchical ar- chitectures offer an alternative approach to robotic behaviour coordination. A set of primitive, self contained behaviours is encoded by fuzzy rule bases that map perceptions to motor commands. Reactive behaviours in isolation are in- capable of performing autonomous navigation in complex environments. However, more complex tasks can be accomplished through combination and cooperation among primitive behaviours. A composite behaviour is imple- mented as a supervisory controller that activates and deactivates the underly- ing primitive behaviours according to the current robot context and goals. A fuzzy coordination offers the advantage that behaviours are active to a certain degree, rather than being either switched on or off. The weight with which a behavior contributes to the overall decision depends on its current applicabil- ity and desirability. The goal of this chapter is to present the main role of the soft computing and the contribution it can bring in the control of the complicated systems such as robotic systems. By this, we meant only a brief overview of the subject. Soft Computing Based Mobile Manipu lator Controller Design 469 Problems and Principle of Robot Control Industrial Robotics includes mechanical systems that are highly non-linear, ill defined and subject to a variety of unknown disturbances. The control of such systems is facing challenges in order to meet the requirements that can be of different natures. A lot of effort has been devoted to capitalizing on the ad- vances in mathematical control theory resulting in several techniques ap-peared to tackle this kind of mechanical systems. The navigational planning for mobile robot is a search problem, where the robot has to plan a path from a given initial position to goal position. The robot must move without hitting an obstacle in its environment. So, the obstacles in the robot workspace act as constraints to the navigational planning problem. A genetic algorithm can solve the problem, by choosing an appropriate fitness function that takes into account the distance of the planned path segments from the obstacles, the length of the planned path and the linearity of the path as practicable. Fur- thermore, the learning process is constrained by the three mutually compro- mising constraints complexity of the task, number of training examples and prior knowledge. Optimisation of one or two of these objectives often results in a sacrifice of the third. Learning a complex behaviour in an unstructured environment without prior knowledge requires a long exploration and train- ing phase and therefore creates a serious problem to robotic applications. To- day’s robots are faced with imprecise, uncertain, and randomly changing envi-ronments. The desire to deal with these environments leads to the basic premises and the guiding principles of soft computing. Robot control is predominately motion control using classical servomechanism control theory. Due to the nonlinearity of the manipulator motion, a wide vari- ety of control schemes have been derived. Classical schemes include computed torque, resolved motion, PID decoupled model control, reference adaptive and resolved motion adaptive control (Whitney, 1969), (Begczy, 1974), (Dubowsky & DesForges, 1979). These schemes can be very complicated and require inten- sive computer resources. For instance, the computer torque technique uses the Lagrange–Euler or Newton–Euler equations of motion of the manipulator to determine the required torque to servo each joint in real time to track the de- sired trajectory as closely as possible. However, since there are always uncer- tainties in the robot dynamic model, the ideal error response cannot be achieved and the performance could be well degraded. This problem led peo- ple to using adaptive control approaches to solve these problems and rela-tively good results were obtained (Craig et al, 1987), (Spong & Ortega, 1988). The problem is complicated if we think to enlarge the workspace of the ma- nipulator by mounting over it a mobile platform, resulting on a new system called a mobile manipulator. Researches to investigate the capabilities of mo- bile platforms with onboard manipulators are devoting considerable effort to come up with solutions to this complicated system (Yamamoto & Yun, 1994). 470 Industrial Robotics: Theory, Modelling and Control Now, since the first control a plication of Mamdani (Mamdani & Assilian 1974) and his team, a lot of efforts have been devoted to capitalizing on the advances of fuzzy logic theory. Many fuzzy control approaches appeared. In fact, fuzzy logic provides tools that are of potential interest to control systems. Fuzzy con- trollers are a convenient choice when an analytical model of the system to be controlled cannot be obtained. They have shown a good degree of robustness in face of large variability and uncertainty in the parameters, and they lend themselves to efficient implementations, including hardware solutions. These characteristics fit well the needs to precision motion control of mobile manipu- lators. However, the main difficulty in designing a fuzzy logic controller is the efficient formul tion of the fuzzy If-Then rules. It is well known that it is easy to produce the antecedent parts of a fuzzy control rules, but it is very difficult to produce the consequent parts without expert knowledge. The derivation of such rules is often based on the e perience of skilled operators, or using heuris- tic thinking (Zadeh, L.A.1973), (Mamdani, E.H. 1974). In recent years and due to the availability of powerful computer platform, the theory of evolutionary algorithms starts to become popular to the problem of parameter optimization. Genetic algorithm as one approach to the implementation of evolutionary al- gorithms was used by Karr, (Karr, C.L. (1991) to generating the rules of the cart-pole balancing fuzzy logic controller. In this work, we investigate the problem of the motion control of a mobile manipulator using fuzzy control schemes. The m chanical system is split into two subsystems where the mobile platform and the manipulator constitute the parts. Appropriate fuzzy control- lers are used to control each of these two subsystems. A genetic algorithm generates the rules of the fuzzy controllers letting the system turning around an optimal solution. The motion of the platform and that of the manipulator are coordinated by a Neural like network, wich is a sort of adaptive graph of operations, designed from the kinematics model of the system. A learning paradigm is used to produce the required reference variables for each of the mobile platform and the robot manipulator for an overall coordinate behav- iour. Robot Model 3.1 A mobile manipulator overview architecture A mobile manipulator system is a robotic manipulator mounted on mobile platform.This combination allows manipulation tasks over unlimited working space. However, since the platform and the manipulator have independent movement, a particular point in the workspace may be reached in multiple configurations, resulting in a system with redundancy (Lee, J. K., & Cho, H. S. Soft Computing Based Mobile Manipu lator Controller Design 471 1997). This can be helpful when it is desirable to perform tasks in a cluttered environment, or to optimally configure the system (Brock, O., Khatib, O. & Viji, S. 2002). Our o jective in this work, is to devise a controller for each of the mobile base and the manipulator separately, then we implement a sort of adaptive graph of operations to generate trajectory in the joint space. The net- work provides reference output values of the desired motion to the mobile manipulator system. The mechanical system is made up of the non-holonomic platform upon which is mounted a robot manipulator with 3 rotational de- grees of freedom as it is shown in Figure 1. The accomplishment of the task is the result of the perm nent movement of the two structures for which the suc-cess is based on the satisfaction of the tracking error. If we consider Figure 1 where the four principal coordinate frames are shown: World frame WO, plat- form frame PO, manipulator base frame BO, and the end effector frame EO. Then, the manipulator’s end effector position/orientation with respect to WO is given by: WW P B EP B ETT T T= Such that the matrix W PT is determined by a certain A(q) matrix,W BT is a fixed matrix and B ETis determined by the joint variable vector 12mT nm ǉǉ ,ǉ,...,ǉ ,n ªº=¬¼ represents the degree of freedom of the arm manipulator. Figure 1. Mobile manipulator configuration 472 Industrial Robotics: Theory, Modelling and Control The vector of position of the end effector W Exis a non-linear function of the configuration vector , 3TTT n m qp ,ǉ ,(n n ). =∈ ℜ = +ªº¬¼ The joint coordinates of the manipulator are [ ]123Tǉǉ ,ǉ,ǉ = (thus 3m(n )= . Therefore the generalized coordinates of the mechanical system are: 12 6 123TT BB B q (q ,q ,....,q ) (x ,y ,z , ǉ,ǉ,ǉ) == Hence, the generalized space dimension of the mechanical system is equal to ǌ=6. Now, for a given mechanical configuration system q, its structure imposes to its end effector ǈ position and orientation constraints. In our case, only the end effector position is considered. Therefore, the number of constraints is r duced to ǔ=3. On the other hand, we can observe that the system is non holonomic, and taking into account the constraint of the non-holonomy of the mobile platform, we can deduce the order of redundancy, which is equal to (ǌǔ-1) = 2 . This redundancy helps increasing the manipulator dexterity, pre- vents the arm from singular configurations, and the let the system away from obstacles while completing a given task. On the other hand, the control of such mechanisms becomes much harder. If we refer to Figure 1 and following the D-H parameterization, the outputs of the neural like network are given by equations (1), which designates the Carte- sian coordinates of the task variable E, with respect to the world frame { W}. In a closed form this can be written as EX( t ) F ( q(t)); = where Frepresents the direct kinematic mapping from the joint space to the task space and WWW T E EEEX (t) (x ,x ,x ) = . [] []22 32 3 22 32 3 12 2 3 2 3cos( ). cos( ) cos( ) sin( ) . cos( ) cos( ) sin( ) sin( )=+ + + =+ + + =+ − − +WW EB WW EB WW EBxx l l yy l l zz l l lθθ θ θ θθ θ θ θθ θ (1) Such that, 1=+θθ ϕ (2) Where ϕ is the heading angle of the mobile platform, and 12 3, and ll l are the lengths of the three links composing the manipulator arm. ,, ,WW W BB Bxyz are the coordinates of the point B located in the front of the mobile platform with re- spect to the world frame {}W. In the sequel, we consider W Bz equals zero for Soft Computing Based Mobile Manipu lator Controller Design 473 simplicity. The goal is to find the generalized trajectory q(t) for a given task space trajectory EX( t ) such that F(q(t)) = XE(t) is satisfied. Since the system is redundant, the number of solutions is expected to be infinite. To realize a gen- eralized task of the mechanical system, one has to derive the set of the λ gener- alized coordinates. In this context, an approach is suggested to investigate and solve this problem when we make a complete motion of the end effector re- sulting from a combined operation of the two subsystems that work in a coor- dinate manner. 3.2 The dynamic model of the manipulator Two main approaches are used by most researchers to systematically derive the dynamic model of a manipulator, the Lagrange-Euler and the Newton- Euler formulations. The dynamic equations of motion are highly nonlinear and consist of inertia loading, coupling reaction forces between joints and gravity loading effects. For an n-link rigid manipulator the vector dynamic equation is given by: () (,) (,) ()MB F Gτ θθ θθθ θθ θ=+ ++    (3) wherenRθ∈ is a vector of joint displacements, nRτ∈ is a vector of applied joint torques, () :nn nMR Rθ×→ is a symmetric positive definite manipulator in- ertia matrix, (,) :nnn nB RRR R θθ ××→ is a vector of centrifugal and Coriolis terms, (,) :nn nFR R Rθθ ×→ is a vector of frictional torques, and () :nnGRRθ → is a vector of gravitational torques. The control of the robot manipulator is es- pecially challenging due to the generic high nonlinearity existing in its dy- namic model. Although the equations of motion (3) are complex and nonlinear for all but simple robots, they have several fundamental properties, which can be exploited to facilitate control system design. 1.Property 1 . The inertia matrix ()Mθ is symmetric, positive definite and both ()Mθ and 1()M θ− are uniformly bounded as a function θ of nR. 2.Property 2 . There is an independent control input for each degree of free- dom 3.Property 3 . The Lagrange-Euler equations for the robot are linear in the parameters. Most feedback control laws, where a PD or PID controllers are used, are based on simplified dynamic equations. However the approach works well only at slow speeds of movement. At high speeds of movement the Coriolis and cen-474 Industrial Robotics: Theory, Modelling and Control trifugal forces are major components of the dynamic equations and conse- quently the error can not corrected. A lot of effort has been devoted to capital- izing on the advances in mathematical control theory resulting in several tech- niques appeared to tackle this kind of mechanical systems. May be the most famous and which is considered, as the basic approach becoming very popular is the model based computed torque method. However, since there are always uncertainties in the robot dynamic model and the disturbances possibly aris- ing from the actual running of the actuator or some other causes, the ideal er- ror response cannot be achieved and the performance could be well degraded. Now, since the reliability of the PID controller has been field proven besides the application of fuzzy logic theory to process control, we propose in the next section a combination of the two to make a robust controller for robot manipu- lators. 3.3 The Kinematic model of the mobile platform In this section, a kinematic description of a mobile robot is given. The vehicle has two driving wheels at the rear corners and two passive supporting wheels at the front corners. Two DC motors independently drive the two rear wheels. The vehicle presents however two constraints: It is non-holonomic, which means that it must move in the direction of the axis of symmetry, i.e. tan 0AAyx φ −= (4) φ is the heading angle of the vehicle from the X-axis of the world coordinates as it is depicted in Figure 2. Figure 2. Mobile robot schematic Soft Computing Based Mobile Manipu lator Controller Design 475 Writing the classical relationships between the velocity point O, and those of points Ol and Or, we can easily determine the linear velocity ovG, and the instan- taneous angular velocity ωG of the mobile robot: oo r rvv o o ω =+ ∧G GG G (5) oo l lvvo o ω =+ ∧G GG G (6) ˆ.k ωφ=G (7) ˆk is the unit vector along the ZA axis; and olvG and orvG are the linear velocities of the mobile robot points lO and rO respectively. When projecting expres- sions (5) and (6) on the X-axis and the Z-axis, we get the expressions of ov and φ as follows: ()2or lrv ωω=+ (8) ()2rlr Rφ ωω =− (9) r and R are respectively the radius of the wheels and the width of the vehicle as it is shown in Figure 3. It has been proven by Samsung and Abderrahim (Samsung, C. & Abderrahim, K.A. 1990), that the vehicle converges better to its reference when controlling a point located in front of the rear wheel axis. Figure 3. Geometric characteristic of the mobile robot d 2r 2ROB476 Industrial Robotics: Theory, Modelling and Control In this paper point B, as it is obvious from Figure 3, which is located at a dis- tance d from point O,has been chosen to be the position control of the vehicle such that: .cos =+Boxx d φ (10) .sin =+Boyy d φ (11) where: (1 ) ( ) . c o s ( )2ooxt xt DφφΔ+= + Δ + (12) (1 ) ( ) . s i n ( )2ooyt yt DφφΔ+= + Δ + (13) Such that: ()2rlrDq qΔ= Δ+ Δ (14) ()2rlrqqRφΔ= Δ − Δ (15) Where, (, )ooxy and (, )BBxydenote the coordinates of points O and A respec- tively, whereas rqΔandlqΔ are the angular steps of the right and left wheels respectively. Robot Control The control strategy combines the mobile base behaviour and the manipulator behaviour to produce an integrated system that performs a coordinated mo- tion and manipulation. We propose in this section the two layer robot control- ler and the genetic algorithm to determine the solution that gives the optimum rule base for a precompensator which is associated with the PID controller (Abdessemed, F. & Benmahammed, K. 2001). 4.1 The two layer robot controller design Control inputs to the joints are composed of both feedback PID control and precompensator sub-systems components, (Fig. 4). The output of the precom-Soft Computing Based Mobile Manipu lator Controller Design 477 pensator is considered as a new reference input to the PID-plant system. The introduction of the precompensator is justified by the fact that when the sys- tem evolves toward an abnormal mode, it is necessary to anticipate this evolu- tion rather than to wait to arrive to this mode in order to avoid its conse- quences especially if it is dangerous. The dynamics of the precompensator-PID controller is explained as follows: The two inputs to the PID controller are '()iek and ()ek; Where: '() () ()c ii iek k k θθ=− (16) d ii () () ()iek k k =θ −θ ; i=1,2 ,3 refer to the ith link. (17) Note that the desired angular position is not directly compared to the meas- ured one, but passes first through the precompensator to be transformed to a new reference angular value for the PID-plant system. Thus, one writes: where: 1,2 3 () () () ; cd ii i i a n dkk m kθθ= =+ (18) mi = F i (ei , Δei);i=1,2 and 3. (19) e(k) and Δe(k) are inputs to the map F, and mi(k) is the output of the i-th joint; such that: 1, 2 3 () () () ; d i i i i andek k k θθ= =− (20) 1,2 3 () () ( 1 ) ; ii i i a n dek ek ek= Δ= − − (21) 478 Industrial Robotics: Theory, Modelling and Control Figure 4. Diagram simulation of one-link robot control 4.1.1 The PID controller parameters determination As a first attempt to regulate the robot manipulator, we consider the propor- tional-integral-derivative (PID) control law given by () () ()PDIKet K et K etd t τ=++ ³ (22) Where ()det θθ=− and dθand θ are the desired reference and the measured trajectories respectively. The required controller parameters are found based on simplified dynamic equations; i.e, the manipulator is supposed evolving at slow speeds of movement. Consequently, the Coriolis and centrifugal forces are of the dynamic equations are neglected, thus ()Mτθ θ= (23) Considering equations (22) and (23), the following transfer function is ob- tained: 2 32iD i P i I i d ii D i P i I iks ks k Js k s k s kθ θ++=++ + (24) Soft Computing Based Mobile Manipu lator Controller Design 479 Thus, the characteristic equation is written as: 32() 0Di P i Ii ii ikk Kss s sJJ JΔ= + + + = (25) Ji is taken to be the fixed term of the Jii element of the inertial matrix J. In ro- botic control, the gains are typically chosen so that the two poles are double and real negative. This gives a damping coefficient of one and by consequence a fast response without oscillations. The remaining pole is then placed on the real axis far away from the first two. Thus: Δ(s)=(s+ β)2(s+n β). (26) The desired gains are given by the following relationships: 2 3(2 1) , (2 ) ,Pi i Di i Ii ikm n km n km nβ β β=+ =+ = (27) with: β>0, n>1 . The choice of β depends on the sampling frequency as well as to possible saturation effects. 4.1.2 The precompensator design The precompensator is a fuzzy controller. Its main goal is to enter into action whenever it is needed to reinforce the conventional controller to provide the necessary commands that allow the end effector to track the desired trajectory with minimum error. A fuzzy controller is a system, which use a rule-based expert in the form of If Then statements. The input state with respect to a cer- tain universe of discourse constitutes the premise of the rule, whereas the out- put state constitutes the consequence of the rule. We can distinguish among the steps of the rule treatment, the following procedures: Fuzzification ,Fuzzy inference and Defuzzification. The main difficulty in designing a fuzzy logic con- troller is the efficient formulation of the fuzzy If-Then rules. It is well known that it is easy to produce the antecedent parts of a fuzzy control rules, but it is very difficult to produce the consequent parts without expert knowledge. In this work, the fuzzy rule base of the precompensator designed is found by us- ing a genetic algorithm that search for the solution that gives the optimum rule base for the precompensator. If we assume that the error and its derivative are partitioned into Kand Lsubsets then, the the number of possible combinations isLxK, which represent the number of rules per output. A single rule is de- fined as: 480 Industrial Robotics: Theory, Modelling and Control Rule R ij: if e is e iAandΔe is e jAΔthen m ij is m pA i=1, 2, ... 7; j=1, 2, ..., 7; p=1, 2, ..., 7. Rijis the label of he fuzzy if-then rule, e iAande jAΔare fuzzy subsets on the in- terval [-1, 1] , and m pAis the consequent fuzzy subset. The aim is to sort out the appropriate optimised rules adequate for the system by employing an evolving genetic algorithm. The system being evolved is encoded into a long valued string called a chromosome. Initially a random population of these strings is generated. Each string is then evaluated according to a given per- formance criterion and assigned a fitness score. The strings with the best score are used in the reproduction phase to give the next generation. Here, the ge- netic algorithm is presented as a seven-tuple entity and is abstracted in the fol- lowing encapsulated form: GA={M(t), l, D, ΦF, sel, pcross, pmut } (28) where: -M(t) = {m 0, ... ,m 6}l encoding chromosome (-1 ≤ mi∈ℜ≤ 1). -l∈ℵ length of chromosome. -D∈ℵ population size. -ΦF : M→ℜ fitness function. -sel : CromD→ Crom parent selection operation -pcross :Crom2→ Crom2crossover operation. -pmut : Crom → Crom mutation operation. Each individual chromosome represents a complete rule base solution formu- lated as a set M of the generated KxL fuzzy if-then rules such that: Mi={j im | i=1, ..., D; j=1, ..., l} (29) The set of all the individuals represents a population. If we denote by P(t) a population at a time t, then we can write: { }12( ) ( ), ( ), ... , ( )DPt M t M t M t= (30) Wherej im∈Sm∈ℜ, are the j-th consequent parts of the fuzzy rules of the i-th individual. It takes its value from the set Sm={-1, -0.66, -0.33, 0.0, 0.33, 0.66, 1} . These values correspond to the projection of the peaks of the membership functions on the normalized universe of discourse of the action. Soft Computing Based Mobile Manipu lator Controller Design 481 4.2 Mobile platform fuzzy control design If we consider the vehicle moving in a free obstacle environment, then the op- timal trajectory from its current position to its end configuration is naturally a line joining these two extreme points as it is shown for instance by Figure 5, where θ is the angle between the symmetric axis of robot and the line that joins the control point of the robot to its final point. Figure 5. Example of situation " Reaching a point " If we link the points with segments, then the goal is to control the driving point A of the autonomous robot with respect to these segments and to come the closest possible to the end point. The distance ρ becomes zero when the vehicle stabilizes at its final configuration. Figure 6 gives a schematic block diagram of this architecture. From this figure one can notice that the inputs to the fuzzy controller are ρ and θ, and its output is the steering angle γ. (Abdes- semed, F. & Benmahammed, K. 2004) Figure 6. Block diagram of the controlled system The best fuzzy system is implemented with five and eight triangular member- ship functions for the controller input variable ρ and θ respectively. The sec- ond step in designing an FLC is the fuzzy inference mechanism. For instance, the knowledge base of the system consists of rules in the form: ,,AAxy φγ θρ Calculation ofρ and θFuzzy Logic Controller Odometry Robot482 Industrial Robotics: Theory, Modelling and Control Rule R ij: IF ρis S AND θ is NM THEN γ is n p i=1, 2, ... N; j=1, 2, ..., K; p=1, 2, ..., L. Such that: γ(k)=F[ ρ(k),θ(k)] (31) ρ(k) and θ(k) are inputs to the map F, and the output γ(k) denotes a numerical value within the interval [-90°, +90°] , characterizing the relative variation in the direction that should be taken by the vehicle to reach the final point. The rules could be defined by using the human-like description of the vehicle's movement behaviour. But, this approximate human reasoning may lead to cer- tain unsatisfactory rules. Furthermore, the global behaviour of the vehicle may result from the combination of several basic behaviours for instance, the trajec- tory tracking, the vehicle speed, and the obstacle avoidance. As a matter of fact, it is not obvious to define the respective rules. Therefore, and following the same approach described in the last section, we propose an evolutionary algorithm as an efficient solution for the extraction of the consequent part of the rules. A (μ+λ)-evolutionary programming is described by an octuple entity defined by the following format: EP={I(t), L, μ,λ, sel, pmut, f, g} (32) For which the components are defined as follows: -I= [a 1, a2, . . . , a 2L] Encoding chromosome -2L∈ℵ Length of chromosome -μ∈ℵ Population size -λ∈ℵ Number of offspring = μ -pmut: I → I mutation operator -f:ℜ L →ℜ fitness function -g:ℜ L→ℜ set of constraints The design of the EP is based mainly on three mechanisms: •The representation of individuals, •Implication of the variation operators, •The generation procedure. Soft Computing Based Mobile Manipu lator Controller Design 483 Each individual chromosome represents a complete rule base solution. The components:11 2 2( , , . . . , )LL am am a m== = determine the consequent part of the fuzzy rules and the remaining components, 11 2 2 2( , , . . . , )LL L Laa a σσ σ++== = con- tain the standard deviation, which controls the mutation process. A complete string of chromosome could be written in the following way: L L LL a aaa aa2 2+ 1 21 ... ...+ , representing one individual. The set of all the individu- als represent a population. If we denote by P(k) a population at a time k, then we can write: 1...() ()i iPk I k μ==* with {}L ji jiaI2,...,1, 1,...,i,= = =μ (33) Where Ii designates the i-th individual in which the components aj describe the consequent parts of the rules and the standard deviations. In this application, we have rather chosen the floating point encoding instead of the binary code. The algorithm seeks many local optima and increases the likelihood of finding the global optimum, representing the problem goal. Motion Control of a Mobile Manipulator The control strategy combines the mobile base behavior and the manipulator behavior to produce an integrated system that performs a coordinated motion and manipulation. If we refer to the arm manipulator by agent1 and the mobile platform by agent2 , then the architecture shown by Figure 7 illustrates the ac- tions on the environment by the two defined agents. Figure 7. Configuration of the coordinated motion and manipulation of the robotic system architecture Action percepti- onActionArm Reflex Taskpercepti-Ve- hicleReflex484 Industrial Robotics: Theory, Modelling and Control To provide a solution to the mobile manipulation motion, we have arranged the direct geometric model equations (1) into a sort of adaptive graph of opera- tion made up of three layers, and which we have called a neural-like-network (Fig. 8). Each layer has a number of transfer functions each of which is defined by the expressions given by equations (34). This neural-like-network is the ker- nel of our proposal; it is very interesting and uncommon in robot trajectory generation (F. Abdessemed, et al. 2006). In this case, the two mechanical stru tures are considered as a unique entity. This arrangement will facilitate the implementation of the back propagation algorithm as a learning rule to adapt the weights so that the output values of the neural-like-network come close to the desired reference values describing the task space trajectory. The accom- plishment of the task is the result of the permanent movement of the two structures for which the success is based on the satisfaction of the tracking er- ror. Figure.8 illustrates the model architecture of this combined structure. For convenience we define x31,x32,x33as the outputs of the network, and which designates the Cartesian coordinates of the task variable WW EEE:x ,y and W Ez respectively. Where: 11 11 11 11 12 2 22 12 22 2 1 13 12 13 12 14 13 3 33 14 13 33 3 1 21 11 21 11 22 12 14 22 3 14 2 12 23 13 23 2 13 24 14(, ) c o s ( ) (, ) c o s ( ) () c o s () (, , ) ( ) () s i n ( c o s () ) (, ) c o s () () s i n () ()− −== == == == + == == + ==fw x w fw x w fx x x fx w x x w fx x x fxx x l x l x fx x l xfxθθ θθ θθ 24 3 14 31 11 22 31 11 22 1 32 21 22 32 21 22 2 33 23 24 33 1 23 24sin( ) (, ) . (, ) . (, )== == + == + == −−B Bxl x fxx x x x b x fx x x x x b y fx x x lx x (34) Soft Computing Based Mobile Manipu lator Controller Design 485 Figure 8. The adaptive graph of operations For convenience we define ijx as the outputs of the network, and which 31 32 33x, x, x are the outputs of the network, and wich designates the Cartesian coordinates of the task variable WW W EE EE.( x , y z ). Let q(k) be the input vector, such that 23 () [, , , , ]= qT BB kx y θθ θ and mW EX the measured output vector such thatW mWmWm W T EE E EX( k ) [x,y ,z] , = , and the weighting vector Wsuch that [ ]11 22 33TW( k ) w, w , w . = If we set the criterion pEbe the tracking error given by equation (35), then the control objective is to design a control law, which guar- anties: Epto go zero when k goes to infinity ,, k is the running time . ()(3) 2 222 33 1 1 3 2 2 3 3 3 1() ( ) ()N pk k kEx r x r x r x r =ªº =− = − + − + −¬¼ ¦ (35) Where 123d W T dWdWd W T EE E EX ( r , r , r ) (x ,y ,z ),== represent the desired operational coor- dinates and 31 32 33m W T mWmWm W T EE E EX ( x, x, x) (x ,y ,z)== the operational meas- ured coordinates in the world frame. The effect of adjusting the weighting vec- torWto the error Epis determined by the ordered derivatives pE/W ( k )+∂∂ (Werbos, 1974). Now, we apply the back-propagation learning rule to generate the appropriate parameter-weighting vector W(k) (Rumelhart et al, 1986). Once determined, the weights are used to update the input vector q. The elements of this vector will serve as inputs to the low level controllers of the two agents as 486 Industrial Robotics: Theory, Modelling and Control illustrated by the block diagram of Fig. 9. The reference states of the plant at time k+1 are functions of the reference states at time k and the computed weights at time k+1, and can be expressed symbolically as 11 q( k ) ƹ(q(k),W(k )) += + (36) Figure 9. Configuration of the controlled system including the adaptive graph of op- erations Back-Propagation Learning Rule 6.1 Output Layer The error signal for the j-th output node can be calculated directly: ip ip ixE xE ,3 ,3,3∂∂=∂∂=+ ε (37) Therefore (d e3 12x - x ) ε=31 ,d 32 e 322(y x ) ε=− ,d 33 e 332(z x ) ε=−Soft Computing Based Mobile Manipu lator Controller Design 487 6.2 Internal Layers The error signals of these internal nodes at the j-th position are calculated us- ing the following equation ¦+ =+ ++ + ∂∂×∂∂=∂∂=)1( 1 ,,1 ,1 ,,lN m ilml mlp ilp ilxf xE xEε (38) ¦+ =+ +∂∂=)1( 1 ,,1 ,1 ,lN m ilml ml ilxfε ε(39) Such that: 1Ll0 −≤≤ ¦ =∂∂ ==2 . ,2,3 ,3 .2,1,2l m jxmf m jjε ε (40) Therefore the error signals of the nodes at the internal layer are as follows: 2,22,3 1,2 x.εε= ,1,22,3 1,11,3 2,2 . . x xε εε + = ,33 3,2 ε ε −= ,3,3 4,2 ε ε −= 6.3 Input Layer The first layer contains four neurons arranged in the way presented by Figure The general form for the error signal is given by the following equation: ¦ ==4 1 ,1,2 ,2 ,1 m im m ixf ∂∂ε ε (41) Explicitly the error signals are found to be , ,, , ,.11 11 21 3 , 1 222 11x x 1xεε ε=− + − (42) x11l. 2 2,13,1 2 2,2 2,1−− −= ε ε ε (43) Error Signal of layer l Error Signal of layer l+1 488 Industrial Robotics: Theory, Modelling and Control ) cos(.4,1 3,1 2 2,3 3,1 ε εε + = x l (44) 1,4 3 2,4 1,4 2,2 1,4 .cos( ) - sin( ) lx x εε εªº=¬¼ (45) 6.4 Weight adjustment To adjust the weights we make use of the following known equation: ()() ( )()l ijp ll ij ij l wk ijEwk 1 wkwk∂μ∂+= − (46) Where ,, , ,pp li li li liEE f f wx w wε++ +∂∂ ∂∂==∂∂ ∂ ∂ (47) Therefore the weights are updated according to the following resulting equa- tions: 11 11 1,1 11(1 ) ( ) . . s i n ( . )wk wk w ηεθ θ += + (48) 22 22 1,2 2 22 2( 1) ( ) . sin( )+= + wk wk w ηεθ θ (49) 33 33 3 1,4(1 ) ( )+= − wk wk ηθε (50) 11 3 , 1(1 ) ( )+= −B bk bk x ηε (51) 22 3 , 2(1 ) ( )+= −B bk bk y ηε (52) Where, the two last equations represent the updates of the biases b1 and b2. Nevertheless, the steepest descent algorithm is slower for on-line applications. For that reason, it is rather advisable to use the Levenberg-Marquardt algo- rithm, which has proved to be an effective way to accelerate the convergence rate. Its principal advantage is that it uses information about the first and sec- ond derivatives and does not need to invert the Hessian matrix. -1 1 -+ªº =+¬¼TT kkx xJ J I J μ ε (53) Soft Computing Based Mobile Manipu lator Controller Design 489 The weights are updated on each iteration by the following found expressions: 11 11 11 1,1 2 11 22 22 22 1,2 2 22 33 33 33 1,4 2 33 44 11 3 , 1 2 44 55 22 3 , 2 2 55(1 ) ( ) (1 ) ( ) (1 ) ( ) (1 ) ( ) (1 ) ( )+= −+ += −+ += −+ += −+ += −+jwk wkj jwk wkj jwk wkj jbk bkj jbk bkjεμ εμ εμ εμ εμ (54) Where 11 1 11 1 22 2 22 2 33 3 44 55B Bj(ǉǗ )sin(w (ǉǗ )) jǉsin(wǉ) jǉ jxjy=− + + =− = = = (55) Where, Iis the identity matrix. At this end stage, we give the reference state variables at time k+1and which are represented by the following expressions: 11 22 2 2 33 3 3 1 1 2(1 ) (1 ) ( ) (1 ) (1 ) ( ) (1 ) (1 ) ( ) (1 ) (1 ) ( ) (1 ) (1 ) ( )+= + += + += + =− += + += +BB BBkw kk kw k k kw k k xkb k x k yk b k ykθθ θθ θθ θθ ϕ (56) 490 Industrial Robotics: Theory, Modelling and Control Simulation Results Simulation examples are carried out in order to evaluate the developed ap- proach. It is desirable to move the end effector from its initial position 1P(1, 1, 0.2) to its final position2P(5,5,0.5) , by tracking instantaneously a linear speci- fied trajectory of the end effector generated by a uniform Cartesian movement. Neural-like-network learns the desired values presented and adjusts the weights appropriately in order to present to the system the corresponding ref- erence state variables. The results of the simulation are shown in Figures 12 to 15 and indicate how successfully the Cartesian coordinates of the endeffector track their corresponding reference values very closely. We notice that the small departures from the reference trajectories are due to the cumulated tol- erable errors from the learning process. The learning algorithm was run by us- ing a learning rate Ǎ=0.05 for a laps of time not exceeding real time control. All the weights have been initialised to the value of one. At each step, the learning rate is updated depending on the behaviour obtained. If the overall error is improved, then the learning rate is increased by the value Ǎ=Ǎ*Ǎ_inc; other- wise, it is deceased by the value Ǎ=Ǎ*Ǎ_dec, knowing that Ǎ_inc andǍ_dec take the values of 1.05, and 0.95 respectively. Figures 16 to 19 show the plots of the manipulator angular values as well as the orientation of the mobile platform, and Figure 20 clearly shows the trajectories of the end effector and the mobile platform in the xyz space. Figure 21 depicts a 3D perspective of the simulation environment.Soft Computing Based Mobile Manipu lator Controller Design 491 Figure 12. Desired and measured x-trajectory plots and the error resulted Figure 13. Desired and measured y-trajectory plots and the error resulted 492 Industrial Robotics: Theory, Modelling and Control Figure 14. Desired and measured z-trajectory plots and the error resulted. Figure 15. X-Y Plots of the end-effector an d the mobile platform trajectoriesSoft Computing Based Mobile Manipu lator Controller Design 493 Figure 16. Angular trajectory θ1 Figure 17. Angular trajectory θ2494 Industrial Robotics: Theory, Modelling and Control Figure 18. Angular trajectory θ3 Figure 19. Angular trajectory ϕSoft Computing Based Mobile Manipu lator Controller Design 495 Figure 20. X-Y-Z plots of the end-effector and the mobile platform trajectories Figure 21. A 3D perspective of the simulation environment 496 Industrial Robotics: Theory, Modelling and Control Conclusion Soft computing is an emerging field that consisting of complementary ele- ments of fuzzy logic, neural computing, evolutionary algorithms, and machine reasoning. In this paper we propose the use of a back propagation to train a neural-like-network to coordinate the motion of a robotic manipulator with the motion of the mo-bile platform over which a robot manipulator is mounted. The network pr vides reference output values of the desired motion to the mobile manipulator system. The parameter weighting vector determined is used to compute inputs to the platform and to the manipulator so that the end-effector trajectory is tracked with minimum error. Robot manipulator and platform control is pre- dominately motion control. The mobile platform is considered as a “macro- mechanism” with coarse, slow dynamic response, and the arm is a fast and ac- curate “mini-device. For this reason we consider the kinematics model for the mobile platform and the dynamic model for the robot manipulator. Fuzzy con- trollers are used as means to control each of the two subsystems separately; and the overall system demonstrates very good control characteristics. Soft Computing Based Mobile Manipu lator Controller Design 497 References Abdessemed, F. & Benmahammed, K. (2001). A Two-layer robot controller de- sign using evolutionnary algorithms, Journal of Intelligent and Robotic System 30, pp. 73-94, 2001. Abdessemed, F. & Benmahammed, K. (2004). A Fuzzy-based reactive control- ler for non-holonomic mobile robot, Journal of Robotics and Autono- mous Systems 47, pp. 31-46, 2004. Bejczy, A. K., (1974). Robot Arm Dynamics and Control, Technical Memorandum 33-669 , Jet Propulsion Laboratory, Feb. 1974. Brock, O., Khatib, O. & Viji, S. (2002). Task-Consistent Obstacle Avoidance and Motion Behavior for Mobile Manipulator, In Proc. of the IEEE Int. Conf. on Robotics and Automation, 2002. Craig, J.J., Hsu, P. & Sastry, S. (1987). Adaptive Control of Mechanical Manipu- lators, The Inernational Journal of Robotics Research , pp 16-28, Vol. 6. No. 2. Suymmer 1987. Dubowsky, S., desforges, D. T., (1979). The Application of Model reference Adaptive Control to Robotic Manipulators, Transaction of the ASME, Journal of Dynamic Systems, Measurement and control , pp 193-200, Vol. 101, Sep. 1979. Karr, C.L. (1991). Design of an Adaptive Fuzzy Logic Controller Using a Ge- netic Algorithm, in Proc. Fourth .Int..Conf. on Genetic Algorithms. pp. 450-457, San Diego, July 13-16, 1991. Lee, J. K., & Cho, H. S. (1997). Mobile Manipulator Motion Planning for Multi- ple Tasks Using Global Optimization Approach, Jour. of Intell. and Ro- botic Systems 18, pp. 169-190, 1997. Mamdani, E.H. & Assilian, S. (1974). Application of fuzzy algorithms for con- trol of simple dynamic plant, Proc, Inst.Elec.Eng., pp.1585-1588, Vol. 1974. Mamdani, E.H. (1974). Application of Fuzzy Algorithms for Control of Simple Dynamic Plant, Proc.IEE,121(12) ; pp1585-1588.-1974 Rumelhart, D.E., Hinton, G.E., & Williams, R.J. (1986). Learning internal repre- sentations by Error Propagation, in Parallel Distributed Processing: Explo- ration, in the Microstructure of Cognition, MA: MIT Press , pp. 318- 362,Vol.1, D.E.Rumelhart and James L. McClelland, Eds, Cambridge, Chap.8, 1986. Samsung, C. & Abderrahim, K.A. (1990). Mobile robot control Part.I: Feedback control of a nonholonomic wheeled cart in cartesian space, Technical report, INRIA, France, 1990 Spong, M. W. & Ortega, R. (1988). On Adaptive Inverse Dynamic Control of Rigid robots, IEEE trans. Automat., 1988. 498 Industrial Robotics: Theory, Modelling and Control Werbos, P. (1974). Beyond Regression: New tools for Prediction and Analysis in the Behavioral Sciences, Ph.D. Dissertation , Harvard Univ., 1974. Whiteney, D. E. (1969). Resolved Motion Rate Control of Manipulators and Human Protheses, IEEE Transactions on Man Machine System , pp. 47-53, Vol. MMS-10, No. 2, June 1969. Yamamoto, Y. & Yun, X. (1994). Coordination locomotion and manipulation of a mobile manipulator, IEEE Transactions on Automatic Control , pp. 1326- 1332, 39(6),1994 Zadeh, L. (1994). Fuzzy logic, Neural network, and Soft computing, commun. ACM, pp. 77-84, Vol. 37, no. 3, 1994. Zadeh, L.A. (1973). Outline of a New Approach to the Analysis of Complex Systems and Decisions, IEEE Trans.SMG, pp. 28-44. Vol. 3, 1973 49918 Control of Redundant Robotic Manipulators with State Constraints Mirosãaw Galicki Introduction Recently, redundant manipulators have attracted much attention due to their potential abilities which are interesting from both a theoretical and practical point of view. Redundant degrees of freedom make it possible to perform so- me useful objectives such as collision avoidance in the work space with both static and moving obstacles, joint limit avoidance, and/or avoidance of singu- lar configurations when the manipulator moves. Most of practical tasks, for example, inserting a shaft into co-operating elements (bearing, sleeve, or rat- chet-wheel), require the knowledge of geometric paths (given in the work space) and a proper tolerance of matching that specifies the corresponding ac- curacy of the path following. In many other industrial tasks such as laser cut- ting or arc welding, the accuracy of path following is vital, and it is reasonable to assume that designers and manufacturers will specify precision using an absolute tolerance on tracking error. The application of redundant manipula- tors to such tasks complicates their performance, since these manipulators in general do not provide unique solutions. Consequently, some objective criteria should be specified to solve the robot tasks uniquely. The minimization of per-formance time is mostly considered in the literature . Several approaches may be distinguished in this context. Using the concept of a regular trajectory and the extended state space, the structure of path-constrained time-optimal controls has been studied in the works (Galicki, 1998b; Galicki, 2000) for kine- matically redundant manipulators. Moreover, the efficient numerical procedu- res able to find such controls were also proposed in the works (Galicki, 1998a; Galicki & Pajak, 1999). Nevertheless, these algorithms require full knowledge of manipulator Jacobian matrix and robot dynamic equations, too. Although all the aforementioned algorithms produce optimal solutions, they are not suitable to real-time computations due to their computational comple- xity. Therefore, it is natural to attempt other techniques in order to control the robot in real-time. Using on-line trajectory time scaling, a dynamic and com- puted torque laws respectively, a nearly time-optimal path tracking control for 500 Industrial Robotics: Theory, Modelling and Control non-redundant robotic manipulators with partially uncertain dynamics has been presented in works (Dahl, 1994; Kiefer et al., 1997). However, these algo- rithms require the solution of inverse kinematic problem along the path. A technique which avoids solving an inverse of robot kinematic equations and uses the exact Jacobian matrix, has been offered in (Galicki, 2001; Galicki 2004) for determining a collision-free trajectory of redundant manipulators opera- ting in both a static environment (Galicki, 2001) and in a dynamic one (Galicki, 2004). Recently, a generalized transpose Jacobian controller with gravity com- pensation and a non-linear (saturating) derivative term has been introduced in (Galicki, 2006a) to generate robot controls subject to geometric path and actua-tor constraints. As is known, many robotic controllers have been proposed to solve both a set point control problem (a regulation task) (Takegaki & Arimoto, 1981; Arimoto, 1996; Canudas de Wit et al., 1996; Sciavicco & Siciliano, 1996; Arimoto, 1990; Kelly, 1999; Galicki, 2002; Galicki, 2005) and the trajectory tracking (Slotine & Li, 1987; Slotine &Li, 1991; Feng & Palaniswami, 1992; Berghuis et al., 1993; Lewis et al., 1993; Tomei, 2000), respectively. However, most of these control- lers have assumed full knowledge of manipulator kinematic equations. Re- cently, several approximate Jacobian setpoint controllers have been proposed (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) to tackle un- certainties in both robot kinematics and dynamics. The controllers proposed do not require the exact knowledge of Jacobian matrix and dynamic equations. However, the results in (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) are applicable only to a setpoint control of a robot. This paper, which is based on our recent work (Galicki, 2006b), introduces a new class of adaptive path following controllers not requiring the full know- ledge of both kinematic and dynamic equations in the control laws. Conse- quently, they are suitable for controlling uncertain robotic manipulators. Mo- tivated in part by the dissipativity and adaptivity methodology (Slotine & Li, 1987), we develop path following controllers whose structure is composed of transpose adaptive Jacobian controller plus a non-linear term including an estimated control. Under the assumption of the full rank adaptive Jacobian matrix, the proposed control scheme has been derived based on the Lyapunov stability theory. By using sensory feedback of the end-effector position, it is also shown that the end-effector is able to follow a prescribed geometric path for robots with both uncertain kinematics and dynamics. Furthermore, new adaptive laws extending the adaptive algorithm from (Slotine & Li, 1987) to tackle kinemetic uncertainties too, are proposed. It is to notice that approxima-te Jacobian setpoint controllers from (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) can not be directly applicable to our task. The rea- son is that approximate Jacobian matrix in (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) does not include kinematic parameters to be adapted and the error of approximation is a'priori bounded. On the other Control of Redundant Robotic Manipulators with State Constraints 501 hand, the controller proposed in our work adaptively varies both kinematic parameters of the Jacobian matrix and the dynamic ones in such a way as to stably follow by the end-effector a geometric path. The paper is organized as follows. Section 2 formulates the robotic task to be accomplished in terms of a control problem. Section 3 describes how to employ the Lyapunov stability theory to determine controls (if they exist). Section 4 provides us with a com- puter example of generating the robot controls in a two dimensional task space for a planar redundant manipulator comprising three revolute kinematic pairs. Finally, some conclusions are drawn. Formulation of the adaptive control problem The control scheme designed in the next section is applicable to holonomic mechanical systems comprising both non-redundant and redundant manipulators consid- ered here which are described, in general, by the following dynamic equations, expressed in generalized co-ordinates (joint co-ordinates) 1Tn n q (q ,...,q ) R=∈ () ( ) u qGqqqCqqM = + + )( , (1) where )(qM denotes the nn× inertia matrix; () qqqC, is the n-dimensional vector representing centrifugal and Coriolis forces; )(qG stands for the n- dimensional vector of gravity forces; ()T nu u u ,...,1= is the vector of controls (torques/forces); n denotes the number of kinematic pairs of the V-th class. In most applications of robotic manipulators, a desired path for the end-effector is specified in task space such as visual space or Cartesian space. The aim is to follow by the end-effector a prescribed geometric path (given in the m- dimensional task space) described by the following equations 0)( )( = Θ− s qp (2) wherem nR Rp →: denotes an m-dimensional, non-linear (with respect to vec- torq) mapping constructed from the kinematic equations of the manipulator; ()T mqp qp qp )( ),...,( )(1= ; ()T ms s s )( ),...,( )(1 Θ Θ= Θ stands for a given geometric path; s is the current parameter of the path (e.g. its length); ] ,0[maxs s∈ ;maxs is the maximal path length. The mapping Θ is assumed to be bounded together with the first and second derivatives and not degenerated, i.e. 0>Θ dsd.502 Industrial Robotics: Theory, Modelling and Control It should be: The kinematic equations of a manipulator are independent ¶prank = m¶q§· ¨¸ ©¹. In general (i.e. when ¶prank £ m¶q§· ¨¸ ©¹, we should require that ¶p ¶p dƪrank = rank¶q ¶qds§· §· ª º ¨¸ ¨¸ «»¨¸©¹ ¬ ¼ ©¹ in order to guarantee consistency of the robotic task (2). The problem is to determine control u which generates manipulator trajectory )(tqq= and path parameterization )(tss= satisfying the equation (2) for each ],0[T t∈ , where T denotes an (unknown) time horizon of task performance. It is natural to assume that at the initial moment 0=t , for which 0)0(= s , a given (by definition) initial configuration 0 )0( q q = satisfies (2), i.e. 0)0( )(0 = Θ−qp (3) Final path parameterization fulfils the equality 0 )(max= −s Ts (4) Furthermore, at the initial and the final time moment, the manipulator and path velocities equal zero, i.e. 0)( )0( = =Tq q (5) and 0)()0( = =Ts s (6) As is known, task space velocity p is related to joint space velocity q as fol- lows () qYqJp   , = (7) where∂=∂pJ(q,Y )q is the ×mn Jacobian matrix; Y stands for an ordered set of kinematic parameters ()T kY Y Y ,...,1= such as link lengths, joint offsets; kdenotes the number of kinematic parameters. Several important properties of dynamic equations (1) may be derived (Spong & Vidyasagar, 1989) Control of Redundant Robotic Manipulators with State Constraints 503 The inertia matrix ()Mq is symmetric and positive definite for all ∈nqR Matrix 2− M(q)C( q,q ) is skew-symmetric so that 02§·∀∈ − = ¨¸©¹ n M(q)v,q,q R v, C(q,q v (8) where ,is the scalar product of vectors. The dynamic equations (1) are linear with respect to an ordered set of physi- cal parameters1 =T d X( X ,..., X ) , i.e. () ( ) ( ) XqqqqD qGqqqCqqM   ,,, )( , = + + (9) where where () qqqqD ,,, is called the ()dn× dynamic regressor matrix; dstands for the number of the physical parameters such as link masses and inertias. Differential equation (7) has the following property. The right hand side of (7) is linear with respect to eY. Consequently, equa- tion (7) can be expressed as follows () YqqKqYqJp   , ),( = = (10) where  K( q,q ) is called the ×(m k) kinematic regressor matrix. In order to simplify further computations maxs is assumed to be equal to 1, i.e. 1maxs=. Let us define errors e and1+meof path following (task errors) as () ( ) .1,..., )( )( ,..., 11 1 1 −=Θ− Θ− = Θ− = = + s ep p s qp e e e mT m mT m (11) Many commercial sensors are available for measurement of end-effector position p, such as vision systems, electromagnetic measurement systems, position sensitive detectors or laser tracking systems. Hence, path following error e in (11) is also assumed to be available (for a given s) from meas- urement. For revolute kinematic pairs, considered here, mapping p(.) is bounded. Consequently, we have the following property. 504 Industrial Robotics: Theory, Modelling and Control Boundedness of mappings p( ),ƪ()⋅⋅ , implies that task error e is bounded. Expressions (1)-(6) formulate the robot task as a control problem. The fact that there exist state equality constraints makes the solution of this problem diffi- cult. The next section will present an approach that renders it possible to solve the control problem (1)-(6) making use of the Lyapunov stability theory. Adaptive path control of the manipulator Our aim is to control the manipulator such that the end-effector fulfils (2)-(6). Therefore, we propose adaptive Jacobian path following controllers for robots with both uncertain kinematics and dynamics. In our approach, the exact knowledge of both robot dynamic equations and Jacobian matrix is not requi- red in updating the uncertain parameters. In the presence of kinematic uncertainty, the parameters of the Jacobian matrix are uncertain and hence equality (10) can be expressed as follows () YqqKqJ ˆ, ˆ = (12) where×=∈mn ˆˆJJ ( q , Y ) R is an adaptive Jacobian matrix and ˆY stands for the vector of estimated kinematic parameters. In order to show the stability of the path following control system in the presence of both kinematic and dynamic uncertainties, we define an adaptive joint-space sliding vector z as qeJ zT+ =ˆλ (13) where λis a positive scalar coefficient. The adaptivity of vector z is under- stood in the sense that the parameters of the adaptive Jacobian matrix will be updated by a parameter update law, defined later. Differentiating equation (13) with respect to time yields qeJ eJ zT T + + = ˆ ˆ λ λ (14) Based on equations (1) and (13)-(14), we can easily express robot dynamic e- quations by means of vector z and its time derivative, as () () u qG qqqC qqMzqqCzqMr r = + + + + )( , )( , )(   (15)Control of Redundant Robotic Manipulators with State Constraints 505 Where () eJ eJ q q qT T T nr r r  ˆ ˆ ,...,, 1, λ λ − −= = and () eJ q q qT T nr r rˆ ,...,, 1, λ−= =  Moreover, we know from property 3., that the last three terms of equation (15) become linear with respect to vector X and hence they can be written as fol- lows () ( ) . ,,, )( , )( XqqqqD qGqqqCqqMr r r r   = + + (16) Inserting the right hand side of (16) into (15), robot dynamic equations (15) take the following form () ( ) uXqqqqDzqqCzqMr r = + +   ,,, , )( (17) Based on (13), (14) and (17) , lets propose the following adaptive Jacobian con- troller () XqqqqDeJkkz ur rT Pˆ ,,, ˆ  + −−= (18) where ˆXstands for the estimated physical parameter vector defined below; k and pk are some positive scalars which could be replaced by diagonal ma- trices of positive constants without affecting the stability results obtained fur- ther on (this should lead to improved performance). Here, scalar constants are chosen for simplicity of presentation. In order to measure error e, path param- eterization ss ( t )= is required which is computed by solving the following scalar differential equation ()¸ ¹·¨ ©§− +− +Θ− − −=2121)1()(, sdsdsdssde ksk sP sγγ  (19) wheresk denotes a positive coefficient; Ǆ is assumed to be a strictly positive function {} () 0 infǄ> of s with bounded first and second derivatives for any {}01Ǆ infǄ s≤+ , where ()0 0ǄǄ= (as will be seen further on, 0Ǆ determines the upper bound on the accuracy of the path following and may be specified by the user). The choice of function Ǆ is crucial for computational effectiveness of control scheme (18), (19). One possibility is ǄǄ (s)= with 0dǄ ds>. An alternative choi-506 Industrial Robotics: Theory, Modelling and Control ce could be ()2ǄǄ e= , where Ǆ attains its maximum for 0e= and smoothly decreases as e increases. For simplicity of further considerations, we take the first form of Ǆ. Assumption 1. Function Ǆ is required not to satisfy differential equation ()1102dǄǄ sds+− = As will be seen further on, Assumption 1. results in an asymptotic convergence ofs to 1. Let us note, that the first two terms from (18) present an adaptive transpose Ja- cobian controller with adaptively varying kinematic parameter vector ˆY. The last term in dependence (18) is an estimated control based on equation (16). Es- timated kinematic parameters ˆY of the adaptive Jacobian matrix ()ˆ ˆJJ q,Y = are updated according to the following law () eqqKkwYT Pk , ˆ=(20) and estimated physical parameters ˆX of the dynamic equations are updated by () zqqqqDw Xr rT d ,,, ˆ−=(21) wherek, dww , are, similarly as before, positive gains (scalars) which could be replaced by diagonal matrices of positive constants without affecting the sta- bility of controller (18). Although some kinematic parameters appear in ˆX, we should adapt on them separately in ˆY to preserve linearity. Estimated kinematic parameters ˆY (updated according to rule (20)) are then used to compute adaptive Jacobian ˆJ and its time derivative ˆJ using for this purpose the right hand side of (20) which is only a mapping of q,e, and q. Having obtained the adaptive Jacobian matrix and its time derivative, we de- termine quantities rq and rq. It is worth noticing, that their computation does not require any pseudoinverse of matrix ˆJ which results in numerical stability of controller (18). Finally, based on r q,q,q, , andrq, we may determine dy- namic regressor matrix ()rr D q,q,q ,q  , which is then used to update estimated physical parameter vector ˆX.Control of Redundant Robotic Manipulators with State Constraints 507 Let us note, that setpoint controllers proposed in works (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) , which are computationally so- mewhat simpler, can not be applicable to our task. The reason is that the error of approximation in (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) is bounded by a constant and approximate Jacobian matrix does not inc- lude parameters to be adapted. Due to adaptation law (20), one can not gua- rantee in our task to satisfy assumption regarding the approximation error made in works (Cheach et al., 1999; Yazarel & Cheach, 2002; Cheach et al., 2003) . The closed-loop error dynamics is obtained by inserting the right hand side of equation (18) into equation (17) () ( ) () () zqqqqDw XeqqKkwYedsdedssde k ek eedssdqYqJeeJkkzXqqqqDzqqC zqM r rT dT Pkm m P ms mmT P r r       ,,,~,~21 )(,)(),(ˆ~,,, , )( 2 1 1 1 11 −==¸ ¹·¨ ©§+ +Θ− − −=Θ− =−− + −= + + + ++ γγ (22) where YYY −=ˆ~; XX X −=ˆ~. Applying the Lyapunov stability theory, we derive the following result. Theorem 1. If there exists a solution to the problem (1)-(6) and adaptive Jaco- bian matrix ˆJ is non-singular along end-effector path (2) and function Ǆ fulfils Assumption 1., then control scheme (18) generates manipulator trajectory whose limit point () )0,0,0,0()( ),(),( ),(1 1 =∞ ∞ ∞ ∞+ + m m e e e q ,i.e. satisfying state constraints (2)-(6), is asymptotically stable. Proof. Consider a Lyapunov function candidate .~1 ~1,21 2 2 12 12 2 ¸¸ ¹· ¨¨ ©§+ + + + + =+ + ek ek e YwXwzMz VP m P m k dγ(23) The time derivative of V is given by 508 Industrial Robotics: Theory, Modelling and Control .21,~,~1 ~,~1, ,2, 12 1 1 1 1 1 1 + + + + + + + + +Θ− ++ + + + + = m m P m m P m P m mk dT P eedsdk eek edsdek eeYYwXXwqeJk zzMzMz V       γγ(24) Substituting1m Mz,.e,.e ,Y+   and X from V for the right-hand sides of closed- loop error dynamics (22) and using the skew-symmetric property of matrix 2MC− [property 2. eqn. (8)], we obtain after simple calculations, that . ,ˆˆ ,2 1+ − − −=msT P ekeeJJkzzk V   Since 0V≤ , function V is bounded. Therefore, z,X, and Y are bounded vectors. This implies that ˆX and Y are bounded, too. Consequently, it follows from (13), that q is also bounded. Moreover, s and s are bounded, too. As can be seen, V is negative for all ()10m z,e,e+≠ and is zero only when ()10m z,e,e+= , which implies (using LaSalle-Yoshizawa invariant theorem (Krstic et al., 1995) that ()1m z,e,e+ tends asymptotically to zero, i.e. ()00 z(T ) , e T →→ , and 10me, a s . T+→→ ∞ , as. By differentiating 1me+ in (22) with respect to time, it is also easy to see, that 3 1 3mde dt+ is bounded function by assumptions regarding ƪ and Ǆ. This means, that 1me+ is uniformly continu- ous. Hence, ()1 0meT ,+ → , as T,→∞ , too. The convergence of path velocity and acceleration yields the following equation .0)(21)(2 1 1 =∞ +∞+ + m m edsdeγγ(25) Consequently, ()1 0me+∞= or ()1102mdǄǄ eds+ +∞ = . On account of Assumption 1, the second equality is not fulfilled. Thus, ()1 0me+∞= (or equivalently () 1 s∞= ). On account of (13), 0 q(T ) → , as T→∞ , too. Consequently, boundary conditions (4)-(6) are (asymptotically) fulfilled and limit point () () () ()()11mm q, e , e, e++ ∞∞ ∞∞ ()0000,,,= is asymptotically stable. Finally, it should be emphasized, that the chosen Lyapunov function does not guarantee convergence of parameter estimations ˆX and ˆY to their true values. Control of Redundant Robotic Manipulators with State Constraints 509 On account of (3)-(6), we have 22 0 00 022 2p tt t dkkǄ XYVww== ==++ . For sufficiently large dw and kw, the first two terms in this equality may be omitted. Hence, we obtain0 02p tkǄV=≅ Since V is not positive, function V fulfils the inequality 0 2pkǄV≤ . Consequently, the following bound on e may easily be obtained, based on (23) and the last dependence 0 eǄ≤ (26) An important remark may be derived from the proof carried out. Namely, Inequality (26) presents an upper bound (path independent) on the accuracy of path following by the end-effector according to the control law (18). Let us no- te that estimation of the upper bound on path following error (26) is very con- servative. Consequently, control gains dw and kw do not require large values to achieve a good path following accuracy, as the numerical simulations (given in the next section) show. Moreover, several observations can be made regarding the control strategy (18). First note, that the proposed control law requires, in fact no information concerning the robot kinematic and dynamic equations. Second, the choice of controller parametersp s k,k ,k ,dw and kw according to dependencies (18)-(21) guarantees asymptotic stability of the closed-loop error dynamics (22) during the manipulator movement. Moreover, the transpose of ˆJ (instead of a pseudoinverse) in control scheme (18) does not result in numerical instabilities due to (possible) kinematic singu- larities met on the robot trajectory. Nevertheless, (18) has been derived under the assumption of full-rank adaptive Jacobian matrix along the path. Further- more, controller (18) does not require the knowledge of task space velocity. Due to conservative estimation of the path following accuracy, control algo-rithm (18) results in a better accuracy of the path following as compared to upper bound given from (26), as the numerical computations carried out in the next section show. In order to prevent control (torque) oscillations at the very beginning of time histories (caused by e.g. the non-zero initial path following error) sk from (19) should be a bounded, quickly decreasing time dependent function as t→∞ (see the next section). 510 Industrial Robotics: Theory, Modelling and Control Due to real-time nature of robot controller (18), we shall try to estimate the number of arithmetic operations required to implement the algorithm presen- ted in this section. The dimension of the robot task space is assumed in estima- tion to be constant. Operations required for computation of sin,cos , and ()ƪ⋅ functions are not taken into account. Furthermore, matrices ˆJ,K and D are assumed in estimation to be given. Moreover, estimations are carried out at any time instant of the robot task accomplishment. It follows from (13) and (18) that terms T pˆ kz,k J e , require ()On operations. Computation of the right hand sides (19) and (20) involves ()1O and ()On operations, respectively as- suming that () kO n= . Computational complexity for the right hand side of (21) equals 2O(n ) by assumption that () dO n= . Computation of estimated controlrrˆ D (q,q,q ,q )X  requires also the same order of complexity, i.e. 2O(n ) operations. Finally, computational complexity of the whole robot controller (18) is of the order 2O(n ) . A numerical example The aim of this section is to illustrate the performance of the proposed adapti- ve control algorithm using a dynamic three-joint direct-drive arm 3 (n )= of SCARA-type robotic manipulator operating in a two-dimensional 2 (m )= task space. Kinematic scheme of this manipulator and the task to be accomplished is shown in Fig. 1. In the simulations, SI units are used. The components of dynamic equations of this manipulator are as follows (Spong & Vidyasagar, 1989): []3 , 1 ≤ ≤=jiijM M where11 1 4 6 22 3 3 MX X c X c=+ + ; ()i ci=cos q , ; ()i si=sin q , ;i j cij=cos( q+q); ( )j iqq s + =sinij;( )k j i q qq c ++ =cos ijk;( )k j i q qq s ++ =sin ijk; 23 25 4 2 21 cX cX X M + + =; 3 31X M =;3 26 2 22 cX X M + =;36 3 32 cX X M + =; 3 33 X M =; 21 12M M =; 31 13M M=; 32 23M M =.Control of Redundant Robotic Manipulators with State Constraints 511 −0.6−0.5−0.4−0.3−0.2−0.1 00.10.20.30.40.50.60.70.80.9 1−0.8−0.7−0.6−0.5−0.4−0.3−0.2−0.100.10.20.30.40.50.60.70.8 p1 [m]p2 [m] the geometric path l1 l2 l3q1 q2q3 Figure.1 A kinematic scheme of the manipulator and the task to be accomplished []3,1 ≤ ≤=jiijC C where () ( )3 6 5 2 5 4 11 13 13 12 2 qsX sX qsX sX C   + − + −=; () ( ) ( )3 6 5 2 1 5 4 12 12 12 12 2 qsX sX qq sX sX C   + − + + −=; () ( )3 2 1 6 5 13 12 12 q qq sX sX C  + +− + =; ()3 6 1 5 5 21 3 12 2 qsX qsX sX C  + + =; ()3 6 5 22 12 12 qsX sX C  + −=; ()3 2 1 6 23 33 q qqsX C  + + −=; ()2 6 1 5 4 31 3 12 2 qsX qsX sX C  − + =; ()2 1 6 32 3 qqsX C + =; 033=C. ()TGGG G3 2 1,, = where 123 12 19 8 7 1 cX cXcX G + + =;123 129 8 2 cX cX G + =;1239 3 cX G=. Parameters iX,19i:= take the following nominal values: 512 Industrial Robotics: Theory, Modelling and Control 1956.11=X, 3946.02=X, 0512.03=X, 4752.04=X, 1280.05=X, 1152.06=X, () glmlm lm Xc 13 12 11 7 + + =, () glm lm Xc 23 22 8 + =, glm Xc33 9=, where gstands for the gravity acceleration; iim, l , and cil,13i:= denote link mass, length and location of the mass center which is assumed to be equal to 2/i cil l=;4.01=l;36.02=l;3.03=l;6.31=m;6.22=m;23=m. Jacobian matrix J(q,Y) equals »¼º «¬ª + + +− − − − − −=123 123 12 123 12 1123 123 12 123 12 1 3 3 2 3 2 13 3 2 3 2 1 cY cY cY cY cYcYsY sY sY sY sYsYJ Where 13iiYl ; i :== ; and the kinematic regressor matrix takes the following form () ( ) ()( )»¼º «¬ª ++ +++ − + − −= 3 2 1 2 1 13 2 1 2 1 1 123 12 1123 12 1 q qq c qqcqcq qq s qqs qsK    The end-effector position 12Tp(pp )= (see Fig. 1) represents in the simulations the task space coordinates 2 (m )= . The upper bound on the accuracy of the path following in all the computer simulations, is assumed to be equal to 000 6Ǆ .= , where 2700 0 2 00 0 2,sǄ(s) , , e=+ . Let us introduce path following errorsControl of Redundant Robotic Manipulators with State Constraints 513 ¸¸¸ ¹· ¨¨¨ ©§ −Θ−Θ− = ¸¸¸ ¹· ¨¨¨ ©§ 12 21 1 321 spp eee to evaluate the performance of the robot controller (18). In order to examine the effects of both kinematic and dynamic uncertainties, initial values for vec- tors ˆX and ˆY were set in the simulations as 0 32110 80 5302010T ˆX( ) ( . . ) = , 0 0 550 450 4T ˆY( ) ( . . . ) = . The task of the robot is to transfer the end-effector a- long the geometric path (the dotted line in Fig. 1), expressed by the following equations s ss s 2.17.0 )(24.0 36.0)( 21 + −= Θ+ = Θ where, []01s,∈ . The initial configuration 0q equals 0 22 2Tq(Ǒ/Ǒ/Ǒ/) =− − Parameters 10 3000 1p k, . k , . ǌ == = and ()106 9 1 100 30t sk, e−=+ + have been chosen experimentally to achieve practically reasonable time horizon of task performance and relatively small controls with ()101010kwd i a g= and ()4 854 854 854 854 854 854 858 554 76dwd i a g .........= . The results of computer simulation are presented in Figs 2-20. 0 5 10 15−3−2−10123x 10−3 t [sec]e1 [m] Figure 2. Path following error 1evs. time 514 Industrial Robotics: Theory, Modelling and Control 0 5 10 15−2−1012345x 10−3 t [sec]e2 [m] Figure 3. Path following error 2evs. time 0 5 10 15−1−0.8−0.6−0.4−0.20 t [sec]e3 Figure 4. Path following error 3evs. time 0 5 10 151015202530 t [sec]u1 [Nm] Figure 5. Input torque 1uvs. time Control of Redundant Robotic Manipulators with State Constraints 515 0 5 10 150510152025 t [sec]u2 [Nm] Figure 6. Fig. 6 Input torque 2uvs. time 0 5 10 1501234 t [sec]u3 [Nm] Figure 7. Input torque 3uvs. time Figure 8. Time course of adaptive estimate 1ˆY516 Industrial Robotics: Theory, Modelling and Control Figure 9. Time course of adaptive estimate 2ˆY Figure 10. Time course of adaptive estimate 3ˆY Figure. 11. Time course of adaptive estimate 1ˆXControl of Redundant Robotic Manipulators with State Constraints 517 Figure 12. Time course of adaptive estimate 2ˆX Figure 13. Time course of adaptive estimate 3ˆX Figure 14. Time course of adaptive estimate 4ˆX518 Industrial Robotics: Theory, Modelling and Control Figure 15. Time course of adaptive estimate 5ˆX Figure 16. Time course of adaptive estimate 6ˆX Figure 17. Time course of adaptive estimate 7ˆXControl of Redundant Robotic Manipulators with State Constraints 519 Figure 18. Time course of adaptive estimate 8ˆX Figure 19. Time course of adaptive estimate 9ˆX −0.5 0 0.5 1−0.8−0.6−0.4−0.200.20.40.60.8 p1 [m]p2 [m] Figure 20. Manipulator motion along the geometric path 520 Industrial Robotics: Theory, Modelling and Control As might be expected, the path following errors from Figs 2-3 are much smal- ler than those obtained from the conservative dependence (26). Moreover, as one can observe from Figs 2-7, the time dependent damping functionsk de- creases (eliminates) errors and torques oscillations at the very beginning of time histories. Furthermore, as seen from Figs 8-19, estimations Xˆ,Yˆ do not converge to their real (nominal) values. Conclusion This study has presented an adaptive robot controller for the path following by the end-effector. The control generation scheme has been derived using the Lyapunov stability theory. An advantage of the proposed control law (18) is that it requires, in fact no information regarding the parameters of the robot dynamic equations. The control strategy (18) is shown to be asymptotically stable (by fulfilment of practically reasonable assumptions). The proposed ro- bot controller has been applied to a planar redundant manipulator of three re-volute kinematic pairs operating in a two dimensional task space. Numerical simulations have shown that the results obtained are in accordance with the theoretical analysis. The novelty of the strategy proposed lies in its relative simplicity in design, program code and real-time implementation. The appro- ach presented here will also be in future directly applicable to cooperating ki- nematically redundant manipulators. Acknowledgement. This work was supported by the DFG Ga 652/1--1,2. References Arimoto, S. (1990). Design of robot control systems, Adv. Robot., vol. 4, no. 1, pp. 79-97. Arimoto, S. (1996). Control theory of non-linear mechanical systems, Oxford, U. K., Clarendon. Berghuis, H.; R. Ortega, & H. Nijmeijer (1993). A robust adaptive robot cont- roller, IEEE Trans. on Robotics and Automat., vol. 9, no. 6, pp. 825-830. Canudas, de Wit, C.; B. Siciliano & G. Bastin (1996). Theory of robot control, New York: Springer-Verlag. Cheah, C. C.; S. Kawamora & S. Arimoto (1999). Feedback control for robotic manipulators with an uncertain Jacobian matrix, J. Robot. Syst., vol. 6, no. 2, pp. 119-134. Control of Redundant Robotic Manipulators with State Constraints 521 Cheach, C. C.; M. Hirano; S. Kawamura & S. Arimoto (2003). Approximate ja- cobian control for robots with uncertain kinematics and dynamics, IEEE Trans. on Robotics and Automation, vol. 19, no. 4, pp. 692-702. Dahl, O. (1994). Path-constrained robot control with limited torques - Experi- mental evaluation, IEEE J. Robot. Automat., vol. 10, pp. 658--669. Feng, G. & M. Palaniswami (1992). Adaptive control of robot manipulators in task space, IEEE Trans. on Automatic Control, vol. 38, no. 1, pp. 100-104. Galicki, M. (1998a). The planning of robotic optimal motions in the presence of obstacles, Int. J. Robotics Res., vol. 17, no. 3, pp. 248-259. Galicki M. (1998). The structure of time optimal controls for kinematically re- dundant manipulators with end-effector path constraints, Proc. IEEE Conf. Robotics Automat. , pp.101-106, Leuven, Belgium. Galicki, M. & I. Pajak (1999). Optimal motion of redundant manipulators with state equality constraints, Proc. IEEE Int. Symp. on Assembly and Task Planning, pp. 181-185, Porto, Portugal. Galicki, M. (2000). Time-optimal controls of kinematically redundant manipu- lators with geometric constraints, IEEE Trans. Robotics Automat., vol. 16, no. 1, pp. 89-93. Galicki, M. (2001). Real-time trajectory generation for redundant manipulators with path constraints, Int. J. Robotics Res., vol. 20, no. 7, pp. 673-690. Galicki, M. (2002). Motion control of robotic manipulators in task space, Proc. IEEE/RSJ Int. Conf. Intell. Robots and Systems , pp. 2061-2066, Lau- sanne. Galicki, M. (2004). Path following by the end-effector of a redundant manipu- lator operating in a dynamic environment, IEEE Trans. Robotics, vol. 20, no 6, pp. 1018--1025. Galicki, M. (2005). Collision-free control of robotic manipulators in the task space, J. Robot., Syst., vol. 22, no 8, pp. 439--455. Galicki, M. (2006a). Path-constrained control of a redundant manipulator in a task space, Robotics and Autonomous Systems, vol. 54, pp. 234-243. Galicki, M. (2006b). Adaptive path-constrained control of a robotic manipula- tor in a task space, Robotica (to appear). Kelly R. (1999). Regulation of manipulators in generic task space: An energy shaping plus damping injection approach, IEEE Trans. Rob. Automat., vol. 15, no. 2, pp. 381-386. Kiefer, J.; A. J. Cahill & M. R. (1997). James, Robust and accurate time-optimal path-tracking control for robot manipulators, IEEE Trans. Automat. Ro- bot., vol. 13, pp. 880--890. Krstic,M.; I. Kanellakopoulos & P. Kokotovic (1995). Nonlinear and adaptive control design, J. Wiley and Sons, New York. Lewis, F. L.; C. T. Abdallach & D. M. Dawson (1993). Control of robot manipu- lators, New York: Macmillan Publishing Company. 522 Industrial Robotics: Theory, Modelling and Control Sciavicco, L. & B. Siciliano (1996). Modeling and control of robot manipulators, New York: McGraw-Hill. Slotine, J. J. E. & W. Li (1987). On adaptive control of robot manipulators, Int. J. Robotics Res., no. 6, pp. 49-59. Slotine, J. J. E. & W. Li (1991). Applied nonlinear control, Englewood Cliffs, New Jersey: Prentice Hall. Spong, M. & M. Vidyasagar (1989). Robot dynamics and control, Wiley, New York. Takegaki, M. & S. Arimoto (1981). A new feedback method for dynamic control of manipulators, Trans. ASME: J. Dyn. Syst., Meas., Contr., vol. 102, pp. 119-125. Tomei, P. (2000). Robust adaptive friction compensation for tracking control of robot manipulators, IEEE trans. on Automatic Control, vol. 45, no. 11, pp. 2164-2169, 2000. Yazarel, H. & C. C. Cheach (2002). Task-space adaptive control of robotic ma- nipulators with uncertainties in gravity regressor matrix and kinematics, IEEE Trans. on Automatic Control, vol. 47, no. 9, pp. 1580-1585. 52319 Model-Based Control for Industrial Robots: Uniform Approaches for Serial and Parallel Structures Houssem Abdellatif and Bodo Heimann Introduction Nowadays, there are still two major challenges for industrial robotics in auto- mated production. These are enhancing manufacturing precision and reducing cycle-times. Beside the advances made in the classic robotics over the last dec- ades, new technologies are emerging in the industrial field aiming more flexi- ble high-speed and accurate manufacturing. Robots with parallel structures are attracting the attention of automation industry as an innovative product with high dynamic potentials. Such robots, like the tricpet are integrated nowadays by BMW, Volvo or Airbus in their manufacturing lines. Compared to each other, the classic serial (or open) chain robots and the parallel (or closed) chain robots have their specific benefits and suffer from own draw-backs. The proposed chapter gives a comparison of the two types in the scope of their suitability for solving modern problems in industrial robotics. Addi- tionally, appropriate approaches are proposed to remove drawbacks of classic industrial control solutions. Hereby, it is focussed on model-based strategies for ameliorating control accuracy at high dynamics and therefore to expose so- lutions towards high-speed automation. One of the main purposes of the proposed chapter is to contribute to extending the state of the art in industrial robotics by the innovative class of parallel ro- bots. Furthermore, classic and advanced model-based control approaches are discussed for both robot types. Uniform methodologies for both classes are given. It is focused on crucial issues for practical application in the industrial filed. The first aspect is surely the modelling of kinematics (see section 2) and dy- namics (see section 3) for serial and parallel robots. Here, an opposite duality in formalism is shown. By appropriate choice of minimal coordinates and ve-locities, the inverse dynamics of the two robot classes can be derived by the principle of virtual power. This yields computational highly efficient models that are well appropriate for real-time applications. Since the success of such feedforward control depends on the estimation quality of the model parame-524 Industrial Robotics: Theory, Modelling and Control ters, appropriate strategies for experimental identification are provided in sec- tion 4. Thereby, two main categories of procedures are discussed: direct and indirect identification. The direct procedure tries to estimate model parameters from measurements achieved by one optimized trajectory. Indirect identifica- tion uses standard Point-to-Point motions that are distributed within the work- space. The choice of the method in praxis depends on the used control hard- ware and sensors. Each approach has own advantages and drawbacks for the here discussed two classes of robotic manipulators. In section 5, further enhancement of control accuracy are demonstrated by providing pre-correction techniques, like iterative learning control, training or nonlinear pre-correction. Such powerful tools are highly appropriate for manufacturing or automation tasks that are repeated over and over. Further- more, it is advantageous not only due to the simple requirement of standard position-correction interface but because complex modeling of disturbances is not necessary. The methodology is exposed uniformly for serial and parallel robots. Practical issues and some differences are pointed out. Experimental re- sults prove than the suitability and effectiveness of the proposed methods for the studied classes of robots. All proposed approaches are substantiated by experimental results achieved on three different robots: the Siemens Manutec- r15, the KUKA KR15 and the prototype PaLiDA as a parallel robot. The chapter is closed with conclusions and an outlook on the possible future of industrial robotics. Kinematic Analysis To enable giving uniform approaches for serial and parallel robots, elementary assumptions and definitions at the formal level have to be revised. As men-tioned in the introduction, we will concentrate on the case of industrial rele- vant robotic systems, i.e. 6=n -DOF non redundant mechanisms. Both mecha- nisms are supposed to have anactuated joints grouped in the vector aq, that defines the actuation space A. Additionally, passive joints are denoted by pq. Both vectors can be grouped in the joint vector [ ]TT pT aqq q= that correspond consequently to the joint space Q. The operational or work-space W of an in-dustrial robot is defined by the 6-dimensional pose vector xcontaining the po- sition and orientation of the end-effector (EE) with respect to the inertial frame. Let the vector z now denotes the generalized (or minimal) coordinates, which contains the independent coordinates that are necessary to uniquely describe the system. Its dimension coincides therefore with the number of DOF's (Mei- rovitch, 1970; Bremer, 1988) and it defines the configuration space C. Already at this formal level, important differences between serial open-chain robots and parallel closed-chain robots are necessary to consider. For classic industrial robots, the case is quite simple and well known. Such systems do Model-Based Control fo r Industrial Robots: Uniform Approaches… 525 not have passive joints, the actuated joints correspond to the minimal coordi- nates, which yields the coincidence of almost all coordinate spaces: aa qq QA a n d zq q CQA .= ≡= =  ≡≡ The case of 6-DOF parallel robot is more complicated. The pose vector xde- fines uniquely the configuration of the system. Besides the robot contains pas- sive joints (Merlet, 2000) aa zx CW a n d qq , q z CQA= ≡≠ ≠  ≠≠ Consequently, more transformations have to be considered while operating parallel robots. A more serious issue in industrial praxis is that the configura- tion of parallel robots can not be directly measured, since only the positions of actuated joints are available. It is than necessary to consider this limitation in control issues. To keep uniform handling of both robotic types, it is recom- mended to focus on the configuration space defined by z. From this point of view the most important notions of kinematics are revisited in the following. The interested reader may be referred to standard books for deeper insight (Tsai, 1999; Sciavicco & Siciliano, 2000; Angeles, 2003; Merlet, 2000; Khalil & Dombre, 2002) 2.1 Kinematic Transformations In robotics, the motion of each link is described with respect to one or more frames. It is though necessary to define specifications to transform kinematic quantities (positions, velocities and accelerations). Homogenous transforma- tions are state of the art in robotics. Besides the fixed inertial frame ()0KS and the end-effector frame ()EKS , each link i is associated with body-fixed frame ()iKS . For efficient formulation and calculation of the homogenous transfor- mations (given by 1i i−T) between two adjacent links 1i− and i, it is recom- mended to use the modified DENAVIT-HARTENBERG-notation (or MDH), that yields unified formalism for open and closed-chain systems (Khalil & Kleinfinger, 1986; Khalil & Dombre, 2002). We obtain: »»»» ¼º «««« ¬ª − −=» ¼º « ¬ª=− −− − 1 0 0 00 1 0001 11 ii i ii iiii i ii iii i i i i)i(i cd c sc sssd s cc csa s c α α αϑ αϑα α αϑ αϑϑ ϑ r RTi 1i i (1) 526 Industrial Robotics: Theory, Modelling and Control which is a function of the MDH-parameters iϑ,id,iα and ia (Khalil & Klein- finger, 1986). The abbreviations xs and xc denote ()xsin and ()xcos respec- tively. The matrix 1i iR− and the vector i1 i1 i− −()r define orientation and position of frame i with respect to frame 1−i. The kinematics of any kinematic chain gives an analytic determination of the joint variables iϑ (for revolute joints) andid (for prismatic joints) as well as their time derivatives. The velocity iv)i( and angular velocity i)i(ω of each link i and the corresponding accelerations can be calculated recursively by the following equations: izi i)i( i)i( i)i(i)i( d~ e r v v + + =− − −1 1 1 ω (2) z i)i(i zii i)i( i)i( i)i(i i)i( i)i( i)i(i)i(~d d~ ~ ~e e r r v v11 1 11 1 1 2−− − −− − − + + + + = ω ω ω ω  (3) iz i)i(i)i( ϑe+ =−1ω ω (4) zi z i)i(i Ǌ)i(i)i(~e eϑ ϑ   + + =− − 1 1 ω ω ω (5) where []T100=ze . The Tilde-operator (~ ) defines the cross product .~baba ×= 2.2 Direct and Inverse Kinematics Industrial applications are characterized by being defined in the operational space W, whereas the robot is controlled in the actuation space A. It is there- fore necessary to define and to calculate transformations between the two spaces. Calculating the resulting robot poses from given actuator positions correspond to the direct (or forward) kinematic transformation: Reciprocally, the inverse (or backward) kinematic transformation is used to obtain actuator positions from a given robot pose: ()xg q xg = →→ aA W: We mentioned above, that only the minimal coordinates describe the system uniquely. Consequently, only the transformations having the argument set be-() qfa:A W→ →=af x qModel-Based Control fo r Industrial Robots: Uniform Approaches… 527 ing the configuration space can be computed or given in a closed form. This fact explains, that the solution of the inverse problem is quite simple and available analytically for parallel robots ( )WC≡ . Whereas the solution of the forward kinematics can be generally obtained only in a numerical way (Tsai, 1999; Merlet, 2000). In contrast, the forward kinematics can be easily obtained for serial-chain robots ( )AC≡ , whereas the inverse problem is generally cum- bersome to solve. As it will be discussed in following sections, such system- inherent properties have an important impact on the practical implementation of control. E.g. the well-known computed-torque feedback approach is not suitable for parallel robots, since the minimal coordinates xz= can not be measured. For both robotic types the pose vector is defined as: [ ], zyxTγβα =x where the end-effector position being [ ]T E zyx=r and its orientation [ ]Tγβα=π being defined according to the Roll-Picth-Yaw (RPY) Euler- convention (Tsai, 1999; Sciavicco & Siciliano, 2000). The homogeneous trans-formation between ()0KS and ()EKS is given by () »»»» ¼º «««« ¬ª + −− − +− =1 0 0 00 Ez cc ssc cs cscssy cs sss cccssscx s sc cc βα γβα γα γβα γαβα γβα γα γβα γαβ γβ γβ xT 2.3 Differential Kinematics The differential kinematics maps the velocity of the end-effector into the veloc- ity of the actuated joints aq and vice versa. It is necessary to relate a desired motion in the task-space to the necessary motion of the actuated joints. This is achieved by the jacobian matrix a na, 1a,na,1 1a,1 aa qf x  "#%#"  »»»»» ¼º ««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ =qf qfqf q n n (7) or simply Aa x=J q . (8) 528 Industrial Robotics: Theory, Modelling and Control The analytical Jacobian AJ relates the time derivative of the pose vector to the articulated velocities. Since the orientation vector π is composed of pseudo- coordinates, whose time derivative has no physical meanings (Bremer, 1988, Meirovitch, 1970) it is convenient to define the rotational velocities of the end- effector in respect to the fixed frame: [ ]T E z y x ω ω ω=ω , such that ( )»»» ¼º ««« ¬ª »»» ¼º ««« ¬ª − = »»» ¼º ««« ¬ª = γβα ωωω βαβ α αβ α αβ   ,zyx cc scs cs K0001 E Rω (9) and therefore the definition of the geometric jacobian matrix J: a EE E qJrv  =»¼º «¬ª=ω, with AJR00IJ »¼º «¬ª= K (10) By regarding eq. (7) it is obvious that the analytic derivation of the jacobian is only available, when the direct kinematic solution ()aqf is given in a closed form. This is the case for classic open-chain robots, whereas for parallel robots, the inverse jacobian 1−J is available (Merlet, 2000). For such mechanisms, the jacobian is obtained by numerical inversion of its analytically available inverse (Merlet, 2000; Abdellatif et al., 2005a). The mobility of robots depends on the structure of the related jacobian that describes the velocity and also the force transmission between the operational space and the actuation space. It is well known, that singularities occur at configurations, when the jacobian loses its rank () ( )0 det =J . The study of singularities is omitted in this paper. The inter- ested reader may be referred to standard and excellent literature in this area (Gosselin & Angeles, 1990; Sciavicco & Siciliano, 2000; Merlet, 2000; Bonev, 2002). It is now necessary to define further quantities to describe the motion of ro- botic manipulators. In analogy to the generalized coordinates, the generalized velocities are introduced (Meirovitch, 1970; Bremer, 1988) and are denoted by s. They always present a linear combination of the time-derivatives of the generalized coordinates z. The simplest case is when these combinations cor- respond to the identity: = =  sI z sz This is the case of classic open-chain robots: aqs= . For parallel manipulators, the end- effector’s velocities are chosen to be the generalized coordinates: Model-Based Control fo r Industrial Robots: Uniform Approaches… 529 zx vs   =≠ =E . This formal property has also an important impact in the prac- tice. The symbolic derivation of the Lagrangian equations of motions becomes very messy for parallel robots, such that its implementation in real-time con- trol systems is very restrictive (Tsai, 1999). The last fundamental step of our revised kinematic analysis is the definition of limb's jacobians iTJ and iRJ that relate its translational and its angular veloci- ties to the generalized velocities of the robot, respectively: svJ∂∂=i)i( TiandsJ∂∂=i)i( Riω The use of the modified DENAVIT-HARTENBERG-notation allows also a re- cursive calculation of the limb's jacobians: ( )se Jr J R J 1iR1i i ∂∂+ − = − −− − −i z )i(i i Td~ iT i 1 11 (11) se JR J 1iR i ∂∂+ = − −i zi Riϑ 1 (12) The next subsection demonstrates the efficiency and uniformity of the pro- posed method for deriving the kinematics of a serial and a parallel industrial robot. 2.4 Application of the Kinematic Analysis of Industrial Robots 2.4.1 Serial Manipulators: Case Study KUKA KR15 The direct kinematics of serial-chain robots is straight forward. The transfor- mation matrix can be calculated by starting from the base and evaluating the single1−i iT. By solving () () (), q!n i i,a xT T qT1i i0 E 0 a0 E = =∏=− we obtain the pose vector x. The jacobian is also joint-wise simple to obtain: ()[ ]nJ J J qJ !2 1= with » ¼º « ¬ª ×=i z)(i )( )( ier eJi z 0E0 0 (13) 530 Industrial Robotics: Theory, Modelling and Control This can be deduced by using the MDH-notation and the recursive formulae given above. Although the solution of the inverse kinematics is generally hard to obtain for open-chain mechanisms, industrial robots are characterized by simple geometry, such that a closed-form solution exists. This is the case here, where the three last revolute joint axes intersect at a common point (spherical wrist) (Sciavicco & Siciliano, 2000). 2.4.2 Parallel Manipulators: Case Study PaLiDA The general method of calculating the inverse kinematics of parallel robots is given by splitting the system into a set of subchains. The structure is opened and separated into "legs" and an end-effector-platform. Hereby the enclosure constraints have to be calculated, which are the vectors connecting jA with jB [ ] . z y xE )( j j jA Bj j j j B A r R r r rE0 E0 E0 T+ + −= = (14) Thus, every chain can now be regarded separately as a conventional open- chain robot with a corresponding end-effector position at j jA Br. MDH- Parameters are defined for each subchain and the direct kinematics is solved as described above. Since we consider non-redundant mechanisms, the result- ing serial chains are very simple, such that a closed form solution always ex- ists. For the studied case PaLiDA , the definition of the MDH-parameters and frames are depicted in Figure 2. The solution of the full inverse kinematics is obtained by 2 2 2 a j j j j z y x l q j+ + == (15) ¸¸ ¹· ¨¨ ©§ −= jj jzx arctan α (16) ,ry jj j ¸¸ ¹· ¨¨ ©§ =arctan β (17) which are quite simple equations. The differential kinematics can be deduced analytically for the inverse problem by the inverse jacobian: () »¼º «¬ª ∂∂ ∂∂=∂∂=− Ea Ea a 1 ω   q rq sqxJ (18) Model-Based Control fo r Industrial Robots: Uniform Approaches… 531 Figure 1. Definition of the MDH Coordinate systems and parameter for the KUKA KR 15 Many methods are proposed in the literature for calculating the inverse jaco- bian. We propose here the most straight-forward way in our case. Every single chain j corresponds to the thjraw of the inverse jacobian: [ ]Ea E Ea a1 j jj j j jj j jj B BB B BB Bj~q q q rIvv rv v sv vJ −∂∂ = »» ¼º «« ¬ª ∂∂ ∂∂ ∂∂ =∂∂ ∂∂ =−   ω (19) The velocities of the points jB can be obtained by simply differentiating the constraint equation (14): EE RE E E ω j j B B r r r v~r~ jB + = + =  ω (20) By using the recursive laws given by eq. (3-5) the complete inverse kinematics of the subchains can be solved, yielding velocities and accelerations of each limb and moreover a functional relationship between jaq and jBv that is needed for (19). 532 Industrial Robotics: Theory, Modelling and Control i iϑidiaiα 12πα−i 0 0 2π 22πβ−i 0 0 2π− 30 il 02π− Figure 2. Definition of the MDH-parameters for a serial subchain of the hexapod PaLiDA As conclusions, we can retain that the formal differences between parallel and serial robots have to be taken into account. A unified approach can be given if the notions of minimal coordinates and velocities are kept in mind. The MDH- notation provide the same procedure when solving kinematics for both robotic types. For parallel robots it is sufficient to formulate the constraint equations. Hereafter the mechanism is separated into serial subchains that can be treated exactly as any other open-chain manipulator. Efficient Formulation of Inverse Dynamics Model-based and feedforward control in industrial robotics requires computa-tional efficient calculation of the inverse dynamics, to fulfill real-time require- ments of standard control systems. The real-time calculation of the desired ac- tuator forces aQ depends on the used approach for the derivation of the inverse Model. For the sake of clarity we concentrate first on rigid-body dy- namics. The corresponding equations of motions for any manipulator type can be derived in the following four forms: ( )sszB Q ,,a a= (21) () ()szN qzM Q   , + =a a a (22) () () ()zgszc qzM Qa a a a a + + =   , (23) ( )min a a psszA Q ,, = (24) Model-Based Control fo r Industrial Robots: Uniform Approaches… 533 whereaQ being the vector of actuation forces. The massmatrix is denoted by M. The vectors c and g contain the centrifugal and Coriolis, and the gravita- tional terms, respectively. The vector N includes implicitly c and g. Ana- logically, the vector ( )sszB,, includes implicitly all terms of rigid-body dy- namics. We notice here, that the index ‘a’ is used to distinguish the quantities that are related to the actuation space. A trivial but very important remark is that all model forms have in common, that the inputs are always given in the configuration space by z,s and s, whereas the outputs are always given in the actuation space: aQ. Although, equations (21-24) yield exactly the same re- sults, they are very different to derive and to calculate. Although eq. (23) is the most computational intensive form, it is very reputed in robotics because it is highly useful for control design and planning. The case of open-chain manipu- lators is easier. The coincidence of configuration space with the actuation space allows a straight-forward implementation of the Lagrangian formalism for its derivation. This is not the case for the parallel counterpart, where the same formalism leads to messy symbolic computation or in the worst case to non- closed form solution (Tsai, 1999). Therefore, we focus in the following on the most efficient 1 form (21) that can be derived uniformly for parallel and serial robots. 3.1 Derivation of the Rigid-Body Dynamics The suggested approach is the Jourdainian principle of virtual power that pos-tulates power equality balances with respect to the forces in different coordi- nate spaces (Bremer, 1988). For instance, a power balance equation is obtained as aT a aT aTQsqQq s ¸ ¹·¨ ©§ ∂∂= ⇔ ∂= ∂ τ τ (25) where τ is the vector of the generalized forces. Equation (25) means that the virtual power resulting in the space of generalized velocities is equal to the ac- tuation power. The power balance can be applied for rigid-body forces: rbT a rba, τ− ¸ ¹·¨ ©§ ∂∂=sqQ (26) 1 Parameterlinear equations of motions (24) are actually more computational efficient. Since they are derived from (21), they are discussed later on. 534 Industrial Robotics: Theory, Modelling and Control The generalized forces are computed as the summation of the power of all KN limbs: ( ) ( ) ¦ = »» ¼º «« ¬ª + ¸¹·¨©§ ∂∂+¸¸ ¹· ¨¨ ©§ ∂∂ =K i i iiN ii)( i i)( i i~m 1T ST S rb ω ωωωτS iS i I Isasv  (27) with g v a − = i i S S being the absolute acceleration of the thi link’s center of gravityiS. The velocity of the center of gravity, the mass and the inertia-tensor with respect to iS are denoted by iSv,im and )(iS iI , respectively. To be able of using the recursion calculation of kinematic quantities (2-5, 11), eq. (27) is transformed to ( ) ¦ =+ + «««« ¬ª ¸¸ ¹· ¨¨ ©§ ∂∂=ΚΝ 1ιω ω ω τii)i(i)i(ii)i(i)i(ii)i( ~ ~ ~m iTs s asv J  TT ( ) ( ) »»»» ¼º + +¸¸ ¹· ¨¨ ©§ ∂∂+i)i(i i)i()( )i(i)i(i)i()( )i(i)i( ~ ~as I Isi ii i JiRω ω ωω  TT (28) withis being the vector of the thi body’s first moment 2 [ ]i Sir s)i(i i i i i m s s s z y x= =T (i Sir: location of iS with respect to the limb-fixed coordinate frame) and )i( i)i(I being the inertia tensor about the same coordinate frame. It is obvious, that the calculation of rbτ requires the quantities of motions of all bodies. The latter can be obtained by applying the kinematic analysis as al- ready explained in the former section 2. The transformation of the generalized forces into the actuation space according to (2) is trivial for the case of serial robots ( )aqs≡ Iqq sq=¸¸ ¹· ¨¨ ©§ ∂∂=¸ ¹·¨ ©§ ∂∂− − T aaT a   2 not to confuse with generalized velocities sModel-Based Control fo r Industrial Robots: Uniform Approaches… 535 For parallel manipulators, the numerical calculation of the jacobian is neces- sary (see also section 2.3): rbT rbT a rba, τ τ JsqQ =¸ ¹·¨ ©§ ∂∂=−  The inverse dynamics presented by (28) is already highly computational effi- cient. It can be implemented in real-time within nowadays standard control systems for parallel as well as for serial ones. Such model can be further opti- mized and transformed into a linear form with respect to the minimal dynamic parametersminp. 3.2 Minimalparameter Form of the Equations of Motion By transforming the dynamics into form (24), two main advantages result. At one hand, regrouping the parameters will further reduce the calculation bur- den and at the other hand, one obtains the set of identifiable parameters of the robotic system. We focus now on the dynamic parameters presented by im,is andiI. To regroup such parameters, the definition of two new operators ()∗. and ()¡. are required first: i)i()( )i( i: ω ωi i i I I=¡∗ (29) with »»» ¼º ««« ¬ª =∗ z y xz y xz y x i i ii i ii i i i: ω ω ωω ω ωω ω ω 0 0 00 0 00 0 0 ω and [ ]T zz yz yy xz xy xx i i i i i i I I I I I I=¡ iI The inverse dynamics (28) can be written as [ ] N iK ii iiN i i)i( i)i(i)i( i)i()( i)i(i)i( )( m~ ~~ ~ ~ rb,i 1T RT T rb pi Hi i isI 0 aa 0J J »»» ¼º ««« ¬ª »» ¼º «« ¬ª − ++=¡ =∗ ∗ ¦  ω ω ωω ω ωτ (30) [ ] ( )[ ] ! ! rbK KT T T 2T 2 1 p1 sszHp p p H H HN ,,N = which is now linear in respect to the parameter set rbp, that groups all physical parameters of all limbs of the robot. Since each limb contributes with 1 mass parameter, 3 first-moment parameters and 6 inertiatensor elements, we obtain 536 Industrial Robotics: Theory, Modelling and Control for the robot the number of ( )KN×++ 631 physical parameters. The contribu- tion of each single parameter to the dynamics is presented by the correspond- ing column of the matrix iH. The dimension of rbp has to be reduced for more computational efficiency and identifiability of the dynamics model. In the field of robotics, many researches have been achieved on this subject, especially for serial robots (Khalil & Kleinfinger, 1987; Gauier & Khalil, 1990; Fisette et al., 1996). Recently the problem was also addressed for parallel mechanisms (Khalil & Guegan, 2004; Abdellatif et al., 2005a). Generally, the procedure con- sists in a first step of grouping the parameters for the open chains. Afterwards, one looks for further parameter reduction that is due to eventually existing closed kinematic loops. In Praxis, the first step is common for serial and paral- lel robots. For the latter, the structure is subdivided in single serial chains. The second step is achieved of course, only for parallel robots.The matrices iH in (30) can be grouped for single serial kinematic chains, such that a recursive calculation: i i i i K LH H + =−1 (31) can be achieved. The matrices iL and iK are given in (Khalil & Dombre, 2002; Grotjahn & Heimann, 2000). The first step considers in eliminating all parame- tersjprb, that correspond to a zero row jh of H, since they do not contribute to the dynamics. The remaining parameters are then regrouped to eliminate all linear dependencies by investigating H. If the contribution of a parameter jprb, depends linearly on the contributions of some other parameters ∗ kjp,,p j rb,1rb,! , the following equation holds ¦ ==k lljlj j a 1h h (32) Thenjprb, can be set to zero and the regrouped parameters new,lrb,jp can be ob- tained by ∗+ =j lj j j pa p prb, lrb, new,lrb, (33) The recursive relationship given in (31) can be used for parameter reduction. If one column or a linear combination of columns of iL is constant with respect to the joint variable and the corresponding columns of iK are zero columns, the parameters can be regrouped. This leads to the rules which are formulated in (Gautier & Khalil, 1990; Khalil & Dombre, 2002) and in (Grotjahn & Model-Based Control fo r Industrial Robots: Uniform Approaches… 537 Heimann, 2000). The use of MDH-notation is a benefit for applying the reduc- tion rule in an analytical and a straight-forward manner. For revolute joints with variable iϑ, the other MDH-parameters are constant. This means that the th9, t h e th10 and the sum of the st1 a n d th4 columns of iL and iK comply with the mentioned conditions. Thus, the corresponding parameters yyiI, xis andim can be grouped with the parameters of the antecedent joint 1−i . For prismatic joints however, the moments of inertia can be added to the carrying antecedent joint, because the orientation between both links remain constant. For a detailed insight, it is recommended to consider (Khalil & Dombre, 2002) and (Grotjahn & Heimann, 2000). In the case of parallel robots, where the end-effector platform closes the kine- matic loops, further parameter reduction is possible. The velocities of the plat- form joint points jB and those of the terminal MDH-frames of the respective leg are the same. The masses can be grouped to the inertial parameter of the EE-platform according to steiner's laws (Khalil & Guegan, 2004; Abdellatif et al., 2005a). 3.3 Integration of friction and motor inertia effects For further accuracy enhancement of the inverse dynamics models, the effects of friction and motor inertia should be considered. Especially the first category is important for control applications (Grotjahn & Heimann, 2002; Armstrong-Hélouvry, 1991; Bona & Indri, 2005). The general case is considered, when fric- tion is modeled in all active as well as in passive joints. The friction is given in the joint space Q, usually as nonlinear characteristics ()()i i f qf qQ i= with re- spect to the joint velocity, i.e. () ()i i i f qr q r qQ i i i 2 1sign + = (34) The joint losses have to be mapped into the actuation (or control) space. Uni- formly to the rigid-body dynamics, the Jourdainian principle of virtual power is recommended. The power balance for friction can be derived as fT T fT afa, QsqJ QqqQ ¸ ¹·¨ ©§ ∂∂=¸¸ ¹· ¨¨ ©§ ∂∂=  (35) that means: the friction dissipation power in all joints (passive and active) has to be overcome by an equivalent counteracting actuation power. From the lat-ter equation it is clear that the case of classic open-chain robots is restrictive, when the joint-jacobian aqq∂∂ is equal to the identity matrix. In the more general case of parallel mechanisms, friction in passive joints should not be 538 Industrial Robotics: Theory, Modelling and Control neglected like it is almost always assumed in control application for such ro- bots (Ting et al., 2004; Cheng et al., 2003). The compensation of friction is sim-pler and more accurate for serial robots, since it can be achieved directly in all actuated joints. For the parallel counterpart, the compensation of the physical friction fQ is only possible indirectly via the projected forces fa,Q to account for passive joints. Since the latter are usually not equipped with any sensors, friction compensation in parallel robots is less accurate, which is one of the typical drawbacks of such robotic systems. By using friction models that are linear with respect to the friction coefficients, like (34) it is more or less easy to derive a linear form of (36). The following re- lationship results: ()f f,pszA Q  =fa, (36) where the friction coefficients are grouped in a corresponding parameter vec- torfp. The inertial effects of drives and gears can be also considered and integrated in the dynamics with standard procedures like described in (Sciavicco & Sicili-ano, 2000; Khalil & Dombre, 2002). One of the advantages provided by parallel robots is the fact, that the motors are mainly installed on the fixed platform, such that they do not contribute to the dynamics. This issue remains - at least for industrial application – exclusive for conventional serial manipulators, where the motors are mounted on the respective limbs. 3.4 Example: Minimal rigid-body parameters The illustrative example of minimal rigid-body parameters is considered to give an interesting comparison between serial and parallel manipulators in terms of dynamics modeling. The above described uniform approach is ap-plied for the 6-DOF robots KUKA KR15 and PaLiDA . According to the nota- tions defined in the former section, the minimal parameters are derived for both systems. The results are illustrated in Table 1. Despite higher structural complexity, the minimal parameters of the parallel robot are less numerous and complex than those of the serial one. The single sub-chains of a parallel robot are usually identical and have simple structure, which yields identical and simple-structured parameters for the different chains. The kinematic cou-pling yields a further parameter reduction as the example demonstrates for 6p-10p. The inertial effects of the limbs directly connected to the moving plat- form are counted to the dynamics of the end-effector by taking [ ]T j j j Bz By BxE )E( r r r= jBr into account (see also eq. (14)). The derivation of mini- mal parameters is of a major interest, since they constitute the set of identifi-Model-Based Control fo r Industrial Robots: Uniform Approaches… 539 able ones (Gautier & Khalil, 1990). Following section discusses the experimen- tal identification of parameters and the implementation of identified inverse models in control. KUKA KR15 PaLiDA 1p( ) ( )( )2 32 22 1 6 5 42 233 22 1 3 2 11 lll m m m lmm ml I I I I yy yy zz M ++ + + + ++ + + + + zz yy zzI I I3 2 1 + + 2p ( )6 5 32 2 2 2 m m ml I I yy xx+ + − −zz yy xx xxI I I I3 2 3 2 − − + 3p xzI2 yy zzI I3 2+ 4p ( )6 5 4 32 2 22m m m ml I I zz M + + + + +ys2 5p ( )6 5 4 3 2 2 m m m ml s x+ + + + zs3 6p( )( )6 5 42 32 444 4 3 3 2 m m mllsl I I I z yy yy xx + + − ++ + −( ) ¦=+ +6 12 2 3 j Bz By xxj j Er r m I 7p ( )6 5 4 43 43 3 m m mll sl I z xy+ + − − ( ) ¦=+ +6 12 2 3 j Bz Bx yyj j Er r m I 8p( )( )6 5 42 42 344 4 3 3 2 m m mllsl I I I z yy yy xx + + + ++ + −( ) ¦=+ +6 12 2 3 j By Bx zzj j Er r m I 9p ( )6 5 4 3 3 m m ml s x+ + − ¦=+6 1 3 j Bz zj Er m s 10p ( )6 5 4 4 4 3 m m ml s s z y+ + − −36m mE+ 11pyy yy xxI I I5 4 4 + − – 12pyy zzI I5 4+ – 13pys4 – 14pxx yy xxI I I6 5 5 + − – 15p xx zzI I6 5+ – 16pz ys s6 5− – 17p zzI6 – 18p 3MI – 19p 4MI – 20p 5MI – 21p 6MI – Table 1. Minimal rigid-body parameter set for the 6-DOF robots KUKA KR15 and PaLiDA. 540 Industrial Robotics: Theory, Modelling and Control Dynamics Model Identification A main result retained from the last section is that the inverse dynamics of ro- botic manipulators can be written as ( ) () ( )psszA pszA psszA Q Q Q    ,, , ,, = + = + =f f rb rb fa, rba, a with the vector p containing the minimal rigid-body parameters and friction coefficients. With such an LP ( linear in the parameter )-structure computational efficient linear estimators can be applied for identification. The formulation of the related problem is derived for an experiment producing N data vectors as follows ( ) ( )N η Ψ Γ»»» ¼º ««« ¬ª + »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª N N N N ,,,, Nee p sszAsszA QQ # # #1 1 1 1 aa1 (37) with the measurement vector Γ, the information or regression matrix Ψ and the error vector η that accounts for disturbances. The solution of the over- determined equation system (37) yields Weighted Least-Squares estimate WLSpˆ of the parameter vector (Walter & Pronzato, 1997) ( ) Γ Ψ Ψ Ψ1 T 1 1 T WLS− − −= W W pˆ (38) where W is a weight matrix. The classical Least-Squares (LS) estimator results from (38) by setting W to a diagonal matrix with equal entries ( ) ΓΨ ΨΨT 1 T LS−=pˆ (39) The quality of the estimation results depends on the so called experiment de- sign that define how and which data has to be collected to guarantee good es- timate. Here, two main categories exist: the direct and indirect approach. The first one suggests collecting the data along one single trajectory that excite all parameters. The second approach proposes collecting different measurements in single configurations within the workspace. Each approach has characteris- tic advantages and drawbacks that depend also on the regarded robot type. It can be stated generally, that the identification procedure for parallel robots is more difficult, because the necessary information about the minimal coordi- nates, velocities and accelerations can not be directly measured (Abdellatif et al., 2005c). A systematic comparison for both approaches is given in Table 2 as Model-Based Control fo r Industrial Robots: Uniform Approaches… 541 well as an evaluation of its appropriateness for the studied manipulator types. The main drawback of indirect approaches is the time-consuming data collec- tion procedure, since many measurements are necessary. Moreover, they re- quire high quality measurements to enable handling narrow measurement in- tervals, otherwise the data quality will be poor (Grotjahn et al., 2004). These drawbacks are eliminated by direct approaches, since we obtain quick and fast identification trajectories (Abdellatif et al., 2005c). The availability of analytical form of the trajectories helps a highly efficient frequency-domain handling of the measurements. On the other hand, optimized trajectories are needed (Swevers et al., 1997) that can not be simply achieved by conventional indus-trial control setups. Additional programming or hardware interfaces are nec- essary. This is not the case with the indirect approach because simple PTP- motions with trapezoidal velocity profile are used, which can be directly pro- grammed and executed. Furthermore, the indirect approach enables identifica- tion of submodels independently on each other, i.e. friction and rigid-body or inertial and gravitational parameters (Grotjahn et al., 2001; Grotjahn et al., 2004). direct approach indirect approach serial parallel serial parallel time cost + + – – signal processing + + 0 – interface requirement – – + + sub-model identification – – + + Refs Swevers et al., 1997 Abdellatif et al., 2005c Grotjahn et al., 2001 Grotjahn et al., 2004 Table 2. Direct vs. indi rect identification approach: appropriateness for serial and parallel in- dustrial robots The recommended approach depends on the real setup and equipment. If the available control system allows the achievement of arbitrarily complex trajec- tories, it is recommended to measure optimized trajectories. Otherwise, long measuring processes have to be taken into account, if the indirect approach is chosen. E.g. the identification of friction models for the KUKA KR15 and for PaLiDA required 45 min and 120 min measurement time, respectively. The validation of the identified dynamics models is achieved by considering reference trajectories that were not used for identification. For the industrial KUKA KR15 robot, the ISO-92833 standard trajectory is validated. The meas- ured torques are compared with those calculated by the identified model. The results are illustrated in Figure 3. 542 Industrial Robotics: Theory, Modelling and Control Figure 3. Accuracy validation of identified model of the KUKA KR15 : Torques for ISO- 9283 trajectory Unfortunately, standard benchmarks are not defined for parallel robots yet and the ISO-92833 violates the workspace of the here studied robot. Thus, an inclined circular motion in the middle of the workspace is chosen as a bench- mark test for validating the accuracy of the identified model for PaLiDA . The results are shown in Figure 4.Model-Based Control fo r Industrial Robots: Uniform Approaches… 543 Figure 4. Accuracy validation of identified model of PaLiDA : Forces for a circular benchmark trajectory. For both robot types, very good agreement between model output and ex- periment is noticeable. Of course, some deviations still remain, since a com-plete agreement of the model and the reality is quite impossible. Nevertheless, these results are an excellent base for the compensation of nonlinearities of both robots. For place reasons, the values of the identified parameters of the studied systems are not illustrated. We refer though to former publications with deeper insight and more discussion on dynamics identification of robots (Abdellatif et al., 2005b; Abdellatif et al., 2005d; Grotjahn et al., 2004; Grotjahn et al., 2001).544 Industrial Robotics: Theory, Modelling and Control Model-based Feedforward control The basics for implementing model-based feedforward control are now achieved. We have adequate modeled systems with accurate identified pa- rameters. The next challenge is to use the attained knowledge for practical and industrial relevant control. The compensation of nonlinear dynamics can only be performed by using feedforward approaches because there is usually no possibility to change the feedback controller structure provided by the robot manufacturers. Anticipating for possible next commercial technologies, indus- trial control systems can have also a force/torque interface. In that case, the controller input can be directly used by the robot’s operator. However, the standard in industrial applications remains that only the desired path can be changed by the feedforward controller as other interfaces do not exist. The case of parallel robots is a prime example, that conventional and commercial control systems are less adequate for such new industrial application. It is be- lieved, that the use of conventional technology widespread for serial robots or machine tools should be reconsidered. The paradigm of single-joint control do not regard highly nonlinear kinematic coupling and is one of the main reasons, that parallel robots still did not reach their promised potentials in practice. In the following we want to consider both possibilities of direct force/torque in- put and the position pre-correction. Respecting the scope of this paper, it is more focused on the second case. First nonlinear feedforward control strate-gies are discussed, that are based on the friction and rigid-body model pre- sented in section 3. Subsequently, compensation methods are presented which use linear models for improvement of path accuracy. 5.1 Nonlinear Compensation Control 5.1.1 Computed Force/Torque Feedforward Control The computed force/torque feedforward control is one of the most classic ap-proaches in robotics (Sciavicco & Siciliano, 2000; Khalil & Dombre, 2002). A uniform scheme can be given according to the formalism defined in previous sections and is depicted in Fig 5. The global input consists in the minimal co- ordinates z with an explicit or implicit dependency on time t, to enable the derivation of velocities and accelerations s and s. Only the nonlinear block ( )da,q z→ depends on the robot’s type. It consists in the trivial identity trans- formation for serial robots and the inverse kinematics (14) for parallel manipu- lators. For both systems, the desired forces (or torques) da,Q can be only de- rived from z,s and s. Of course, such an approach depends on the presence of a motor-current interface to achieve the direct forward feeding of the calcu- lated forces or torques. Model-Based Control fo r Industrial Robots: Uniform Approaches… 545 Figure 5. Uniform Scheme of Computed Force/Torque Feedforward Control The impact of the feedforward compensation of dynamics is depicted for the robot PaLiDA in Figure 6. Figure 6. Tracking performance of the parallel robot PaLiDA . A Comparison between the single-joint and the feedforward approach. 546 Industrial Robotics: Theory, Modelling and Control The same circular motion presented in Figure 4 is investigated. Without doubt, the tracking errors for all six actuators were considerably decreased. As depicted, the control deviations resulting from the use of the simple decentralized single-joint control yields unacceptable errors (about 4 mm while acceleration). According to our experience, the compensation of the nonlinear dynamics is indispensable for operating parallel robots at high velocities and accelerations. Details on related experimental studies can be found in (Abdellatif et al., 2005a). A key role for the control improvement is assumed by the modeling of inverse dynamics and the appropriate identification of the related parameters. 5.1.2 Nonlinear Precompensation By the absence of motor-current or force/torque interface, a similar approach to the feedforward control can be applied, which we call nonlinear pre-correction (see Figure 7). The inverse dynamics model is computed the same way but is now provided to the inverse controller 1− RF that yields the pre-correction terms da,qΔ . The advantage of nonlinear trajectory pre-correction compared to the computed force/torque method is that one only needs to convey path informa- tion to the robotic system. Force/torque information are not necessary. Only a path interface is necessary. The approach is applicable to standard industrial robot systems since such an interface is usually provided for the integration of external sensor information into the control circuit. The proposed approach was implemented within the KRC1 standard control for the robot KUKA KR15 . The improvements of tracking errors are depicted in Figure 8. The disadvan- tage of the nonlinear pre-correction is the necessity of a reliable controller model to be inverted. If there is no knowledge about the controller, experimen- tal identification of the controller dynamics has to be carried out (Grotjahn & Heimann, 2002). Figure 7. Uniform scheme of nonlinear pre-correction control. Model-Based Control fo r Industrial Robots: Uniform Approaches… 547 (a) (b) Figure 8.Path deviations of the KUKA KR15 : (a) ISO-9283 trajectory; (b) single motion of the second joint. 5.2 Feedforward Control by Linear Model Although the linear models disregard nonlinearities, they can be used to their compensation by taking into account actual path deviations. The advantage is that arbitrary effects can be compensated, even effects which are not included in the complex nonlinear model. This is done by ’iterative learning’ algorithm that is presented in the following. Alternatively ‘training’ of a feedforward joint controller is explained. Both approaches are based on the actuation vari- ables. Thus, their implementation is similar for parallel and serial robots. 5.2.1 Iterative Linear Learning Learning control is based on the idea that measured path deviations can be used to adjust the trajectory that is transmitted to the controller so that the ac- tual trajectory comes closer to the originally desired one (Moore, 1999; Long- man, 2000). Thereby, the path accuracy is improved by iterative correction (see Figure 9). 548 Industrial Robotics: Theory, Modelling and Control Figure 9. Principle of Iterative Learning Control. For learning implementation, the robot is already under feedback-control, such that its closed-loop dynamics can be described in a linear discrete-time form by the state-space equations: ( ) ()()()() ()k kk kk k1 1 w u B x A x + + =+ () ()() ()k kk k2w x C y + = (40) with u being the input and y being the output. It is assumed that 1w repre- sents some deterministic disturbance that appears every repetition and that 2w is the measurement disturbance. The aim of Learning is to change the command input every trial j using the learning control law: () ()()() ( )k,k,k kd j j L j y y uf u =+1 (41) such that the desired trajectory dy is tracked. Iterative learning control is called linear, when the learning law Lf makes an iterative change in the input that is a linear combination of the error d j j y y e − = measured in the previous repetition and the last input sequence ( )d j j j j j j a, a, a, 1 a, 1 q qL q q Le u u − + = + =+ + (42) The design of the learning gain matrix L has to achieve desired properties. It is simple to derive the iterative error dynamics as ( )j j ePLI e −=+1 (43) where I is the identity matrix and Model-Based Control fo r Industrial Robots: Uniform Approaches… 549 () () () ()( ) ()»»»» ¼º «««« ¬ª −= 1 11 21 g Ng Ngg gg "%# #P (44) if a linear time-invariant actuator error dynamics is assumed, with an impulse response g.N is the length of the actual trajectory or input. Choosing L to be1−P would lead to immediate zero tracking. The inversion of P is equiva- lent to an inversion of the joint’s closed-loop. As it can not be guaranteed that the identified system is phase-minimum, an exact inversion is not always pos-sible. In that case the resulting corrected trajectory would include unacceptable oscillations. To avoid this, many methods can be used, like filtering suggested in (Norrlöf & Gunnarsson, 2002; Longman, 2000) etc. We propose here two methods. The first one is an extended LS-method or the Inverse-Covariance Kalman-Filter (Grotjahn & Heimann, 2002). It requires a good quality of meas-urement signals, wich is the case for standard industrial robot. In the case when measurements of the actuator variables are importantly corrupted by noise, the inverse of P is not adequate. Alternatively, a contraction mapping approach can be used (Longman, 2000), where the learning matrix is defined by: T 1P LΦ= for a learning gain 1Φ that has to be chosen. The dynamics and therefore an estimate of the impulse response g of the closed-loop dynamics can be identified by applying standard procedures (Ljung, 1999). The main advantage of learning control is the fact that it can compensate for influences and systematic deviations that are not captured by the model. This holds not only for non-modeled effects by the linear models used for learning, but also for effects not even reflected by the presented complex nonlinear model. Another advantage is that the actual deviations of end-effector position and orientation can be taken into account if they are measurable. The main disadvantage, however, is that every small change of the desired trajectory ne- cessitates a new learning process. Each learning process needs some iterations until convergence, which can be undesirable by robot operators. 5.2.2 Training of Feedforward Controller In order to avoid the disadvantages of learning control described in the previ-ous section, Lange and Hirzinger proposed to 'train' a feedforward controller from the learnt behavior (Lange & Hirzinger, 1996). The feedforward control- ler model has to be identified by using e.g. the extended LS-method or the In- verse-Covariance Kalman-Filter (Grotjahn & Heimann, 2002). The scheme of training is given by Fig 10. 550 Industrial Robotics: Theory, Modelling and Control Figure 10. Training a Feedforward Controller. As a matter of principal, a feedforward controller has the advantage that it can be calculated in real-time. Therefore, it can be implemented in commercial con- trols. Furthermore, a powerful feedforward controller offers the possibility to transfer the learned behavior to similar trajectories. Consequently, small trajec- tory changes would not require a new learning process. The choice of the con- troller structure is a key issue. A fundamental condition is that the model can satisfactorily reproduce the learned behavior. In (Lange & Hirzinger, 1994), linear models like () () () ( ) () ( ) ¦ =−+ + =m mld d d tk lk lr k ka, a, a, a q q q q (45) were proposed. This approach, however, cannot compensate nonlinear effects, like friction. Fig 11 shows that the identification of the linear feedforward con-troller leads to a mixture of two effects. In addition to inertial influences, fric- tion has a large impact at the beginning of the motion. Therefore, the correc- tions of the linear controller are too small in the beginning and too large at later zero-crossing of velocity. To improve this, the approach is extended by another term: () () () ( ) () ( ) ¦ =−+ + =m mld d d tk lk lr k ka, a, a, a q q q q (46) () ( ) () ( ) ¦ =−+ +p pld d tk lk lsa, a, sign q q   This auxiliary summand is suited to separate friction from inertial influences. After its consideration, learned corrections are reproduced much better than by the linear model. As expected, better tracking behavior can be obtained (see Fig 11). Although the performance of 'training' remains less than that of 'learn-Model-Based Control fo r Industrial Robots: Uniform Approaches… 551 ing', it seems to be an alternative that combines good results with practical simplicity. The values tm,m,tp and p can be chosen by operators corre- sponding to the desired error dynamics. Using only positive values is equiva- lent to the consideration of posterior or future errors, only. It is recommended to chose negative tm and ts, such that the influence of previous dynamics, like high accelerations or velocities, can be taken into account. (a) (b) Figure 11. Behaviour of the first axis of the manutec-r15 for a vertical circle: (a) learned and trained corrections; (b) comparison of resulting tracking errors 5.2.3 Application to serial robots The presented compensation methods are investigated by experimental appli- cation to a classic serial manipulator: the manutec-r15 . It is emphasized in the following on the resulting performance and on the applicability. Several dif- ferent test trajectories are used. Here, the results are explained by regarding two trajectories: a vertical circle and a tracking of planar corner in the x-y- plane with a change of orientation by 90°. The vertical circle has a diameter of 40 cm and a path velocity of 0.6 m/s. This means that the circle is approximately completed after 2.1 s. The cartesian path deviations are depicted in Figure 12. It shows some general results which can be reproduced for all tested trajectories. The ’training‘ yields the worst results of all methods. The nonlinear pre-correction is much better. Learning Control yields even further improvements. In order to numerically evaluate the results, the root mean square (RMS) of the cartesian errors are evaluated for the trajec- tories and for the different approaches. For all investigated trajectories, ’ learn- ing’ leads to a decrease of at least 80 % after four iterations. The nonlinear pre- correction reduces the criterion by at least 60 %, whereas the ’training’ leads to a minimum reduction of 35 %. Figure 12 depicts the tracking of the corner while changing the orientation by 90° for the manutec-r15 robot. Although the 552 Industrial Robotics: Theory, Modelling and Control path velocity is only 0.02 m/s, joint velocities and accelerations are quite high. Therefore, the couplings between different links have strong impact. These ef- fects can not be compensated by the decoupled 'trained' feedforward joint con- trollers. Figure 12. Comparison of cartesian path errors for a vertical circle of the manutec-r15 Nonlinear pre-correction is the only approach which combines efficient com- pensation of nonlinear deviations with practical applicability. 'Learning' yields better results, but robustness and stability properties have to be improved for the integration in standard industrial controls. The proposed nonlinear 'train- ing' combines simplicity with applicability but is only suitable for slow trajec- tories for which couplings between the different links have only low impact. An extended experimental investigation can be found in (Grotjahn & Heimann, 2002). Figure 13. Tracking a Corner by the Manutec-r15 Robot. Experimental Comparison of Different Feedforward Controllers Model-Based Control fo r Industrial Robots: Uniform Approaches… 553 5.2.4 Application to parallel robots In analogy to the case of serial robots, the compensation techniques were im- plemented to the parallel manipulator PaLiDA . It is important to notice, that the feedforward compensation techniques are all based on the actuation vari- ables, for serial, as well as for parallel mechanisms. The procedure of experi- mental investigation and evaluation is very similar to that mentioned in the previous section. Figure 14 shows the improvement of tracking for the here considered robot. We compare the performances of simple single-joint control, Feedforward control and Learning control for a circular and a quadratic mo- tion. The range of investigated velocity is here much higher than the case of se- rial robots. The average end-effector's velocity is equal to 1.5 1ms−and 2 1ms− for the circular and quadratic motion, respectively. Figure 14. Comparison of Cartesian Path Errors for the Parallel Robot PaLiDA . Left: Circle Motion, Right: Quadratic Motion. The feedforward control helps decreasing the cartesian RMS-error of about 60 %. Learning control decreased the errors of at least 90 %, which is very satis- factory. Such improvement can be clearly observed in Figure 14. Conventional control strategies are not acceptable for operating robots in an accurate man- ner. The Integration of model-based feedforward compensators, such inverse dynamics or learning controller yield impressive improvement of tracking ac- curacy.554 Industrial Robotics: Theory, Modelling and Control Conclusions This chapter presented a uniform and coherent methodology for model-based control of industrial robots. To take account of the technological evolution over the last years, classic approaches were extended to the class of parallel kine- matic manipulators or parallel robots. A revision of the basics is necessary. Many assumptions that became common due to the reputation of classic open-chain robots were highlighted and revised. This is necessary to be able of de- veloping uniform approaches for handling serial and parallel robots. The idea of this work was to exploit the similarities and to consider the differences be- tween two types. The similarities can be provided by the same modules (calcu- lation, control, etc.). The differences are considered by interfaces (transforma- tions etc.) that account for robot inherent properties. Already at the basic level of modeling the kinematics and dynamics, the uni- formity of the methods can be achieved by considering the generalized coor- dinates and velocities to be the formal conjunction of serial and parallel robots. It is than possible to apply e.g. generic algorithms and efficient calculation of the inverse dynamics, such that the presented solutions remain valid for a wide class of robots. This was also the case for developing identification strategies of the model parameters. It was demonstrated, that with light adap- tation, the same algorithms and experimental strategies can be applied for se- rial robots and for parallel manipulators. In the praxis of control, it is the type of the control system that is more crucial for successful implementation, rather than the robot structure. If a force/torque interface is provided, all feedforward strategies can be applied in the same way for parallel and serial robots, since the desired motions are given. If only a position interface is supplied, it is practicable to use correction techniques at actuator levels. The chapter presented nonlinear and linear ap- proaches. The nonlinear pre-correction techniques are recommended for typi- cal industrial control systems and have demonstrated impressive performance. Iterative learning and training algorithms offer the possibilities to use compu- tational efficient linear models. Like substantiated by experimental results the improvement of the control accuracy was investigated for serial and parallel robots. References Abdellatif, H.; Grotjahn, M. & Heimann, B. (2005a). High efficient dynamics calcula- tion approach for computed-force control of robots with parallel structures, Pro- ceedings of 44th IEEE Conference on Decision and Control and the 2005 European Control Conference (CDC-ECC05), pp. 2024-2029, Seville, 2005. Abdellatif, H.; Heimann, B. & Grotjahn, M. (2005b). Statistical approach for bias-free identification of a parallel manipulator affected with high measurement noise, Model-Based Control fo r Industrial Robots: Uniform Approaches… 555 Proceedings of the 44th IEEE Conference on Decision and Control (CDC-ECC05), pp. 3357-3362, Seville, 2005. Abdellatif, H.; Heimann, B. & Holz, C. (2005c). Time-effective direct dynamics identi- fication of parallel manipulators for model-based feedforward control, Proceed- ings of the 2005 IEEE/ASME International Conference on Advanced Intelligent Mecha- tronics (AIM2005), pp. 777-782, Monterey, 2005. Abdellatif, H.; Heimann, B. & Holz, C. (2005d). Applying efficient computation of the mass matrix for decoupling control of complex parallel manipulators, Preprints of the 16th IFAC World Congress, Prag, 2005. Angeles, J. (2003). Fundamentals of Robotic Mechanical Systems , Springer, New York, Berlin, Heidelberg, 2003. Armstrong-Hélouvry, B. (1991). Control of Machines with Friction , Kluwer Academic Publishers, Boston. Bremer, H. (1988). Dynamik und Regelung mechanischer Systeme, Teubner, Stuttgart. Bona, B. & Indri, M. (2005). Friction compensation in robotics: an overview, Proceed- ings of the 44th IEEE Conference on Decision and Control and the 2005 European Con- trol Conference (CDC-ECC05), pp. 4360-4367, Seville, 2005. Bonev, I. (2002). Geometric analysis of parallel mechanisms, Faculté des études supérieu- res de l’Université Laval. Cheng, H.; Kuen, Y. & Li, Z. (2003). Dynamics and control of redundantly actuated parallel manipulators. IEEE/ASME Transactions on Mechatronics, 8, 4, (2003) 483- Fisette, P.; Raucent, B. & Samin, J. C. (1996). Minimal Dynamic Characterization of Tree-Like Multibody Systems. Nonlinear Dynamics , 9, 1-2 (1996) 165-184. Gautier, M. & Khalil, W. (1990). Direct calculation of minimum set of inertial parame- ters of serial robots. IEEE Transactions on Robotics and Automation , 6, 3 (1990) 368- Gosselin, C. & Angeles, J. (1990). Singularity analysis of closed-loop kinematic chains. IEEE Transactions on Robotics and Automation , 6, 3, (1990) 281-290. Grotjahn, M. & Heimann, B. (2000). Determination of dynamic parameters of robots by base sensor measurements, Proceedings of the sixth IFAC Symposium on Robot Control (SYROCO) , Vienna, 2000. Grotjahn, M.; Daemi, M. & Heimann, B. (2001). Friction and rigid body identification of robot dynamics. International Journal of Solids and Structures, 38, (2001) 1889- Grotjahn, M. & Heimann, B. (2002). Model-based feedforward control in industrial robotic. International Journal of Robotics research, 21, 1, (2002) 99-114. Grotjahn, M.; Heimann, B. & Abdellatif, H. (2004). Identification of friction and rigid- body dynamics of parallel kinematic structures for model-based control. Multi- body System Dynamics, 11, 3, (2004) 273-294. Khalil, W. & Kleinfinger, J. (1986). A new geometric notation for open and closed-loop robots, Proceedings of the 1986 IEEE International Conference on Robotics and Auto- mation, pp. 1174-1179, San Francisco, 1986. Khalil, W. & Kleinfinger, J.-F. (1987). Minimum Operations and Minimum Parameters of the Dynamic Models of Tree Structure Robots. IEEE Transactions of Robotics and Automation, 3, 6 (1987) 517-526. 556 Industrial Robotics: Theory, Modelling and Control Khalil, W. & Dombre, E. (2002). Modelling, Identification and Control of Robots, Hermes, London Khalil, W. & Guegan, S. D. (2004). Inverse and direct dynamics modeling of gough- stewart robots. IEEE Transactions on Robotics, 20, 4, (2004) 754-762. Lange, F. & Hirzinger, G. (1994). Learning to improve the path accuracy of position controlled robots, Proceedings of the Conference on Intelligent Robots and Systems, pp. 494-501, Munich, 1994. Lange, F. & Hirzinger, G. (1996). Learning of a controller for non-recurring fast movements. Advanced Robotics, 10, 2 (1996) 229-244. Ljung, L. (1999). System Identification: Theory for the User , Prentice-Hall, New Jersey. Longman, R. W. (2000). Iterative learning control and repetitive leraning control for engnieering practice. International Journal of Control, 73, 10, (2000) 930-954. Meirovitch, L. (1970). Methods of Analytical Dynamics, McGraw-Hill, New York. Merlet, J.-P. (2000). Parallel Robots, Kluwer Academic Publishers, Dordrecht. Moore, K. L. (1999). Iterative learning control: An expository overview. Applied and Computational Control, Signals and Circuits, 1, (1999) 151-214. Norrlöf, M. & Gunnarsson, S. (2002). Experimental Results of Some Classical Iterative Learning Control Algorithmus. IEEE Transactions on Robotics and Automation, 18, 4 (2002) 636-641. Sciavicco, L. & Siciliano, B. (2000). Modeling and Control of Robot Manipulators , Springer, London. Swevers, J.; Gansemann, C.; Tükel, D.; Schutter, J. d. & Brussel, H. v. (1997). Optimal robot excitation and identification. IEEE Transactions on Robotics and Automation , 13, 5, (1997) 730-740. Ting, Y.; Chen, Y.-S. & Jar, H.-C. (2004). Modeling and control for a gough-stewart platform cnc-mashine. Journal of Robotic Systems , 21, 11, (2004) 609-623. Tsai, L.-W. (1999). Robot Analysis, Wiley-Interscience, New York. Walter, E. & Pronzato, L. (1997). Identification of Parametric Models form Experimental Data , Springer, London. 55720 Parallel Manipulators with Lower Mobility Raffaele Di Gregorio Introduction Parallel manipulators with lower mobility (LM-PMs) are multi-loop mecha- nisms with less than six degrees of freedom (dofs). This type of manipulators has attracted the attention both of academic researchers and of industries since the early appearance of the DELTA robot (Clavel 1988). The DELTA robot showed that, when the manipulation task requires less than six dofs, the use of an LM-PM may bring some advantages (simple architecture of the machine, very fast machine, etc.) that are added to the known appealing features (high stiffness, good positioning precision, etc) of parallel manipula- tors (PMs).Planar motions, translational motions and spherical motions are important examples of motion tasks that require less than six dofs and are of- ten necessary in industrial applications. Each of these types of motion has gen- erated a class of LM-PMs. So, today, there is a great variety of planar PMs (PPMs), of translational PMs (TPMs) and of spherical PMs (SPMs). This chapter attempts to provide a unified frame for the study of this type of machines together with a critical analysis of the vast literature about them. The chapter starts with the classification of the LM-PMs, and, then, analyzes the specific subjects involved in the functional design of these machines. Spe-cial attention is paid to the definition of the limb topology, the singularity analysis and the discussion of the characteristics of some machines. Classification of the Parallel Manipulators with Lower Mobility Addressing the problem of classifying manipulators is neither a useless nor a trivial task. Indeed, an exhaustive classification is able to guide the designer towards the technical answers he is looking for. Lower-mobility manipulators (LM-M) can be classified according to the type of motion their end effector performs by using the group theory (Hervé 1978, 1999). The set of rigid-body displacements (motions), {D}, is a six-dimensional group which, in addition to the identity subgroup, {E}, that corresponds to ab- sence of motion, contains the following ten motion subgroups with dimension greater than zero and less than six (the generic element of a displacement sub-558 Parallel Manipulators with Lower Mobility group can be represented by the screw identifying the finite or infinitesimal motion belonging to the subgroup; the dimension of the subgroup is the num- ber of independent scalar parameters that, in the analytic expression of the ge- neric-element’s screw, must be varied to generate the screws of all the ele- ments of the subgroup): (a) Subgroups of dimension 1: (a.1) linear translation subgroup , {T( u)}, that collects all the translations parallel to the unit vector u. As many {T( u)} as unit vectors, u, can be defined. The identity subgroup {E} is included in all the {T( u)}. A pris- matic pair (hereafter denoted with P) with sliding direction parallel to u physically generates the motions of {T( u)}. (a.2) revolute subgroup , {R(O, u)}, that collects all the rotations around an axis (rotation axis) passing through point O and parallel to the unit vec- toru. As many {R(O, u)} as rotation axes, (O, u), can be defined. The identity subgroup {E} is included in all the {R(O, u)}. A revolute pair (hereafter denoted with R) with rotation axis (O, u) physically generates the motions of {R(O, u)}. (a.3) helical subgroup , {H(O, u, p)}, that collects all the helical motions with axis (O, u) and finite pitch p that is different from zero and con- stant. As many {H(O, u, p)} as sets of helix parameters, (O, u, p), can be defined. The identity subgroup {E} is included in all the {H(O, u, p)}. A helical pair (hereafter denoted with H) with helix parameters (O, u, p) physically generates the motions of {H(O, u, p)}. (b) Subgroups of dimension 2: (b.1) planar translation subgroup , {T( u1,u2)}, that collects all the transla- tions parallel to a plane perpendicular to u1×u2 where u1 and u2 are two orthogonal unit vectors. As many {T( u1,u2)} as unit vectors u1×u2 can be defined. The identity subgroup {E} and all the linear translation sub- groups {T( v)} with v equals to a u1+u2−21 a are included in {T( u1,u2)}. Two prismatic pairs in series, whose sliding directions are respectively parallel to two independent vectors that are linear combination of u1 and u2, physically generate the motions of {T( u1,u2)}. (b.2) cylindrical subgroup , {C(O, u)}, that collects all the motions obtained by combining a rotation around a rotation axis (O, u) and a translation parallel to the unit vector u. As many {C(O, u)} as (O, u) axes can be de- fined. The subgroups {E}, {T( u)}, {R(O, u)} and {H(O, u, p)} are all in- cluded in {C(O, u)}. A cylindrical pair (hereafter denoted with C) or, which is the same, a revolute pair with rotation axis (O, u) in series with a prismatic pair with sliding direction parallel to u physically generate the motions of {C(O, u)}.2. Classification of the Parallel Manipulators with Lower Mobility 559 (c) Subgroups of dimension 3: (c.1) spatial translation subgroup , {T}, that collects all the spatial transla- tions. Only one subgroup {T} can be defined. The identity subgroup {E}, all the {T( u)} subgroups and all the {T( u1,u2)} subgroups are included in {T}. Three prismatic pairs in series whose sliding directions are respec- tively parallel to three independent unit vectors, u1,u2 and u3, physi- cally generate the motions of {T}. (c.2) spherical subgroup , {S(O)}, that collects all the spherical motions with center O. As many {S(O)} as O points can be defined. The identity sub- group {E} and all the {R(O, u)} subgroups are included in {S(O)}. A spherical pair (hereafter denoted with S) or, which is the same, three revolute pairs in series with rotation axes that intersect one another in O physically generate the motions of {S(O)}. (c.3) planar subgroup , {G( u1,u2)}, that collects all the planar motions with motion plane perpendicular to u1×u2 where u1 and u2 are two orthogo- nal unit vectors. As many {G( u1,u2)} as unit vectors u1×u2 can be de- fined. The subgroups {E}, {T( u1,u2)}, {R(O, u1×u2)} and {T( v)} with v equals to a u1+u2−21 a are included in {G( u1,u2)}. A PPR kinematic chain where the sliding directions of the two prismatic pairs are respec- tively parallel to two independent vectors that are linear combination of u1 and u2, and the revolute-pair axis is orthogonal both to u1 and to u2 physically generates the motions of {G( u1,u2)}. (c.4) pseudo-planar subgroup , {Y( u1,u2, p)}, that collects all the motions obtained by combining a planar translation belonging to {T( u1,u2)} with a helical motion belonging to {H(O, u1×u2, p)}. As many {Y( u1,u2, p)} as sets of parameters ( u1×u2, p) can be defined. The subgroups {E}, {T( u1, u2)}, {H(O, u1×u2, p)} and {T( v)} with v equals to a u1+u2−21a a r e i n - cluded in {Y( u1,u2, p)}. A RRH kinematic chain where the axes of the two revolute-pairs and the helical-pair’s axis are all parallel to one an- other and orthogonal both to u1 and to u2 physically generates the mo- tions of {Y( u1,u2, p)}. (d) Subgroups of dimension 4: (d.4) Schoenflies subgroup , {X( u1,u2)}, that collects all the motions ob- tained by combining a planar translation belonging to {T( u1,u2)} with a cylindrical motion belonging to {C(O, u1×u2)}. As many {X( u1,u2)} as unit vectors u1×u2 can be defined. The subgroups {E}, {T}, {G( u1,u2)}, {Y(u1,u2, p)}, {T( u1,u2)}, {C(O, u1×u2)}, {H(O, u1×u2, p)} and {T( v)} with v equals to a u1+u2−21 a are included in {X( u1,u2)}. A RRC kinematic chain where the axes of the two revolute pairs and the cylindrical-pair’s 560 Parallel Manipulators with Lower Mobility axis are all parallel to one another and orthogonal both to u1 and to u2 physically generates the motions of {X( u1,u2)}. According to this (Rico et al. 2006), the set of the LM-Ms can be separated into two subsets: (i) the subset of the pure-motion LM-Ms and (ii) the subset of the mixed-motion LM-Ms. The first subset collects all the LM-Ms whose end effec-tor exhibits motions that belong to only one out of the ten motion subgroups of {D}, whereas the second one collects all the other LM-Ms. The pure-motion LM-Ms can be further spread into ten pure-motion subsets: one for each pure motion identified by the ten subgroups of {D}. In (Hervé 1978, 1999), a kinematic chain is called mechanical bond when it connects one rigid body (end effector) to another (frame) so that the relative motion between end effector and frame is constrained. A mechanical bond is called mechanical generator when all the allowed relative motions between end effector and frame belong to only one of the ten subgroups of {D}. The nature of an LM-M can be identified by analysing its workspace, {W} (the workspace is the connected set of poses (positions and orientations) the end ef- fector can assume without disassembling the LM-M). In fact, if any couple of poses belonging to {W} defines an end-effector motion that belongs to the same motion subgroup of {D}, then the LM-M is a pure-motion LM-M, otherwise it is a mixed-motion LM-M. Hereafter, if a set of motions, {M}, only collects the motions identified by all the couples of poses that belong to the same con- nected set of poses, {P}, then it will be said that “{P} corresponds to {M} and vice versa” (it is worth noting that different set of poses may correspond to the same set of motions). When serial manipulators with lower mobility (LM-SMs) are considered, the end-effector motion is obtained by composing the motions of all the manipula- tor’s joints (Hervé 1978). Therefore, a pure-motion LM-SM can be obtained only by using joints whose motions belong to the same motion subgroup. Moreover, the sum of the degrees of freedom (dofs) of the joints must be equal to the dimension of that motion subgroup. When a parallel manipulator with lower mobility (LM-PM) is considered, the identification of the set of motions, {L}, the end effector can perform is a bit more complex. From a structural point of view, a parallel manipulator is a ma-chine where the end effector is connected to the frame through a number, n, of kinematic chains (limbs) acting in parallel. Therefore, in an LM-PM with n limbs, both {L} and {W} are subsets of the common intersection of the n sets, respectively, of motions, {L j}, j=1,…,n, and of poses, {W j}, j=1,…,n, the j-th limb would allow to the end effector if it were the only kinematic chain joining end effector and frame. If all the {W j} are restricted to the end effector poses that can be reached without disassembling the LM-PM and all the corresponding {Lj} are accordingly restricted (hereafter, if it is not differently specified, this re- striction will be implicitly assumed), then the following relationships hold:2. Classification of the Parallel Manipulators with Lower Mobility 561 j j1 , n{W} {W } == (1) j j1 , n{L} {L } == (2) This fact discloses a wide scenario of possible machine architectures even for pure-motion LM-PMs since conditions (1) and (2), where {L} is a subset of a motion subgroup, can be satisfied by using, in the limbs, joints of any type (not necessarily belonging to the same motion subgroup), and, as limbs, kinematic chains with number of dof ( limb’s connectivity) greater than the manipulator’s dofs. Each subset of LM-PMs can be further separated into two classes: the class of the overconstrained manipulators and the class of the non-overconstrained manipulators. Overconstrained manipulators are machines whose dof number is higher than the one computed as if the constraints due to the joints were in- dependent. An overconstrained LM-PM can be obtained by using, as limbs, a number, n, of serial kinematic chains with the same number of dofs as the LM- PM, provided that n be equal to the LM-PM’s dofs, and the limbs be arranged so that they warranty a non-empty intersection, {W}, among the n sets, {W j}, j=1,…,n. This principle has guided the design of many overconstrained LM- PMs among which the most known is certainly the 3RRR wrist (Gosselin & Angeles 1989) which uses, as limbs, three serial wrists of type RRR with the same spherical-motion center (see Fig. 1). The advantage of a pure-motion LM- PM obtained by using this principle, with respect to the serial manipulator that have the same topology as the one of the LM-PM’s limbs, is that the LM-PM has all the actuators located on the frame, which allows fast manipulators to be manufactured. This advantage is paid with a reduced workspace and with an architecture that need an high manufacturing precision to avoid jamming of the joints and high internal loads in the links. Figure 1. 3RRR wrist (Gosselin & Angeles 1989) frameend effector R R R562 Parallel Manipulators with Lower Mobility Determination of Limbs’ Topologies for an LM-PM Conditions (1) and (2) guide the determination of limbs’ topologies suitable for making the end effector of an LM-PM perform a given type of motion. In the literature, the analyses that bring to identify such topologies have been mainly addressed through three different approaches: (i) group theory (Hervé 1978, 1995, 1999, 2004; Hervé & Sparacino 1991; Karouia & Hervé 2000, 2002; Huynh & Hervé 2005; Lee & Hervé 2006; Rico et al. 2006), (ii) screw theory (Tsai 1999; Fang & Tsai 2002; Frisoli et al. 2000; Kong & Gosselin 2002, 2004a, 2004b, 2005; Huang & Li 2002, 2003; Carricato 2005) and (iii) velocity-loop equations (Di Gregorio & Parenti-Castelli 1998; Di Gregorio 2001a, 2001b, 2002, 2003; Carri- cato & Parenti-Castelli 2002, 2003). The first approach (group theory) determines the generic {L j} by composing the set of motions generated by each joint of the kinematic chain that is candi- date to be a limb, and, then, searches for the geometric conditions the potential limb must satisfy in order to make a subset of an assigned motion subgroup of {D} be a subset of {L j}. The result of this type of analysis is the determination (topology plus geometric conditions) of all the generators of a given motion subgroup. Each generator of a given motion subgroup of {D} can be used as limb in an LM-PM that must bound the end-effector motions to a subset of that motion subgroup. The second approach (screw theory) determine the screw (twist), $ j, which represents the generic element of {L j}, as a linear combination of the twists of all the joints of the kinematic chain that is candidate to be a limb. Then, the screw (wrench), ξj, reciprocal to $ j, which represents the system of forces ex- erted on the end effector by the j-th limb, is computed. Finally, the wrench sys- tem obtained as linear combination of the ξj is considered, and the geometric conditions that make it coincide with the wrench system reciprocal to all the elements of the motion subgroup, which {L} must be a subset of, are deduced. The third approach (velocity-loop equations) consists in writing n times both the end-effector angular velocity, ω, and the velocity, P, of an end-effector point by exploiting the kinematic properties of the n limbs of the generic LM-PM topology under analysis. So doing n expressions of the couple of vectors ( ω,P) are obtained where the j-th expression, j=1,…,n, is a linear combination of the joint rates of the j-th limb. The analysis of these ( ω,P) expressions is suf- ficient to determine the geometric conditions that each limb has to satisfy in order to make ( I) all the n expressions compatible, and ( II) the end-effector’s motion characteristics ( ω,P) respect the conditions which warranty that all the end effector motions belong to an assigned motion subgroup of {D}. Since this approach deduces geometric conditions by analysing the instantaneous end- effector motion, the characteristics of the finite end-effector motion are stated by demonstrating that those conditions are sufficient to warranty an infinite 4. Singularity Analysis 563 sequence of instantaneous motion of the same type provided that no singular configuration is encountered. The first and the third approaches rely on purely kinematic considerations, whereas the second one takes into account both kinematic and static consid- erations which is typical of approaches based on screw theory. The three ap- proaches are all able to find the singular configurations of any LM-PM archi- tecture, even though the second and the third ones directly give the singularity conditions as a result of the analysis that identifies the limb topologies, which make them more appropriate for the singularity analysis. Singularity Analysis Singularities are manipulator configurations where the input-output instanta-neous relationship fails (Gosselin & Angeles 1990; Ma & Angeles 1991; Zla- tanov et al. 1995). If the input-output instantaneous relationship is considered (Gosselin & Angeles 1990), they are of three types: (I) singularities of the in- verse kinematic problem, (II) singularities of the direct kinematic problem, and (III) singularities both of the inverse and of the direct kinematic problems. Type-(I) singularities occur when at least one out of the input-variable rates (actuated-joint rates) are undetermined even though all the output-variable rates (end-effector’s motion characteristics ( ω,P)) are assigned. All the ma- nipuator configurations where the end effector reaches the border of the work-space are type-(I) singularities, and finding type-(I) singularities is one way to determine the workspace border. From a static point of view, in type-(I) singu-larities, at least one component of output torque (force), applied to the end ef-fector, is equilibrated by the manipulator structure without applying any input torque (force) in the actuated joints. Type-(II) singularities occur when at least one component of end-effector’s mo-tion characteristics, ( ω,P), is undetermined even though all the actuated-joint rates are assigned. These singularities may be present only in the PMs and fall inside the workspace. From a static point of view, in type-(II) singularities, a (finite or infinitesimal) output torque (force), applied to the end effector, needs at least one infinite input torque (force) in the actuated joints to be equili-brated. Since, long before the input torque (force) becomes infinite, the ma-nipulator breaks down, type-(II) singularities must be found during design and avoided during operation. This singularity classification has been extended in (Zlatanov et al. 1995) by taking into account the rates of the non-actuated joints. In the literature (Di Gregorio & Parenti-Castelli 2002; Di Gregorio 2001a, 2001b, 2002a, 2003, 2004a, 2004c; Zatlanov et al. 2001, 2002), the possibility of chang-ing the type of motion, the end effector performs, in correspondence of par-564 Parallel Manipulators with Lower Mobility ticular type-(II) singularities, named constraint singularities, has been high- lighted. Constraint singularities affect only LM-PMs where the limbs‘ connec-tivity is greater than the manipulator‘s dofs. Conditions (1) and (2) can explain why constraint singularities may occur in LM-PMs where the limbs‘ connectivity is greater than the manipulator‘s dofs. If m j and m with m<m j≤6 are the connectivity of the j-th limb and the LM-PM‘s dofs respectively, then the {W j} and the {L j} sets have dimension m j whereas {W} and {L} have dimension m. A continuous subset with dimension m of a continuous set with dimension m j (>m) can be generated in jmm−∞ ways; hence, it can happen that {L j} have m-dimensional subsets, {L kj}, k=1,…,s j, of different motion subgroups of {D} and of mixed motions among its m-dimensional subsets, and that the corresponding m-dimensional subsets, {W kj}, k=1,…,s j, of {W j} have a non-empty intersection {C j} (i.e. they constitute a con- nected set). When this condition occurs, the j-th limb can move the end effector from a pose of {C j} by making it perform motions that belong to different m- dimensional motion subgroups of {D} (that belong either to a m-dimensional motion subgroup of {D} or to a mixed-motion subsets of {W j}). Since, according to condition (1) the set {C}, defined as follows j j1 , n{C} {C } == , (3) must be a subset of {W}, if {C} is a non-empty set and {W} contains subsets that belong to different m-dimensional motion subgroups (or to m-dimensional subsets of mixed motions together with subsets of a m-dimensional motion subgroup), then, there is a non-empty subset, {S}, of {C} whose elements are end-effector poses from which the LM-PM can move the end effector by mak- ing it perform motions that belong to different m-dimensional motion sub- groups of {D} (that belong to either a m-dimensional motion subgroup of {D} or a mixed-motion subsets of {W}). The end-effector’s possibility of leaving a pose by performing motions that belong to disjoint m-dimensional subsets of {D} implies that the end effector locally has at least one additional dof (i.e. m+h dofs with h ≥1) when the end effector assumes that pose. Therefore, when the end effector assumes that pose, the end effector’s motion characteristics, ( ω, P), are not determined even though the m actuated-joint rates are assigned (i.e. the LM-PM’s configuration with the end effector located at that pose is a particular type-(II) singularity). In (Zatlanov et al. 2001), it has been presented a three-dof LM-PM with topol-ogy 3URU (i.e. with three limbs of type URU (U stands for universal joint)), named DYMO (Fig. 2), that, by crossing constraint singularities, can become ei- ther a TPM, or an SPM, or a PPM, or a three-dof mixed-motion LM-PM. 4. Singularity Analysis 565 Figure 2. 3URU DYMO (Zatlanov et al. 2001) A method to avoid the presence of constraint singularities is to choose the limb topologies and to assemble the limbs so that the subset {S} is an empty set. This idea guided the proposal of the 3RRS wrist (Di Gregorio 2004b), that has three limbs of type RRS, where the axes of the six (two per limb) revolute pairs pass through the center of the spherical motion (see Fig. 3). The three RRS limbs are assembled so that {L} contains only motions belonging to the spherical sub-group which make {S} empty even though {C} is not empty. All type-(II) singularities must be individuated during the LM-PM design and, when possible, eliminated by suitably choosing the manipulator geometry. Moreover, the end effector must be kept as far as possible from these singulari- ties during operation. From an analytic point of view, the research of the type-(II) singularities can be implemented either through a static analysis (Di Gregorio 2004a) or through a kinematic analysis (Di Gregorio 2003). The static analysis studies the relation- ship between the system of external loads applied to the end effector and the set of the generalised torques applied in the actuated joints to equilibrate those loads. The kinematic analysis studies the relationship between the end- effector’s motion characteristics ( ω,P) and the m-dimensional vector (m (m<6) is the dof number of the LM-PM), q, that collects all the actuated-joint rates, pq, p=1,…,m. 566 Parallel Manipulators with Lower Mobility Figure 3. 3RRS wrist (Di Gregorio 2004b) By following the method based on the kinematic analysis, the relationship to be studied is ­½°°=®¾°°¯¿PAB q  ω (4) where A and B are a 6 ×6 matrix and a 6 ×m matrix respectively, and both, in general, depend on the m-dimensional vector q which collects the m actuated- joint variables, q p, p=1,…,m, (i.e. they depend on the manipulator configura- tion). Since the LM-PM has m dofs, 6 −m equations of system (4) simply state that ω and P cannot be arbitrarily chosen. A non-singular configuration is characterised by rank( A)=6 and rank( B)=m. A type-(I) singularity is characterised by rank( A)=6 and rank( B)<m. A type-(II) singularity is characterised by rank( A)<6 (i.e. det( A)=0) and rank( B)=m. A type-(III) singularity is characterised by rank( A)<6 and rank( B)<m. In order to find the type-(II) singularities the values of q that solve the equa- tion det(A)=0 (5) must be determined. Moreover, the condition number of A evaluated for an assigned value of q (i.e. an assigned configuration) can be used to judge how far is the configuration individuated by that value of q from type-(II) singular-frameend effector RRS4. Singularity Analysis 567 ity conditions (Gosselin & Angeles 1991): the nearer to one the condition num- ber is, the farther from type-(II) singularity conditions that configuration is (the condition number ranges from 1 to infinity). The configurations where the condition number of A is equal to one are the farthest from type-(II) singular- ity conditions. Such configurations are called isotropic configurations. In an isotropic configuration, the matrix ATA is proportional to the 6 ×6 identity ma- trix, I6, or, which is the same, the singular values of A are all equal. In an LM-PM has a matrix A that is constant (i.e. does not depend on q) and non singular, then all the manipulator configurations have the same condition number and are not singular. Such a manipulator will be called constant- isotropy LM-PM. In addition, if, in a constant- isotropy LM-PM, the constant value of the condition number of A is one, then all the manipulator configura- tions are isotropic and the manipulator is called fully isotropic. The appealing properties of constant-isotropy or fully isotropic LM-PMs pushed researchers to determine their topologies (Kong & Gosselin 2002a; Car- ricato & Parenti-Castelli 2002; Carricato 2005; Gogu 2004). Among all the pro- posed fully-isotropic architecture, the Cartesian 3PRRR (Kong & Gosselin 2002b; Di Gregorio 2002b; Kim & Tsai 2003) is certainly the most known. With reference to Fig. 4, the Cartesian 3PRRR has three limbs of type PRRR where the prismatic pair is actuated. In the j-th limb, j=1, 2, 3, of type PRRR, the three revolute-pair axes and the prismatic-pair sliding direction are all parallel. Fi- nally, the sliding directions of the three prismatic pairs are mutually orthogo- nal. Figure 4. Cartesian 3PRRR (Kong & Gosselin 2002b; Di Gregorio 2002b; Kim & Tsai 2003)end effector PRRR frame568 Parallel Manipulators with Lower Mobility Conclusions The functional (kinetostatic) design of a LM-PM starts from the analysis of the manipulation task to accomplish, continues with the identification of the limb topologies and finishes with the determination of the machine architecture passing through the singularity analysis. In the literature, the methodologies for the identification of the limb topologies suitable for a given manipulation task has been well described. How to com- bine the limbs in order to avoid singularities has been diffusely discussed at least for the most popular architectures. Nevertheless, comparison criteria among different architectures that perform the same manipulation task are not well established, yet. So that, even though is quite easy to find long lists of limb’s topologies that are suitable for a given manipulation task (the works re- ported in the references are just a sample of the vast literature on this subject), stating which is the best one still is an open problem. Some authors (Tsai & Joshi 2001) proposed the use of the “global condition number” (defined as the average value, on the workspace, of the inverse of the condition number) as index for evaluating or optimising a machine, but the same authors had to recognise that the comparison among different LM-PMs must take into account also the inertia properties of the machines. In general, it can be said that machines which exhibit good kinetostatic properties do not necessarily provide good dynamic performances. References Carricato, M. (2005). Fully isotropic four-degrees-of-freedom parallel mecha- nisms for Schoenflies motion. The International Journal of Robotics Re- search , Vol. 24, No. 5, (2005), pp. 397-414 Carricato, M. & Parenti-Castelli, V. (2002). Singularity-free fully-isotropic translational parallel mechanisms. The International Journal of Robotics Research , Vol. 21, No. 2, (2002), pp. 161-174 Carricato, M. & Parenti-Castelli, V. (2003). A family of 3-DOF translational parallel manipulators. ASME Journal of Mechanical design , Vol. 125, No. 2, (2003), pp. 302-307 Clavel, R. (1988). DELTA: A fast robot with parallel geometry, Proceedings of the 18th International Symposium on Industrial Robots , pp. 91-100, Sydney (Australia), April 1988 R. Di Gregorio, R. (2001a). Kinematics of a new spherical parallel manipulator with three equal legs: the 3-URC wrist. Journal of Robotic Systems , Vol. 18, No. 5, (2001), pp. 213-219 R. Di Gregorio, R. (2001b). A new parallel wrist employing only revolute pairs: the 3-RUU wrist. ROBOTICA , Vol. 19, No. 3, (2001), pp. 305-309 6. References 569 R. Di Gregorio, R. (2002a). A new family of spherical parallel manipulators. ROBOTICA , Vol. 20, No. 4, (2002), pp. 353-358 R. Di Gregorio, R., (2002b). Kinematics of a new translational parallel manipu- lator, Proceedings of the 11th International Workshop on Robotics in Alpe- Adria-Danube Region , RAAD 2002, pp. 249-254, Balatonfured (Hungary), June 30- July 2, 2002 R. Di Gregorio, R. (2003). Kinematics of the 3-UPU wrist. Mechanism and Ma- chine Theory , Vol. 38, No. 3, (2003), pp. 253-263 R. Di Gregorio, R. (2004a). Statics and singularity loci of the 3-UPU wrist. IEEE Transactions on Robotics , Vol. 20, No. 4, (2004), pp. 630-635; (also in: Pro- ceedings of 2001 IEEE/ASME International Conference on Advanced Intelli- gent Mechatronics , AIM'01, Como, Italy, July 8-11, 2001) R. Di Gregorio, R. (2004b). The 3-RRS wrist: a new, simple and non- overconstrained spherical parallel manipulator. ASME Journal of Me- chanical Design , Vol. 126, No. 5, (2004), pp. 850-855 (also in: Proceedings of ASME 2002 Design Engineering Technical Conferences and Computers and Information in Engineering Conference , DETC/CIE 2002, Montreal, Can- ada, September 29-October 2, 2002, Paper No. DETC2002/MECH-34344) R. Di Gregorio, R., (2004c). Determination of singularities in DELTA-like ma- nipulators. The International Journal of Robotics Research , Vol. 23, No. 1, (2004), pp. 89-96 R. Di Gregorio, R. & Parenti-Castelli, V. (1998). A translational 3-DOF parallel manipulators, In: Advances in Robot Kinematics , Lenarcic, J. & Husty, M.L., (Ed.), pp. 49-58, Kluwer Academic Publishers, Dordrecht (Nether- lands) R. Di Gregorio, R. & Parenti-Castelli, V. (2002). Mobility Analysis of the 3-UPU Parallel Mechanism Assembled for a Pure Translational Motion. ASME Journal of Mechanical Design , Vol. 124, No.2, (2002), pp. 259-264 (also in: Proceedings of the 1999 IEEE/ASME International Conference on Advanced Intelligent Mechatronics , AIM'99, Atlanta, Georgia, September 19-23, 1999, pp 520-525) Fang, Y. & Tsai, L.-W., (2002). Structure synthesis of a class of 4-dof and 5-dof parallel manipulators with identical limb structures. The International Journal of Robotics Research , Vol. 21, No. 9, (2002), pp. 799-810 Frisoli, A.; Checcacci, D.; Salsedo, F. & Bergamasco, M. (2000). Synthesis by screw algebra of translating in-parallel actuated mechanisms, In: Ad- vances in Robot Kinematics , Lenarcic, J. & Stanisic, M.M., (Ed.), pp. 433- 440, Kluwer Academic Publishers, Dordrecht (Netherlands) Gogu, G., (2004). Fully-isotropic T3R1-type parallel manipulators, In: Advances in Robot Kinematics , Lenarcic, J. & Galletti, C., (Ed.), pp. 265-274, Kluwer Academic Publishers, Dordrecht (Netherlands) Gosselin, C.M. & Angeles, J., (1989). The optimum kinematic design of a spherical three-degree-of-freedom parallel manipulator. ASME Journal 570 Parallel Manipulators with Lower Mobility of Mechanisms, Transmission and Automation in Design , Vol. 111, No. 2, (1989), pp. 202-207 Gosselin, C.M. & Angeles, J., (1990). Singularity analysis of closed-loop kine- matic chains. IEEE Transactions on Robotics and Automation , Vol. 6, No. 3, (1990), pp. 281-290. Gosselin, C.M. & Angeles, J., (1991). A global performance index for the kine- matic optimization of robotic manipulators. ASME Journal of Mechanical Design , Vol. 113, No. 2, (1991), pp. 220-226. Hervé, J.M. (1978). Analyse structurale des mécanismes par groupe des dé- placements. Mechanism and Machine Theory, Vol. 13, No. 4, (1978), pp. 437-450, ISSN 0094-114X/78/0801-0437 Hervé, J.M. (1995). Design of parallel manipulators via the displacement group, Proceedings of the 9th World Congress on the Theory of Machines and Mechanisms , Vol. 3, pp. 2079-2082, Milan (Italy), 1995 Hervé, J.M. (1999). The Lie group of rigid body displacements, a fundamental tool for mechanism design. Mechanism and Machine Theory, Vol. 34, No. 6, (1999), pp. 719-730, ISSN 0094-114X/98/00051-2 Hervé, J.M. & Sparacino, F. (1991). Structural synthesis of “parallel” robots generating spatial translation, Proceedings of the IEEE 1991 International Conference on Automation and Robotics, pp. 808-813, ISSN 7803- 0078/91/0600-0808, Pisa (Italy), June 1991 Hervé, J.M. (2004). Parallel mechanisms with pseudo-planar motion genera- tors, In: Advances in Robot Kinematics , Lenarcic, J. & Galletti, C., (Ed.), pp. 431-440, Kluwer Academic Publishers, Dordrecht (Netherlands) Huang, Z. & Li, Q.C. (2002). General methodology for type synthesis of sym- metrical lower-mobility parallel manipulators and several novel ma- nipulators. The International Journal of Robotics Research , Vol. 21, No. 2, (2002), pp. 131-145 Huang, Z. & Li, Q.C. (2003). Type synthesis of symmetrical lower-mobility parallel mechanisms using the constraint-synthesis method. The Interna- tional Journal of Robotics Research , Vol. 22, No. 1, (2003), pp. 59-79 Huynh, P. & Hervè, J.M. (2005). Equivalent kinematic chains of three degree- of-freedom tripod mechanisms with planar-spherical bonds. ASME Journal of Mechanical Design , Vol. 127, No. 1, (2005), pp. 95-102 Karouia, M. & Hervé, J.M. (2000). A three-dof tripod for generating spherical rotation, In: Advances in Robot Kinematics , Lenarcic, J. & Stanisic, M.M., (Ed.), pp. 395-402, Kluwer Academic Publishers, Dordrecht (Nether- lands) Karouia, M. & Hervé, J.M. (2002). A family of novel orientational 3-dof parallel robots, Proceedings of the 14th CISM-IFToMM Symposium on Robots and Manipulators (RoManSy’14) , pp. 359-368, Udine (Italy), July 2002, Springer (2003) 6. References 571 Kim, H.S. & Tsai, L.-W., (2003). Design optimization of a Cartesian parallel manipulator. ASME Journal of Mechanical Design , Vol. 125, No. 1, (2003), pp. 43-51 Kong, X. & Gosselin, C.M. (2002a). Type synthesis of linear translational paral- lel manipulators, In: Advances in Robot Kinematics , Lenarcic, J. & Thomas, F., (Ed.), pp. 411-420, Kluwer Academic Publishers, Dordrecht (Nether- lands) Kong, X. & Gosselin, C.M. (2002b). Kinematics and singularity analysis of a novel type of 3-C RR 3-dof translational parallel manipulator. The Inter- national Journal of Robotics Research , Vol. 21, No. 9, (2002), pp. 791-798 Kong, X. & Gosselin, C.M. (2004a). Type synthesis of 3-DOF translational par- allel manipulators based on screw theory. ASME Journal of Mechanical Design , Vol. 126, No. 1, (2004), pp. 83-92 Kong, X. & Gosselin, C.M. (2004b). Type synthesis of 3-DOF spherical parallel manipulators based on screw theory. ASME Journal of Mechanical Design , Vol. 126, No. 1, (2004), pp. 101-108 Kong, X. & Gosselin, C.M. (2005). Type synthesis of 3-DOF PPR-equivalent parallel manipulators based on screw theory and the concept of virtual chain. ASME Journal of Mechanical Design , Vol. 127, No. 6, (2005), pp. 1113-1121 Lee, C.-C. & Hervé, J.M. (2006). Pseudo-planar motion generators, In: Advances in Robot Kinematics , Lenarcic, J. & Roth, B., (Ed.), pp. 435-444, Kluwer Academic Publishers, Dordrecht (Netherlands) Ma, O., & Angeles, J. (1991). Architecture singularities of platform manipula- tors, Proceedings of the 1991 IEEE International Confonference on Robotics and Automation , pp. 1542-1547, Sacramento (CA, USA), April 1991 Rico, J.M.; Cervantes-Sancez, J.J.; Tadeo-Chavez, A.; Perez-Soto, G.I. & Rocha- Chavaria, J. (2006). A comprehensive theory of type synthesis of fully parallel platforms, Proceedings of the ASME 2006 International Design En- gineering Technical Conferences & Computers and Information in Engineering Conference , paper No DETC2006-99070, Philadelphia (USA), September 2006 Tsai, L.-W., (1999). The enumeration of a class of three-dof parallel manipula- tors, Proceedings of the 10th World Congress on the Theory of Machine and Mechanisms , pp. 1121-1126, Oulu (Finland), Gune 1999 Tsai, L.-W. & Joshi, S. (2001). Comparison study of architectures of four 3 de- gree-of-freedom translational parallel manipulators, Proceedings of the 2001 IEEE International Confonference on Robotics and Automation , pp. 1283-1286, Seoul (Korea), May 2001 Zlatanov, D.; Fenton, R.G. & Benhabib, B. (1995). A unifying framework for classification and interpretation of mechanism singularities. ASME Jour- nal of Mechanical Design , Vol. 117, No. 4, (1995), pp. 566-572. 572 Parallel Manipulators with Lower Mobility Zatlanov, D.; Bonev, I. A. & Gosselin, C.M. (2001). Constraint singularities as configuration space singularities. online paper: www.parallemic.org/Reviews/Review008.html Zatlanov, D.; Bonev, I. A. & Gosselin, C.M. (2002). Constraint singularities of parallel mechanisms, Proceedings of the 2002 IEEE International Confernce on Robotics & Automation , pp.496-502, Washington (DC, USA), May 2002 57321 Error Modeling and Accuracy of Parallel Industrial Robots Hongliang Cui and Zhenqi Zhu Introduction Most industrial robots are open-chain mechanisms constructed of consecutive links connected by rotational or prismatic joints of one degree of freedom. These serial manipulators have large workspace, high dexterity and good ma- neuverability. However, due to their serial structure they exhibit low stiffness and poor positioning accuracy. As a result, their use in applications that re-quire large loads (e.g. machining) and high accuracy, is limited. In the case of a parallel manipulator, the end-effector is attached to a moveable plate which is supported in-parallel by a number of actuated links. As a result, these parallel manipulators are anticipated to possess the following advantages, compared with serial manipulators: 1) high force/torque capacity since the load is dis-tributed to several in-parallel actuators; 2) high structural rigidity; and 3) bet- ter accuracy due to less cumulative joint errors. A large number of publications dealing with the accuracy of the serial manipu- lators appeared in the past. These include topics on error modeling effects of manufacturing tolerance on pose accuracy and numerous calibration strate-gies. However, very few publications dealing with the same issue as related to parallel manipulators can be found. Since high accuracy is generally believed to be one of their advantages compared to that of serial manipulators, it is im- portant to address this issue. The purpose of this research is to establish the kinematic and error models for evaluating the effects of manufacturing toler-ances, installation errors and stiffness effect on the accuracy of a parallel ro- botic system. In order to evaluate the accuracy of parallel robotic system, it is necessary to develop a kinematic model which will accommodate the above errors. Based on this model, algorithms for forward, inverse kinematics and error modeling of the parallel robot are presented. These algorithms with a set of typical tol- erances were used to compute the pose errors which include three transla- tional and three angular errors. 574 Industrial Robotics: Theory, Modelling and Control Manufacturing tolerances ,installation errors and link offsets cause devia- tions with respect to the nominal kinematic parameters of the robot system. As a result, if the nominal values of these parameters are used within the robot system control software, the resulting pose of the system will be inaccurate. Accuracy of a robot is the closeness with which its actual pose matches the pose predicted by its controller. A robot normally designed for repeated work such as spray painting, pick and place, etc., has high repeatability but low ac- curacy. An accurate robot is required in applications where off-line program- ming is involved. To a large extent, robot inaccuracy is induced by the propa- gation of geometric errors ,compliance errors and time-variant thermal errors. The geometric errors of a robot come from manufacturing imperfections, mis- alignments or joint wear. Compliance errors are due to the flexibility of robot joints and link deflection under self-gravity and external load. The compliance errors also depend on the robot’s changing position. Thermal errors result from thermal distortion and expansions of robot components due to internal and external heat sources such as motors, bearings and ambient temperature change. Link and joint flexibility has a significant impact on robot performance and stability. Link gravity and external payload cause the deflection of links and flexible joints, and therefore degrade the robot performance. Link compliance effects are represented by six differential component changes: three transla- tional and three rotational changes. This paper presents a systematic method- ology for estimating the compliance characteristics of serial and parallel ma- nipulators due to external concentrated load/deflection. In related experiments, special measurement tools and sensors are necessary to identify the stiffness of driving joints. Also in this paper a general methodology is presented to calibrate and com- pensate for robot compliance errors and thermal errors in addition to geomet- ric errors, An error synthesis model based on the Denavit-Hartenberg (D-H) convention is derived for simultaneously considering geometric errors, com-pliance errors and thermal errors. Based on this model a general methodology is developed to calibrate geometric errors, compliance errors and thermal er- rors. Experimental results show that the accuracy of the robot is improved by an order of magnitude after the compensation. 1.1 Serial and Parallel Robots Robots are representative of mechanics devices which integrate aspects of ma- nipulation, sensing, control, and communication. Rarely have so many tech- nologies and scientific disciplines focused on the functionality and perform- ance of a system as they have done in the fields of robot development and application. Robotics integrates the state of the art of many front-running tech- nologies. Large efforts have been made to define an industrial robot and to Error Modeling and Accuracy of Parallel Industrial Robots 575 classify its application by industrial branches so that remarkably precise data and monitoring are available today. The task of an industrial robot in general is to move a body (workpiece) with six maximal Cartesian spatial DOF (three translations, three rotations) to an- other point and orientation within a workspace. The complexity of the task de- termines the required kinematic configuration. The number of DOFs deter- mines how many independently driven and controlled axes are needed to move a body in a defined way. Industrial robots normally have up to four principal arm axes and three wrist axes. While many exciting robot structures use serial kinematic chains, some parallel kinematic structures have been adopted for a variety of tasks. Typical configurations of industrial robots are shown in Figure 7. Most closed-loop kinematics is based on the so-called hexapod principle (Stewart platform, 1965), which represents a mechanically simple and efficient design. The structure is relatively stiff and enables rela- tively high positioning accuracy and high speeds, but workspace or working volume is limited. Parallel or closed-chain linkages and serial or open-loop kinematic chains have been substantially investigated over last several decades. A closed-chain link- age, which usually has a limited number of degrees of freedom, is not applica-ble as a general-purpose robot kinematic configuration. A serial kinematic chain can provide a large workspace, but with less rigidity and load-carrying capacity compared with a parallel kinematic chain. The fully parallel-driven manipulators such as Stewart-platform have been investigated by many re- searchers. In general, the workspace of a robot arm consisting of only parallel kinematic chains is relatively small. Currently, there has been an increasing in- terest in the design of hybrid or serial-parallel robot manipulators which can provide salient features of both serial and parallel kinematic chains. An ap- propriately designed hybrid robotic manipulator will have a large load- carrying capacity and workspace, and yet be comparatively small and light-weight. The TAU parallel configuration (Figure 1) is rooted in a series of inventions and was masterminded by Torgny Brogardh, 2000; 2001; 2002. The configura- tion of the robot simulates the shape of “ τ” like the name of the Delta robot named after the “ ∇” shape configuration of the parallel robot. As shown in Fig. 1.1, the basic TAU configuration consists of three driving axes, three arms, six linkages, 12 joints and a moving (tool) plate. There are six chains connect- ing the main column to the end-effector in the TAU configuration. The TAU robot is a typical 3/2/1 configuration, which configuration is shown in Figure 11 of Section 2. There are three parallel and identical links and another two parallel and identical links. Six chains will be used to derive all kinematic equations. Table 1 highlights the features of the TAU configuration. On the subject of D-H modeling, Denavit J. & Hartenberg, H, 1955, Tasi, L. 1999, Raghavan, M. 1993, Abderrahim M. & Whittaker, A. R. 2000 have ap-576 Industrial Robotics: Theory, Modelling and Control plied the method and studied the limitations of various modeling methods. On the subject of forward kinematics , focus has been on finding closed form solu- tions based on various robotic configurations, and numerical solutions for diffi- cult configurations of robots. It can be found in the work done by Dhingra A. K. et al. 1998, 2000, Shi, X. & Fenton, R. G. 1994, Didrit, O. et al, 1998, Zhang, X. & Song, S. 1991, Nanua, P. et al, 1990, Sreenivasan, S. V. et al, 1994, Griffis, M. & Duffy, J. 1989, and Lin, W. et al, 1992. On the subject of error analysis, Wang, J. & Masory, O. 1993, Gong, C. et al, 2000, Patel, A. J. & Ehmann, F. E. 2000 used forward kinematic solutions to obtain errors. Jacobian matrix was also used in obtaining errors. On the subject of the variation of parallel configura-tions, based on the work done by Dhingra, A. K. et al, 1999, 2000, Geng, Z. & Haynes, L. S. 1994, the influence of the configurations on the methods of find- ing closed form solutions can be found. In this paper, the D-H model (Figure 2) is used to define the TAU robot con- figuration, a complete set of parameters is included in the modeling process. Kinematic model and error model are established for including all types of er- rors using Jacobian matrix method for the TAU robot. Meanwhile, a very ef- fective Jacobian Approximation Method is introduced to calculate the for- ward kinematic problem instead of the Newton-Raphson method. It denotes that a closed form solution can be obtained instead of a numerical solution. A full size Jacobian matrix is used in carrying out error analysis, error budget, and model parameter estimation and identification. Simulation results indicate that both Jacobian matrix and Jacobian Approximation Method are correct and have an accuracy of micrometers. ADAMS simulation results are used in veri- fying the established models. A six-degrees-of-freedom precision measuring system is introduced in this study as an application of all methods mentioned above. The methods are also applied to explore new robotic applications such as grinding and machining. These new developments also revive the interest in robotic performance evaluation. Given the mechanical configurations of industrial robots with their popular six degrees of freedom, industrial robots have to be evaluated with metrology device or system of 3 or more degrees of freedom. Evaluation methods and equipment are needed to measure the spatial pose of robot effi- ciently with low cost. Several methods are available for characterizing robot performance in accor- dance with ISO 9283 “Manipulating Industrial Robots Performance Criteria and Related Test Methods”. Eight major performance measuring methods and techniques are introduced in the technical report ISO TR 13309, including the accurate, easy-to-use but costly laser tracking technique. The pros and cons of existing multi-degrees of freedom measuring systems, including laser tracker, straight edges, multi-probes at certain check points, image and scanning tech-niques etc, are well documented [Lau and Hocken, 1984; Van Brussel, 1990; Ji-Error Modeling and Accuracy of Parallel Industrial Robots 577 ang et al, 1988]. Pose measurement of robotic end-effecter has been the focus [Ziegert and Datseries, 1990; Zhu and Cui, 2001, 2003]. Precision booster (Figure 3) a 6-DOF piezoelectric ultraprecision positioning drive is developed to provide industrial robots with 6-DOF fine positioning capability. It is designed to mount at the end of the forearm of a robot before its end-effector. With the added fine positioning capability, the accuracy of in- dustrial robots can be greatly enhanced. Working with more accurate feed- back sensors or calibration processes, the booster enables industrial robot to reach micrometer accuracy – one or two orders of magnitude higher than those of conventional serial robots. The accuracy of the precision booster can be de- signed in the range of sub-micrometer or micrometer over a range of millime- ters enough to cover the sub-millimeter positioning resolution offered by exist- ing industrial robots. The booster features monolithic flexure construction and the flexure structure functions as a spatial motion mechanism. This monolithic motion mechanism is backlash free and stick-slip free. High strength and high stiffness piezoelectric actuators are used to power the booster to perform fine positioning. TAU robot Work area 1.5 m * 3 m Repeatability 15μm Path accuracy 30μm Acceleration 5 g Maximum positioning speed 180m / min Excitation frequency > 40 Hz Cost < 250 KUSD Table 1. Specifications of the TAU Robot Based on Certain Applications Figure 1. One of the TAU Robot Configurations 578 Industrial Robotics: Theory, Modelling and Control Figure 2. Definition of the Parameters in D-H Model 1.2 Kinematic Configurations of Parallel Robots Gough-Stewart parallel robot , or so-called ‘hexapod’ shown in Figure 3 (Gough 1957 and Stewart 1965), is an assembly consisting of a fixed base with universal joints connecting the base to six linear-actuated limbs that support a moving platform through six ball-and-socket joints. This configuration allows the platform to move with six degrees-of-freedom employing the fewest num- ber of actuators while maintaining stiffness by using only two-force-members. It is a closed-loop kinematic system with parallel links and is considered to be far more rigid than that of its serial counterparts of the same size and weight. Its force-output-to-manipulator-weight-ratio is generally an order of magni-tude bigger than that of most industrial robots (Liu, 1993). The same closed-loop kinematic configuration that gives its rigidi ty also complicates the solution of the for- ward kinematics in such a way that no closed-loop solution for this problem has been found (Lacaze, Tasoluk and Meystel, 1997). Tricept robot , shown in Figure 4, logically derived from the Tetrabot (Thorn- ton, 1988), has a 3-DOF (degree of freedom) configuration of the parallel type to execute translational motions and a 3-DOF spherical wrist to execute rota- tional motions (Neumann and Neos Robotics, 1998). Its workspace is to be considered relatively large compared to the size of the robot. In order to fur- ther enlarge the size of the workspace, the addition of a revolute joint at the fixed base has been envisaged, introducing kinematic redundancy into the ro-botic manipulator. Its translational part can be thought as a reduced Stewart Error Modeling and Accuracy of Parallel Industrial Robots 579 platform with only three limbs. Like the Stewart platform, its kinematics has not been completely obtained: the inverse kinematics problem admits an ana- lytical solution whereas the direct kinematics problem may require the use of iterative algorithms (Siciliano, 1999). Delta robot, patented in U.S. in 1990 (Clavel, 1990), is shown in Figure 5. The basic idea behind the Delta parallel robotic design is the use of parallelograms. A parallelogram allows an output link to remain at a fixed orientation with re- spect to an input link. The use of three such parallelograms restrains com- pletely the orientation of the mobile platform, which remains only three purely translational degrees of freedom. The input links of the three parallelograms are mounted on rotating levers via revolute joints. The revolute joints of the ro-tating levers are actuated in two different ways: with rotational (DC or AC servo) motors or with linear actuators. Finally, a fourth leg is used to transmit rotary motion from the base to an end-effector mounted on the mobile plat- form. The use of base-mounted actuators and low-mass links allows the mobile plat-form to achieve accelerations of up to 50-G in experimental environment and 12 G in industrial applications. This makes the Delta robot a perfect candidate for pick and place operations of light objects. The Delta design has been ap- plied to industry robot for several years. Its kinematics and dynamics also have been developed (Hunt 1973 and Codourey 1998). Figure 3.Piezo Driven Flexure Based Hexapod (Zhu and Cui, 2001) 580 Industrial Robotics: Theory, Modelling and Control Figure 4. Tricept Robot (Neumann and Neos Robotics, 1998) Figure 5. Delta Robot from US patent No. 4,976,582 Error Modeling and Accuracy of Parallel Industrial Robots 581 Figure 6. Octahedral Hexapod (NIST) Octahedral Hexapod as shown in Fig. 1.6 is a demonstration machining center with six DOFs. It is a small, portable machine based on an octahedral frame- work. Machine motion is achieved by a Stewart Platform style actuation sys- tem. The framework and machining system can achieve high overall stiffness due to the fact that the structural members are generally in tension or com- pression with a minimum amount of bending stress. This structure allows the machine's capabilities to be independent of its foundation. Six identical struts with spherical pivots are mounted to the framework to drive the machining spindle, providing six-axis machining capability. The machine has a work vol- ume of approximately 5" diameter X 3.5" high. The assembled machine will fit in a 24" X 24" X 25" volume. The machine completely disassembles and stores in a case approximately 24" X 16" X 10". 582 Industrial Robotics: Theory, Modelling and Control Figure 7 Typical Arms and Wrist Configuration of Industrial Robots (Handbook of In- dustrial Robotics)Error Modeling and Accuracy of Parallel Industrial Robots 583 Tau Configuration Design Hybrid manipulators are parallel-serial connection robots that give rise to a multitude of highly articulate robotic manipulators. The robotic manipulators have a strength-to-weight ratio many times larger than the value currently available with industrial or research manipulators. This is due to the fact that these hybrid manipulators are stress compensated and ultralight in weight, yet are extremely stiff due to the fact that the force distribution in their structures is mostly axial. Serially connected robot manipulators in the form of an open-loop kinematic chain with computer-controlled joint actuation have been utilized extensively in robot industry. For parallel manipulators, a classic example is the Stewart platform, which has been kinematically and, to some extent, dynamically in- vestigated by many researchers. The major advantages of existing parallel robots, compared with serial robots, are smaller mass and higher stiffness of the arm system. This is very important to achieve a shorter cycle time with lower actuator power together with more accurate movement. The disadvantage is a relative small workspace in relation to the volume of the arm system. In the process of improving the robotic performance by diminish-ing the disadvantages, the basic features in design should include the follow- ing: All the actuators are mounted on a fixed platform, which minimizes the mass of the moving arm system. The links connected to the actuated platform are two-force members transmitting only compression and tensile forces and do not carry bend- ing and twisting loads, which makes it easy to achieve a moving arm system of high in stiffness and low in mass. The joints can be implemented as ball and socket bearings, which makes it possible to obtain high precision in addition to high stiffness and low mass for the joint arrangement. The actuated platform is positioned with 3 translational DOFs in a par- allel fashion without angular displacement. 2.1 The Link Clustering Design Approach Systematic clustering of the links connected to the actuated robot platform has been studied. Based on this design approach new parallel arm structures have been identified and some new robot concepts have been found (Brogardh, T, 2000). Figure 8 shows schematically the basic components needed to achieve the 584 Industrial Robotics: Theory, Modelling and Control Delta parallel arm robot with the kinematic features listed above. The actuated platform is connected to 6 links of type A by means of ball and socket joints that each has 3 DOFs. Type A means that the links are designed to be stiff only for forces along their axial direction in the structure. This force loading charac- teristic in the links of type A is guaranteed since a ball and socket joint cannot transmit bending moment or twisting torque to the link it is connected to. The actuators in Figure 8 are mounted on the fixed platform and the moving part of the actuators is connected to the links of type A via links of type B. The type B links are designed to be stiff against also bending moment and twisting torque. All the links of type B do not need to be connected to actuators, but 3 of them must, otherwise the actuated platform cannot be manipulated in 3 DOFs. Figure 8. Components for the Design of Structures with the Same Features as the Delta Robot. (Courtesy of Brogardh, T, 2000). Each of the links of type B (Figure 8) can be connected to one or more of the links of type A. One could say that each link of type B can be connected to a cluster of links of type A and it is possible to introduce a simple clustering scheme, where for example 2/2/2 means that the links of type A are clustered with 2 links to each of the 3 links of type B. To achieve parallel movements of the actuated platform (to preserve the tilt angles), type A links belonging to the same cluster must be parallel and have the same length. Moreover, to avoid a Connecting barError Modeling and Accuracy of Parallel Industrial Robots 585 collapsing parallel arm structure because of kinematic singularities, the place- ment of the type A link joints on the actuated platform must be optimized as well as the relative directions between the type A links of the different clusters. The 6 links of type A can be clustered in 3 ways: 2/2/2, 3/2/1 and 4/1/1. The 4/1/1 clustering will not fulfill the kinematic demands for a controllable struc- ture and can be omitted. However, the 2/2/2 and the 3/2/1 clustering accord- ing to Figure 10 are kinematically useful. Using the 2/2/2 clustering scheme for the design will end up with the Delta structure. The optimized link place- ment in this case is achieved when the lines between the joints of each cluster on the actuated platform have an angle of 120 degrees between each other. The arm structure will collapse if the angle between two joint lines is 0 (180) de- grees instead of 120 degrees. If instead the 3/2/1 clustering is used for the de-sign of a parallel arm robot, the placement of the joints of the type A links on the platform surface is not critical. The only demand is that the 3 lower joints of cluster 1 are not allowed to be on a straight line on the platform. The opti- mum is achieved when these 3 joints of cluster 1 form a triangle with equal side length. This robustness with respect to the link placement on the actuated platform opens up new possibilities for the robot design. In Figure 9 the actuated platform is considered to have a plane design, which means that the links of type A connect to the platform surface in a plane. However, the actuated platform could also be designed as a 3-D framework as depicted in Figure 10. This framework does not need to be a cube as in the fig-ure, but the cube drawing makes it easier to see the configurations of the links. As in the case with a plane platform design, there are also in this case 2 useful clustering possibilities for an actuated 3-D platform: 2/2/2 and 3/2/1. Figure 9. Useful Clustering Strategies When the Links of Type A Are Attached to the Actuator Platform in a 2-D Pattern. Cluster1Cluster 2Cluster 3 Cluster1Cluster3Cluster2 3/2/1 clustering 2/2/2 clustering 586 Industrial Robotics: Theory, Modelling and Control Figure 10. Useful 2/2/2 Clustering Strategies when the Links of Type A are Attached to the Actuator Platform in a 3-D pattern. (Courtesy of Brogardh, T, 2000). 2.2 TAU 3/2/1 Configuration A new class of parallel robot, namely, TAU robot, has been created based on the 3/2/1 configuration. It combines the performance advantages of parallel arm mechanism (e.g., high stiffness, high accuracy) with the large workspace of serial robot. As shown in Figure 11, the primary design of the TAU prototype robot has three actuators mounted on the base fixture and arranged in a line, which is called an I-configuration TAU. From bottom to top, actuators and upper arms (type B link) are numbered as 1, 2 and 3, and connected with 3, 2 and 1 lower arm(s) (type A link) respectively. This configuration basically performs a 3- DOF motion in its workspace. The 3-DOF parallel robot has a small footprint but with an enhanced stiffness. The six links (lower arms) connected to the tool plate are driven by the three upper arms rotating around Z-axis. This structure has 3 DOFs in its work- space. With its geometric constraint, the DOF of a TAU robot is equal to (Tsai, 1999) DOF = ¦ =+−− 1)1 ( iif jnλ λ: degree of freedom of the space in which a mechanism is intended to function Error Modeling and Accuracy of Parallel Industrial Robots 587 n: number of links in a mechanism, including the fixed link j: number of joints in a mechanism, assuming that all the joints are binary. if: degree of relative motion permitted by joint i. Joints between fixture and upper arms are 1-DOF rotational joints. Joints con- necting upper and lower arms are 2-DOF universal joints. 3-DOF spherica- joints connect lower arms and moving plate. Figure 10.TAU Robot Based on Clustering Design Approach 2.3 Features of the TAU Configuration The parallel robotic configuration for translational motion has a higher stiff- ness compared to the serial robotic configuration. It also has the following fea-tures: Large workspace, 360 degree around its base axis like a serial robot, ana- lytic kinematic solution and analytic rigid-body dynamic solution. Applications and Design Requirements With these new features, the robot has the possibility to work with several conveyors and feeders placed around the robot. This is just one example of how a SCARA like parallel arm robot could be used to increase the productiv- ity in an existing production line just by replacing conventional SCARA robots used today with its parallel arm cousins. 588 Industrial Robotics: Theory, Modelling and Control Typical Applications Spot welding and painting are among the earliest application for industrial ro- bot. Their payload is usually less than 50 kg. Repeatability requirement is in the range of 100 μm. Pick and place and packaging have relatively low requirement on repeatability and stiffness. Payload varies from 1 to 500 kg. High speed is preferred for high productivity. Machining or material removal including deburring, grinding, milling and sawing, requires high stiffness. Stiffness and accuracy of the robot decide the quality of the machined product. Potential Applications Laser cutting or welding, as a non-contact process requires an accu- racy/repeatability less than 100 μm. Payload, which is the laser gun and acces- sories, is usually less than 50 kg. Speed required is not high in such applica- tions. Coordinate measuring function is typically performed by a CMM. It has a strict accuracy requirement of less than 50 μm for both static and path follow- ing at a low speed. Fine material removal is as precision machining application now dominated by CNC machines. It requires the highest stiffness and system accuracy. Design Objectives The mechanism design is application orientated. Three typical future applica- tions were selected and studied in the design phase: 2-D laser cutting, CMM for automobile vehicle and material removal applications. Each of them repre- sents a typical application with certain requirements. Accuracy is a dominating factor reflecting the level of performance of any measurement system. The ac-curacy is low for current articulated robot arms. Material removal application requires high stiffness. Current serial configured CNC machines or parallel- configured machines have a limited workspace. TAU robot Linear motor gantry bWork area 1.5 m * 3 m 1.5 m * 3 m Repeatability 15μm 17 μm Path accuracy 30μm 50 μm Acceleration 5 g 2 - 4 g Maximum positioning speed 180 m / min 100 - 200 m / min Excitation frequency > 40 Hz 13 Hz Cost < 250 KUSD 250 KUSD Table 2. Performance Comparison wi th 2-D Laser Cutting Gantry Robot Error Modeling and Accuracy of Parallel Industrial Robots 589 Table 2 shows the performance comparison between the TAU robot and the gantry robot currently used in laser cutting application, which indicates the potential applications instead of using linear gantry robot. The performance of TAU covers all advantages of the Linear Motor Gantry. Figure 12. Single Arm Test Platform for Drive Motor Error Analysis Figure 13. ADAMS Simulation Model for Two-Arm Test Platform Displace- ment sen-Direct drive ac-Carbon fiber composite arm 590 Industrial Robotics: Theory, Modelling and Control Figure 14. Two-Arm Test Platform (double SCARA structure) Figure 15. TAU Prototype DesignError Modeling and Accuracy of Parallel Industrial Robots 591 Kinematics of Tau configuration This chapter gives the nominal (no error) kinematics of the TAU robot. It is a general solution for this type of 3-DOF parallel-serial robots. For the two-arm test platform, a simple kinematic solution can be obtained based on its double SCARA configuration and it is not included in this chapter. The two-arm test platform kinematics was used in friction model identification and kinematic error calibration of the two-arm test platform. It will be introduced as needed in the related chapters. To solve the kinematics of this 3-DOF TAU robot, three independent equations are needed. The three lower arm links, connected between the moving plate and upper arm 1, are designed to be parallel to each other and have the same length. Similarly, the two lower arms of upper arm 2 are also parallel and equal in length, which gives another length equation. The third equation comes from the lower arm 3. Formulating these three equations all starts from point P in Figure 3.1, where three kinematic chains meet. Three basic equations for the kinematic problem are: Figure 16.TAU Robot Kinematic Representation XYZ θ3 θ2 θ1 θi Input rotational joint Universal joint Spherical joint a11 a31 a21a12 a22 a 32d11 d31 d21KCP (Px, Py, Pz) ϕD1 D2D3 O592 Industrial Robotics: Theory, Modelling and Control For Point D 1: 4) 120sin( ) sin() 120cos( ) cos( 11 11 33 3 11 11 33 3 11 1 d d Da a Da a D zyx − =+ − =+ − = θ θθ θ 12 1 ) ( a P D dist = − For Point D 2: 23 21 21 21 21 21 2 ) sin() cos( d d Da Da D zyx + === θθ 22 2 ) ( a P D dist = − For Point D 3: 31 31 33 2 31 31 33 2 31 3 ) 120sin( ) sin() 120cos( ) cos( d Da a Da a D zyx =+ − =+ − = θ θθ θ 32 3 ) ( a P D dist = − Basic equations 2 12 12 12 12 ) () () ( Pz D py D Px D az y x − + − + − = (1) 2 22 22 22 22 ) () () ( Pz D Py D Px D az y x − + − + − = (2) 2 32 32 32 32 ) () () ( Pz D Py D Px D az y x − + − + − = (3) 3.1 Inverse Kinematics In an inverse kinematic problem, the Cartesian positioning information (Px, Py, Pz) is known. The unknowns are joint space position of active drive angles: θ1,θ2and θ3. Substitute point D2 into Equation (2): 2 22 2 2 222 21 1 1 21 ) ( ) sin cos(2 Pz D Py Px a a Py PxaZ− + + + − = + θ θ Therefore, the first angle is obtained as: PxPy Py PxaPz D Py Px a aZ 1 2 2 212 22 2 2 222 211 1 tan 2) (cos− −+ +− + + + −=θ (4) Error Modeling and Accuracy of Parallel Industrial Robots 593 Substitute point D3 into Equation (3): 2 32 1 33 2 312 1 33 2 312 32 ) () ) 120sin( sin() ) 120cos( cos( Pz D Py a aPx a a a z− + − + − +− + − = θ θθ θ Therefore: xy y xz z y x CC C CaC D C C a a 33 1 2 32 3 312 3 32 32 32 322 31 1 2 tan 2) (cos− −+ +− + + + −=θ (5) Where, Pz Ca Py Ca Px C zyx =+ + =+ + = 31 33 31 33 3 ) 120sin() 120cos( θθ Substitute point D1into Equation (1) 2 3 12 32 32 122 11 3 3 3 3 11 ) ( ) sin cos (2z z y x y x C D C C a a C Ca − + + + − = + θ θ Therefore: xy y xz z y x CC C CaC D C C a a 33 1 2 32 3 112 3 12 32 32 122 111 3 tan 2) (cos− −+ +− + + + −=θ (6) Equations (4), (5) and (6), therefore, are the inverse kinematics ended at point P on the moving platform. Noticed that point P is the kinematic calculation point, and additional inverse kinematic is needed to transfer TCP (Tool Center Point) to point P, when tool or wrist assembly is attached to the moving plat- form. 3.2 Forward Kinematics The forward kinematic problem of a parallel configuration in general is more difficult than the inverse problem, for certain configurations there is no ana- lytical solution admitted. For this TAU robot, the analytical forward kinemat- ics is achievable. The Cartesian positioning information (Px, Py, Pz) is un- known in this case. The known are joint space position of active drive angles: θ1,θ2and θ3. Change the format of Equations (1), (2) and (3) into: 594 Industrial Robotics: Theory, Modelling and Control 2 122 12 12 12 12 12 1 2 2 2 a Pz PzD D Py PyD D Px PxD Dz z y y x x = + − + + − + + − (7) 2 222 22 22 22 22 22 2 2 2 2 a Pz PzD D Py PyD D Px PxD Dz z y y x x = + − + + − + + − (8) 2 322 32 32 32 32 32 3 2 2 2 a Pz PzD D Py PyD D Px PxD Dz z y y x x = + − + + − + + − (9) Equation (7) – Equation (8) 2 222 12 2 12 1 2 12 22 22 22 12 12 1 ) (2) (2 ) (2) () ( a a Pz D DPy D D Px D D D D D D D D z zy y x x z y x z y x − = − −− − − − + + − + + (10) Equation (7) – Equation (9) 2 322 12 3 13 1 3 12 32 32 32 12 12 1 ) (2) (2 ) (2) () ( a a PzD DPy D D PxD D D D D D D D z zy y x x z y x z y x − = − −− − − − + + − + + (11) Thus, define: 2 32 32 3 32 22 22 2 22 12 12 1 1 z y xz y xz y x D D D dD D D dD D D d + + =+ + =+ + = Equation (10) becomes 2/) ( ) ( ) ( ) (2 12 122 22 2 1 2 1 2 1 dd a a Pz D D Py D D Px D Dz z y y x x −+ − = − + − + − Let 2/) (2 12 122 22 12 1 12 1 12 1 1 dd a a eD D cD D bD D a z zy yx x −+ − =− =− =− = Substitutes into Equation (10): 1 1 1 1 e Pzc Pyb Pxa =⋅+⋅+⋅ Similarly define Error Modeling and Accuracy of Parallel Industrial Robots 595 2/) (3 12 122 32 23 1 23 1 23 1 2 dd a a eD D cD D bD D a z zy yx x −+ − =− =− =− = Then Equation (11) as 2 2 2 2 e Pzc Pyb Pxa =⋅+⋅+⋅ Pzce Pyb PxaPzce Pyb Pxa ⋅−=⋅+⋅⋅−=⋅+⋅ 2 2 2 21 1 1 1 »¼º «¬ª ⋅−⋅−=»¼º «¬ª »¼º «¬ª PzcePzce PyPx b ab a 2 21 1 2 21 1 Define12 21 baba − =Δ For case 1, Δ≠ 0: Pzcbcb ebebbPzce bPzcex ⋅ − + − =⋅− − ⋅− =Δ ) () () ( ) ( 12 21 21 121 2 2 2 1 1 Pzcaca eaeaaPzce aPzcey ⋅ − + − =⋅− − ⋅− =Δ ) () () ( ) ( 21 12 12 212 1 1 1 2 2 Pzcaca eaeayPyPzcbcb ebebxPx ⋅Δ−+Δ−=ΔΔ=⋅Δ−+Δ−=ΔΔ= 21 12 12 2112 21 21 12 Define: Δ−=Δ−=Δ−=Δ−= 21 1212 2112 21 221 12 1 cacafcbcbfeaeafebebf yx Thus: Pzf f PyPzff Px yx + =+ = 21 (12) 596 Industrial Robotics: Theory, Modelling and Control Substitute Px, Py into Equation (3): 2 32 2 32 1 32 32 ) () () ( Pz D Pyf f D Pzff D az y y x x − + − − + −− = Resort Equations above: 0) ( ) (2 ) 1(2 322 32 222 11 3 22 112 2 2= − + + + − + + + + a D f f PzDff ff Pzf fz z y x y x Where, yx Df fDf f 3 2 223 1 11 − =− = Then, let 2 322 32 222 113 22 112 2 ) (21 a D f f CDff ff Bf f A zz y xy x − + + =− + =+ += The solution of Equation 02=+⋅+ ⋅ C PzB PzA is well known as: ACA B BPz⋅⋅⋅− ±−=242 ............................ (13) From Equation (12) Pzff Pxx+=1 ............................ (14) Pzf f Pyy+ =2 ............................ (15) For case 1, Δ = 0, i.e. a2 = b2 = 0 12 21 baba − =Δ In this case, zD Pz3= and only one Equation is available, Pzce Pyb Pxa ⋅−=⋅+⋅1 1 1 1 i.e. 2 11 1 1 1 /) ( f Pzf Pxfb Pxa Pzce Py y + + =⋅−⋅− =Error Modeling and Accuracy of Parallel Industrial Robots 597 Where: 1 11 1 21 1 1 /// ba fbe fbc f x−=+=−= Substitute Px, Py into Equation (3) and resort the equation above: 0) ( ) (2 ) 1(2 322 32 11 3 112 2= − + + − + + a D f PxDff Pxfx x x x Where,yDf Pzf f3 2 1 11 − + = Then, let 2 322 32 113 112 ) (21 a D f CDff Bf A xx xx − + =− =+= The solution of Equation 02=+⋅+ ⋅ C PxB PxA is well known as: ACA B BPx⋅⋅⋅− ±−=242 From Equation (12) zx D Pzf Pzf Pxf Py 32 1 =+ + = For case b1, b2 =0 Equation Pzce Pyb Pxa ⋅−=⋅+⋅1 1 1 1 becomes 1 1 1 /) ( a Pzce Px ⋅− = Py can be solved by one of those basic Equations, for example for Equation (1). 2 12 12 12 1 ) () ( Pz D Px D a D Pyz x y − − − − ± = The sign is the same as d1y. For case a1, a2 =0 598 Industrial Robotics: Theory, Modelling and Control Equation becomes Pzce Pyb Pxa ⋅−=⋅+⋅1 1 1 1 1 1 1 /) ( b Pzce Py ⋅− = Px can be solved by one of those basic Equations as 2 12 12 12 1 ) () ( Pz D Py D a D Pxz y x − − − − ± = The sign is the same as D 1x. Thus forward kinematic is solved based on geometry constrains. Like the in- verse kinematics, additional mathematic work is needed for the kinematic chain from point P to final TCP depending on the configuration details of the tool or wrist. 3.3 Discriminant Analysis of Kinematic Solution Mathematically neither forward nor inverse kinematics gives single solution. Forward kinematics usually has two solutions, because the passive joint angles formed between upper arm and lower arm are not determined by kinematic equations. When only arm 1 and arm 2 chains are considered, upper arm 1, lower arm1, upper arm 2 and lower arm 2 form a quadrilateral geometry. These two solutions form one convex and one concave quadrilateral and one and only one of them is allowed by mechanical constrains. The discriminating condition is the angle between arm 1 and arm 2. For inverse kinematics, the mathematic equations can give out up to 8 solutions for the same position in- put. Still the physical constrains limits the left arm can be only placed on the left side of right arm, together with the convex and concave condition, there is only one solution is reasonable for arm 1 and arm 2. However including arm 3 into consideration, if it can rotate freely around its axis, there are two solutions for the drive angle of arm 3 except for singularity point. However since the el- bow joint of arm 3 physically limits arm 3 so that arm 3 can only move within one side. Therefore, combining mathematics and physical constrains together, within the reachable workspace, TAU robot kinematics gives single solution on each input for both forward and inverse routine. Error Modeling and Jacobian Matrix with all variables The purpose of error analysis is to minimize the error of robot system through assembly based on the comprehensive system error model. The reason is based Error Modeling and Accuracy of Parallel Industrial Robots 599 on the fact that all error source will either have a negative or positive influence on the system error, which is then possible to arrange them in a way that can- cellation or at least error reduction will happen. The methodology is described as: •Identifying the error effect of individual component using the established system error model. •Identifying the dimensional ranges allowed in an assembly for each connec-tion. •Using the system error model to identify the negative or positive direction that a connection should be made within the ranges allowed. •Predicting and minimizing system error using the model. •Using proper error budget approach to minimize the system error. 4.1 Error Modeling The assembly process is a process of error identification and more importantly, a process of error assignment in the way towards minimizing system error. During the process, error budget is completed, and more importantly, an accu- rate kinematic model should be established. The process is geared directly to-wards error control and compensation when a robot is in service. The process is also a redesign process for improved performance Next attentions should be paid to: •The direction and degree of influence of an error source on system error var-ies in the whole workspace. •Random errors can not be dealt effectively. •Effective fixture and measuring are important. •The methodology reduces robotic system error and opens the door for more accurate error compensation. For the TAU-robot, an important thing needed is the error analysis. One needs to assign an error limit or range to all components in order to obtain a given robotic system accuracy. The procedure is so called Error Budget. Before the error budget, an important thing to accomplish is to establish and analyze the Jacobian Matrix. It is necessary to know Jacobian Matrix for all components before assigning error to all components. On the other hand one can also obtain the final accuracy with knowing Jacobian Matrix. Besides one can know which components are more important than others based on the Jacobian Matrix. Table 3 lists all the design variables for the TAU robot. 600 Industrial Robotics: Theory, Modelling and Control Table 3. Design Variables of TAU Robot There are six kinematic chains from the base to the end-effector as: Transfer Matrix: M1 Base->Joint1->Joint_link11_arm1 Transfer Matrix: M1*M3 Base->Joint1->Joint_link21_arm1 Transfer Matrix: M2 Base->Joint1->Joint_link31_arm1 Transfer Matrix: M4*M5 Base->Joint2->Joint_link12_arm2 Transfer Matrix: M4 Base->Joint2->Joint_link22_arm2 Transfer Matrix: M6*M7 Base->Joint3->Joint->Joint13_link_arm3 NO. DESCRIPTION MAME 1 drive 1 Joint 1 2 drive 2 Joint 23 drive 3 Joint 3 17 a1 24 d1 4s i t 1 10 afa1 18 joint_link11_arm 1 a2 19 a3 25 d3 5s i t 3 11 afa3 20 a4 26 d4 6s i t 4 12 afa4 21 a527 d5 7s i t 5 13 afa522 a6 28 d6 8s i t 6 14 afa6 23 a7 29 d7 9s i t 7 15 afa7 30 x131 y1 32 z1 33 x234 y2 35 z2 36 x337 y3 38 z3 39 x440 y4 41 z4joint 2 and arm 2 short arm 2joint 1 and arm 1 joint 3 arm 3 joint_link11_arm 1 joint_link21_arm 1 joint_link31_arm 1 joint_link12_arm 2short arm 1NO. DESCRIPTION MAME 42 x543 y544 z545 x6 46 y6 47 z6 48 x1149 y1150 z1151 x2252 y2253 z22 54 x33 55 y3356 z33 57 x44 58 y4459 z4460 x55 61 y55 62 z5563 x6664 y6665 z6616 height of the TCP a 66 link 13 L0 67 link 11 L1 68 link 31 L2 69 link 21 L370 link 22 L471 link 12 L5joint_link22_arm2 joint_link13_arm3 joint_link11_platf orm joint- link13_platformjoint_link31_platf orm joint_link21_platf orm joint_link12_platf orm joint_link22_platf ormError Modeling and Accuracy of Parallel Industrial Robots 601 Where, So, the six length equations can be obtained from matrices above. M1cos joint 1Δθ1 + () sin joint 1Δθ1 + () 0 0sin joint 1Δθ1 + ()− cosΔα1()⋅ cos joint 1Δθ1 + () cosΔα1()⋅ sinΔα1() 0sin joint 1Δθ1 + () sinΔα1()⋅ cos joint 1Δθ1 + () − sinΔα1()⋅ cosΔα1() 0700 Δa1 +() cos joint 1Δθ1 + ()⋅ 700 Δa1 +() sin joint 1Δθ1 + ()⋅ 750 Δd1 + 1ª « « «« ¬º » » » » ¼→ M2cos joint 1Δθ2 + () sin joint 1Δθ2 + () 0 0sin joint 1Δθ2 + ()− cosΔα2()⋅ cos joint 1Δθ2 + () cosΔα2()⋅ sinΔα2() 0sin joint 1Δθ2 + () sinΔα2()⋅ cos joint 1Δθ2 + () − sinΔα2()⋅ cosΔα2() 0900 Δa2 +() cos joint 1Δθ2 + ()⋅ 900 Δa2 +() sin joint 1Δθ2 + ()⋅ 750 Δd2 + 1ª « « « « ¬º » » »» ¼→ M3cosΔθ3() sinΔθ3() 0 0sinΔθ3()− cosΔα3()⋅ cosΔθ3() cosΔα3()⋅ sinΔα3() 0sinΔθ3() sinΔα3()⋅ cosΔθ3() − sinΔα3()⋅ cosΔα3() 0Δa3cosΔθ3()⋅ Δa3sinΔθ3()⋅ 200 Δd3 + 1§ ¨ ¨ ¨¨ ©· ¸ ¸¸ ¸ ¹→ M4cos joint 2Δθ4 + () sin joint 2Δθ4 + () 0 0sin joint 2Δθ4 + ()− cosΔα4()⋅ cos joint 2Δθ4 + () cosΔα4()⋅ sinΔα4() 0sin joint 2Δθ4 + () sinΔα4()⋅ cos joint 2Δθ4 + () − sinΔα4()⋅ cosΔα4() 0900 Δa4 +() cos joint 2Δθ4 + ()⋅ 900 Δa4 +() sin joint 2Δθ4 + ()⋅ 950 Δd4 + 1ª « « «« ¬º » » » » ¼→ M5cosΔθ5() sinΔθ5() 0 0sinΔθ5()− cosΔα5()⋅ cosΔθ5() cosΔα5()⋅ sinΔα5() 0sinΔθ5() sinΔα5()⋅ cosΔθ5() − sinΔα5()⋅ cosΔα5() 0Δa5cosΔθ5()⋅ Δa5sinΔθ5()⋅ 200−Δ d5 + 1§ ¨ ¨ ¨¨ ©· ¸ ¸¸ ¸ ¹→ M6cos1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹ sin1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹ 0 0sin1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹− cos 90−Δ α 6 +()⋅ cos1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹cos 90−Δ α 6 +()⋅ sin 90−Δ α 6 +() 0sin1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹sin 90−Δ α 6 +()⋅ cos1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹− sin 90−Δ α 6 +()⋅ cos 90−Δ α 6 +() 0Δa6cos1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹⋅ Δa6sin1 2joint 1 ⋅1 2joint 2 ⋅+Δ θ 6 +§¨©·¸¹⋅ 1700 Δd6 + 1§¨ ¨ ¨¨¨¨ ¨©·¸ ¸¸¸¸¸ ¸¹→ M7cos joint 3Δθ7 + () sin joint 3Δθ7 + () 0 0sin joint 3Δθ7 + ()− cosΔα7()⋅ cos joint 3Δθ7 + () cosΔα7()⋅ sinΔα7() 0sin joint 3Δθ7 + () sinΔα7()⋅ cos joint 3Δθ7 + () − sinΔα7()⋅ cosΔα7() 0900 Δa7 +() cos joint 3Δθ7 + ()⋅ 900 Δa7 +() sin joint 3Δθ7 + ()⋅ Δd7 1ª « « «« ¬º » » »» ¼→602 Industrial Robotics: Theory, Modelling and Control 4.2 Jacobian Matrix of TAU Robot with All Error Parameters In error analysis, error sensitivity is represented by the Jacobian matrix. Deri- vations of the Jacobian matrix can be carried out after all the D-H models are established. For the TAU robot, the 3-DOF kinematic problem will become a 6- DOF kinematic problem. The kinematic problem becomes more complicated. In fact, the error sensitivity is formulated through igx ∂∂, igy ∂∂, igz ∂∂ where x, y, z represent the position of the tool plate and idg is the error source for each component. So the following equations can be obtained: iN idglxdx¦∂∂= 1 (16) iN idglydy¦∂∂= 1 (17) iN idglzdz¦∂∂= 1 (18) The error model is actually a 6-DOF model since all error sources have been considered. It includes both the position variables X, Y, Z and also rotational angles γβα,, . From the six kinematic chains, the equations established based on D-H models are 0),,,,,,(...... .......... .......... .......... ..........0),,,,,,(0),,,,,,( 6 62 21 1 = == == = g zyxf fg zyxf fg zyxf f γβαγβαγβα Differentiating all the equations against all the variables γβα,,,,,zyx and g, where g is a vector including all geometric design parameters: 0= ⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂¦ j ji ji i i i i idggfdfdfdfdzzfdyyfdxxfγγββαα (19) Rewrite it in matrix as Error Modeling and Accuracy of Parallel Industrial Robots 603 »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ γβγβ ααγβγβ ααγβγβ αα 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1 ffff f zff zf yf xfyf xfffff f zff zf yf xfyf xfffff f zff zf yf xfyf xf »»»»»»»»»»»»»»»» ¼º «««««««««««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− = »»»»»»» ¼º ««««««« ¬ª •¦¦¦¦¦¦ j j jj j jj j jj j jj j jj j j dggfdggfdggfdggfdggfdggf ddddzdydx 654321 γβα (20) In a compact form, it becomes dG dXJ =1 (21) Where dG= »»»»»»»»»»»»»»»» ¼º «««««««««««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− ¦¦¦¦¦¦ j j jj j jj j jj j jj j jj j j dggfdggfdggfdggfdggfdggf 654321 = 121 66 26 161 21 11 ... .... .... .. .... .. .... .... ××»»»»»»» ¼º ««««««« ¬ª »»»»»»»» ¼º «««««««« ¬ª ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ −N N N NN dgdgdg gf gf gfgf gf gf (22) From Equation (22) above, we have, dgJ dG2= (23) Substitute Equation (21) into Equation (23) to obtain dgJ dXJ2 1= (24) dgJJ dX ) (21 1−= (25) The Jacobian matrix is obtained as 21 1J J⋅−604 Industrial Robotics: Theory, Modelling and Control =J21 1J J⋅−=1 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1− »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ γ βγ β ααγ βγ β ααγ βγ β αα f ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xf »»»»»»»» ¼º «««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− NN gf gf gfgf gf gf 6 26 161 21 11 .... ... . .. ... . .. ... . .... (26) For a prototype of the TAU robotic design, the dimension of the Jacobian ma- trix is 6 by 71. An analytical solution can be obtained and is used in error analysis. 4.3 Newton-Raphson Numerical Method Because of the number of parameters involved as well as the number of error sources involved, the kinematic problem becomes very complicated. No ana- lytical solution can be obtained but numerical solution. The TAU configura- tion, however, as a hybrid or a special case of parallel robots, its forward ki-nematic problem is, therefore, very complicated. The Newton-Raphson method as an effective numerical method can be applied to calculate the for- ward problem of the TAU robot, with an accurate Jacobian matrix obtained. The Newton-Raphson method is represented by (27) With the six chain equations obtained before, the following can be obtained (28) )( )]([1 ' 1 n n n n XF XF X X ⋅ − =− + 1 ')]([− nXF = Inv »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ γ βγ β ααγ βγ β ααγ βγ β αα 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1 f ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xfError Modeling and Accuracy of Parallel Industrial Robots 605 This equation is used later to calculate the forward kinematic problem, and it is also compared with the method described in the next section. 4.4 Jacobian Approximation Method A quick and efficient analytical solution is still necessary even though an accu- rate result has been obtained by the N-R method. The N-R result is produced based on iteration of numerical calculation, instead of from an analytical closed form solution. The N-R method is too slow in calculation to be used in on-line real time control. No certain solution is guaranteed in the N-R method. So the Jacobian approximation method is established. Using this method, er- ror analysis, calibration, compensation, and on-line control model can be in turn established. As the TAU robot is based on a 3-DOF configuration, instead of a general Stewart platform, the Jacobian approximate modification can be obtained based the 3-DOF analytical solution without any errors. The mathe- matical description of the Jacobian approximation method can be described as follows. For forward kinematics, ε θεθ d J FXFX FORWARD ⋅ + == )0,(),( (29) Where ),('εθF JFORWARD = and ε represents error. Thus, the analytical solution )0,(θF and )0,(XF , is obtained. Therefore, the Jacobian Approximation as an analytical solution is obtained and is used to solve nonlinear equations instead of using N-R method. 4.5 Jacobian Matrix with a probe A real tool should be attached on the wrist of robots as robots are used for any application. Here a probe means a real tool.From the six kinematic chains, the equations established based on D-H models are 0),,,,,,(...... .......... .......... .......... ..........0),,,,,,(0),,,,,,( 6 62 21 1 = == == = g zyxf fg zyxf fg zyxf f γβαγβαγβα (30) 606 Industrial Robotics: Theory, Modelling and Control Differentiating all the equations against all the variables γβα,,,,,zyx and g, where g is a vector including all geometric design parameters: 0= ⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂¦ j ji ji i i i i idggfdfdfdfdzzfdyyfdxxfγγββαα (19) Rewrite it in matrix as »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ γ βγ β ααγ βγ β ααγ βγ β αα 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1 f ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xf »»»»»»»»»»»»»»»» ¼º «««««««««««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− = »»»»»»» ¼º ««««««« ¬ª •¦¦¦¦¦¦ j j jj j jj j jj j jj j jj j j dggfdggfdggfdggfdggfdggf ddddzdydx 654321 γβα (20) In a compact form, it becomes dG dXJ =1 (21) Where dG= »»»»»»»»»»»»»»»» ¼º «««««««««««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− ¦¦¦¦¦¦ j j jj j jj j jj j jj j jj j j dggfdggfdggfdggfdggfdggf 654321 = 121 66 26 161 21 11 ... .... .... .. .... .. .... .... ××»»»»»»» ¼º ««««««« ¬ª »»»»»»»» ¼º «««««««« ¬ª ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ − N N N NN dgdgdg gf gf gfgf gf gf (22) Error Modeling and Accuracy of Parallel Industrial Robots 607 From Equation (22) above, we have dgJ dG2= (23) Substitute Equation (21) into Equation (23) to obtain dgJ dXJ2 1= (24) dgJJ dX ) (21 1−= (25) The Jacobian matrix is obtained as 21 1J J⋅− =J21 1J J⋅−=1 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1− »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ γ βγ β ααγ βγ β ααγ βγ β αα f ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xf (26) »»»»»»»» ¼º «««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− NN gf gf gfgf gf gf 6 26 161 21 11 .... ... . .. ... . .. ... . .... In the case with a probe on the end effecter: From the Jacobian matrix , , transfer the coordinate of TCP into the probe coordinates Xp, Yp and Zp as (27) dLJJ dX ) (21 1−= »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª= »»»» ¼º «««« ¬ª 110 0 0 133 32 3123 22 2113 12 11 LLL ppp zyx z R R Ry R R Rx R R R ZYX608 Industrial Robotics: Theory, Modelling and Control Differentiating Equation (20), one can obtain: ( 2 8 ) Where (31) Rewrite the equation into following forms, »»» ¼º ««« ¬ª ⋅+ »»»»»»» ¼º ««««««« ¬ª »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ªLLL PPP dzdydx R ddddzdydx M M MM M MM M M dZdYdX γβα 33 32 3123 22 2113 12 11 100010001 (32) Where »»» ¼º ««« ¬ª ⋅ = LLL ij zyx DR M then substitute dLJJ dX ) (21 1−= into Equation (32) Finally »»»»»»»»»»» ¼º ««««««««««« ¬ª ⋅ »»» ¼º ««« ¬ª ⋅ »»» ¼º ««« ¬ª = »»» ¼º ««« ¬ª LLLN PPP dzdydxdLdLdL R J M M MM M MM M M dZdYdX .. 10001000121 33 32 3123 22 2113 12 11»»» ¼º ««« ¬ª + »»» ¼º ««« ¬ª ⋅+ »»» ¼º ««« ¬ª ⋅ = »»» ¼º ««« ¬ª dzdydx dzdydx R zyx DR dZdYdX LLL LLL PPP γ β αγ β αdR dR dR DRji ji ji ji ⋅ +⋅ +⋅ =, , , , αα ddRRji ji, ,=ββ ddRRji ji, ,= γγ ddRRji ji, ,=Error Modeling and Accuracy of Parallel Industrial Robots 609 The final Jacobian matrix with a probe is »»» ¼º ««« ¬ª ⋅ »»» ¼º ««« ¬ª R J M M MM M MM M M 33 32 3123 22 2113 12 11 100010001 4.6 Inverse Jacobian Matrix with a Probe From 6 link length equations below: 0),,,,,,,,,(...... .......... .......... .......... ..........0),,,,,,,,,(0),,,,,,,,,( 1 3 2 1 6 61 3 2 1 2 21 3 2 1 1 1 = == == = g zyx f fg zyx f fg zyx f f γβα θθθγβα θθθγβα θθθ (33) where ,,,3 2 1θθθ are drive angles from actuators or motors and γβα,,,,,zyx is the pose of TCP. with the probe, one can obtain the next three equations from Euler transforma- tion. 0),,,,,,(0),,,,,,(0),,,,,,( 2 9 92 8 82 7 7 = == == = g zyxf fg zyxf fg zyxf f γβαγβαγβα from »»»» ¼º «««« ¬ª ⋅ »»»» ¼º «««« ¬ª = »»»» ¼º «««« ¬ª 1 10 1LLL ppp zyx zyx R zyx (34) Differentiate with respect to all the variables 3 2 1,,θθθ , γβα,,,,,zyx for Equa- tion (30), where g i is a vector including all design variables: 0=idf or 01 13 32 21 1=⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂+⋅∂∂dggfdfdfdfdzzfdyyfdxxfdfdfdfi i i i i i i i i iγγββααθθθθθθ (35) Rewrite it in a matrix form 1 2 1 G dXJ dJ −∂= +θ (36) 610 Industrial Robotics: Theory, Modelling and Control Where »»»»» ¼º ««««« ¬ª ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ =36 26 1631 21 11 1 . . . θ θ θθ θ θ f f ff f f J (37) =2J »»»»»»»»»»»»»»» ¼º ««««««««««««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂γ βγ β ααγ βγ β ααγ βγ β αα 6 65 5 6 65 5 6 65 54 43 3 4 43 3 4 43 32 21 1 2 21 1 2 21 1 f ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xff ff f f zff zf yf xfyf xf (38) =∂−1G »»»»»»»»»»»»»» ¼º «««««««««««««« ¬ª ∂∂−∂∂−∂∂−∂∂−∂∂−∂∂− 1 161 151 141 131 121 11 dggfdggfdggfdggfdggfdggf (39) From Equation (33), one can obtain next formulation. 2 3 G dXJ −∂= (40) Where »»»»»» ¼º «««««« ¬ª ∂∂ ∂∂ ∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ ∂∂ ∂∂ ∂∂ = γ β αγ β αγ β α 9 9 9 9 9 98 8 8 8 8 87 7 7 7 7 7 3 f f f zf yf xff f f zf yf xff f f zf yf xf J (41) Error Modeling and Accuracy of Parallel Industrial Robots 611 = ∂−2G »»»»»»» ¼º ««««««« ¬ª ∂∂−∂∂−∂∂− 2 292 282 27 dggfdggfdggf (42) From Equation (36) θdJ J G J dX11 2 11 2 ⋅ −∂⋅ −=− − (43) Substituting Equation (43) into the Equation (36) »»»» ¼º «««« ¬ª ⋅ ⋅ − »»» ¼º ««« ¬ª ⋅ =⋅⋅ ⋅− − NLLL dLdLdL JJJ dzdydx J dJ JJ.21 41 2 3 5 11 2 3 θ (44) Where »»»»» ¼º ««««« ¬ª ∂∂ ∂∂∂∂ ∂∂ = NN Lf LfLf Lf J 6 161 11 4 ...... ... ...... (45) and »»»»»»» ¼º ««««««« ¬ª ∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂∂∂ ∂∂ ∂∂ = L L LL L LL L L zf yf xfzf yf xfzf yf xf J 9 9 98 8 87 7 7 5 (46) Finally612 Industrial Robotics: Theory, Modelling and Control »»»»»»»» ¼º «««««««« ¬ª ⋅ ⋅ ⋅−⋅ ⋅ ⋅ =− − − LLLN dzdydxdLdL JJ JJ J JJ d.. ] [] [1 5 41 2 31 11 2 3 # θ (47) =INVERSEJ ] [] [5 41 2 31 11 2 3 JJ JJ J JJ #⋅ ⋅−⋅ ⋅ ⋅− − − 4.7 Determination of Independent Design Variables Using SVD Method With the reality that all the parts of a robot have manufacturing errors and misalignment errors as well as thermal errors, errors should be considered for any of the components in order to accurately model the accuracy of the robotic system. Error budget is carried out in the study and error sensitivity of robot kinematics with respect to any of the parameters can be obtained based on er- ror modeling. This is realized through the established Jacobian matrix. To find those parameters in the error model that are linearly dependent and those parameters that are difficult to observe, the Jacobian matrix is analyzed. SVD method (Singular Value Decomposition) is used in such an analysis. A methodical way of determining which parameters are redundant is to inves- tigate the singular vectors. An investigation of the last column of the V vector will reveal that some elements are dominant in order of magnitude. This im-plies that corresponding columns in the Jacobian matrix are linearly depend- ent. The work of reducing the number of error parameters must continue until no singularities exist and the condition number has reached an acceptable value. A total of 31 redundant design variables of the 71 design parameters are elimi-nated by observing the numerical Jacobian matrix obtained. Table 7 in Section 6 lists the remaining calibration parameters. 4.8 Error Budget When the SVD is completed and a linearly independent set of error model pa- rameters determined, the Error Budget can be determined. The mathematical description of the error budget is as follows: Error Modeling and Accuracy of Parallel Industrial Robots 613 dg VS dX Udg VSU dgJ dXVSUJ T TTT •= •• ••= •=••= (48) Assume Xd dX UT= • and gd dg VT= • . So we haveiiSXdgd / = , finally, iiTS dX UV dg /) ( • • = (49) Thus if the dX is given as the accuracy of the TAU robot, the error budget dg can be determined. Given the D-H parameters for all three upper arms and the main column, the locations of the joints located at each of the three upper arms can be known ac- curately. The six chain equations are created for the six link lengths, as follows: °°°° ¯°°°° ®­ »»»»»»»» ¼º «««««««« ¬ª = )int _ ,int _ (6)int _ ,int _ (5)int _ ,int _ (4)int _ ,int _ (3)int _ ,int _ (2)int _ ,int _ (1 s po TCPs po upperarmfs po TCPs po upperarmfs po TCPs po upperarmfs po TCPs po upperarmfs po TCPs po upperarmfs po TCPs po upperarmf F Where ),,,,,( int _ γβαpzpypxf po TCP = )( int _ εf po Upperarm = and ε is a collection of all the design parameters. Thus, °°°° ¯°°°° ®­ »»»»»»»» ¼º «««««««« ¬ª = ),,,,,,(6),,,,,,(5),,,,,,(4),,,,,,(3),,,,,,(2),,,,,,(1 γβα εγβα εγβα εγβα εγβα εγβα ε pzpypx Fpzpypx Fpzpypx Fpzpypx Fpzpypx Fpzpypx F F (50)614 Industrial Robotics: Theory, Modelling and Control An error model is developed based on the system of equations as described above. A total of 71 parameters are defined to represent the entire system. The 71 parameters include all the D-H parameters for the 3 upper arms, as well as the coordinates (x, y, z) of the 6 points at both ends of the 6 links, respec- tively. Table 8 in Section 6 presents the error budget. 4.9 Dexterity Analysis From the inverse kinematics ᧨ h i iRP S= (51) Whereh iP denotes the position of the center on the end plate in local coordi- nate. R is the transfer matrix of coordinate. So the link vector b i i h i PS P L −+ = (52) hPis the position coordinate of the center on the end plate. From the end plate velocities to link velocities, We define the Jacobian matrix by XJL= (53) Where L is the vector of link velocities and TT T hP X ],[ ω= is the velocity vector Error Modeling and Accuracy of Parallel Industrial Robots 615 Figure 17. Vectors Differentiating Equation (52) we can get ) (i h ii ii S p zlzl × + = + ω (Zi is the unit vector of Li vector) (54) Taking the inner product with Zi yields ω• × + •= ) (i i h i i zS pzl ( from the ω ω • × = ×• ) () (i i i i zs s z ) (55) Thus we can obtain the Jacobian matrix as »»» ¼º ««« ¬ª ×× =T TT T zs zzs z J ) (.. ..) ( 6 6 61 1 1 (56) The dexterity is defined as )()( 1 min1 max −− =JJAλλ (57) where λ is the eigen-value of the Jacobian matrix. System Stiffness The stiffness of the robot is a very important performance, which will have a significant influence on the robotic applications like cutting, milling, grinding PibLiPhPihSi616 Industrial Robotics: Theory, Modelling and Control etc. In this chapter, general formulations for the stiffness of robotic system and the stiffness measurement result are presented, TCP stiffness is calculated based on theoretical analysis and modeling. In the stiffness analysis, the stiff- ness of individual component in related directions will be the output of stiff- ness model. 5.1 The Measurement of the Robot Stiffness Based on the designed robot with certain component errors, Error modeling will be used to map the robot error over its working space. Thermal model will also be established. Deflection under load will be part of the modeling too. This comprehensive error model is the base for error analysis and robotic product design. It will also be used, or partly used for error compensation. For error compensation, however, suitable sensors will have to be used. As measurement is concerned, it is important is to choose the suitable per- formance evaluation standard. The type of sensors will be selected based on the evaluation method. In selecting the sensors, resolution, repeatability, and accuracy under certain environments will be the key to consider. The factors of price and user-friendliness will also be weighted heavily. Measurement pro- cedure will be carefully generated and measurement will be performed using certified metrology equipment only to ensure the results. 5.2 Formulations of the Robotic System Stiffness A solution to the inverse kinematics problem is required for stiffness calcula- tion. It is briefly described below. Referring to standard Stewart Platform the i-th leg length li is given by li = gi(R,d) (58) where d = [x,y,z] , is the position vector of the platform coordinate system’s ori- gin in the base coordinate system, li is the length of the i-th leg and giis only a function of R and d for constant geometric the i-th leg parameters. »»» ¼º ««« ¬ª −− ++ − = ψ θ ψ θ φψ φ ψ θ φ ψ φ ψ θ φ θ φψ φ ψ θ φ ψ φ ψ θ φ θφ cos cos sin cos sinsin cos cos sin sin cos cos sin sin sin sin sinsin sin cos sin cos cos sin sin sin cos cos vos R (59) Error Modeling and Accuracy of Parallel Industrial Robots 617 Above is the rotation matrix relating the platform’s coordinate system, to the base co-ordinate system, Here R is constructed using Roll-Pitch-Yaw (RPY) angle rotations, where R (roll) =φ around the z axis, P (pitch) = θ around the y axis, and Y (yaw) = ψaround the x axis. Thus, R is a rotation about the x axis of ψ, followed by θ , a rotation around y axis, and ending with a rotation of φ around z axis. Equation (58) represents the inverse kinematic solution. For some R and d, the i-th leg length ( li) can be easily calculated. If Equation (58) is expanded using Taylor series expansion, and the first order term considered only, the change in leg length, Δli, is obtained as a row vector Ji, multiplied by the column twist vector Δpas given below: Δp = Ji Δli (60) where »¼º «¬ª ∂∂ ∂∂ ∂∂ ∂∂ ∂∂ ∂∂= i i i i i iig g g gz gy gxJφ θ ψ, , , , , (61) And Tzyx p ],,,,,[ φθψ ΔΔΔΔΔΔ=Δ . (62) Assembling the equations for all the legs of the mechanism, qJp Δ=Δ (63) whereTllllll q ],,,,,[6 5 4 3 2 1 ΔΔΔΔΔΔ=Δ . From the principle of duality between the force/torque and velocity fields, or what is more commonly known as contragradience τTJf= (64) where T z y x z y x MMMFFF ],,,,,[=τ is the end effector wrench, and Tffffff f ],,,,,[6 5 4 3 2 1= is the vector of forces experienced by the legs, and TJis the transpose of the Jacobian J, (described earlier). 618 Industrial Robotics: Theory, Modelling and Control As previously mentioned, the static stiffness (or rigidity) of the mechanism can be a primary consideration in the design of a parallel link manipulator for cer- tain applications (specifically, those involving large forces and high accuracy). The static stiffness of the PLM is a function of: •The limbs’ structure and material. •The joints’ stiffnesses. •The platform and base stiffness. •The geometry of the structure. •The topology of the structure. •The end-effector position and orientation. To ensure meeting the stiffness specifications, it becomes important to estimate the stiffness, particularly the lowest stiffness value and the direction in which it is experienced, for the manipulator in a given posture or configuration. In the following analysis, this problem is addressed. Algebraic expressions for stiffness (both the engineering and the general, to be defined later) are devel- oped. The fact that the minimum stiffness is experienced in the direction of the eigenvector that corresponds to the minimum eigenvalue of the ‘stiffness matrix’ of the manipulator is shown. A corresponding result can be obtained for the maximum stiffness of the manipulator. Finally, expressions are devel- oped for the stiffness of the manipulator in any direction. The basic assumption for the theory developed is: The joints are frictionless. The weights of the legs or arms are negligible. The rigidity of the platform and the base is much greater than that of the legs and, therefore, can be considered as infinite (or in general, the manipulator’s joints are the least stiff elements in the structure, and hence, dictate the ma- nipulator stiffness). If k is the axial or arm stiffness, then for the i-th leg or arm ii i lkf Δ= (65) where fiis the force needed to cause a ilΔchange of the i-th leg length. Assem- bling the equations for all the legs, Equation (65) becomes qkfiΔ= (66) Substituting for qΔfrom Equation (63) p kJf Δ =−1 (67) Error Modeling and Accuracy of Parallel Industrial Robots 619 Multiplying both sides of Equation (67) with J-T and substituting f with τTJ from Equation (64) to obtain .1p kJJTΔ =− −τ (68) Equation (68) can be interpreted as τ is the wrench required to cause the plat- form to experience a twist of pΔ. So the stiffness is obtained as 1− −kJJT (69) 5.3 Method for Measuring Joint Stiffness From Equation (69), the stiffness if the robot can be obtained, including the component or joint stiffness Ki . In order to obtain the total stiffness of the ro- bot, the joint stiffness has to be measured. From Equation (68), the following Equation (70) can be obtained by finding the inverse of the matrix 1− −kJJTas .1τT iJ JKp−=Δ (70) Equation (70) is very important for measuring the joint stiffness. Many differ- ent equations can be obtained by applying different force τ with different di- rections then measuring the deflections pΔ. Least square method is applied to solve Equation (70). As variable 1/K iis the unknown, one can simplify Equa- tion (70) as linear equations since []i i k K /11=− is a diagonal matrix. 5.4 Results of the Stiffness Measurement The instrument used in measuring includes: •CMM ROMER 3000i Digitizer with an accuracy of 5μm •Sphere with an accuracy of 0.02 mm Pose measurement is carried out first as seen in Fig. 5.1. The conditions are J1=84.70, J2=-3.60, J3=38.80, J4=-0.30, J5=50.60 and J6=-110.20. Load F x=-360N And the measured deformation is620 Industrial Robotics: Theory, Modelling and Control Δx = -0.69 mm, Δy = 0.37 mm, and Δz = -0.13 mm Condition for Deflection Measurement: Measure robot translational deflections by the position of the center of the sphere, which is calculated based on the measurement result of the portable CMM ROMER. •Motor servo is active during the measurement to take account of the control- ler stiffness. Figure 18. Measurement Set-up Error Modeling and Accuracy of Parallel Industrial Robots 621 Figure 19 . Configuration of the IRB 4400 Robot x y z622 Industrial Robotics: Theory, Modelling and Control Figure 20. Measured Deflection/Deformation Dx, Dy, and Dz Another measurement pose, as seen in Fig. 5.4 is J1=45.60, J2=-23.60, J3=37.20, J4=52.10, J5=52.10 and J6=-194.80. Load condition is Load Fx=-360N And the measured deformation is Δx = -1.05 mm, Δy = -0.01 mm and Δz = -0.57 mm Figure 21. Configuration of the IRB 4400 Robot Error Modeling and Accuracy of Parallel Industrial Robots 623 Figure 22. Measured Deflection/Deformation Dx, Dy, and Dz (Second pose) 624 Industrial Robotics: Theory, Modelling and Control Fx Fy Fz dx dy dz -180 0 0 -0.4561 0.1767 -0.1211 -360 0 0 -0.9232 0.2812 -0.2723 -360 0 0 -0.9604 0.2825 -0.2452 -180 0 0 -0.4822 0.1983 -0.0943 -180 0 0 -0.5359 0.2062 -0.1103 -360 0 0 -0.9775 0.3464 -0.2344 -180 0 0 -0.7276 0.0201 -0.4238-360 0 0 -1.423 0.0073 -0.8206 -360 0 0 -1.4246 -0.0099 -0.7893 -180 0 0 -0.768 0.0184 -0.44 -180 0 0 -0.7194 0.0518 -0.4242 -360 0 0 -1.4357 0.0577 -0.7922 0 -275 25 0.0061 -0.8927 0.0336 0 -275 25 -0.0004 -0.9184 -0.0111 -40 -295 10 0.134 -1.1826 -0.0926 -40 -295 10 0.1308 -1.2146 -0.1407 -360 0 0 -0.9344 0.2758 -0.2987 Table 4. Measured Deformation Data Then solve the K q in Equation (70) FJ JKxT q1−=Δ with the least square method. The final result is as follows: lsqr result Nominal value Axis 1: 19.03 22~80Axis 2: 14.6 32~42Axis 3: 45.83 25~39Axis 4: 31.26 70Axis 5: 15.16 50Axis 6: 15 85 Table 5.Calculated Joint Stiffness Fig. 5.6 also gives the standard deviation from the measurement data. Based on the results, the measurement data can be trusted and the standard deviation of residual error is 0.042mm. Also, verification of solved stiffness agrees well. The stiffness model can provide a method for position compensa- tion to reach a high level accuracy, with a force sensor measuring the process force in real time, the impact on position deformation can be estimated and compensated.Error Modeling and Accuracy of Parallel Industrial Robots 625 Figure 23. Residual Error Std = 0.042 mm The same procedure can be applied to the TAU robot. The stiffness at TCP point was measured by applying a load at TCP and measuring the resulting displacements, see Figure 24. The results of the measurements are shown in Figure 25. Figure 24. Setup of the TAU robot’s Stiffness Measurement 626 Industrial Robotics: Theory, Modelling and Control Figure 25. Measured Stiffness of the TAU robot 5.5 Application of the Robot Stiffness: Position Compensation Position compensation can be made once the stiffness model is established. The application is to compensate the position error caused by the cutting force of milling processing. Figure 26.Robotic Milling Setup Error Modeling and Accuracy of Parallel Industrial Robots 627 First, the surface quality of the aluminum block can be recorded as cutting without position compensation then cutting again to measure the surface qual- ity with on line compensation. The surface will be measured via the laser. See Fig. 5.9 for the robotic milling setup. Based on the result shown in Figs. 5.10 and 5.11, the compensation procedure is effective reducing the error to less than 0.1 mm compared with the original error of 0.5 mm. Conclusions: Verification of solved stiffness agrees very well. The stiffness model can pro- vide a method to model and test robot stiffness, with a force sensor measures the process force in real time, the impact on position deformation can be esti- mated and compensated. Figure 27. Surface Quality without Compensation 628 Industrial Robotics: Theory, Modelling and Control Figure 28. Surface Quality with Compensation, Mean Error < 0.1 mm 6 . Simulation and Experimental Results The validation of the analytical model has been carried out, as well as the re- alization of control scheme. Besides the analytical result and data, additional results used in this chapter come from three sources: Simulation results from ADAMS simulation software, see Figure 29 for details; Test results from two-arm test platform, see Table 11; Test results from the TAU prototype. 6.1 Validation of Jacobian Matrix and N-R Method The Jacobian Matrix and N-R method need to be verified to guarantee their correctness. These simulations are made by ADAMS (commercial simulation software) see Figure 29. The effect of the robot configurations were considered, all “verification points” are located in the whole work-space and with total different configurations. Figures 30, 6.3, and 6.4 show position differences between the N-R method and the ADAMS simulation, which indicates that accurate results have been ob- tained up to 0.06 um compared with ADAMS simulation results. These results guarantee the correctness of Jacobian Matrix and N-R method. Based on the simulation results, the N-R method with analytical Jacobian matrix can be used in error modeling, error budget, offline calibration. Like most of the methods in this thesis this method suffers from a drawback: it can not be used in online position compensation and online control because it is an iteration method even with an analytical, full size Jacobian Matrix. Next Error Modeling and Accuracy of Parallel Industrial Robots 629 section will focus on the Jacobian Approximation Method (JAM), which is able to deal with the online compensation and online control problems. Figure 29. Using Adams to Verify the Analytical and Error Model Error results between N-R and Adams simulation -0,00008-0,00006-0,00004-0,0000200,000020,000040,00006 1 4 7 1 01 31 61 92 22 52 83 13 43 74 04 34 64 95 25 55 86 16 46 77 0 Error Figure 30. Position Error between the N-R Method and ADAMS Simulation 630 Industrial Robotics: Theory, Modelling and Control Comparison between N-R and Adams 0,00200,00400,00600,00800,001000,001200,001400,00 123456789 1 0 1 1 1 2 Positions in workspaceDisplacement in X directionX N-R X Adams Comparison between N-R and Adams 0,00100,00200,00300,00400,00500,00600,00700,00800,00900,00 123456789 1 0 1 1 1 2Positions in workspaceDisplacements in Y directionY N-R Y Adams Comparison between N-R and Adams 0,00100,00200,00300,00400,00500,00600,00700,00800,00900,001000,00 123456789 1 0 1 1 1 2Positions in workspaceDisplacements in Z directionZ N-R Z AdamsError Modeling and Accuracy of Parallel Industrial Robots 631 Comparison between N-R and Adams -0,100,000,100,200,300,400,500,600,700,80 123456789 1 0 1 1 1 2 Positions in workspaceRotation angles in Z directionAfa N-R Afa Adams Figure 31. Results of N-R and ADAMS (Input Error Ʀ Link11=1mm) Error Results Between the N-R and Adams Simulation -0.08-0.06-0.04-0.020.000.020.040.06 Various Positions in Work SpaceError unit um and arcsecx y z afa bta gma Figure 32. TCP Difference between ADAMS Simulation and N-R Method 6.2 Validation of Jacobian Approximation Method, Error Budget and Calibration The Jacobian approximation method is verified by the following two different approaches: (1) 6-DOF forward kinematic analysis (Newton-Raphson method), and (2) ADAMS simulation results. Based on the D-H model of TAU with all error parameters, inverse and for- ward kinematic models have been established. From the point of view of mathematics, the TAU kinematic problem is to solve 6 nonlinear equations us- ing Newton-Raphson method with Jacobian matrix as the searching direction 632 Industrial Robotics: Theory, Modelling and Control and accurate results have been obtained up to 0.06 um compared with ADAMS simulation results. It can be observed from the Figure 34, for data in detail, see Table 6, the JAM (Jacobian Approximation Method) is effective with an accuracy of 1.53 μm with an input error of 1 mm (Link 1 of lower arm 1). This was verified using ADAMS simulation results. Results from N-R method match very well with ADAMS simulation with a difference of only 0.06 μm. The JAM can be used in on-line control and position compensation of the ro- bot. For the TAU robot, a closed form solution of a forward kinematics prob- lem is reached with a high accuracy instead of N-R numerical solution. The simulation results are almost perfect compared with that from ADAMS. A series of results have been presented for error analysis. Figure 34 shows the results of SVD calibration. Which indicates the number of independent design variable is reduced from 71 to 31. A sudden drop can be observed from the Figure 34, which indicates other parameters behind variable #31 are not neces-sary and their effects on error model can be neglected. From Table 7, totally 40 redundant variables are removed also Table 10 gives the result of error budge. Tables 8 and 9 give the actuator (driving motor) error and thermal error, which indicate the change of temperature should be controlled within ±5 0C otherwise the accuracy of system can not be reached to 50um. The resolution of drive motor should be at least < 10 arc second (1arc second=1/3600 degree). SVD calibration is carried out for three parameters that contribute to the final position error, see Table 11 and 12. These parameters are Arm3 length, link13 length, and link12 length. Calibration process is completed for only1 iteration. Based on the Table 12 the accuracy of calibration is 4um for Link12 and others are below 1um, which indicates the calibration method and error model are correct. Error between J and Adams simulation results -0,0015-0,0010-0,00050,00000,00050,00100,00150,0020 1 4 7 1 01 31 61 92 22 52 83 13 43 74 04 34 64 95 25 55 86 16 46 77 0 Reihe1 Figure 33. Position Error between Jacobian Approximation Method and ADAMS Error Modeling and Accuracy of Parallel Industrial Robots 633 Figure 34. SVD Calibration of TAU Robot 634 Industrial Robotics: Theory, Modelling and Control Driv e Angles TCP Pose Jacobian Newton_raphson Error between J and N X 0,00E+00 1,53E-03 0,001531339 Y -1,81E+00 -1,81E+00 -0,0049559 Z -1,61E-16 -9,20E-04 -0,000919889 afa 5,01E-03 5,01E-03 2,634E-07 bta -9,32E-19 -9,33E-19 -1,00679E-21 gma -9,32E-19 -9,32E-19 -1,5976E-22 X 1,19E-01 1,20E-01 0,00119916 Y -1,81E+00 -1,81E+00 -0,0009736 Z -2,09E-16 -9,45E-04 -0,000945048 afa 5,01E-03 5,01E-03 2,7566E-06 bta 0,00E+00 9,46E-16 9,45683E-16 gma 0,00E+00 -4,84E-16 -4,84153E-16 X 2,37E-01 2,38E-01 0,00135537 Y -1,80E+00 -1,80E+00 0,0007562 Z -1,79E-16 -9,69E-04 -0,000968876 afa 5,02E-03 5,02E-03 3,547E-07 bta 0,00E+00 3,15E-16 3,14853E-16 gma 0,00E+00 -4,82E-16 -4,82129E-16 X 3,54E-01 3,55E-01 0,00149511 Y -1,78E+00 -1,78E+00 0,0001837 Z -1,79E-16 -9,91E-04 -0,000991397 afa 5,03E-03 5,03E-03 3,263E-06 bta 0,00E+00 -3,10E-18 -3,10077E-18 gma -9,32E-19 1,15E-18 2,0782E-18 X 4,70E-01 4,71E-01 0,00111796 Y -1,75E+00 -1,75E+00 -0,0027737 Z -5,96E-17 -1,01E-03 -0,001012624 afa 5,05E-03 5,05E-03 1,7286E-06 bta 0,00E+00 0,00E+00 0 gma 0,00E+00 0,00E+00 0 X 5,83E-01 5,85E-01 0,00173003 Y -1,72E+00 -1,72E+00 0,0017688 Z -5,96E-17 -1,03E-03 -0,001032565 afa 5,07E-03 5,08E-03 6,0465E-06 bta 4,66E-19 -6,39E-16 -6,39425E-16 gma -9,32E-19 9,59E-16 9,6015E-16joint1= 0 joint2= 0 joint3= 0 joint1=3.75 joint2=3.75 joint3= 2 joint1=11.25 joint2=11.25 joint3= 6 joint1=15 joint2=15 joint3= 8joint1= 7.5 joint2= 7.5 joint3= 4 joint1=18.75 joint2=18.75 joint3=10 X 6,94E-01 6,96E-01 0,00184612 Y -1,68E+00 -1,68E+00 0,0036642 Z 2,09E-16 -1,05E-03 -0,00105122 afa 5,11E-03 5,11E-03 -3,4323E-06 bta 0,00E+00 -8,47E-22 -8,47033E-22 gma 0,00E+00 8,47E-22 8,47033E-22 X 8,03E-01 8,04E-01 0,00099179 Y -1,63E+00 -1,63E+00 0,002734 Z 0,00E+00 -1,07E-03 -0,001068582 afa 5,14E-03 5,14E-03 3,7091E-06bta 0,00E+00 3,26E-16 3,25672E-16 gma 0,00E+00 -4,78E-16 -4,77901E-16 X 9,07E-01 9,09E-01 0,00170544 Y -1,57E+00 -1,57E+00 -0,0012306 Z -2,09E-16 -1,08E-03 -0,001084643 afa 5,19E-03 5,19E-03 -2,0346E-06bta 0,00E+00 8,47E-22 8,47033E-22 gma 0,00E+00 0,00E+00 0 X 1,01E+00 1,01E+00 -0,0004597 Y -1,51E+00 -1,51E+00 0,0015319 Z 1,49E-16 -1,10E-03 -0,001099391 afa 5,24E-03 5,24E-03 -7,54E-08 bta 0,00E+00 -6,75E-16 -6,74923E-16 gma 0,00E+00 4,55E-18 4,54772E-18 X 1,10E+00 1,11E+00 0,0060663 Y -1,44E+00 -1,44E+00 0,0007547 Z 2,98E-17 -1,11E-03 -0,001112819 afa 5,30E-03 5,30E-03 2,869E-07 bta 0,00E+00 0,00E+00 0 gma 0,00E+00 0,00E+00 0 X 1,20E+00 1,20E+00 -0,002128Y -1,36E+00 -1,36E+00 -0,0038563 Z -2,98E-17 -1,12E-03 -0,001124931 afa 5,37E-03 5,37E-03 -1,1E-07 bta 0,00E+00 0,00E+00 0 gma 0,00E+00 0,00E+00 0joint1=33.75 joint2=33.75 joint3=18 joint1=37.5 joint2=37.5 joint3=18 joint1=41.25 joint2=41.25 joint3=22joint1=22.5 joint2=22.5 joint3=12 joint1=26.25 joint2=26.25 joint3=14 joint1=30 joint2=30 joint3=16 Table 6. Comparison between the Results of JAM and N-R Method Error Modeling and Accuracy of Parallel Industrial Robots 635 Parameter Number Parameter Definition Parameter 16 height of the TCP a 22 joint 3 a623 arm3 a7 24 joint 1 & arm 1 d1 25 short arm 1 d328 joint3 d6 31 joint_link11_arm1 y1 34 joint_link21_arm1 y237 joint_link31_arm1 y3 40 joint_link12_arm2 y4 43 joint_link22_arm2 y5 46 joint_link13_arm3 y6 48 joint_link11p x11 49 joint_link11p y1151 joint_link31p x22 52 joint_link31p y22 54 joint_link21p x3355 joint_link21p y33 56 joint_link21p z33 57 joint_link12p x44 58 joint_link12p y44 59 joint_link12p z44 60 joint_link22p x5561 joint_link22p y55 62 joint_link22p z55 63 joint_link13p x66 64 joint_link13p y66 67 link11 L1 68 link31 L269 link21 L3 70 link22 L4 Table 7. List of the Independent Design Variables Actuator Error X=1731mm Y=0 mm Z=1125mm Δθ1 Δθ2 Δθ3 ΔX ΔY ΔZ 00 0 0 0 0 +/-100 arcsec0 0 -0.1154 0.11490.2126 -0.2126-0.7599 0.7598 0 +/-100 arcsec00 . 3 6 7 7 -0.36780.1605 -0.16050.2435 -0.2433 0 0 +/-100 arcsec0 00.8392 -0.83920 0 +/-100 arcsec+/-100 arcsec00 . 2 5 2 4 -0.25280.3732 -0.370-0.5165 0.5164 0 +/-100 arcsec+/-100 arcsec0.3675 -0.36810.9999 -0.99950.2435 0.2433 +/-100 arcsec+/-100 arcsec+/-100 arcsec0.2520 -0.25311.2125 -1.2121 -0.5165 0.5164 Table 8. Actuator Error 636 Industrial Robotics: Theory, Modelling and Control Temperature ΔTX=1731mm ΔXY=0 mm ΔYZ=1125mm ΔZ +/-1°0.0021 -0.0021-0.0036 0.00360.0121 0.0121 +/-3°0.0063 -0.0063-0.0107 0.01070.0362 -0.0362 +/-5°0.0106 -0.0106-0.0178 0.01780.0603 -0.0603 Table 9. Thermal Error Error Budget VariableNo. Description Name Budget 1 drive 1 Joint 1 32 arcsec 2 drive 2 Joint 2 ar6 arcsec 3 drive 3 Joint 3 1.2 arcsec 17 a1 1.62 um 24 d1 363 um 4 sit1 10.4 arcsec 10joint 1 and arm 1 afa1 110 arcsec 18 joint_link11_arm 1 a2 373 um 19 a3 174 um 25 d3 449 um 5 sit3 9.24 arcsec 11short arm 1 afa3 9.45 arcsec 20 a4 1.9 mm 26 d4 485 um 6 sit4 1.22 arcsec 12joint 2 and arm 2 afa4 38.5 arcsec 21 a5 430 um 27 d5 D 7 sit5 11.2 arcsec 13short arm 2 afa5 D 22 a6 0 28 d6 D 8 sit6 4.64 arcsec 14joint 3 afa6 D 23 a7 0 29 d7 D 9 sit7 6.14 arcsec 15arm 3 afa7 D 30 x1 D 31joint_link11_arm1 y1 43 um Error Modeling and Accuracy of Parallel Industrial Robots 637 32 z1 123 um 33 x2 D 34 y2 49.4 um 35joint_link21_arm1 z2 D 36 x3 115 um 37 y3 108 um 38joint_link31_arm1 z3 D 39 x4 D 40 y4 1.28 mm 41joint_link12_arm2 z4 D 42 x5 2.6 mm 43 y5 68.2 um 44joint_link22_arm2 z5 D 45 x6 D 46 y6 21.6 um 47joint_link13_arm3 z6 213 um 48 x11 50 um 49 y11 50 um 50joint_link11_platform z11 D 51 x22 50 um 52 y22 50 um 53joint_link31_platform z22 D 54 x33 50 um 55 y33 50 um 56joint_link21_platform z33 13.3 um 57 x44 50 um 58 y44 50 um 59joint_link12_platform z44 37.9 um 60 x55 50 um 61 y55 50 um 62joint_link22_platform z55 398 um 63 x66 50 um 64 y66 50 um 65joint-link13_platform z66 50 um 16 height of the TCP a 436 um 66 link 13 L0 0 67 link 11 L1 88 um 68 link 31 L2 151 um 69 link 21 L3 54.3 um 70 link 22 L4 213 um 71 link 12 L5 1.47 mm Table 10. Error Budget (Assigned System Error = 50 um) 638 Industrial Robotics: Theory, Modelling and Control 1 -0.731778837 2 2.934613648 3 0.246 -0.065823708 4 / 0.005595871 5 / 0.009767543 6 0.639 -0.600433798 7 0.004297187 -0.054380834 8 0.022 -0.652730647 9 / 0.100085204 10 NA 0.237556976 11 NA -0.297084061 12 NA 86.49124257 13 NA -61.06910063 14 NA -1934.277556 15 NA 510.5174107 16 NA 22.96695136 17 NA -56.41477281tz xpl yplRy Rz tx tyRxL2 alpha3alpha1 beta1 a20 alpha20theta13theta2 L1Parameter Number Parameter NameMeasured Parameter Errors Calibration Results with SVD (mm/deg) Elapsed Time (s) 300 175 1750.04849159 0.04849159 0.04774522Average Absolute Accuracy (mm) Average Standard Deviation (MM)0.11395309 0.11718325 0.11395309SVD LM - Nonlinear optimizationGauss Newton - Nonlinear optimization Table 11. Calibration Results of 2D Testing Bench Error Parameter Error Assigned (mm) Error from Calibration (mm) Arm3 0.02 0.050.019969 0.049904 Link13 0.01 0.020.012201 0.024424 Link12 0.02 0.050.018469 0.046093 Table 12. Calibration Result of TAU Robot Error Modeling and Accuracy of Parallel Industrial Robots 639 6.3 Approach Comparison and Summary The results discussed above indicate that a closed form forward kinematic so- lution can be computed and finished much faster than the conventional itera- tive algorithms. The closed form solution is very difficult to obtain because the problem is highly nonlinear. The N-R method (iterative method) can give an accurate result but it usually takes an average of 4290 multiplications and 630 sine functions for the iterative N-R algorithm. The Polynomial Based method needs at least to solve a 16 th-order polynomial equation, which is slow and so- lution is with spurious roots. The proposed JAM algorithm can eliminate these drawbacks, and it has an ef-fective closed-form solution with an accuracy of 1.53um. Table 13 below summarizes the features of the methods proposed by the au- thor in solving the parallel robotics problems involved. The methodology and approach are also used in other robotics applications to effectively increase system modeling, control and process accuracy. Approaches Description Drawback Accuracy Polynomial BasedReduces the result- ing constraint equa- tions into a high-order polynomial by the method of elimination.Requires extremely complicated formula- tion procedures and has been known to be much slower than the numerical iteration such as the N-R method.60-70 um Lee, H. S. and Han, M. 1999 IEEE Newton- Raphson (N-R) Numerical It- erationAmong several it- erative methods, it has been wisely employed due to its property of conver-gence.Jacobian matrix ob- tained numerically , which is not efficient, and has a great influ- ence on the conver-gence of numerical method.0.06 um Researched in this paper Extra-SensorReduces the num- bers of unknown variable by extra- sensorSame as the polyno- mial-based method. Complicated hard- ware setup 750 um Geng, Z. and Hay- nes, L. 1994 Jacobian Ap- proximation Method (JAM)Analytic solution of Jacobian matrix + N-R method (one iteration)Analytical Jacobian matrix is difficult to obtain for large-scale MIMO non-linear system.1.6 um Closed-form solu- tion Proposed in this pa- per Table 13. Approaches in Parallel Robot Forward Kinematic Modeling 640 Industrial Robotics: Theory, Modelling and Control Conclusions The TAU robot represents a new configuration of parallel robots. This robotic configuration is well adapted to perform with a high precision and high stiff- ness within a large working space compared with a serial robot. It has the ad- vantages of both parallel robots and serial robots. In this study, the kinematic modeling and error modeling are established with all errors considered using Jacobian matrix method for the robot. Meanwhile, a very effective Jacobian Approximation Method is introduced to calculate the forward kinematic problem instead of Newton-Raphson iteration method. It denotes that a closed form solution can be obtained instead of a numerical it- eration solution. A full size Jacobian matrix is used in carrying out error analy- sis, error budget, and model parameter estimation and identification. Simula-tion results indicate that both Jacobian matrix and Jacobian Approximation Method are correct and with a level of accuracy of micron meters. ADAMS’s simulation results are used in verifying the established models. Experimental results obtained based on both the lab prototype and industrial prototype show that the established models enabled the realization of high precision for the new class of robots. The established models are also used in the development of other precision robotics systems. Precision robotic machining processes using existing serial robots have been realized successfully with industry partners involved. These precision processes include robotic milling of aluminum engine blocks, and belt grinding of complicated parts of curved surfaces such as engine blades, and human knee joint replacements. Based on the analytical Jacobian matrix solution, SVD calibration is carried out for three parameters that contribute to the final position error, the accuracy of calibration is within 4um for individual components.In the milling application of engine block, the position compensation proce- dure is proved, which reduces the error to < 0.1 mm compared with the origi- nal error of 0.5 mm. Error Modeling and Accuracy of Parallel Industrial Robots 641 Future work: error minimization and design optimization of tau robot 8.1 Problem Statement To further increase the accuracy and performance of a robotic system, error minimization and parameter optimization in the design space will be a power- ful tool. There are two spaces involved: the error space with numerous error sources, and the design parameter space with numerous robotic parameters associated with the D-H model. The current practice in robotic design optimi- zation is to solve one of the problems, often the later. It is very difficult to solve both parameter problem and the error problem at the same time. Based on the prior work about the Error modeling and Sensitivity analysis of Jacobian matrix, Position errors can be obtained in X, Y and Z directions as well as Jacobian matrix (error sensitivities). With these parameters for some given error sources, It is important that how to adjust the other error parame- ters so that the minimum global error can be obtained in whole workspace. By analyzing error sensitivity results, the sensitivities vary according to differ-ent positions in whole workspace, so the optimal results have to satisfy whole workspace. It is a powerful tool for industrial robot design and development that a method capable of optimizing design parameters in two kinds of differ- ent optimization spaces through establishing an optimization criteria in two different independent and relative design and configuration (movement) spaces. 8.2 Problem Formulation – Proposed Object Function and Constrain Function For Tau robot, the global error function is not only the function of component sizes but also the function of robot positions, and the global error comes from three directions (X, Y and Z) so this multi-objects optimal problem can be transformed into single object problem then combined global error function can be written as object function as follows: zz yy xx ii F F F XF ω ω ω θ + + =),( (71) Whereiθ is the position variables of robot, z y x ωωω ,, are weight factors de- noted by designer according to the error budget, xF,yF and zF are errors of X, Y, and Z directions, respectively, and xF2) (¦+ =i xi x XS C (72) 642 Industrial Robotics: Theory, Modelling and Control Where2) (¦+ =i iy y y XS C F zF2) (¦+ =i iz z XS C Wherez y x CCC ,, are given error sources caused by manufacturing and assem- bly, and iz iy ix SSS ,, are just component’s sensitivities calculated before in X, Y and Z directions. Here one attention point is that all parameters Ci and Si are functions of position parameters iθ. The constrain function is max min i i i X X X ≤ ≤ From above one can transform the constrained optimal problem into uncon- strained optimal problem by using the Lagrange multiplier Method as follows: + + + =zz yy xx i i F F F XF ω ω ω θ),( ¦ =k ji jjXg 1)( λ (73) Where )(i jXg is the constrain function. In constrained optimization, the general aim is to transform the problem into an easier sub-problem that can then be solved and used as the basis of an itera- tive process. A characteristic of a large class of early methods is the translation of the constrained problem to a basic unconstrained problem by using a pen- alty function for constraints, which are near or beyond the constraint bound- ary. In this way the constrained problem is solved using a sequence of param-eterized unconstrained optimizations, which in the limit (of the sequence) converge to the constrained problem. These methods are now considered rela- tively inefficient and have been replaced by methods that have focused on the solution of the Kuhn-Tucker (KT) equations. The KT equations are necessary conditions for optimality for a constrained optimization problem. If the prob-lem is a so-called convex programming problem, then the KT equations are both necessary and sufficient for a global solution. So from the Equation (73) next Kuhn-Tucker conditions should be satisfied as: ),...2,1( 0) ,...,2,1( 0)(0)( ),( *1* * * k jk j XgXg XF jjjk jj j = ≥= == ∇ + ∇¦ = λλλ θ (74) For a given configuration, by using Sequential Quadratic Programming (SQP) method, Equation (74) can be solved .Error Modeling and Accuracy of Parallel Industrial Robots 643 8.3 Future Work - Optimization in the Whole Robotics Workspace Since from mentioned above the object functions have to satisfy whole work- space. A most serious configuration (movement position) has to be found so that one can optimize the object function in this situation. One needs to utilize the other method to optimize the object function since the relationship between the object function and position variable is not ex- plicit. Here “Pattern Search method” is adopted to search the most serious po- sition of robot that means to maximum the object function. The final optimal result can be obtained by using the Lagrange multiplier Method as the most serious position is known. “Pattern Search method” is consisted of two steps ‘move’, one is exploratory move and other is module move. The former is to obtain the useful direction by calculating the variations of object function the later is to get a better new “point” instead of old “point” in the useful direction, which is similar to the gradient direction.Description of Exploratory Move and Module Move: Given initial point X (0), step length ,1 0 ,) ,....,,(2 1 << = β α αα αT n error ε. 0 K Exploratory Move, α α 2.1 0 i,),( )( ˆik kX X 2.2 X X X e X X e Xik i iik i iik  −  ++ + + +),( 1 1),( 1 1),( ˆ , ˆ ,~ˆ α α 2.3 if)1,(ˆ~),( )~(+ <ikX X then Xf Xf ; if)1,(ˆ ),( )( )~(+ > ≥ikX X then Xf Xf Xf ; if)1,(ˆ ),( )( )~(+ ≤ ≤ikX X then Xf Xf Xf 2.4 i i+1 2.5 if 3 , ;2.2 , , do ni if do then ni = < if do X X then X Xk nk k nk, ˆ ˆ , ˆ ˆ)1( ),( )0,( ),( + ≠ 5; if),(ˆnkX = do then Xk, , ˆ)0,( 4. if ε α≤, then solve the optimal solutions, X),( *ˆnkX= . if α>ε and α βα , go to 2.1 ,ˆˆ ˆ2)1( )( )1( + + −k k kX X X obtain)1(ˆ+ky from Xˆ by exploratory move. if , 1, ˆ ), ˆ( ) ˆ()1( )1( )1( )1(k k X y then Xf yfk k k k+  <+ + + + go to 2; if , 1, ˆ ), ˆ( ) ˆ()1( )1( )1( )1(k k X X then Xf yfk k k k+  ≥+ + + + α βα go to 2.1 So the calculation stops at the step 4.644 Industrial Robotics: Theory, Modelling and Control Module move ( Hooke-Jeeves ) Flow Chart Given 0=> α α=> From X(k) ( )1(~ ˆk kX X+ ε α~α βα=> 1( *ˆ+=kX X STO )1( )1( ˆ2ˆˆk kX X X − =+ + )1(ˆˆ+kX From to)1(ˆ+kY ˆ(~) ˆ(( )1( + + k kxf yf ( )1( ˆ+ +=k kY X( )1( ˆ+ +=k kX XK+1=No (? ) Ye YeNo (? ) > or =<Error Modeling and Accuracy of Parallel Industrial Robots 645 References Abderrahim, M. and Whittake, A. R., “Kinematic Model Identification of In- dustrial manipulators,” Robotics and Computer Integrated Manufactur- ing 16 (2000), 1-8 Brogangrdh, T., “Design of high performance parallel arm robots for industrial applications,” Proceedings of A symposium Commemorating the Leg- acy, Works, and Life of Sir Robert Stawell Ball Upon the 100th Anniver- sary of A Treatise on the Theory of Screws , University of Cambridge, Trinity College, July 9-11, 2000 Brogangrdh, T., et al, “Device for relative movement of two elements,” United States Patent 6425303, July 30, 2002 Brogangrdh, T., et al, “Device for relative movement of two elements,” United States Patent 6336374, January 8, 2002 Brogangrdh, T., et al, “Device for relative movement of two elements,” United States Patent 6301988, October 16, 2001 Cui, H., Zhu, Z., Gan Z., and Brogardh, T., “Kinematics Analysis and Error Modeling of Tau Parallel Robot”, Robotics and Computer Integrated Manufacturing: An International Journal, v 21, n 6, December, 2005, p 497-505 Denavit, J., Hartenberg, H., 1955, “A Kinematic Notation for Lower-Pair Mechanisms Based on Matrices”, Journal of Applied Mechanics, pp. 215- 221 Dhingra, A. K., Almadi, A. N. and Kohli, D., “Closed-Form Displacement Analysis of 8, 9 and 10-Link Mechanisms, Part II” Mechanism and Ma-chine Theory, 35, 2000, pp 851-869 Dhingra, A. K., Almadi,A. N. and Kohli, D., “A Grobner-Sylvester Hybrid Method For Closed-Form Displacement Analysis of Mechanisms,” 1998 ASME Design Engineering Technical Conference, Atlanta, GA Dhingra, A. K., Almadi,A. N. and Kohli, D., “Closed-Form Displacement Analysis of 8, 9 and 10-Link Mechanisms,” Mechanism and Machine Theory, 35, 2000, pp 821-850 Didrit, Olivier; Petitot, Michel & Walter, Eric “Guaranteed Solution of Direct Kinematic Problems for General Configurations of Parallel Manipula- tors,” IEEE Transactions on Robotics and Automation, Vol. 14, No.2, April 1998 Gong, Chunhe, Yuan, Jingxia, and Ni, J., “Nongeometric Error Identification and Compensation for Robotic System by Inverse Calibration,” Interna- tional Journal of Machine Tools & Manufacture 40 (2000) 2119-2137 Griffis,M. & Duffy, J. “A Forward Displacement Analysis of a Class of Stewart Platform,” Journal of Robotic System 6 (6), 703-720 (1989) by John Wiley & Sons, Inc 646 Industrial Robotics: Theory, Modelling and Control Lee, hyung Sang and Myung-chul Han, “The estimation for forward kinematic solution of stewart platform using the neural network”, Proceedings of the 1999 IEEE/RSJ International Conference on Intelligent Robots and Systems Lin,W.; Griffis, M.; & Duffy, J. “Forward Displacement Analyses of the 4-4 Stewart Platforms,” Transaction of the ASME Vol. 114, September 1992, pp444-450 Patel, Amit J., Ehmann, K. F., “Calibration of a Hexapod Machine Tool Using a Redundant Leg,” International Journal of Machine Tools & Manufacture 40 2000, 489-512 Prabjot Nanua, Kenneth J. Waldron, and Vasudeva Murthy, “Direct kinematic Solution of a Stewart platform,” IEEE Transactions on Robotics and Automation, Vol. 6, No.4, August 1990 Raghavan, M., “The Stewart Platform of General Geometry Has 40 Configura- tions,” ASME Journal of Mechanical Design, June 1993, Vol. 115, pp 277-282 Shi, Xiaolun; Fenton,R. G. “A Complete and General Solution to the Forward Kinematics Problem of Platform-Type Robotic Manipulators,” IEEE, 1050-4729/ 1994, pp 3055-3062 Sreenivasan,S. V.; Waldron K. J. & Nanua,P. “Closed-Form Direct Displace- ment Analysis of a 6-6 Stewart Platform,” Mech. Mach. Theory Vol. 29. No. 6, pp 855-864, 1994 Stewart, D., 1965, “A Platform with Six Degree-of-freedom”, Proc, 1st. Mech. Eng. London, Volume 180, pp371-286 Tsai, L., 1999 “Robot Analysis-The Mechanics of Serial and Parallel Manipula- tors”, John Wiley & Sons, Inc, ISBN: 0-471-32593-7 Wang, J. & Masory, O. “On the Accuracy of A Stewart Platform- Part I The Ef- fect of Manufacturing Tolerances,” IEEE, 1050-4729/ 1993, pp 114-120 Z. Jason Geng and Leonard S. Haynes, “A 3-2-1 Kinematic Configuration of a Stewart Platform and its Application to Six Degree of Freedom Pose Measurements,” Robotics & Computer-Integrated Manufacture, Vol. 11, No. 1, pp23-34, 1994 Zhang, H., Wang, J., Zhang, G., Gan, Z., Pan, Z., Cui, H. and Zhu, Z. ”Machin- ing with flexible manipulator: Toward improving robotic machining performance”, Proceedings of the 2005 IEEE/ASME International Con-ference on Advanced Intelligent Mechatronics, AIM 2005, 2005, p 1127- 1132 Zhang,Chang-de, Song, Shin-Min, “Forward Kinematics of a Class of Parallel (Stewart) Platform with Closed-Form Solutions,” Proceedings of the 1991 IEEE International Conference on Robotics and Automation, Sac-ramento, California-April 1991 Zhu, Z.; Cui, H. “Six degree of freedom measuring system”, Apr., 2003, U.S. patent (7040033)64722 Networking Multiple Robots for Cooperative Manipulation M. Moallem Introduction In this chapter, the development of an open architecture multi-robot system is studied. The environment consists of five serial-link robot manipulators oper- ated using embedded control computers. The robot control computers are connected together through a network of supervisory computers. A preemp- tive multi-tasking Real Time Operating System (RTOS) running on the super- visory computers is used to perform supervisory and cooperative tasks involv- ing multiple robots. The software environment allows for controlling the motion of one or more robots and their interaction with other devices. Devel- opment of modular components is discussed in this chapter along with typical laboratory procedures. The environment can be used to develop software for various robotic applications such as scheduling robotic tasks, cooperative ma- nipulation, collision avoidance, internet-based telerobotics, and other net- worked robotic applications. Overview of Networked Multi-robot Systems With the advent of new computing, sensor, and actuator technologies, the ap- plication of robotic systems has been growing rapidly in the past decade. Ro- botic systems were originally developed due to their capability to increase productivity and operate in hazardous environments. In recent years, robotics has found its way to a completely new range of real-world applications such as training, manufacturing, surgery, and health care (Bernard et al., 1999; Craig, 1997; Goldberg et al., 2000; Taylor and Stoianovici, 2003). From the advanced manufacturing domain to daily life applications, Internet-based telerobotic systems have the potential to provide significant benefits in terms of tele- presence, wider reachability, cost effectiveness and maximal resource utiliza- tion. Challenging problems with regard to Internet-based telerobotic systems include such issues as uncertain Internet time delays (Luo and Chen, 2000), system reliability, interaction capability (Schulz al., 2000), and augmented Human-Machine interfaces. Due to the emergence of new areas in the field of 648 Industrial Robotics: Theory, Modelling and Control robotics, there is a growing need for applications that go beyond classical ones such as simple pick-and-place operations involving a single robot. Many conventional robot manipulators are closed architecture, meaning that the user does not have direct access robot’s sensory data and actuator inputs. To operate a robot, the user is usually confined to a Robot Programming Language (RPL) that is specific to the robotic system being used (Craig, 1997). This is re- strictive in many cases, including the robotic applications requiring coordina- tion of such robots. For example, in developing robotic work-cells that require interaction of two or more robots at a time, there is a growing need for robots to share and exchange information through a network. Use of an RPL is re-strictive in such cases due to the limited capability of the programming envi- ronment. In this work we present a laboratory setup that can be utilized in or- der to perform tasks requiring multi-robot scheduling and cooperation tasks using industry grade manipulators. The objective is to create a flexible soft- ware environment so that the robot programmer can perform robotic tasks us- ing a programming language such as C/C++ and a real-time operating system. Interconnection of Multiple Robotic Systems In this section an overview of a multiple robotic system is presented. The setup consists of stand-alone robotic systems which are interconnected through a computer network to be used in cooperative applications. 3.1 Hardware and Software Configuration Figure 1 illustrates a multiple robotic system comprised of three 6 degree-of- freedom (DoF) and two 7-DoF robots, all from CRS, Inc. , located at the Robot- ics Laboratory, University of Western Ontario, Canada. The two 7-DoF robots are mounted on movable tracks while the other three 6-DoF robots are moun- ted on stationary bases. Each robot is equipped with a gripper controlled by a servo motor and a 6-dof force/torque sensor. The computing environment is comprised of a host-target architecture. The target machines consist of Pen- tium computers running under the VxWorks real-time operating system from WindRiver Systems, Inc (www.wrs.com). The host machines are used for sys- tem monitoring and development tasks and run under the Solaris or Microsoft operating systems. 3.2 Networking and Communication Configuration The local networking and communication platform utilizes two types of me- chanisms as shown in Figure 2, consisting of serial port which connect target Networking Multiple Robots for Cooperative Manipulation 649 machines to robot controllers, and an Ethernet network , which links together all the target and host machines. Many commercial robots use serial communica- tion between the host computers and the robot controllers. In this setup, we use the RS232 serial lines to transmit control commands and sensory informa- tion between the target machines and robot controllers. The robot motion commands are issued by a target machine and are sent to the robot controllers. The robot controllers also transmit sensory information such as gripper dis- tances, force sensor readings, and the status of executed commands, back to the target machines. Similarly, the target machines transmit sensory and com- mand data through the network to other machines. The robot controllers are embedded computer systems without network connectivity and standard op- erating system support. Lack of network connectivity is a main drawback of many conventional robot controllers. In Figure 2, the three target machines run under the VxWorks real-time operating system. However, any other operating system that supports networking tools and inter-task synchronization and communication primitives such as semaphores, message queues, and signals, can be used to do the same job. Wa l l Stationary RobotTrack Robot"S1" "T1" "S2" "T2" "S3"N Figure 1. Multi-robot system (left) and layout of the robots (right) 650 Industrial Robotics: Theory, Modelling and Control Figure 2. Configuration of the networked robotic system shown in Figure 1 3.3 Use of Real-time Operating Systems Good practice in software engineering encourages the use of object-oriented programming for developing application software (Pressman, 1997). The main aspects of object-orientated programming are encapsulation, inheritance, mo- difiability, and reusability. In this regard, robotic systems are no exception. It is desirable to have software modules that can be easily ported to other plat- forms, to be modifiable, and can be reused for different robotic applications. This is particularly desirable in a laboratory setup where the functional and non-functional requirements of projects can change. Therefore, the availability of certain software modules would make it convenient to develop or modify code for new applications. On the other hand, the computer technology has got so powerful that an operating system can be used to develop and run ap- plications on embedded computers. Nowadays operating systems are found in many devices and systems such as cell phones, wireless access points, robotics, manufacturing, and control applications. Many applications, including robot- ics, are real-time meaning that the computer must not only perform the calcu- lations and logical operations correctly, but it must also perform them on time. In other words, correctness is as important as timeliness. Moreover, complex operations require modular programming which can be facilitated by using a real-time operating system. The operating system is responsible for operations such as controlling and allocating memory, prioritizing the execution of tasks, controlling input and output devices, networking operations, and managing fi- les. The software developed using operating system facilities can be changed or modified easily without having to scrap the whole program. Networking Multiple Robots for Cooperative Manipulation 651 Application Development for Distributed Robotic Applications Distributed networked systems are increasingly becoming popular in industry, education, and research (Hung, 2000). Networked systems have the advantage of greater flexibility and better distribution of computing resources when compared to stand alone systems. Different networking architectures and pro- tocols have been used in automation and control systems such as DeviceNet (DeviceNet Vendors Association, 1997), ProfiBus (http://www.profibus.com/), Manufacturing and Automation Protocol (Raji, 1994), ControlNet (ControlNet International ,1988), and Ethernet (see for ex- ample, Tanenbaum, 1996). Evaluation of the performance of these networks has been reported in the literature, for example in (Lian, et al., 2001) and (Hung, 2000). The emergence of networked systems on the factory floor is driv- ing the automation industry to embrace new network technologies. For im- proved performance and cost efficiency, robots used on a factory floor should be enabled to provide data related to manufacturing and process operations to the management in real-time and preferably using non-proprietary networks. In the following, an outline of the software framework for supervisory control of the robots depicted in Figures 1 and 2 is presented. 4.1 Application Development under a Real-Time Operating System Real-time operating systems have emerged in the past decade to become one of the basic building blocks of embedded computer systems, including com- plex robotic systems. A modular approach to software development for time critical embedded systems calls for decomposition of applications into multi- ple tasks and use of operating system primitives. A real-time operating system can be used to run on the supervisory computers such as the Pentium com- puters shown in Figure 2. We have used the Tornado development environ- ment which provides a graphical user interface and tools for developing real time multitasking applications under VxWorks (www.wrs.com). However, any other real-time operating system can be used for this purpose. In Figure 2, once the programs are compiled and linked, the tasks can be downloaded into the memory of the PC workstations running VxWorks . These computers are used as supervisory controllers that enable communication between robots through the network communication ports. 4.1.1 The Robot Module The starting point for implementing modular software for robotic applications is representing the robot as a class consisting of private data attributes and member functions as shown in Figure 3. 652 Industrial Robotics: Theory, Modelling and Control Figure 3. The Robot Class attributes and functions In the class diagram of Figure 3, the robot identification, position, speed, tor- que, and other variables are defined as the attributes of the robot object. The commands sent to the robots are string variables stored in the robotCommand[ ] array. Similarly, the status received for each robot after executing a command is stored in the robotResponse[ ] array. The communication between the Pen- tium PCs in Figure 2 with the robot controller is two-way which is performed through the RS-232 serial interface. The serialPort attribute in Figure 3 is used to identify which serial port each robot object is using for communication. The member functions of the Robot Class shown in Figure 3 are used to initialize the robot object using InitializeRobot() , move the robot to a calibrated position using Calrdy() , move the robot to a particular point using moveToPoint() , send a command using SendRobotCommand(), and to open or close a serial port using openPort() and closePort() , respectively. If needed, the above class can be modi- fied or other classes can be inherited from it. One benefit of modular software development is the convenience of develop-ing the modules one by one. After finishing each part, testing and debugging can be performed on other parts to be implemented. As a result, the final inte- gration and testing can be done without much difficulty. In the following we discuss some of the projects that have been performed using this environment. Networking Multiple Robots for Cooperative Manipulation 653 4.1.2 Controlling Robots through Serial Ports Consider the implementation of a cooperative robotic task to be performed by the two robots indicated in Figure 4, in which the PC communicates with robot controllers through the RS-232 serial ports. Note that the tasks on the PC workstation are running concurrently using a real-time operating system (VxWorks in this case). Figure 4. Cooperative multitasking by using one VxWorks station Before running the system under VxWorks , the robot programming language robcom is used to send commands to the robot from the application shell, which is similar to MSDOS or UNIX prompts. For example, by issuing the command “ joint 5, 20 ”, the robot’s fifth joint will rotate 20 degrees clockwise. This allows for the commands sent to the robot to be tested at the command prompt level before executing them from a program. The second step involves sending the commands through the serial ports using a high level program running under VxWorks instead of the application shell. For example, the func- tion interface SendRobotCommand() in Figure 3 is written to send commands through the serial port, or the moveToPoint() command is to move the robot to a previously taught positions in the robot’s workspace. 4.1.3 Object Handling In this demonstration, one robot catches an object and passes it to a second ro- bot. The goal is to develop code for coordination of motion of two robots using synchronization mechanisms such as semaphores provided by the operating 654 Industrial Robotics: Theory, Modelling and Control system. A semaphore is a token which if available, will cause the task to con- tinue and if not available, will block the calling task until the token becomes available. At the beginning of the program, two robot objects are declared and initialized. The first robot is programmed to move and fetch the object from a known pick-up point that has been previously taught to it. Meanwhile, the se- cond robot moves to the delivery position and waits for the first robot to de- liver the object. A waiting mechanism is implemented using an empty sema- phore by issuing a semTake() command in VxWorks which causes the task to block until the semaphore token becomes available. When the first robot has reached the delivery point and is ready to deliver the object, it releases the empty semaphore. The task running the first robot then unblocks, opens its gripper, and the process of transferring the object is completed. When the ro- bot catches the object, it moves toward the release point where it allows the o- ther robot to move to its final destination. At the end, both robots move to their calibration positions. 4.1.4 Network-based Cooperative Control of two Robots Network communication allows more than two robots to perform cooperative tasks concurrently. In this scenario, socket programming under TCP/IP is u- sed for communication between the VxWorks workstations in a client-server configuration. A server socket is assigned a well-known address which is con- stantly listening for client messages to arrive. A client process sends messages to the server via the server socket’s advertised address. The hardware setup for this experiment is shown in Figure 5. Figure 5. Hardware setup for TCP/IP communication Networking Multiple Robots for Cooperative Manipulation 655 As indicated in Figure 5, two robots are connected to two different VxWorks workstations. The client program is run on one VxWorks workstation and the server program is run on the other station simultaneously. The previous dem- onstrations can be performed on this configuration too. For example, one robot can catch an object and pass it to a second robot in a similar manner as dis- cussed before but by using the network interface. In this case, a set of special strings containing robot commands are defined on both the client and the ser- ver sides. These strings are then transmitted through sockets to perform coop- erative tasks. The client-server mechanism can be used for synchronizing tasks with each other. At the beginning of the program, two robot objects are de- clared and initialized. In the server routine, a TCP socket is initialized, which listens for connection from the client while performing its own task. In the cli- ent routine, a socket is initialized and the connection request is sent to the server. After the connection is established, both client and the server can syn- chronize their operations. 4.1.5 Robot Interaction with Input-Output Modules There are many situations that robots must coordinate their operations with external devices. For example in a smart manufacturing workcell, robots have to grab parts from devices such as indexers, or deliver parts to them in a syn- chronized manner. A rotary indexing table is a simple example that simulates part of a manufacturing process. The indexing table can rotate by means of a stepping motor. The motor controller is interfaced with a VxWorks station and a digital I/O card. The indexer and robot can be connected to the same com- puter or to separate computers on a shared network. The situation is similar to the previous example in part E. The program that controls the indexing table operation is spawned as a separate task which can coordinate its operation with other robots, for example by using semaphores or a TCP/IP client-server mechanism on a network. 4.1.6 Other Multi-Robot Operations Several projects related to scheduling and cooperative operation of robots si- milar to those used in a manufacturing work-cell have been carried out using the setup described in this chapter. For example, referring to Figure 1, an ob- ject handling operation was developed where the first robot takes an object from a person and delivers it to the second robot. Then, the second robot de- livers the object to the third robot, and so on, until the object is delivered to the fifth robot. Another project was related to visualization of a robotic work-cell using the Matlab Virtual Reality Modeling Language (VRML) toolbox, from MathWorks, Inc. In this project, sensory data such as joint displacements are sent through 656 Industrial Robotics: Theory, Modelling and Control the network to a host computer that may be located in a control room. A visu- alization program written in VRML is running on the host computer. This computer obtains real-time sensory data from supervisory robot computers on the network and presents to the operator a visualization of the robotic work- cell. A main advantage of using this scheme over sending data through a cam- era vision system is the small bandwidth required for sending sensory data, as opposed to a relatively large bandwidth required for transmitting picture frames when a vision system is used. The environment has also been used in a distributed robotic system with In- ternet connectivity where robot operations can be monitored and operated from the Internet (Wang et al., 2003). The scheduling of robotic work-cells used in manufacturing has been another topic, where issues such as checking for deadlock situations, or scheduling the operation of multiple robotic systems with different timing requirements have been addressed (Yuan et al., 2004).Networking Multiple Robots for Cooperative Manipulation 657 Conclusion In this chapter, some aspects of developing modular software for controlling robot operations were discussed. Many commercial robots have a closed archi- tecture, which makes them difficult to program for certain applications involv- ing multiple robots. A networked robotic system offers interesting possibilities in terms of developing novel applications. With the recent advancements made in the networking technologies it is important that students and engi- neers taking courses or projects in robotics and automation be familiar with the capabilities offered by new technologies. References Bernard, C., Kang, H., Sigh, S.K. and Wen, J.T. (1999), “Robotic system for col- laborative control in minimally invasive surgery”, Industrial Robot: An in- ternational Journal , Vol. 26, No. 6, pp. 476-484. Craig, C.G. (1989), Introduction to Robotics: Mechanics and Control , Addison- Wesley, Boston, MA. Goldberg, K., Gentner, S., Sutter, C. and Wiegley, J. (2000), “The mercury pro- ject: A feasibility study for Internet robots” IEEE Robotics & Auto. Maga- zine, Vol. 7, No.1, pp. 35-40. Pressman, R. (1997), Software Engineering: A Practitioner's Approach , McGraw- Hill, New York, NY . DeviceNet Vendors Association (1997), DeviceNet Specifications , 2nd. ed. Boca Raton, FL. Raji, R.S. (1994), “Smart Networks for Control,” IEEE Spectrum , Vol. 31, pp. 49- 55, June 1994. ControlNet International (1988) , ControlNet Specifications , 2nd ed. Boca Raton, FL. Tanenbaum, A.S. (1996), Computer Networks , 3rd ed. Upper Saddle River, Pren- tice Hall, NJ. Lian, F.-L. Moyne, J.R.; Tilbury, D.M. (2001), “Performance evaluation of con- trol networks: Ethernet, ControlNet, and DeviceNet ,”IEEE Control Sys- tems Magazine ,Vol. 25, No. 1, pp. 66-83, 2001. Hung ,S.H., (2000), “Experimental performance evaluation of Profibus-FMS,” IEEE Robotics & Automation Magazine , Vol. 7, No. 4, pp. 64-72. Taylor, R.H. and Stoianovici, D. (2003), “Medical Robotics in Computer Inte- grated Surgery,” IEEE Transactions on Robotics and Automation , vol. 19, pp. 765–781. Luo, R.C., and Chen, T.M. (2000), “Development of a Multibehavior-based Mobile Robot for Remote Supervisory Control through the Internet” , IEEE/ASME Trans. on Mechatronics, Vol.5, No.4, pp. 376-385. 658 Industrial Robotics: Theory, Modelling and Control Schulz, D., Burgard, W., Fox, D., Thrun, S. and Cremers, A.B., (2000), “Web Interfaces for Mobile Robots in Public Places”, IEEE Robotics & Auto. Magazine , Vol. 7, No.1, pp. 48-56. Wang, X-G., Moallem, M. and Patel, R.V., (2003), “An Internet-Based Distrib- uted Multiple-Telerobot System,” IEEE Transactions on Systems, Man, and Cybernetics, Part A, Vol. 33, No. 5, pp. 627- 634. Yuan, P., Moallem, M. and Patel, R.V. (2004), “A Real-Time Task-Oriented Scheduling Algorithm for Distributed Multi-Robot System," IEEE Interna- tional Conference on Robotics and Automation , New Orleans, LA. 65923 Web-Based Remote Manipulation of Parallel Robot in Advanced Manufacturing Systems Dan Zhang , Lihui Wang and Ebrahim Esmailzadeh Introduction During the last decade, the Web has gained widespread acceptance in both academic and business areas. The Web is used by many as a medium of shar-ing data, information, and knowledge. Today, it is widely used for develop- ment of collaborative applications to support dispersed working groups and organizations because of its platform, network and operating system transpar- ency, and its easy-to-use user interface – Web browser. In addition to the Web technology, Java has brought about a fundamental change in the way that ap-plications are designed and deployed. Java’s “write once, run anywhere” model has reduced the complexity and cost traditionally associated with pro- ducing software on multiple distinct hardware platforms. With Java, the browser paradigm has emerged as a compelling way to produce applications for collaboration over the Internet. As business grows increasingly diversified, the potential of this application is huge. Targeting distributed, real-time moni- toring and control in manufacturing sectors, a framework with high efficiency for cyber collaboration is carefully examined. The objective of this research is to develop a Web-based digital shop floor framework called Wise-ShopFloor (Web-based integrated sensor-driven e- ShopFloor) for distant shop floor monitoring and control. The Wise-ShopFloor , with an appropriate architecture for effective data communication among a dispersed engineering team, can serve real-time data from bottom up and can function as a constituent component of e-manufacturing. The framework is de- signed to use the popular client-server architecture and VCM (view-control-model) design pattern with secured session control. The proposed solutions for meeting both the user requirements demanding rich data sharing and the real-time constraints are: (1) using interactive Java 3D models instead of bandwidth-consuming camera images for visualization; (2) transmitting only the sensor data and control commands between models and device controllers for monitoring and control; (3) providing users with thin-client graphical inter- face for navigation; and (4) deploying control logic in an application server. A 660 Industrial Robotics: Theory, Modelling and Control proof-of-concept prototype system is developed on top of the framework to demonstrate one of its potential applications on shop floor monitoring and control. It utilizes the latest Java technologies, including Java 3D and Java Servlets, as enabling technologies for system implementation. Instead of cam- era images, a physical device of interest is represented by a Java 3D model with behavioural control nodes embedded. Once downloaded from an appli- cation server, the Java 3D model works on behalf of its counterpart showing behaviours for visualization at a client side, but remains alive by connecting with the physical device through low-volume message passing. This chapter presents the basis of the framework for building web-based col- laborative systems that can be used for distributed manufacturing environ- ments. It first outlines related work, followed by the concept and architecture of the framework. The Wise-ShopFloor concept is then demonstrated through a typical case study on device modelling, monitoring, and control. The benefits enabled by the framework include quick responses by reduced network traffic, flexible monitoring by sensor-driven 3D models, and interactive control by real-time feedback. Business Service Management Business firms generate revenues and profits through effective execution of business processes. During the last two decades, business processes have be- come increasingly automated, requiring IT service to support business opera- tions. Delivering reliable and consistent levels of business and IT service is critical to the operations of business firms. In recent years, many business or-ganizations have switched from a technical-focused IT management model to a business-oriented IT management framework that links technical capabilities to organizational needs. Using IT management tools to deliver real-time ser- vice level management not only meets service goals, but also generates greater business value for the organization [1, 2].Recent advances in IT technologies have made a variety of new business proc- esses possible. The proposed Web-based digital shop floor framework is an example of this type of new business processes that could not exist before. It uses new IT technology to improve the performance of business operations. This business process application is expected to result in significant increases in productivity and revenues. The goal of our combined web-based and sensor-driven approach is to signifi- cantly reduce network traffic with Java 3D models, while still providing end users with an intuitive environment. The largely reduced network traffic also makes real-time monitoring, control, inspection, and trouble-shooting practical for users on relatively slow hook-ups such as modem connections. Participat- ing in the collaborative system, users not only can feel reduced network traffic Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 661 by real-time interactions with quick responses, but also can obtain more flexi- ble control of the real world. In the near future, open-architecture devices (such as OpenPLCs and Open-CNC Controllers, etc.) will have web servers and Java virtual machines embedded. This will make the proposed Wise- ShopFloor framework more efficient for real-time monitoring and control. Research Background Initially, parallel kinematic machines (PKMs) were developed based on the Stewart platform that is a 6 DOF prismatic parallel mechanism with extensible legs. Commercial hexapods including VARIAX of Giddings & Lewis, Ingersoll hexapod, Tornado of Hexel, Geodetic of Geodetic Technology Ltd., are all based on this structure. To overcome the problems in hexapods with extensible legs, such as stiffness and heat [3,4], recently, hexapods with fixed-leg lengths have been envisioned, for example, Hexaglide of the Swiss Federal Institute of Technology [5], LINAPOD of Stuttgart University [6], and HexaM of Toyoda [7]. Hexapods with extensible telescopic legs are not suitable for linear motors, but the fixed-leg length hexapods are. Hexapods with revolute joints were also reported in the literature, for example, DELTA robot, which can reach an ac- celeration of up to 20g in some area of the workspace [8]. The hexapods with fixed-leg lengths are sometimes termed as sliding-leg hexapods, because sliding of the fixed-length legs along their guideways drives the moving platform. There are basically three configurations in terms of guideway angle, vertical, horizontal and angular. In the vertical configura- tion, gravitational force is in the moving direction. While weight does not con-tribute to friction, motors have to overcome weight in the upward movement. In the horizontal configuration, gravitational force is perpendicular to the moving direction and weight would fully contribute to friction. Angular con- figuration is in between in terms of gravitational force and friction force. Since machining operation requires five axes at most, new configurations with less than six parallel axes would be more appropriate. Development on new configurations is mainly on three axes PKMs. Examples include Triaglide [9], Tetrahedral Tripod [10], and Tricept of SMT Tricept [11]. Three axis PKMs can be combined with 2 axis systems, such as x-y stage, to form five axis machines. The Wise-ShopFloor is designed to provide users with a web-based and sen- sor-driven intuitive shop floor environment where real-time monitoring and control are undertaken. It utilizes the latest Java technologies, including Java 3D and Java Servlets, as enabling technologies for system implementation. In- stead of camera images (usually large in data size), a physical device of interest (e.g. a milling machine or a robot) can be represented by a scene graph-based Java 3D model in an applet with behavioural control nodes embedded. Once downloaded from an application server, the Java 3D model is rendered by the 662 Industrial Robotics: Theory, Modelling and Control local CPU and can work on behalf of its remote counterpart showing real be- haviour for visualization at a client side. It remains alive by connecting with the physical device through low-volume message passing (sensor data and user control commands). The 3D model provides users with increased flexibil- ity for visualization from various perspectives, such as walk-through and fly- around that are not possible by using stationary optical cameras; whereas the largely reduced network traffic makes real-time monitoring, remote control, on-line inspection, and collaborative trouble-shooting practical for users on relatively slow hook-ups (e.g. modem and low-end wireless connections) through a shared Cyber Workspace [12]. By combining virtual reality models with real devices through synchronized real-time data communications, the Wise-ShopFloor allows engineers and shop floor managers to assure normal shop floor operations and enables web-based trouble-shooting – particularly useful when they are off-site. Figure 1 shows how it is linked to a real shop floor. Although the Wise- ShopFloor framework is designed as an alternative of camera-based monitoring systems, an off-the-shelf web-ready camera can easily be switched on remotely to capture unpredictable real scenes for diagnostic purposes, whenever it is needed. In addition to real-time monitoring and control, the framework can also be extended and applied to design verification, remote diagnostics, virtual machining, and augmented virtuality in construction. It is tolerant to hostile, invisible or non-accessible environments (e.g. inside of a nuclear reactor or outside of a space station). Sensors/Actuators Discrete I/O Dynamic Database System Machining Technology Shop Floor Capability Web-based Integrated Sensor-driven e-ShopFloor “Wise-ShopFloor ”Operators EngineersManagers Real WorldCyber World Physical Shop Floor Control Monitoring Figure 1. Concept of Wise-ShopFloor Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 663 Architecture Design As shown in Figure 2, the framework is designed to use the popular client- server architecture and VCM (view-control-model) design pattern with built-in secure session control. The proposed solutions for meeting both the user re-quirements of rich visual data sharing and the real-time constraints are listed below. Using interactive scene graph-based Java 3D models instead of band- width-consuming camera images for shop floor visualization; Transmitting only the sensor data and control commands between models and device controllers for remote monitoring and control; Providing users with thin-client graphical user interface for shop floor na- vigation; and Deploying major control logic in a secured application server. Application Server Servlet Container Web Browser Presentation Tier (View) Data Tier (Model) Application Tier (Control) J3DViewer (JApplet) Secured Access PKM 3 PKM 1 S/W Layer H/W LayerData Server Web Server DataAccessor (Servlet) XML Server (Optional) Java 3D Machine Models Knowledge Database PKM 2 Interne t Factory Networ kSessionManagerVirtual Machines CyberController MRRegistra r Real Machines StatusMonitor ChatRoomSignalPublisher (Pushlet) SignalCollector (Servlet) Commander (Servlet) Figure 2. Architecture of Wise-ShopFloor The mid-tier application server handles major security concerns, such as ses- sion control, viewer registration, data collection/distribution, and real device manipulation, etc. A central SessionManager is designed to look after the issues of user authentication, session control, session synchronization, and sensitive 664 Industrial Robotics: Theory, Modelling and Control data logging. All initial transactions need to pass through the SessionManager for access authorization. In a multi-client environment – the Wise-ShopFloor , different clients may require different sets of sensor data for different models. Constrained by network security, a Java 3D model residing in an applet is not allowed to communicate directly with a real device through socket communi- cation. It is also not efficient to have multiple clients who share the same model talking with the same device at the same time. The publish-subscribe design pattern is adopted to collect and distribute sensor data at the right time to the right client efficiently. As a server-side module, the SignalCollector is re- sponsible for sensor data collection from networked physical devices. The col- lected data are then passed to another server-side module SignalPublisher who in turn multicasts the data to the registered subscribers (clients) through app- let-servlet communication. A Registrar is designed to maintain a list of sub- scribers with the requested sensor data. A Java 3D model thus can communi- cate indirectly with sensors no matter where the client is, inside a firewall or outside. The JMF (Java Media Framework) is chosen for the best combination between applets and servlets. For the same security reasons, a physical device is controllable only by the Commander that resides in the application server. Another server-side component called DataAccessor is designed to separate the logical and physical views of data. It encapsulates JDBC (Java Database Con- nectivity) and SQL codes and provides standard methods for accessing data (Java 3D models, knowledge base of the devices, or XML documents). The knowledge base is found helpful for device trouble-shooting, while XML will be used for high-level data communication in future extensions. Although the global behaviours of Java 3D models are controlled by the server based on real-time sensor signals, users still have the flexibility of monitoring the models from different perspectives, such as selecting different 3D machine models, changing viewpoint, and zooming, through J3DViewer at the client side. Authorized users can submit control commands through CyberController to the application server. The Commander at server-side then takes over the control for real device manipulations. Another client-side module StatusMoni- tor can provide end users with a view of run-time status of the controlled de- vice. For the purpose of collaborative trouble-shooting, a ChatRoom is included in the framework for synchronized messaging among connected users. A proof-of-concept prototype is developed on top of the framework to demon- strate its application on remote monitoring and control. Figure 3 shows one snapshot of the web user interface of the prototype. A more detailed discus- sion from device modelling to control is provided in Section 6 through a case study of a Tripod test bed. Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 665 Figure 3. Web user interface for remote monitoring and control Shop Floor Security According to an NCMS report [13], there is a growing consensus that linking shop floor hardware to the Internet will become the backbone technology for collaborative manufacturing. However, a major concern of implementing Internet or Web-based collaborative manufacturing systems is the assurance that proprietary information about the intellectual property owned by the or-ganization or information about the company’s operations is available only to authorized individuals. Any web-based collaborative systems must accommo- date privacy of the individuals and organizations involved in collaborative ac- tivities. Gathering and processing information about the activities of individu- als or groups while managing or operating processes or devices via computer networks can provide a great deal of detail concerning the ways in which the individuals interact as well as process-related information. In a highly com- petitive manufacturing environment, the information about the operations of or the information provided by individuals or organizations should only be shared by those involved. Clearly, it is also important to avoid security disas-ters for hardware at shop floor level. Web-based remote monitoring and con- trol typically involve sharing information in the form of detailed run-time op- erations, as well as real-time and mission-critical hardware controls. For general acceptance of the Wise-ShopFloor , the secrecy of the proprietary infor- mation must be properly maintained. For security, our approach depends on the familiar security infrastructure built into the Java platform. This security 666 Industrial Robotics: Theory, Modelling and Control architecture consists of byte-code verification, security policies, permissions, and protection domains. In addition to the security infrastructure, other secu- rity and privacy issues are considered in the framework for implementation, including digital rights management for information access and sharing, data encryption, and process confidentiality protection. Figure 4 shows how a remote end user can get access indirectly to the real shop floor without violating shop floor security. All data communication be- tween the end user and a shop floor device goes through the application server, and is processed by a server-side module before passing the data onto its receiver. As mentioned in Section 4, only the server-side modules are al- lowed to collect sensor data or manipulate devices within their limits. On the other hand, all end users are physically separated from the real shop floor by using segmented networks (Intranet/Internet, and Factory Network) with the application server as a gateway. SSSeeecccuuurrreeedddZZZooonnneeeRemote User Factory Network Tripod Robot Milling Machine Communication/Execution PPPhhhyyysssiiicccaaalllSSShhhooopppFFFllloooooorrr Wise-ShopFloo rApp Server Intranet/Internet Figure 4. Indirect secure access to physical shop floor Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 667 Implementation This section describes how a physical device is modelled, monitored, and con- trolled. The Tripod is a parallel kinematic machine developed at IMTI’s lab [14]. Instead of camera images, the Tripod is modelled by using the scene graph-based interactive Java 3D with behavioural control nodes embedded. Once downloaded from the application server, it behaves in the same way as its physical counterpart for remote monitoring and control at client-side, facili- tated by the model-embedded kinematics and sensor signals of the real Tripod. 6.1 Java 3D Modelling for Tripod Java 3D is designed to be a mid to high-level fourth-generation 3D API [15]. What sets a fourth-generation API apart from its predecessors is the use of scene-graph architecture for organizing graphical objects in the virtual 3D world. Unlike the display lists used by the third-generation APIs (such as VRML, OpenInventor, and OpenGL), scene graphs can isolate rendering de- tails from users while offering opportunities for more flexible and efficient rendering. Enabled by the scene-graph architecture, Java 3D provides an ab- stract, interactive imaging model for behaviour and control of 3D objects. Be- cause Java 3D is part of the Java pantheon, it assures users ready access to a wide array of applications and network support functionality [16]. Java 3D dif- fers from other scene graph-based systems in that scene graphs may not con-tain cycles. Thus, a Java 3D scene graph is a directed acyclic graph. The indi- vidual connections between Java 3D nodes are always a direct relationship: parent to child. Figure 5 illustrates a scene graph architecture of Java 3D for the Tripod. This test bed is a gantry system, which consists of an x-table and a Tripod unit mounted on a y-table. The end effecter on the moving platform is driven by three sliding-legs that can move along three guide-ways, respec- tively. As shown in Figure 5, the scene graph contains a complete description of the entire scene with a virtual universe as its root. This includes the geometry data, the attribute information, and the viewing information needed to render the scene from a particular point of view. All Java 3D scene graphs must con- nect to a Virtual Universe o b j e c t t o b e d i s p l a y e d . T h e Virtual Universe object provides grounding for the entire scene. A scene graph itself, however, starts with BranchGroup (BG) nodes (although only one BG node in this case). A BranchGroup node serves as the root of a sub-graph, or branch graph, of the scene graph. The TransformGroup nodes inside of a branch graph specify the position, the orientation, and the scale of the geometric objects in the virtual universe. Each geometric object consists of a Geometry object, an Appearance ob- ject, or both. The Geometry object describes the geometric shape of a 3D object. The Appearance object describes the appearance of the geometry (colour, tex-668 Industrial Robotics: Theory, Modelling and Control ture, material reflection characteristics, etc.). The behaviour of the Tripod model is controlled by Behaviour nodes, which contain user-defined control codes and state variables. Sensor data processing can be embedded into the codes for remote monitoring. Once applied to a TransformGroup node, the so- defined behaviour control affects all the descending nodes. In this example, the movable objects (X-Table, Y-Table, and Moving Platform) are controlled by us- ing three control nodes, for on-line monitoring/control and off-line simulation. As the Java 3D model is connected with its physical counterpart through the control nodes by low-volume message passing (real-time sensor signals and control commands, etc.), it becomes possible to remotely manipulate the real Tripod through its Java 3D model (see also [17]). Virtual Universe Background Lights TBBG Viewpoin t Contro l T Frame T B Y-Table X-/Y-Table Control SL-1BGW-3A A G A Base-1 X-TableGuide-way (GW) TransformGroup NodeT BBehaviour Node AAppearance GGeometry BG BranchGroup Node User Defined CodesMoving Platform Kinematic ControlBBase-1G A Base-2 A G T T X-TableG A A G T T T GW-2 GW-1 T T T SL-2 SL-3 T T T Moving Platform T End EffecterBase-2 Y-Table Moving Platform End EffecterSliding-Leg (SL) Figure 5. Java 3D scene graph architecture for Tripod 6.2 Kinematic Modelling for Tripod Kinematics studies the geometric properties of the motion of points without regard to their masses or to the forces acting upon them. While the scene graph is the emergent standard hierarchical data structure for computer modelling of 3D worlds, kinematic models of physical devices or mechanisms that have ex- ternal constraints or constraints that span interior nodes do not fit comfortably Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 669 into its open-branched tree topology. In the case of our Tripod monitoring and control, models of both constrained kinematics and inverse kinematics are solved separately and embedded into the behaviour control nodes in a scene graph to calculate the motions of respective components. Typically, constraints can be expressed in a number of equations or inequalities that describe the re- lationships among Tripod components. Based on sensor signals collected from the real Tripod, both constrained kinematic model and inverse kinematic model of the Tripod are needed to calculate the positions and orientations of the three sliding-legs and moving platform for 3D Tripod model rendering. For the purpose of mathematical formulation, a Tripod kinematic model is shown upside-down in Figures 6 and 7. It is a 3-dof parallel mechanism with linear motion component actuators, the type of linear motion actuated ma- chines with fixed leg lengths and base joints movable on linear guideways (e.g. HexaM, Eclipse, Hexaglide, GeorgV, Z 3 Head). This mechanism consists of three kinematic chains, including three fixed length legs with identical topol- ogy driving by ballscrews, which connects the fixed base to the moving plat- form. In this 3-dof parallel mechanism, the kinematic chains associated with the three identical legs consist, from base to platform, of an actuated linear mo-tion component (ballscrew in the case), a revolute joint (connected by a nut), a fixed length moving link, and a spherical joint attached to the moving plat- form. The arrangement of the structure would be subject to bending in the di- rection parallel to the axis of the revolute joint. The advantages of the structure are: 1) with this basic structure of parallel mechanism, it can be easily extended to 5-dof by adding two gantry type of guideways to realize the 5-dof machin- ing; 2) with the fixed length legs, one can freely choose the variety of leg forms and materials and use linear direct driver to improve the stiffness; and 3) due to reduced heat sources, it is possible to keep the precision in a high level and to maintain a stable stiffness if compared with variable legs. The kinematic equation for the position of the ith spherical joint is given as i i pRh p ′ += (1) where, =ip[iz iy ix ppp ,, ]T is the vector representing the position of the ith joint in the global coordinate system O- xyz,ip′ is the vector representing the same point but in the local coordinates zyx′′′-C ,=h[cc c zyx ,, ]T is the vector represent- ing the position of the moving platform, and R is the rotation matrix of the moving platform in terms of rotation angles xθ,yθ, and zθ about x, y, and z axis, respectively.670 Industrial Robotics: Theory, Modelling and Control Revolute Joint Guide-way Base α2Sliding-Leg Spherical Joint Moving Platform z z′ y′ x′ y xα1 α3 b3 b1b2s2 s1 s3pi si biOlihp2 p1p3Rp i′ C Figure 6. Tripod kinematic model Among the six motion components of the moving platform, it is known that cx,cy, and zθ are dependent variables. The constraint equations can be de- rived as z y p c L x θ θsin cos33−= (2a) ()z y x z x z y p c L y θ θ θ θ θ θ θ sin sin sin cos cos cos cos63− + − = (2b) ¸¸ ¹· ¨¨ ©§ +− = y xy x zθ θθ θ θcos cossin sin arctan (2c) While constrained kinematics of the Tripod is used for monitoring, inverse kinematics is needed for position control. Considering the ith sliding- leg/guide-way system, the kinematic equation of the position of the ith spheri- cal joint, i.e. eq. (1), can be re-written as i i i i ls b p ++ = (3) whereib is the vector representing the position of the lower end of the ith guide-way attached to the base, is is the vector representing the displacement along the ith guide-way, and il is the vector representing the ith sliding leg. Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 671 Sinces ii isu s= and l ii ilu l= , where s iu and liuare the direction vectors of the ith guide-way and the ith leg, respectively, the actuator displacement is can be solved considering that the leg length is a constant is ii i i l s = − − u b p (4) whereil is the length of the ith sliding leg. For given xθ,yθ, and cz, dependent variablescx,cy, and zθ can be determined by eqs. (2a) - (2c), then h and R are fully defined. With this, ip can be determined by eq. (1), and subsequently is can be solved using eq. (4). The true solution of eq. (4) should be the one closer to the previous value, that is () ()()¸¹·¨©§− − = =1 min, 2,1js s s sik ikk i i (5) where jstands for the jth step. In practice, the initial value of is is provided by an encoder. For the sake of brevity, interested readers are referred to [18] for further details of the Tripod kinematics. 6.3 Remote Monitoring and Control Web-based remote device monitoring and control are conducted by using the StatusMonitor and CyberController , which communicate indirectly with the de- vice controller through an application server. In the case of Tripod monitoring and control, they are further facilitated by the kinematic models, to reduce the amount of data travelling between web browsers and the Tripod controller. Figure 7. CAD model of Tripod 672 Industrial Robotics: Theory, Modelling and Control The required position and orientations of the moving platform are converted into the joint coordinates is (i = 1, 2, 3) by the inverse kinematics for both Java 3D model rendering at client-side and device control at server-side. The three sliding-legs of the Tripod are driven by three 24V DC servomotors combined with three lead screws. Each actuator has a digital encoder (1.25 μm/count) for position feedback. The position data is (i = 1, 2, 3) of the sliding-legs are multi- cast to the registered clients for remote monitoring, while only one user at one time is authorized to conduct remote control. A sampling rate of 1 kHz is used for the case study. Figure 8 shows how the Tripod is manipulated from one state to another within the proposed Wise-ShopFloor framework. Figure 8. Web-based remote monitoring and control Web-Based Remote Manipulation of Parallel Ro bot in Advanced Manu facturing Systems 673 6.4 Managerial Implications The Wise-ShopFloor is a business process that is based on new IT technology to execute business processes. It leverages the IT management tools to deliver re- liable and secured transmission of data between the end users and real shop floors. It provides not only an efficient mechanism for real-time monitoring and control in manufacturing, but it also improves a manufacturing firm's business performance. The implementation of this client-server architecture is likely to result in significant increases in productivity and revenues. Conclusions This chapter presents the Wise-ShopFloor framework and describes detailed three-tier architecture. The goal of the web-based approach is to reduce net-work traffic with Java 3D models, while still providing users with intuitive en- vironments. Participating in the Wise-ShopFloor , users not only can feel reduced network traffic by real-time interactions, but also can obtain more flexible con- trol of their real shop floors. The application in modern manufacturing system is demonstrated for its feasibility and the promise of this novel approach to the growing distributed shop floor environments. As decentralization of business grows, a large application potential of this research is anticipated, in addition to remote real-time monitoring and control. References Cao, J., Li, M.L., Zhang, S.S. and Den, Q. N. 2004. Composing Web Services Based on Agent and Workflow. Grid and Cooperative Computing, Part 1. Berlin: Springer-Verlag Berlin, pp. 948-955. Zeng, L. Benatallah, B., Ngu, A. H. H., Dumas, M., Kalagnanam, J., and Chang, H. 2004. QoS-Aware Middleware for Web Services Composition", IEEE Transactions on Software and Engineering, May. 30(5): 311-327. G. Pritschow, “Research and Development in the Field of Parallel Kinematic Systems in Europe”, Parallel Kinematic Machines – Theoretical Aspects and Industrial Requirements, edited by Boër, C.R., Molinari-Tosatti, L, and Smith, K.S., pp.1-16, Springer-Verlag, (1999). J. Tlusty, J. Ziegert, and S. Ridgeway, “Fundamental Comparison of the Use of Serial and Parallel Kinematics for Machine Tools”, Annals of the CIRP, Vol. 48/1, pp. 351-356, (1999). M. Honegger, A. Codourey, and E. Burdet, “Adaptive Control of the Hexaglide, a 6 DOF Parallel Manipulator”, Proceedings of the 1997 IEEE 674 Industrial Robotics: Theory, Modelling and Control International Conference on Robotics and Automation, Vol. 1, pp. 543-548, (1997). G. Pritschow, and K.-H. Wurst, “Systematic Design of Hexapods and Other Parallel Link Systems”, Annals of the CIRP, Vol. 46/1, pp. 291-295, (1997). M. Suzuki, K. Watanabe, T. Shibukawa, T. Tooyama, and K. Hattori, “Devel- opment of Milling Machine with Parallel Mechanism”, Toyota Technical Review, Vol. 47 No. 1, pp. 125-130, (1997). F. Pierrot, “From Hexa to HexaM”, International Parallelkinematik- Kolloquium IPK’98, ETH Zurich, pp. 75-84, (1998). H.K. Tönshoff, C. Soehner, and H. Ahlers, “A New Machine Tool Concept for Laser Machining”, Proceedings of International Seminar on Improving Machine Tool Performance, San Sebastian, pp.199-124, (1998). B.S. El-Khasawneh, and P.M. Ferreira, “The Tetrahedral Tripod”, Parallel Ki- nematic Machines – Theoretical Aspects and Industrial Requirements, ed- ited by Boër, C.R., Molinari-Tosatti, L, and Smith, K.S., pp. 419-430, Springer-Verlag, (1999). Kochan, A., “Parallel Robots Perfect Propellers”, Industrial Robot, Vol. 23, No. 4, pp. 27-30, (1996). L. Wang, B. Wong, W. Shen and S. Lang, “Java 3D Enabled Cyber Workspace”, Communications of the ACM , Vol.45, No.11, pp. 45 – 49, 2002. NCMS, “Factory-Floor Internet: Promising New Technology or Looming Secu- rity Disaster”, Manufacturing In Depth , National Center for Manufacturing Sciences, November, 2001. Dan Zhang, L. Wang and Sherman Y. T. Lang, 2005, Parallel Kinematic Ma- chines: Design, Analysis and Simulation in an Integrated Virtual Environ- ment, Transactions of the ASME Journal of Mechanical Design, Vol.127, Is-sue 7, pp. 580-588 J. Barrilleaux, 3D User Interfaces with Java 3D , Manning Publications Co., 2001. H. Sowizral, K. Rushforth and M. Deering, The Java 3D API Specification , Addi- son-Wesley, 2001. L. Wang, F. Xi, D. Zhang and M. Verner, “Design Optimization and Remote Manipulation of a Tripod”, International Journal of Computer Integrated Manufacturing, Vol.18, No.1, pp.85-95, 200567724 Human-Robot Interaction Control for Industrial Robot Arm through Software Platform for Agents and Knowledge Management Tao Zhang, Vuthichai Ampornaramveth and Haruki Ueno Introduction At present, industrial robot arms have been widely adopted in many areas. Unfortunately, operation of them is not easy to master for workers due to complex architectures as well as various control patterns required for each situation. Therefore, if there is a user-friendly human-robot interface and through this interface workers can operate industrial robot arms by their fa- miliar language, it will remarkably reduce the difficulty of the usage of them. The aim of this research is to develop a new human-robot interaction control approach for industrial robot arms by means of software platform for agents and knowledge management in order to construct a symbiotic human-robot system that could be adopted in industrial area (Ueno, 2002). Conventionally, industrial robot arms only can be operated by experts who should possess sufficient knowledge on features of industrial robot arms and be able to control their movement for performing a task. To improve the hu- man-robot interface, researchers have already developed some software inter- faces for the operation of industrial robots (Mizukawa et al, 2002) (Konukseven et al, 2004) (Sales et al, 2004) (Cengiz, 2003). Unfortunately, effective use of these interfaces still depends on the technical training. This paper proposes a knowledge-based human-robot interaction control approach in conjunction with a humanoid robot Robovie as a communication robot (Tao Zhang et al, 2005) for industrial robot arms. With this method, an operator can easily in- teract with the autonomous communication robot by his natural language. The communication robot transfers the sentences of the operator to a sentence parser. The key words extracted by the sentence parser are then sent to a soft- ware platform, called SPAK (Software Platform of Agents and Knowledge Management) (Ampornaramveth et al, 2004). In SPAK, it maintains sufficient knowledge on this human-robot system. According to the defined human- robot interaction control in SPAK, industrial robot arms can be correctly oper-ated according to operator’s request. With the proposed method, a person is not required to be an expert of industrial robot arms but just an ordinary op- erator of industrial robot arms. He can operate industrial robot arms like an expert.678 Industrial Robotics: Theory, Modelling and Control Although there are many types of industrial robot arms to be operated, the knowledge on these robots can be easily defined in SPAK in a uniform manner by using frame-based knowledge representation schema. The knowledge is maintained as a key component of a communication robot, i.e. a dialog robot, for the robot arms. Therefore, a person only needs to explain his requests to the communication robot. SPAK can assist the person to select appropriate ro- bots and arrange their operations to satisfy the person’s requests to achieve tasks. In addition, SPAK can control different types of robots even they use various kinds of operation systems. From the side of operators, it is no need to possess knowledge on the operations of different types of robots. The remainder of this chapter is organized as follows. In section 2, human- robot system as well as its interaction control process is modelled by frame- based knowledge representation. In section 3, human-robot system is defined in SPAK according to its knowledge model using XML format. Through hu-man-robot interaction, industrial robot arm is controlled by use of SPAK via wireless network in section 4. Section 5 introduces an actual system comprised of human, humanoid robot (Robovie) and industrial robot arm (MELFA) and its experimental results demonstrate the effectiveness of the proposed human- robot interaction control method. Modelling of Human-Robot System Human-robot interaction control for an industrial robot arm is based on the in- teraction between an operator of the robot arm and a communication robot. The operator’s request is transferred to SPAK via wireless network and con- verted into commands of the robot arm. SPAK can control the robot arm with these commands and get the feedback signals from the robot. By converting these feedback signals into the sentences of natural language and speaking out these sentences by the communication robot, the operator can understand the status of the robot arm and continue his operation successfully. From this op- eration process, the definition of human-robot system in SPAK is one of the important components. In order to implement the definition of human-robot system, the modelling of human-robot system is necessary. The modelling of human-robot system is based on the frame-based knowledge representation. It is well known that frame representation systems are cur- rently the primary technology used for large-scale knowledge representation in Artificial Intelligence (AI) (Koller & Pfeffer, 1998). A frame is a data- structure for representing a stereotyped situation (Minsky, 1974). Attached to each frame are several kinds of information, called knowledge. Collections of related frames are linked together into frame-systems. The structure of a frame is consisted of several items, such as Frame name, Frame type, A-kind-of, De- scendants, Slots, etc. (Tairyou, 1998). A frame consists of slots, each of which Human-Robot Interaction Control for Indust rial Robot Arm through Software… 679 has different roles in description of knowledge. Table 1 and 2 shows the defini- tion of a frame as well as its slot. Items Meanings Frame name Identification for frame Frame type Type of frame A-kind-of Pointer to parent frame for expressing IS_A relation Descendants Pointer list to children frame Has-part Components of this frame Semantic-link-from Links from other frames according to their semantic relation Semantic-link-to Links to other frames according to their semantic relations Slots Components of the frame Table 1.Meanings of each item in a frame Items Meanings Slot name Identification for slot Role Purpose of slot From Source of slot Data type Explain the attribute of information recorded into the value Value Slot value Condition Condition of slot Argument Argument for slot If-required If slot is required, check this item. If-shared If slot can be shared with other frames, check this item. Frame-related A frame related with slot Frame-list-related Several frames related with slot Default If the slot value is not determined, the default value can be recorded. But the value and default value cannot be given at the same time. Table 2.Meanings of each item in a slot Using frames and their slots, a human-robot system can be modelled simply. This knowledge model is comprised of different frames to represent various pieces of knowledge. For instance, frames for robots include features of a communication robot and industrial robot arms as well as their operation commands. Particularly, the frames for the communication robot include the knowledge on a human-robot interface. At present, a human-robot interface can be implemented by vision recognition, robot speech, physical input, etc. While, frames for users include much information about the users. All frames for the knowledge model are organized by their ISA relations in a hierarchy. That is, a lower level frame is a subclass of its upper level frame. The bottom frames are the instances of the upper level frame. Based on these relations, a 680 Industrial Robotics: Theory, Modelling and Control human-robot interaction control can be defined in frames. Table 3 illustrates a part of an example of a frame about a communication robot. Frame: Communication robot Type: Instance A-kind-of: Robot Descendants: Empty Has-part: (mouth, motor, eyes) Semantic-link-from: Empty Semantic-link-to: Behavior … … Table 3. A frame for communication robot In the model of a human-robot system, the human-robot interaction control can be described as below. As a human operator is interacting with a commu- nication robot, the sentences given by the operator are recognized and trans- ferred to a software sentence parser. By this parser, the key words extracted from the sentences are sent to SPAK. In the SPAK knowledge base there exist many frames on the operation for the industrial robot arm. If the condition of an operation of the robot arm is satisfied according to the key words, the commands to the robot arm defined in this frame will be sent to the robot arm. And the robot arm will then move along the commands. After movement, the robot arm will send a feedback signal to SPAK through a software agent, which translates the feedback signal into the key words that the SPAK knowl- edge system can understand. As SPAK receives them, it will form some sen- tences corresponding to these words and send them to the communication ro- bot. The operator can then hear the spoken sentences from the communication robot and decide the next operation. Definition of Human-Robot System in Software Platform 3.1 SPAK In order to implement a human-robot interaction control for an industrial ro- bot arm, a software platform, called SPAK (Software Platform for Agents and Knowledge Management), has been recently developed. It is a frame-based knowledge engineering environment (Ampornaramveth et al, 2004). It provi-des a central module, which acts as a blackboard for comminucation channels, knowledge processing brain, memory, and does judgment, task planning and execution. It also provides software tools necessary for integration of various Human-Robot Interaction Control for Indust rial Robot Arm through Software… 681 existing modules over a TCP/IP network. The features of SPAK are “platform- independent” as existing robots and software modules often rely on different platforms or operation systems, “network-aware” as the modules must inte- ract on a network, supporting “software agent” and being “user friendly”. SPAK is targeted to be the platform on which a group of coordinative robots (or their agents) operate on top of frame knowledge. SPAK consists of the following software components: •GUI Interface: A user-friendly graphical interface to the internal knowledge manager and the inference engines. It provides the users direct access to the frame-based knowledge. •Knowledge Database and Knowledge Manager: This is the SPAK core module, which maintains the frame systems as Java class hierarchy, and performs knowledge conversion to/from XML format. •Inference Engines: Verify and process information from external modules, which may result in instantiation or destruction of frame instances in the knowledge manager, and execution of predefined actions. •JavaScript Interpreter: Interprets JavaScript code which is used for defining condition and procedu- ral slots in a frame. It also provides access to a rich set of standard Java class libraries that can be used for customizing SPAK to a specific application. •Base Class for Software Agent: Provide basic functionality for developing software agents that reside on ne- tworked robots. •Network Gateway: This is a daemon program allowing networked software agents to access knowledge stored in SPAK. All SPAK network traffics are processed here. 3.2 Definition of human-robot system in SPAK In SPAK, a human-robot system is defined according to its knowledge model by means of XML format (www.xml.com). Table 4 illustrates an example about the frame described in the XML format in SPAK for the behavior of face detec- tion of a communication robot, which is implemented for an experiment. XML is a markup language for Internet documents containing structured informa- tion.682 Industrial Robotics: Theory, Modelling and Control <FRAME> <NAME>FaceDetect</NAME> <ISA>Behavior</ISA> <ISINSTANCE>FALSE</ISINSTANCE> <SLOTLIST> <SLOT> <NAME>mSensor</NAME> <TYPE>TYPE_INSTANCE</TYPE> <CONDITION>COND_ANY</CONDITION> <ARGUMENT>Bust</ARGUMENT> <VALUE></VALUE> <REQUIRED>TRUE</REQUIRED> <SHARED>TRUE</SHARED> </SLOT><SLOT> <NAME>mMouth</NAME> <TYPE>TYPE_INSTANCE</TYPE> <CONDITION>COND_ANY</CONDITION> <ARGUMENT>MouthIO</ARGUMENT><VALUE></VALUE> <REQUIRED>TRUE</REQUIRED> <SHARED>TRUE</SHARED> </SLOT><SLOT> <NAME>onInstantiate</NAME> <TYPE>TYPE_STR</TYPE> <CONDITION>COND_ANY</CONDITION> <ARGUMENT></ARGUMENT><VALUE>rpc(“recogFace”, “”);</VALUE> <REQUIRED>FALSE</REQUIRED> <SHARED>TRUE</SHARED> </SLOT> </SLOTLIST> </FRAME> Table 4. XML format in SPAK With XML format, frame structure as well as its contents written by slots can be defined easily. Particularly, the frame system can be illustrated in the SPAK Graphic User Interface (GUI). Besides, corresponding to the XML file, there is an interpreter to translate XML-based specifications into relative commands. The meaning of this format can be explained corresponding to the definition of a frame in Table 1 and 2. Between <FRAME> and </FRAME> defines a frame. NAME refers to the frame name. ISA refers to the item of “A-kind-of”. ISINSTANCE refers to the frame type. Between <SLOTLIST> and </SLOTLIST> defines slots. Each SLOT gives several contents, including NAME, TYPE, CONDITION, ARGUMENT, VALUE, REQUIRED, SHARED, etc. With this XML format, a frame and its slots can be described in detail. Therefore, human-robot system can be defined in SPAK by means of XML format.Human-Robot Interaction Control for Indust rial Robot Arm through Software… 683 Implementation of Human-Robot Interaction Control In section 2, the interaction control process for an industrial robot arm has been explained. As implementing the human-robot interaction control, several technologies should be integrated and employed by SPAK. Firstly, for the in- teraction between an operator and a communication robot, SPAK integrates several technologies for implementing a human-robot interface, such as face detection, image recognition, speech recognition etc. Concerning face detec- tion, by use of the robot “eyes” which are installed with video cameras, the ro- bot can get the video image of the human’s face. With the face detection pro- gram stored in the embedded computer, the robot can recognize the human by the computer vision technology. Of course, if it is the first time for this specific person, the robot will store the information about this person’s face in his knowledge database by its learning function. When the robot looks this per- son’s face again, he can recognize him at once. Thus it sends the recognition results to SPAK. Another technique that robot can use for human-robot inter- face is by means of speech. Since the robot system has a software program for speech recognition, SPAK just sends the recognized sentences to the commu- nication robot, who can speak out the sentences sent by SPAK to the operator. Another important technology is to parse a natural sentence. In this human- robot system, an operator can give his requests to the robot arm in natural lan- guage. By means of voice recognition software, such as IBM ViaVoice (http://www-306.ibm.com/software/voice/viavoice/), the sentences given by the operator can be recognized and stored into the computer. Since SPAK can generate the commands for the robot arm by several key words, it is neces- sary to parse the sentences and to extract the key words from them for SPAK. We have developed a simple sentence parser for SPAK using the technique of Case Grammar taking into account the features of the operations of robot arm (Bruce, 1975). With this software component, key words about objective of control, movement of robot arm, etc., will be picked out and sent to SPAK. If some inconsistencies are detected in the sentences regarding the operation of the robot arm, this parser can also generate some relative words about the in- consistencies and send them to SPAK. SPAK will ask the operator to change his commands again through the speech module of the communication robot. Although the system hierarchy has expressed the relations among frames, the execution of frame contents must be implemented in SPAK by inference en- gines. The inference engines used in SPAK are feedforward and backward chainings. The feedforward chaining is usually used when a new fact is added to the knowledge base and we want to generate its consequences, which may add new other facts, and trigger further inferences. The backward chaining starts with something we want to prove, find implication facts that would al- low us to conclude it. It is used for finding all answers to a question posed to the knowledge base. 684 Industrial Robotics: Theory, Modelling and Control Besides, the control of robots also needs their different driving programs of ro- bots for their actions as well as some software agents to convert the signals be- tween robots and SPAK. Particularly, for feedback control, the robot arm should be able to generate feedback signal about their status and send them to SPAK. Experiment 5.1 Experiment setup An experimental symbiotic human-robot system with human-robot interaction control for industrial robot arms has been developed, which composed of Robovie (autonomous communication robot), MELFA (industrial robot arm) and SPAK, as illustrated by Fig. 1. Robovie was developed by Advanced Telecommunications Research Institute International (ATR) of Japan. It is designed as a kind of autonomous commu- nication robots that can communicate and interact with human in our daily environment. It has 11 degrees of freedom (DOFs) for body motions and sen- sors such as an omni-directional camera, a set of pan-tilt zooming cameras, a microphone, ultrasonic range sensors, tactile sensors, etc. It can move around with its wheels. Robovie also provides many demo programs for speech, vi- sion, motion, etc. Based on the embedded functions of Robovie, we have de- veloped several programs for monitoring the status of all sensors and sending them to SPAK, defining many actions of Robovie as well as instructing Robo- vie to talk with human. Human-Robot Interaction Control for Indust rial Robot Arm through Software… 685 Wireless NetworkSPAKRobovie MELFAHuman Figure 1. An actual human-robot system Robovie can be used in the field of education, nursing, medical treatment, etc. Robovie and human can make interaction by face detection, speech and user input, so that Robovie can get the operator’s commands and transfer it to SPAK. MELFA is a kind of industrial articulated robot arm, produced by Mitsubishi Electric Co., Japan The robot arm used in this experiment has 6 DOFs gener- ated by 6 axes. Each axis is driven by AC servomotor. The servo controller of MELFA is CR1-571. Its programming language is MELFA-BASIC IV. MELFA can move strictly along a trajectory in three-dimensional space. The tip of the robot arm can hold or release workpiece. Figure 2. Environment of operation-Robovie system 686 Industrial Robotics: Theory, Modelling and Control In this experiment system, Robovie, MELFA, SPAK and other software com- ponents are connected via wireless TCP/IP network. SPAK and other software components (such as vision recognition, sentence parser, software agents, etc.) are running on different computers. Therefore, this system is co mprised of a distributed system. The core of this system is SPAK. Fig.2 illustrates the envi- ronment of operator-Robovie interaction for the experiment. 5.2 Results Before performing the task in experiment, the human-robot system must be defined in SPAK according to the knowledge model of this system. Using the modeling method explained in section 2 the system can be modeled and de- fined in SPAK, as illustrated by Fig.3. From this figure, we can see that all ro-bots and users have been defined in SPAK including their features. Each frame has the structure as Table 1 and 2 and all of them form a frame hierarchy. Fig.4 shows the contents of frame “MELFA” which is to initiate the MELFA before operating it and Fig.5 shows the contents of frame “MELFAOn”, by which the operation of turning on the power of MELFA will be executed. . Figure 3. Interface of SPAK Figure 4. SPAK slot editing table for frame “MELFA” Human-Robot Interaction Control for Indust rial Robot Arm through Software… 687 Figure 5. SPAK slot editing table for frame “MELFAOn” In Fig.6, for understanding the principle of executing frames in SPAK, the de- tail contents and relations of the frames of MELFA in SPAK are illustrated as an example. There exist four frames for four kinds of atomic actions of MELFA, such as “MELFAOn”, “MELFAMove”, “MELFAHome” and “MEL- FAOff”. Each of them is related with the conditions expressed by the frames of “Greet”, “Mouth”, users and atomic actions. If the frames for the conditions are actuated at the same time, the frame with these condition frames will be ac- tuated and the command given in the special slot “onInstantiate” in this frame will be sent to the servo controller of MELFA. MELFA will then move by the control of servo controller. For instance, the actuation of the frame “MELFA-Move” is based on the actuation of the frames of “Greet”, “Mouth” and “MEL- FAOn”. With this system, we have made experiment according to the follow- ing scenario. It describes an episode of the experiment. Robovie: (Robovie looks at the operator’s face and try to recognize it.) Robovie: Hi, how are you! I have never seen you before. What is your name? Operator: (The operator types his name XXX. ) Robovie: Hi,XXX . Do you want to operate MELFA now? Operator: Has MELFA been ready ? Robovie: Yes. How do you want MELFA to move ? Operator: I want MELFA to hold workpiece A and move from P 0 to position P 1. Robovie: O.K. MELFA: (MELFA starts to perform the task given by the operator.) Robovie: MELFA has finished its jobs. If you want it to perform another job, please give your command. ... From the experiment, operator’s commands can be correctly sent to SPAK and SPAK can convert them into the relative commands of MELFA according to the knowledge model of the system. Therefore, MELFA can perform the task correctly. Besides, for ensuring the reliability of the operation, there are some measures for safety adopted in this system. Firstly, the consistency check of the operator’s sentences is installed in the sentence parser. If the operator’s sen- tence is inconsistent with the operation of MELFA, the parser will ask operator 688 Industrial Robotics: Theory, Modelling and Control to give his sentence again. Secondly, SPAK provides some frames for confir- mation. Before performing the movement of MELFA, SPAK will instruct Robovie to repeat the task given by operator again. If operator confirms its cor- rectness, MELFA will be controlled to move. If there exist any problems, SPAK will instruct Robovie to tell operator by speech as soon as possible. Thirdly, MELFA also has some measures to protect itself. With this system, the error in- formation generated by MELFA can be also transferred to SPAK and spoken out by Robovie. Figure 6. Frames for the operation of MELFA in SPAK Human-Robot Interaction Control for Indust rial Robot Arm through Software… 689 Discussions 6.1 Flexibility and extensibility of the proposed human-robot interative control method Since the proposed human-robot interaction control method is based on the knowledge model and implemented by SPAK, it has strong flexibility and ex- tensibility. The flexibility of the proposed method is reflected by that, in the knowledge model it is possible to define various kinds of frames to control ro- bot behaviors for different tasks based on human requests. SPAK can integrate many software components to support the implementation of human-robot in- teraction control for industrial robot arms. The proposed method separates the human-robot interaction control of robots into two stages: designing the knowledge model and implementation in the SPAK. It is possible to adopt same ways (same robots) to implement different tasks or adopt different ways (different robots) to implement same tasks. Therefore, high-level knowledge model design or low-level software component development in SPAK pro- vides a large space to flexibly that performs the tasks for human requests. The extensibility of the proposed method is resulted from the following sev- eral points of views. This method is open to many types of robots. Any new types of robots can be described by the frames in the knowledge model and in- tegrated into the SPAK. The behaviors of multiple robots can be easily com- bined for a specific task. Different combinations can extend the ability of the system to serve to human. Except natural language, many types of human- robot interaction can be integrated by the proposed method. With the increase of the complexity of tasks, the control performance of the proposed method can be improved by extending the functions described in the knowledge model and implemented by SPAK. 6.2 Knowledge management and improvement by learning in SPAK Due to the increase of the knowledge required for human-robot system, the knowledge management and improvement becomes more and more impor- tant. This is the current research topic for improving the proposed method and realizing the goal of constructing a highly intelligent symbiotic human-robot system in the future. The knowledge management includes the organization and optimization of knowledge. Although a frame and its slots provides strong ability to describe various types of objects and frame hierarchy can or- ganize the frames into a system, it needs mechanism to classify the different types of frames, renew the contents of frames, delete the useless frames, detect the logical errors among frames, and so on. Currently, an expert manages the knowledge manually for a human-robot system. It is definitely needed to de-690 Industrial Robotics: Theory, Modelling and Control velop functions to automatically fulfill these kinds of knowledge management. To imitate human ability, learning new knowledge by means of SPAK for im- proving the knowledge model is being developed in our research. At present, the learning function is implemented as a Java-based program and developed based on the interaction oriented learning approach. It can exchange informa- tion with SPAK and create new frames in SPAK. During the process of interac- tion, a user will teach a communication robot how to perform a robot behavior or accomplish a specific task by various behaviors for different robots. Accord- ing to user's teaching, new strategy frames can be created in SPAK by the learning function. The learning function performs a searching process in SPAK. New strategy frames are created in SPAK when the relative behavior frames or strategy frames for robot behaviors are found. The searching route is according to the types of robots and their titles of frames. Since SPAK is a Java- based software system and it consists of Java classes to deal with the manipu- lation of frames, it is therefore easy to create frames and put them into the new strategy frames in SPAK. If SPAK can not find the existing behavior frames or strategy frames, it will ask the user to provide more information about the new behaviors of robots and therefore create new frames in SPAK. Since this learn- ing function is still under development, it will be continuously improved by the further research. 6.3 Future issues In order to realize the final goal to construct a highly intelligent symbiotic hu- man-robot system, concerning the proposed control method there still exist many attractive, challengeable issues needed to solve. As mentioned above, the knowledge model adopted by the proposed method needs to be improved on its management. We want to combine the proposed method with other kinds of control approaches to improve the control performance for a symbi- otic human-robot system, such as adaptive control, robust control, fuzzy con- trol, etc. In addition, the reliability of the proposed human-robot interaction control of robots is needed to continuously improve. We will apply this method for more different typical tasks in wide areas. With the improvement of robot functions in the near future, the proposed method will be able to adopt for more real applications. Human-Robot Interaction Control for Indust rial Robot Arm through Software… 691 Conclusions A new human-robot interaction control approach for industrial robot arm was proposed. In this method, operator’s requests can be directly obtained by an autonomous communication robot through human-robot interaction, and con- verted into control instructions for industrial robot arms by SPAK. In addition, the status of the robot arm can be obtained by SPAK and informed to the op-erator by the speech function of the communication robot. Based on this method, an experimental symbiotic human-robot system for industrial robot arms was constructed and evaluated. The experimental results demonstrate the effectiveness of the proposed method. The proposed idea of human-robot interaction control approach for industrial robot arms has strong flexibility and extensibility. It can be extended to construct many kinds of symbiotic hu- man-robot systems including different kinds of robots. The knowledge man- agement and improvement can be realized by learning functions in SPAK. In the future research, more issues will be considered to solve and the control performance of human-robot system will be further improved. We believe that the symbiotic human-robot system with human-robot interaction control has great potentials for future human society. 692 Industrial Robotics: Theory, Modelling and Control References Ampornaramveth, V.; Kiatisevi, P. & Ueno, H. (2004). SPAK: Software Plat- form for Agents and Knowledge Management in Symbiotic Robotics. IEICE Trans. Information and Systems , Vol. E87-D, No. 4, pp. 886-895. Bruce, B. (1975). Case systems for natural language. Artificial Intelligence , Vol. 6, pp. 327-360. Cengiz, M. C. (2003). Software development for man-machine interface for an industrial robot. Thesis of master degree . Koller, D. & Pfeffer, A. (1998). Probabilistic frame-based systems. Proc. of the 15th National Conference on AI (AAAI-98), pp. 580-587. Konukseven, E. L. & Abidi, A. (2004). Developmen of man machine interface software for an industrial robot. Proc. of 2004 IEEE Symposium on Virtual Environment, Human-Computer Interfaces and Measurement Systems, (VECIMS), pp. 49-53. Minsky, M. (1974). A Framework for representing knowledge. MIT-AI Labora- tory Memo 306 . Mizukawa, M.; Matsuka H., et al, (2002). ORiN: open robot interface for the network - the standard and unified network interface for industrial robot applications. Proceedings of the 41st SICE Annual Conference , Vol. 2, pp. 925-928. Sales, J.; Fernandez, R., et al, (2004). Telecontrol of an industrial robot arm by means of a multimodal user interface: a case study. Proceedings of 2004 IEEE International Conference on Systems, Man and Cybernetics , Vol. 1, pp. 76-81. Tairyou, G. (1998). Development of frame-based knowledge engineering envi- ronment ZERO. Master Thesis , Tokyo Denki University. Tao Zhang, H. Ueno (2005), A Frame-Based Knowledge Model for Heteroge- neous Multi-Robot System, IEEJ Trans. EIS, Vol.125, No.6, pp.846-855. Ueno, H. (2002). A knowledge-based information modeling for autonomous humanoid service robot. IEICE Transactions on Information and systems , Vol. E85-D, No. 4, pp. 657-665. 69325 Spatial Vision-Based Control of High-Speed Robot Arms Friedrich Lange and Gerd Hirzinger Introduction Industrial robots are known to execute given programs at high speed and at the same time with high repeatability. From non industrial scenarios as in (Nakabo et al., 2005) or (Ginhoux et al., 2004) we know that cameras can be used to execute high-speed motion even in those cases in which the desired path is not a priori given but online sensed. In general, such visual tracking tasks of following a randomly moving target by a camera are not accurate enough for industrial applications. But there the work-piece will scarcely move randomly. So in this chapter we concentrate on another type of visual ser- voing, in which the path that has to be followed is fixed in advance, but not given by a robot program. A robot-mounted camera is a universal sensor which is able to sense poses with high accuracy of typically less than a millimeter in the close-up range. At the same time with high shutter speed the robot may move fast, e.g. at 1 m/s. In contrast to expensive high-speed cameras, yielding a high frame rate of e.g. 1 kHz as in (Nakabo et al., 2005), we restrict on a standard CCIR camera, to meet the requirements of a cost-effective hardware. Off-the-shelf cameras are fundamental for the acceptance in industry. So an important feature of our method is an appropriate control architecture that tolerates low sampling rates of sensors. The camera is mounted at the robot arm and measures the work- piece pose (given by boundary lines) with respect to the tool center point (tcp) of the robot. More precisely, the camera is mounted laterally to provide enough space for a tool. So with constant moving sense we have a predictive sensor as in (Meta-Scout, 2006). With alternating moving sense the camera has to be tilted so that the corresponding nominal line point np comes approxi- mately to the center of the image (see Fig. 1d). In this case segments of the lines might be occluded by the tool. A tilted mounting yields a priori unknown dis- tances of the different line points and thus complicates the equations. As well, the task frame defined by the tcp, and the camera frame are different. In contrast to current research (Comport et al., 2005), we assume that problems with image processing, feature detection and projections are solved, which 694 Industrial Robotics: Theory, Modelling and Control holds for our simple black and white scenario. In addition, the initial configu- ration is supposed to be close to the target configuration, so that large rotations as in (Tahri and Chaumette, 2005) do not appear. a b c d Figure 1. Sample tasks with natural and artificial background and tilted mounted camera We show several planar and spatial sample tasks (Fig. 1). They are used to sense (curved) lines or edges which are coarsely parallel to the desired motion. This allows to refine a coarsely programmed path at full speed. According to the notation of this chapter the programmed path is called refer- ence path and the corresponding lines of the nominal scenario are nominal lines . In reality the sensed lines will differ from the nominal lines, thus defining the desired path , where a path is given by trajectories of positions and orientations. In our experiments we program a horizontal circular path which is online modified in radial and in vertical direction using image data. A possible appli-cation is the spraying of glue to flexible or imprecisely positioned work-pieces. Other applications are laser cutting, or soldering. In these cases the desired path is determined during motion, e.g. by surveying of the boundary lines of the work-piece. For all these tasks high accuracy at high speed is required.Spatial Vision-Based Control of High-Speed Robot Arms 695 Similar approaches have been proposed predominantly with simple scenarios, see e.g. (Meta-Scout, 2006) or (Lange & Hirzinger, 2002). Other methods han- dle with multiple lines with point-by-point given nominal location, thus allow- ing both translational and rotational sensor induced path corrections. How-ever they require complex computations as (Lange & Hirzinger, 2003), or work at lower speed as (Gangloff & de Mathelin, 2002) or (Rives & Borrelly, 2000). The complexity comes from rotations between nominal and real world which in practice are not significant. Therefore we now present a method which de- nies time consuming iterations to solve systems of trigonometric equations. The chapter is organized as follows: In section 2 we present a control concept that allows different sampling rates for the robot controller and the sensor. This leads to a universal position controller (section 3) and a task-dependent computation of the desired path (section 4). If the sensible lines yield a non continuous or even a non contiguous path, a smoothing method is required to compute an executable desired path. This is explicated in section 5. Experi- mental results of continuous paths and from the tracking of lines with vertices are then demonstrated in section 6. Control concept Instead of directly using sensor data to control the robot, we use a predictive architecture which separates position control from the sensing of the desired path (see Fig. 2). Position control provides what we call a Cartesian ideal robot. This means that for all sampling steps its arm position ax is identical to the de- sired pose dx. The realization of such an ideal robot will be explained in the sequel. Sensor data affect the system by a module that computes the desired poses at the sampling steps. This is presented in section 4. Figure 2. Architecture of control 696 Industrial Robotics: Theory, Modelling and Control The fusion of the two parts, position control and the computation of the de- sired path, yields control from image data. This concept allows different sampling rates of the camera and the robot con- troller. Our approach is to integrate image data in each case in the next posi- tional sampling step. As in (Zhang et al., 2003), time delays owing to processor load are tolerable as long as the instant of exposure is known. Position control The core of this chapter is not restricted to a special position control method. A standard industrial position controller will do if the industrial interface allows online modified references. Such an interface, usually called sensor interface, is required since the desired positions dx are not assumed to be available long before the motion. A standard sensor interface as (Pertin & Bonnet des Tuves, 2004) allows to send online desired values and to receive present positional values. For the purpose of this chapter we refer to the desired values of the sensor interface as acommand vector cq, to distinguish between desired positionsdq (of the inter- face of the ideal robot) and the input to the industrial controller. The actual joint values are called arm positionaq. For curved paths to be executed at high speed we recommend to increase ac- curacy using advanced control methods which process not only the current desired pose but also the desired speed and acceleration or - what we use - the desired poses of multiple future sampling steps as (Clarke et al., 1987) or (Grotjahn & Heimann, 2002). Fig. 2 shows an adaptive feed-forward controller as in (Lange & Hirzinger, 1996) as an add-on to the standard industrial feedback controller. A possible controller equation could be 0() () ( ( ) () )dn cd q i d d ikk k i k ==+ ⋅+ −¦ qq K q q (1) whereqiK stands for the adapted parameters. This controller can be seen as a filter of the desired positions. This proposed controller works in joint space since there are substantial couplings when considering robot dynamics in Car- tesian space. In joint space the estimation of couplings can be restricted to some additional adaptive parameters. This feed-forward controller uses the special predictive interface from (Lange & Hirzinger, 1996), defined either in joint space or in Cartesian coordinates: In Spatial Vision-Based Control of High-Speed Robot Arms 697 every sampling step the desired poses of the next dn sampling steps are re- quired, with dn corresponding to twice the time constant of the controlled ro- bot. This is a key aspect for the realization of an ideal robot. Bold face lines in Fig. 2 represent data for current and future time steps, i.e. predictions of sensor data are required. In the case of time-invariant environments, using predictions of the progres- sion of the desired path enables the position controller to compensate all dy- namical delays that otherwise would directly affect performance. The uncer- tainty becomes small enough so that the robot can track a continuous line with very little path error. Computation of the desired path The task of this computation is to determine the desired poses of next dn sam- pling steps. It is advantageous to use a reference path with respect to which nominal lines are defined. Then, the task is to find the path which lies with re-spect to the real (sensed) lines, in the same way as the reference path to the nominal lines. This path is called desired path and is to be transferred to the ideal robot. Thus with a camera as sensor and the particular task of tracking lines, predic- tion of the next dn sampling steps of the desired path reduces to measuring the course of the contour and to keep the values that correspond to future time steps. For each time-step we compute the transformation matrix r dT which describes the frame of a point of the desired pathdT with respect to the frame of the cor- responding point of the reference pathrT. The so called sensor correctionr dT is computed from the postulation that the desired path is defined by the actually sensed linesp in the same way as the reference path is given by the nominal line pointsnp.p is a point vector and, as T, expressed in homogeneous coordi- nates. All these variables depend on time. The time index k is omitted, how- ever, in order to simplify the notation. This gives the fundamental equation dr s n=pp (2) and then rr dr r s ds d n=⋅=⋅ .pT pT p (3) 698 Industrial Robotics: Theory, Modelling and Control Neglecting rotational sensor corrections yields rrr s dn=+ .ppp (4) If we have at least two lines and their nominal line positions ir np we can com- pute the components of r dp, namely r dx and r dz if y is understood as the di- rection of motion. r dy is defined to be zero since we evaluate lines points which are in the x-z-plane of the reference system. Because of the neglected ro- tational sensor corrections this means also 0rd s s yy== . (5) In the image the lines are detected by single points. Here we assume that the camera is oriented such that lines are approximately vertical in the image (see Fig. 3). We use a simple edge detection algorithm which evaluates a single im- age row. Horizontal line searching gives the best accuracy since it allows proc- essing of single image fields. The detected line points are corrected by a rectifi- cation algorithm using previously identified camera and lens distortion parameters. Figure 3. View from the robot mounted camera with 2 lines and 5 sensed points each. The desired positions of the lines 1 in the image are marked with big yellow blocks. The windows for line search are shown by horizontal lines. 1 The desired position of a line in the image is the image point of the current nominal line point when the tcp pose of the exposure is the reference pose. If these desired line positions coincide in the image with the sensed lines, the actual pose complies with the desired path.Spatial Vision-Based Control of High-Speed Robot Arms 699 At least for curved paths the sensed line points will not share image row with the corresponding nominal image points. So horizontal search starting at the expected image position of a time step will give image points corresponding to the reference of different time instants. Therefore we represent the lines in the image by polynomials. All future computations are then based on these line polynomials ()fξ η= (6) with ξ und η as horizontal and vertical normalized image coordinates of a line point. Using the projection equation () 1Tcccc ss ss zz zξη=⋅ ⋅ ,p (7) wherec sz is the distance between the camera and the line point, we get the pose vector r sp from the reference pose of the tcp to a sensed line point 11rc ss rc rr ss scrc ssx z yzzzξ η§· § · ⋅ ¨¸ ¨ ¸⋅¨¸ ¨ ¸== .¨¸ ¨ ¸ ¨¸ ¨ ¸¨¸ ¨ ¸©¹ © ¹pT (8) With equation (5) we get () 00 1 0 0rr c s cs y== ⋅ ⋅ Tp10 11 12 13()rrr c r ccc s c z ξη =⋅ + ⋅ +⋅ + ,TTT T (9) where for example 10r cT is the component (1,0) of the transformation matrix r cT. This transformation matrix expresses the actual pose of the camera with respect to the reference pose of the tcp. At least for curved reference paths or a camera which is tilted with respect to the tool or the lines (see Fig. 1d) this transformation differs from identity. The equations for r sx and r sz are a little bit more complicated to evaluate. With rT and dT having the same orientation, using equation (4) and (2) we can write rrdrr s dsd n x xxxx=+=+ , (10) 700 Industrial Robotics: Theory, Modelling and Control wherer nx is the nominal distance of the line with respect to the reference tra- jectory of the tcp. This distance is given, e.g. as the space between the desired cutting edge and a visible edge on the work-piece. r dx is the wanted path cor- rection which is the same for different lines: 00 01 02 03()rr r r c r r dc c cs cnx zx ξη =⋅ + ⋅ +⋅ + − .TTT T (11) By comparing r dx of two lines we get 00 1100 0 01 0 02 03 00 1 01 1 02 03() ()rrr c r r ccc s c n rrr c r r ccc s c nzx zxξη ξη⋅+ ⋅+ ⋅ + − = ⋅+ ⋅+ ⋅ + − .TTT T TTT T (12) Likewise we compute 20 21 22 23()rr r r c r r dc c cs cnzz z ξη =⋅ + ⋅ +⋅ + −TTT T (13) and thus 00 1120 0 21 0 22 23 20 1 21 1 22 23() ()rrr c r r ccc s c n rr r c r r ccc s c nzz zzξη ξη⋅+ ⋅+ ⋅ + − = ⋅+ ⋅+ ⋅ + − .TTT T TTT T (14) where 0r nz and 1r nz are the nominal distances to the lines, as e.g. the distance between the laser and the work-piece. Usually the distances to the two lines are the same. In the case of two lines, with two equations (9), equation (12), equation (14), and two equations (6) we have a total of six equations to determine 0 0101c sz ξξ ηη,, ,, , and 1c sz. Because of the nonlinearity, equation (6), a numerical solution is required which usually converges within 2 iterations. The wanted componentsr dx and r dz of the path correction are calculated by inserting the computed variables into the equations (11) and (13), using any of the lines. If only one line is visible, we need a priori information, e.g. the distance of the line or, more precisely, the plane in which the line lies. If this plane is parallel to the x-y-plane of the tool frame we can use 0r dz=. In this case the system of equations is limited to equations (6), (9), and (13) to determine ξη,, and c sz which are inserted into equation (11).Spatial Vision-Based Control of High-Speed Robot Arms 701 Strictly speaking we use a priori information as well with two lines. It is the assumption that the plane of the lines is parallel to the x-y-plane of the tool. A varying distance can be interpreted as a non zero roll angle. So the specifica-tion is restricted to the pitch angle of the plane, i.e. the rotation around the y-axis of the reference frame of the tcp. The computation of this value needs at least three lines, see (Gangloff and de Mathelin, 2002). For every capture we compute path corrections for multiple reference poses rT but fixed camera pose cT which is the pose at the time instant of the exposure. To avoid the computation for all dn sampling steps (see section 3), we repre- sent the path corrections also as polynomials, using again parameter estima-tion methods. The resulting polynomials allow to readout the wanted path modifications with minimal effort. Therefore the method is still suitable for 20dn≈ . With an appropriate feed-forward control it yields minimal path er- rors. The indirect computation of the desired poses by using path modifications with respect to a reference path is advantageous since curved paths with vary-ing orientation are allowed. Solely the path correction itself is assumed to be done without rotations. Computation of a smooth desired path A problem may occur with the presented method if a line has to be followed that is not as continuous as the lines of Fig. 1. With the path of Fig. 4 the robot tries to execute a velocity step at the vertices between straight edges without considering acceleration limitations. To prevent this case, we apply impedance-based control. A filter smoothes the sensed edge so that the resulting contour can be tracked. Figure 4. Sample task with vertices within the line 702 Industrial Robotics: Theory, Modelling and Control Regarding Fig. 5 this means that instead of the sensed edge (red points) a smoothed edge (blue points) is used to compute the desired path for the inner position control loop. In force control scenarios such a filter is well known and is called impedance filter. We adopt this expression although in this case sen- sor data do not represent forces. Figure 5. View from the robot-mounted camera. Sensed edge points (red) and the computed smoothed path (blue) are depicted. The yellow block visualizes the current desired pose. It is worth noting that this kind of impedance-based control does not affect the control law but only the desired trajectory. The stiff position control is main- tained. This is useful if different compliances are desired in the individual components of the Cartesian pose vector. A typical example is a horizontal motion where the height of the end-effector with respect to the floor has to be accurately kept while the horizontal components are sensor controlled and therefore have to be compliant with respect to vertices of the target line. 5.1 Impedance-based control For reasons of clarity we now restrict on Cartesian positions x instead of posi- tions and orientations as in section 4. So vectors are used instead of matrices of homogeneous coordinates, and therefore the orientation is not affected by the impedance-based control. It is assumed further that there is a reference trajectory, the originally pro- grammed motion ()rkx . With respect to this motion the impedance law rr r r a dd da r r⋅+ ⋅+ ⋅=+ − = ΔEx D M x ss s xx  (15) Spatial Vision-Based Control of High-Speed Robot Arms 703 defines the desired trajectory r dx where ax is the actual pose of the tcp. as are the sensed edge data, expressed with respect to the tcp. We here assume that the transformation from the camera system to the tcp system is known. rs represents a reference sensor value, i.e. a specified distance between tcp and edge. Fig. 6 demonstrates this setup. Figure 6. Robot tool positions and sensed distances to a fixed object Note that within this section the index *d represents filtered desired values which are usually different from r dT or r dp in equations like (3) or (4). The lat- ter will now be denoted by a ar+−xs s where a a+xs corresponds to an object poseoT and r−s to o dT. With =EI and ==DM0 , (15) represents explicit sensor-based control as in section 4. If, in contrast, we specify >M0 , the resulting trajectory will smooth the corners since then the accelerations are weighed in addition to the devia- tions from the trajectory of explicit sensor-based control. With >M0 we fur- ther specify >D0 in order to avoid oscillations. With0 () ( ( 1 ) ( 1 ) ) 2rr r d dd kk k T=+ − − /xx x and2 0 ( ) ( ( 1) 2 ( ) ( 1))rr r r d dd d kk k k T=+ − + − /xx x x we compute ()r dki+ x from images taken at the time step k by () ()0 2 0() ( 1 ) ( 1 )2 (1 ) 2 ( ) (1 ) ( ) ()⋅+ + ⋅ + + −+ − +⋅ + + − + + + −= + + / − .rr r dd d rr r r a dd da rki ki kiT ki ki ki k ki kTDEx x x Mxx xx s s (16) 704 Industrial Robotics: Theory, Modelling and Control ()aki k+/s reflects the sensed edge position for time step (k i)+, sensed in the image at time step k. Equation (16) gives a system of equations for y dx( k i ) + with given k. So the solution computes the desired trajectory from the actual position and the sensor values at time step k. The result can be seen considering a vertex or a discontinuity between ()aki k+/s and (1 )aki k++/s . With ==DM0 a vertex or a discontinuity of ()r dki+ x would be reproduced. In contrast, >M0 will smooth the trajectory. Smoothing is not restricted by causality. Instead, the desired trajectory is af- fected far before the discontinuity of ()aki k+/s . It is still affected after the dis- continuity, as well. Equation (15) defines the compliance between the reference trajectory and the new desired position. The same compliance is valid for the more intuitive rela- tion between the sensed edge and the desired system since can be derived in the same way as (15). The right hand side expression is independent of the re- sulting desired robot motion dx ()dd d rr r or o oo o o ⋅+ ⋅+ ⋅= + − ⋅+ ⋅ + ⋅Ex D M s EI x D M xx xx    (17) . 5.2 Modified approach Experiments with impedance-based control according to Section 5.1 show a time delay between the sensed and the optimized trajectory. This comes from the fact that a discontinuity of the sensed edge does not cause a position error in relation to an acceleration dependent expression and a velocity dependent expression but the sum of all three terms is minimized. So for example a nega- tive acceleration may compensate a positive position error. Therefore we define three independent equations that have to be minimized altogether for all time steps. () ( )( )rr a da rki k ki k ⋅+ = + + / −Ex x s s (18) () 0(1 ) (1 )2rr ddki kiT⋅+ + − + − =Dxx0 (19) ()2 0(1 ) 2 ( ) (1 )rr r dd dki ki kiT⋅+ + −+ + + − =Mxx x 0 (20) Minimization is done in a least squares sense where E,D, and M are the weighting factors.Spatial Vision-Based Control of High-Speed Robot Arms 705 5.3 Implementation Instead of solving (16) or minimizing the mean errors of (18) to (20) in every time step, a filter can be computed since we have a linear system of equations. This filter gives ()r dlx with i klkn≤≤ + from the values of () ( )ra akk i k++ / xs with 0iin≤≤ . This filter is called impedance filter. Its coefficients are found by a single optimization process in the systems (16) or (18) to (20) respectively. We now have to specify the number in of elements of this filter. To be able to computedn time steps of ()r dlx we need in»dn. In practice however, in is usually limited by the visible range of the edge. in has been chosen sufficiently large if ()r dlx proves to be time invariant. This requires that the initial condi- tions ()r dlx with lk< have been computed in the same way. The end condi- tions ()r dlx with i lkn>+ are set to () ()r drll=Δ xs . Experiments As first experiments we consider a bent tube that has to be followed at a speed of 0.7 m/s by a KUKA KR6/1 robot (see Fig. 1b or 1c) using the industrial con-troller KRC1. Image processing, i.e. detection of the boundary lines of the tube, runs in field mode of the camera at a rat e of 50 Hz. This is asynchronous to the control rate of 83 Hz. Previously identified camera reconstruction errors are compensated. E.g. lens distortion is identified according to (CalLab, 1999) and the sensed line points are rearranged accordingly. In addition, some parameters as the constant time shift between the time instant of the exposure and the reception of the image in the computing module are estimated and incorporated thereafter, see (Lange and Hirzinger, 2005) for details. All tasks for robot control and image processing run in parallel on a 400 MHz processor of the industrial controller KRC1. Control uses the operating system VxWorks and vision runs under Windows95 which is one of the VxWorks tasks. Thus the additionally required hardware is limited to a camera and a standard frame grabber. Table 1 displays the reached accuracy. Experiment with 1 line 2 lines Mean pixel error 1.2 pixel 1.4 pixel Maximum pixel error 2.9 pixel 4.4 pixel Mean path error (horizontal, vertical) 0.3 mm 0.3 mm 0.9 mm Maximum path error (horizontal, vertical) 1.0 mm 1.0 mm 2.4 mm Mean deviation from reference path 51 mm 37 mm 65 mm Maximum deviation from reference path 77 mm 78 mm 98 mm Table 1. Path error when following a bent tube with 0.7 m/s evaluating in the horizontal plane (1 boundary line) or in space (2 boundary lines) respectively 706 Industrial Robotics: Theory, Modelling and Control When tracking only one boundary line (Fig. 1c), the tube lies horizontally on the floor. In this case, in spite of big differences between nominal and actual tube, a mean pixel error of less than 1 pixel is reached even without filtering of the edge data. With a non planar layout (Fig. 1b) we evaluate both boundary lines to deter- mine a spatial path. The vertical accuracy is inferior because on the one hand the measuring of the distance is ill-conditioned due to the geometrical setup, and on the other hand because elastic oscillations of the robot are excited. Compliance in the robot joints prevents accurate measurements of the camera pose, which influences the detected line poses. Nevertheless the mean control error in both degrees of freedom (dof) falls below one millimeter (Fig. 7b and Fig. 7c). The reached path accuracy equals thus the complex method of (Lange & Hirzinger, 2003). As a second experiment the robot has to follow, as well at 0.7 m/s, a light cable which lies on the ground (see Fig. 1a and Fig. 7a). This demonstrates that, in spite of the structured floor, there is no artificial background required a Following a cable as in Figure 1a b Following a tube in space as in Figure 1b (solid = horizontal, dashed = vertical) c Following a planar tube as in Figure 1c Figure 7. Sensor induced path correction and control error (note the different scales) Spatial Vision-Based Control of High-Speed Robot Arms 707 Path corrections are horizontal only, and computed by different methods. Be- cause of bigger deviations from the reference path, path errors (see Table 2) are somewhat bigger than in the previous experiment. This is caused by approxi- mation errors between the polynomials and the real shape of the line. Besides, exposure instant uncertainties will cause additional errors. The errors of the method of this chapter are listed in the right-hand column. They are compared, first, with a method which, using the same control archi- tecture, works without the predictive interface of the position controller, and therefore without feed-forward control. So with this method in the inner con- trol loop, only the standard feedback controller is used. In contrast, the compu-tation of the desired path is unchanged. Depending on the shape of the line, only a small increase of the path errors appears with this setup. This is because although the position control is not predictive, the vision system still uses the upper and lower regions of the image, thus allowing predictions of the desired path. Control without use of sensor databy visual servoingwith position controllerwith position controller with PD controller without feed-forwardwith feed-forward without predictionwith predictionwith prediction Mean pixel error - 35 pixel 1.9 pixel 1.3 pixel Max. pixel error - 63 pixel 4.7 pixel 3.6 pixel Mean path error 95 mm 9.7 mm 0.8 mm 0.6 mm Max. path error 157 mm 19.9 mm 2.4 mm 1.5 mm Table 2. Path error when following a cable using different methods A further alternative is a classical visual servoing algorithm which only evalu- ates the location of the line in the center of the image, i.e. without any predic- tion. Control is implemented using a coarsely optimized PD algorithm for the Cartesian signal in x direction of the reference system. This controller ignores the camera positions. () ( 1 ) () ( () ( 1 ) )rr cx cx rr r Px D x xxk xk K ek K ek ek=− +⋅ + ⋅ − − (21) Because of the tilted mounted camera (see Fig. 1d), a control error of 00 01 02 23 20 21 22()aaa rr a ccc xn c aaa cccezξη ξη⋅+ ⋅+=− ⋅⋅+ ⋅+TTTTTTT03()ar cn x +−T (22) 708 Industrial Robotics: Theory, Modelling and Control is evaluated. a cijT are the elements of the (constant) transformation matrix be- tween tcp and camera. In this experiment the performance is poor, and with- out limitation 2 the robot would leave the allowed range of accelerations. For the non continuous layout of the sheets in Fig. 4 we restrict on the modi- fied method of section 5.2 because this method outperforms the other one, ex- cept for special cases, as in (Lange et al., 2006), where both methods are appli- cable. This time the programmed path is a straight line in y-direction, executed back and forth at 0.7 m/s and with 0r=s . In contrast to the previous experiments, with 600 mm the distance between the camera and the edge is about twice as much as before. This reduces the positional resolution but it enlarges the visible region to about in= 25 sampling steps of the controller which is sufficient with 15dn=. Such an extension is useful to fulfil in»dn. The results are displayed in Fig. 8, on the left hand side with respect to the ref- erence path and on the right hand side with respect to the sensed edge. With explicit image-based control (Fig. 8a) or small D as in Fig. 8b we result in high accelerations at the vertices in the sheets. On the other side, the edges are tracked as closely as possible. This desired path is accurately executed by the ideal position controlled robot besides a couple of time-steps in which the ac- celeration limits of the robot are reached. Nevertheless a mean tracking error of about 1 mm is reached. By specifying 2 0 001s M=. and 00 6sD=. we define a desired trajectory that leaves the edges but that shows smooth transitions (see Fig. 5). Bigger imped- ance parameters, as in Fig. 8d are not recommended since then in limits the smoothing. Note that the vertex which is halfway on the left hand side dia- grams of Fig. 8 is not smoothed because this is the point of reversing. Videos of the reported and additional experiments can be found in (Lange, 2006). 2For convenience, accelerations exceeding the limitations are scaled to the feasible values.Spatial Vision-Based Control of High-Speed Robot Arms 709 a Explicit sensor-based control yielding a mean distance to the edge of 1.2 mm b Impedance-based sensor-based control with D= 0.02 s and M= 0.001 s2 yielding a mean distance to the edge of 1.7 mm c Impedance-based sensor-based control with D= 0.06 s and M= 0.001 s2 yielding a mean distance to the edge of 5 mm d Impedance-based sensor-based control with D= 0.2 s and M= 0.001 s2 yielding a mean distance to the edge of 23 mm Figure 8. Plots of r dx (left) and o dx (right) when tracking the sensed edge (red), back and forth, using camera-based impedance control. Desired (black) and actual (dashed green) path are almost identical, besides the experiment without smoothing. 710 Industrial Robotics: Theory, Modelling and Control Conclusion The article shows that vision systems are also applicable for tracking tasks with high robot speed. Even accurate control of the robot is possible. The cru- cial fact is the predictive image evaluation, maybe in combination with an adaptive positional feed-forward control. The results are reached by means of a cost effective method for which addi-tional hardware is limited to standard components. In order to guarantee low costs, image processing, computation of the desired path and dynamical con- trol are executed using only the standard processor of an industrial robot con- troller, in our case the KUKA KRC1. For non continuous or non contiguous paths we propose smoothing similar to impedance control. Then a reduction of the standards of position accuracy is tolerated for specified components. The user has to specify parameters in order to find a compromise between a smooth trajectory and minimum path devia- tions with respect to the sensed edges. The modified impedance-based method effects that the robot follows the sensed edge as accurate as possible, except for vertices or discontinuities where the path is smoothed. Among the two shown methods the latter it is favourable if a predictive sensor is used. The methods are demonstrated in tasks where the location and the shape of planar or spatial lines are used to modify the robot path during motion. For continuous lines the mean resulting path error is below 1 mm, whereas for lines with vertices, exact tracking is not executable with a robot. Then the amount of smoothing determines the deviation from the lines. Future work will improve the measurements of the camera pose e.g. using an observer, thus avoiding oscillations caused by joint elasticity. Acknowledgements This work has been partially supported by the Bayerische Forschungsstiftung. Spatial Vision-Based Control of High-Speed Robot Arms 711 References CalLab.http://www.robotic.dlr.de/VISION/Projects/Calibration/CalLab.ht ml, 1999. Clarke, D. W. , C. Mohtadi, and P. S. Tuff. Generalized predictive control - part I. the basic algorithm. Automatica , 23(2):137–148, 1987. Gangloff, J. A. and M. F. de Mathelin. Visual servoing of a 6-dof manipulator for unknown 3-d profile following. IEEE Trans. on Robotics and Automa- tion, 18(4):511–520, August 2002. Ginhoux, R. et al. Beating heart tracking in robotic surgery using 500 Hz vis- ual servoing, model predictive control and an adaptive observer. In Proc. 2004 IEEE Int. Conf. on Robotics and Automation (ICRA) , pages 274–279, New Orleans, LA, April 2004. Comport, A. I., D. Kragic, E. Marchand, and F. Chaumette. Robust real-time visual tracking: Comparison, theoretical analysis and performance evaluation. In Proc. 2005 IEEE Int. Conf. on Robotics and Automation (ICRA) , pages 2852–2857, Barcelona, Spain, April 2005. Grotjahn, M. and B. Heimann. Model-based feedforward control in industrial robotics. The International Journal on Robotics Research , 21(1):45–60, January Lange, F. and G. Hirzinger. Learning of a controller for non-recurring fast movements. Advanced Robotics , 10(2):229–244, April 1996. Lange, F. and G. Hirzinger. Is vision the appropriate sensor for cost oriented automation? In R. Bernhardt and H.-H. Erbe, editors, Cost Oriented Auto- mation (Low Cost Automation 2001) , Berlin, Germany, October 2001. Pub- lished in IFAC Proceedings, Elsevier Science, 2002. Lange, F. and G. Hirzinger. Predictive visual tracking of lines by industrial ro- bots. The International Journal on Robotics Research , 22(10-11):889–903, Oct- Nov 2003. Lange, F. and G. Hirzinger. Calibration and synchronization of a robot- mounted camera for fast sensor-based robot motion. In Proc. 2005 IEEE Int. Conf. on Robotics and Automation (ICRA) , pages 3911–3916, Barcelona, Spain, April 2005. Lange, F.. Video clips. http://www.robotic.de/?id=43., 2006. Lange, F., M. Frommberger, and G. Hirzinger. Is impedance-based control suitable for trajectory smoothing? In Preprints 8th IFAC Symposium on Ro- bot Control (SYROCO 2006) , Bologna, Italy, Sept. 2006. Meta-Scout GmbH. SCOUT joint tracking system. http://www.scout- sensor.com/index-engl.html. Nakabo, Y., T. Mukai, N. Fujikawa, Y. Takeuchi, and N. Ohnishi. Cooperative object tracking by high-speed binocular head. In Proc. 2005 IEEE Int. Conf. on Robotics and Automation (ICRA) , pages 1585–1590, Barcelona, Spain, April 2005.712 Industrial Robotics: Theory, Modelling and Control Pertin, F. and J.-M. Bonnet des Tuves. Real time robot controller abstraction layer. In Proc. Int. Symposium on Robots (ISR) , Paris, France, March 2004. Rives, P. and J.-J. Borrelly. Real-time image processing for image-based visual servoing. In M. Vincze and G. D. Hager, editors, Robust vision for vision- based control of motion , pages 99–107. IEEE Press, 2000. Tahri, O. and F. Chaumette. Complex objects pose estimation based on image moments invariants. In Proc. 2005 IEEE Int. Conf. on Robotics and Automa- tion (ICRA) , pages 438–443, Barcelona, Spain, April 2005. Zhang, J., R. Lumia, J. Wood, and G. Starr. Delay dependent stability-limits in high performance real-time visual servoing systems. In Proc. IEEE/RSJ Int. Conference on Intelligent Robots and Systems , pages 485–491, Las Vegas, Nevada, Oct. 2003.71326 Visual Control System for Robotic Welding De Xu, Min Tan and Yuan Li Introduction In general, the teaching by showing or offline programming is used for path planning and motion programming for the manipulators. The actions preset are merely repeated in the working process. If the states of work piece varied, the manufacture quality would be influenced too intensely to satisfy the de- mand of production. In addition, the teaching by showing or offline program- ming costs much time, especially in the situations that much manufacture va- riety with little amount. The introduction of visual measurement in robot manufacture system could eliminate the teaching time and ensure the quality even if the state of the work piece were changed. Obviously, visual control can make the robot manufacture system have higher efficiency and better results (Bolmsjo et al., 2002; Wilson, 2002).There are many aspects concerned with the visual control for robotic welding such as vision sensor, image processing, and visual control method.As a kind of contactless seam detecting sensors, struc- tured light vision sensor plays an important role in welding seam tracking. It has two categories. One uses structured light to form a stripe, and the other uses laser scanning. Structured light vision is regarded as one of the most promising methods because of its simplicity, higher accuracy and good per- formance in real-time (Wu & Chen, 2000). Many researchers pay their attention to it (Bakos et al., 1993; Zou et al., 1995; Haug & Pristrchow, 1998; Zhang & Djordjevich, 1999; Zhu & Qiang, 2000; Xu et al., 2004). For example, Bakos es- tablished a structured light measurement system, which measurement preci- sion is 0.1mm when the distance is 500 mm. Meta Company provides many kinds of laser structured light sensors. In general, the sensor should be cali- brated before putting into action. Camera calibration is an important classic topic, and a lot of literatures about it can be found (Faugeras & Toscani, 1986; Tsai, 1987; Ma, 1996; Zhang, 2000). But the procedure is complicated and tedi- ous, especially that of the laser plane’s calibration (Zhang & Djordjevich, 1999). Another problem in structured light vision is the difficulty of image process- ing. The structured light image of welding seam is greatly affected by strong arc light, smog and splash in the process of arc welding (Wu & Chen, 2000). Not only the image is rough, but also its background is noisy. These give rise 714 Industrial Robotics: Theory, Modelling and Control to difficulty, error and even failure of the processing of the welding seam im- age. Intelligent recognition algorithms, such as discussed in (Kim et al., 1996; Wu et al., 1996), can effectively eliminate some of the effects. However, besides intelligent recognition algorithm, it is an effective way for the improvement of recognition correctness to increase the performance of image processing. The visual control methods fall into three categories: position-based, image- based and hybrid method (Hager et al., 1996; Corke & Good, 1996; Chaumette & Malis, 2000). As early as 1994, Yoshimi and Allen gave a system to find and locate the object with “active uncalibrated visual servoing” (Yoshimi & Allen, 1994). Experimental results by Cervera et al. demonstrated that using pixel co-ordinates is disadvantageous, compared with 3D coordinates estimated from the same pixel data (Cervera et al., 2002). On the other hand, although posi- tion-based visual control method such as (Corke & Good, 1993; 1996) has bet- ter stableness, it has lower accuracy than former because the errors of kinemat- ics and camera have influence on its precision. Malis et al. proposed hybrid method that controls the translation in image space and rotation in Cartesian space. It has the advantages of two methods above (Malis et al., 1998; 1999; Chaumette & Malis, 2000). In this chapter, a calibration method for the laser plane is presented, which is easy to be realized and provides the possibility to run hand-eye system cali- bration automatically. Second, the image processing methods for the laser stripe of welding seam are investigated. Third, a novel hybrid visual servoing control method is proposed for robotic arc welding with a general six degrees of freedom robot.The rest of this chapter is arranged as follows. The principle of a structured light vision sensor is introduced in Section 2. And the robot frames are also assigned in this Section. In Section 3, the laser plane equation of a structured light visual sensor is deduced from a group of rotation, in which the position of the camera’s optical centre is kept unchangeable in the world frame. In Section 4, a method to extract feature points based on second order difference is proposed for type V welding seams. A main characteristic line is obtained using Hotelling transform and Hough transform. The feature points in the seam are found according to its second difference. To overcome the reflex problem, an improved method based on geometric centre is pre- sented for multi-pass welding seams in Section 5. The profiles of welding seam grooves are obtained according to the column intensity distribution of the laser stripe image. A gravity centre detection method is provided to extract feature points on the basis of conventional corner detection method. In Section 6, a new hybrid visual control method is concerned. It consists of a position control inner loop in Cartesian space and two outer loops. One outer loop is position- based visual control in Cartesian space for moving in the direction of the weld- ing seam, i.e. welding seam tracking; another is image-based visual control in image space for adjustment to eliminate the errors in tracking. Finally, this chapter is ended with conclusions in Section 7. Visual Control System for Robotic Welding 715 Structured light vision sensor and robot frame 2.1 Structured light vision sensor The principle of visual measurement with structured light is shown in Fig. 1. A lens shaped plano-convex cylinder is employed to convert a laser beam to a plane, in order to form a stripe on the welding works. A CCD camera with a light filter is used to capture the stripe. It is a narrow band filter to allow the light in a small range with the centre of laser light wavelength to pass through. It makes the laser stripe image be very clear against the dark background. A laser emitter, a plano-convex cylinder lens, and a camera with a light filter constitute a structured light vision sensor, which is mounted on the end- effector of an arc welding robot to form a hand-eye system. The camera out- puts a video signal, which is input to an image capture card installed in a computer. Then the signal is converted to image (Xu et al., 2004a). Figure 1. The principle of structured light vision sensor 2.2 Robot frame assignment Coordinates frames are established as shown in Fig. 2. Frame W represents the original coordinates, i.e. the world frame. Frame Ethe end-effector coordi- nates. Frame Rthe working reference coordinates. Frame C the camera coordi- nates. The camera frame C is established as follows. Its origin is assigned at the optical centre of the camera. Its z-axis is selected to the direction of the optical axis from the camera to the scene. Its x-axis is selected as horizontal direction of its imaging plane from left to right. wTr indicates the transformation from 716 Industrial Robotics: Theory, Modelling and Control frame W to R, i.e. the position and orientation of frame R expressed in frame W. And rTc is from frame R to C,wTe from frame W to E,eTc from frame E to C. Figure 2. The sketch figure of coordinates and transformation Laser plane calibration 3.1 Calibration method based on rotation Generally, the camera is with small view angle, and its intrinsic parameters can be described with pinhole model, as given in (1). Its extrinsic parameters can be given in (2). 0 00 0 10 0 11 1xc c c c yc c i n c cuk u x / z x / z vk v y/z M y/zª º ª º ªºªº « » « » «»«»==« » « » «»«» « » « » «»«»¬ ¼ ¬ ¼ ¬¼¬¼ (1) where [ u,v] are the coordinates of a point in an image, [ u0,v0] denote the im- age coordinates of the camera’s principal point, [ xc,yc,zc] are the coordinates of a point in the camera frame, Min is the intrinsic parameters matrix, and [k x, ky] are the magnification coefficients from the imaging plane coordinates to the image coordinates. In fact, [k x, ky] are formed with the focal length and the magnification factor from the image size in mm to the imaging coordinates in pixels.Visual Control System for Robotic Welding 717 »»»» ¼º «««« ¬ª = »»»» ¼º «««« ¬ª »» ¼º «« ¬ª =»» ¼º «« ¬ª 1 1www wc www z z z zy y y yx x x x ccc zyx Mzyx p a onp a onp a on zyx (2) where [ xw,yw,zw] are the coordinates of a point in the object frame, and cMw is the extrinsic parameter matrix of the camera, i.e. the transformation from the camera frame C to the world frame W. In cMw,[]T z y x n n nn=K is the direction vector of the x-axis, []T z y x o o oo=K i s t h a t o f t h e y-axis, []T z y x a a aa=K is that of the z-axis for the frame W expressed in the frame C, and []T z y x p p p p=K is the position vector. Camera calibration is not a big problem today. But laser plane calibration is still difficult. Therefore, the calibration of structured light vision sensor is fo- cused on laser plane except camera. In the following discussion (Xu & Tan, 2004), the parameters of a camera are supposed to be well calibrated in ad- vance. Assume the equation of the laser light plane in frame C is as follows 01=++ + cz by ax (3) where a,b,c are the parameters of the laser light plane. An arbitrary point P in laser stripe must be in the line formed by the lens cen- tre and the imaging point [ xc1,yc1, 1]. Formula (4) shows the equation of the line in frame C. [] [ ] t y x zyxT c cT11 1= (4) where xc1=xc/zc,yc1=yc/zc,t is an intermediate variable. On the other hand, the imaging point [ xc1,yc1, 1]T can be calculated from (1) as follows. [] [ ]T inT c c vu M y x 1 11 1 1−= (5) From (3) and (4), the coordinates of point P in frame C can be expressed as the functions of parameter a,b, and c, given in (6). Further more, its coordinates [xw,yw,zw] in frame W can be had as given in (7). 718 Industrial Robotics: Theory, Modelling and Control 111 111 11 1ccc ccc ccxx / ( a x b y c ) yy / ( a x b y c ) z / ( a xb yc )=− + +­ °=− + +® °=− + +¯ (6) [] [ ]T ce ew T w w w zyxTT z y x 1 1= (7) Let »¼º «¬ª= »»»» ¼º «««« ¬ª =1000 1 0 0 0paon p a onp a onp a on TT z z z zy y y yx x x x ce ewKKKK (8) then (9) is deduced from (7) and (8). °¯°®­ + + + =+ + + =+ + + = z z z z wy y y y wx x x x w pzayoxn zpzayoxn ypzayoxn x (9) If the surface of work piece is a plane, the points in the laser stripe will satisfy its plane equation (10). 01=+ + +w w w Cz By Ax (10) in which A,B and C are the parameters of the work piece plane in frame W. Submitting (9) to (10), then xx x yy y zz z x y zA( n x o y a z ) B( n x o y a z ) C( n x o y a z ) Ap Bp Cp 1 0++ + ++ + ++ + + + + = (11) LetD=Apx+Bpy+Cpz+1. It is sure that the lens centre of the camera, [ px,py, pz], is not on the plane of work piece. Therefore the condition D≠0 is satisfied. Equa- tion (11) is rewritten as (12) via divided by D and applying (6) to it (Xu & Tan, 2004). 1 x c1 x c1 x 1 y c1 y c1 y 1 z c1 z c1 z c1 c1A(n x o y a ) B(n x o y a ) C ( n x o y a ) ax by c 0++ + ++ ++ + − − − = (12) here A1=A/D,B1=B/D,C1=C/D.Visual Control System for Robotic Welding 719 If the optical axis of the camera is not parallel to the plane of the laser light, then c≠0 is satisfied. In fact, the camera must be fixed in some direction except that parallel to the plane of the laser light in order to capture the laser stripe. Dividing (12) by c, then 2 x c1 x c1 x 2 y c1 y c1 y 2z c 1 z c 1 z 1 c 1 1 c 1A(n x o y a ) B (n x o y a ) C( nx oy a ) ax by 1++ + ++ ++ + − − = (13) where A2=A1/c,B2=B1/c,C2=C1/c,a1=a/c,b1=b/c. In the condition that the point of the lens centre [ px,py, pz] is kept unchangeable in frame O, a series of laser stripes in different directions are formed with the pose change of the vision sensor. Any point in each laser stripe on the same plane of a work piece satisfies (13). Notice the linear correlation, only two points can be selected from each stripe to submit to formula (13). They would form a group of linear equations, whose number is as two times as that of stripes. If the number of equations is greater than 5, they can be solved with least mean square method to get parameters such as A 2,B2,C2,a1,b1. Now the task of laser calibration is to find the parameter c. The procedure is very simple. It is well known that the distance between two points Pi and Pj on the stripe is as follows 2 2 2 2 2 2) () () (z y x wj wi wj wi wj wi d d d z z y y x x d + + = − + − + − = (14) in which, [ xwi,ywi,zwi] and [ xwj,ywj,zwj] are the coordinates of point Pi and Pj in the world frame; dx,dy,dz are coordinates decomposition values of distance d. Submitting (6) and (9) to (14), then c1 j c1i xx 1 c 1j 1 c 1j 1 c 1 i 1 c 1 i c1 j c1i x 1c 1 j 1c 1 j 1c 1 i 1c 1 i x x1 1c 1 j 1c 1 j 1c 1 i 1c 1 ix x 1d[ n ( )c a xb y1 a x b y 1 y yo( )a x b y 1 a xb y1 11 1a( ) ] dax by 1 ax by 1 c=−++ + + +−++ + + +− =++ + + (15) In the same way, dy and dz are deduced. Then ddc dcd d dcdz y x1 12 12 12 11 1±= ±= + + ±= (16) 720 Industrial Robotics: Theory, Modelling and Control where d1 is the calculated distance between two points on the stripe with pa- rameters a1 and b1, and d is the measured distance with ruler. Then parameters a and b can be directly calculated from c as formula (17). Ap- plying a,b, and c to (6), the sign of parameter c could be determined with the constraint z>0. ¯®­ == cbbcaa 11 (17) 3.2 Experiment and results The camera in the vision sensor was well calibrated in advance. Its intrinsic parameters Min and extrinsic ones eTc were given as follows. »»» ¼º ««« ¬ª = 1 0 02.3121. 2619 04.408 0 2620.5 inM , »»»» ¼º «««« ¬ª − −− − −− − − = 1 0 0 035.3765 1115.0 0048.0 9938.089.9243 0.6583 7495.0 0702.051.9160 0.7444 6620.0 0867.0 ceT . in which the image size is 768 ×576 pixels. 3.2.1 Laser Plane Calibration A structured light vision sensor was mounted on the end-effector of an arc welding robot to form a hand-eye system. The laser stripe was projected to a plane approximately parallel to the XOY plane in frame W. The poses of the vision sensor were changed through the end-effector of the robot for seven times. And the lens centre point [ px,py, pz] was kept unchangeable in frame W in this procedure. So there were seven stripes in different directions. Any two points were selected from each stripe to submit to (13). Fourteen linear equa- tions were formed. Then the parameters such as A2,B2,C2,a1,b1 could be ob- tained from them. It was easy to calculate the length d1 of one stripe with a1 and b1, and to measure its actual length d with a ruler. In fact, any two points on a laser stripe satisfy (14)-(16) whether the laser stripe is on a plane or not. To improve the precision of manual measure, a block with known height was employed to form a laser stripe with apparent break points, as seen in Fig. 3. The length d1 was computed from the two break points. Then parameters of the laser plane equation were directly calculated with (13)-(17). The results are as follows. Visual Control System for Robotic Welding 721 Figure 3. A laser stripe formed with a block d=23mm, d1=0.1725, a=-9.2901 ×10-4,b=2.4430 ×10-2,c=-7.5021 ×10-3. So the laser plane equation in frame C is: -9.2901 ×10-4x+2.4430 ×10-2y-7.5021 ×10-3z+1=0. 3.2.2 The verification of the hand-eye system A welding seam of type V was measured by use of the structured light vision sensor to verify the hand-eye system. The measurements were conducted 15 times along the seam. Three points were selected from the laser stripe for each time, which were two edge points and a bottom one. Their coordinates in frame W were computed via the method proposed above. The results were shown in Table 1. Table 1. The measurement results of a welding seam of type V Row 1 was the sequence number of measurement points. Row 2 was one of outside edges of the seam. Row 4 was another. Row 3 was its bottom edge. All data were with unit mm in the world frame. The measurement errors were in the range ±0.2mm. The measurement results are also shown in the world frame and XOY plane in Fig. 4 respectively. Fig. 4 is the data graph shown in 3D space, and Fig. 4 on XOY plane in frame W. It can be seen that the results were well coincided with the edge lines of the seam (Xu & Tan, 2004). Feature points 722 Industrial Robotics: Theory, Modelling and Control (a) 3D space (b) XOY plane Figure 4. The data graph of vision measurement results of a type V welding seam Visual Control System for Robotic Welding 723 Feature extraction based on second order difference 4.1 Image pre-processing The gray image of laser stripe is captured via a camera with light filter. Gener- ally, its size is large. For example, it could be as large as 576 ×768 pixels. There- fore, simple and efficient image pre-processing is essential to improve visual control performance in real time. The image pre-processing includes image segmentation, image enhancement and binarization (Xu et al., 2004a; 2004b). 4.1.1 Image segmentation First, the background gray value of the image is counted. Along its horizontal and perpendicular direction, lines with constant space are drawn. Gray values of all pixels on the lines are added, and its average value is taken as the gray value of background. It is given in (18). °¯°®­ = =¸¸ ¹· ¨¨ ©§++= ¦¦ ¦¦ == == )/ Int(n ), n/ Int(nnjiI jiInnnnB w hn in jn in j h wwh 10 10),10( )10,(1 2 111 11 2 112 (18) where nw and nh are the image width and height respectively, n1 is the number of horizontal lines, n2 is the number of vertical lines, and I(x,y) is the gray value of the pixel in coordinates ( x,y). Usually, laser stripe has higher brightness than the background. Along the lines drawn above, all pixels with gray value greater than B+T1 are recorded. The target area on the image is confirmed according to the maximum and the minimum coordinates of pixels recorded along the horizontal and perpendicu- lar direction respectively. {} {} {} {} °° ¯°° ®­ = = ≤≤ ≤≤>− >− =>− >− =>− >− =>− >− = )10/( ),10/( , 1, 1),10(or )10,(:),10(or )10,(:),10(or )10,(:),10(or )10,(: 1 11 1 1 1 21 1 1 1 11 1 1 1 21 1 1 1 1 j INTj i INTinj niTBjiI TBjiIj Max YTBjiI TBjiIj MinYTBjiI TBjiIi Max XTBjiI TBjiIi Min X h w (19) where T1is the gray threshold. The target area consists of X1,X2,Y1and Y2. The structured light image is suffered from arc light, splash, and acutely changed background brightness during welding. As known, the intensity of the arc light and splash changes rapidly, but the laser intensity keeps stable. According to this fact, the effect of arc light and splash can be partly elimi- nated via taking the least gray value between sequent images as the new gray 724 Industrial Robotics: Theory, Modelling and Control value of the image. {} ),( ),,( ),(1jiIjiI MinjiIk k − = (20) where Ik is the image captured at k-th times, and Ik-1 is k-1-th. X1≤i≤X2,Y1≤j≤Y2. 4.1.2 Image enhancement and binarization The target area is divided into several parts, and its gray values are divided into 25 levels. For every part, the appearance frequency of every gray level is calculated, as given in (21). °° ¯°° ®­ ¯®­ = ===¦¦ == othersjiIInth iIntkhkPhkP hkFX XiY Yj 0)10/),(( ),5/( 1),(),( ),(2 12 1 (21) Taking into account the different contrast between the laser stripe and back- ground, the gray value with higher level, whose appearance reaches specified frequency, is regarded as the image enhancement threshold T2(k). ¦ => ∨ > =K hS KkF S hkF iffK kT 252 1 2 ) ),(() ),( (,10)( (22) where S1 is the specified sum of the frequency with the higher gray level, S2 is the specified frequency with higher level in one child area, and K is the gray level, 1 ≤K≤25. (a) (b) (c) (d) (e) (f) (g) (h) Figure 5. The primary image, frequency distribution map and object segmentation Visual Control System for Robotic Welding 725 According to the threshold of every child area, high-pass filter and image en- hancement are applied to the target area, followed by Gauss filter and binary thresholding. Fig. 5 is the result of image segmentation of a welding seam. In detail, Fig. 5(a) is the original image with inverse colour, Fig. 5(b) shows its distribution of gray frequency, Fig. 5(c) is the image of the strengthened target area, and Fig. 5(d) is the binary image. Fig. 5(e) and Fig. 5(f) are two frames of original images with inverse colour in sequence during welding, and Fig. 5(g) is the processing result via taking the least gray value in the target area with (20). Fig. 5(h) is its binary image. It can be seen that the binary images of weld- ing seams, obtained after image pre-processing with the proposed method, are satisfactory. 4.2 Features extraction Because the turning points of the laser stripe are the brim points of the weld- ing seam, they are selected as the feature points. To adjust the pose of the weld torch easily, some points on the weld plane are required. Therefore, the goal of features extraction is to search such turning points and weld plane points from the binary image. To thin the binary image of welding seam, the average location between the upper edge and the lower one, which is detected from the binary image, is re- garded as the middle line of laser stripe. Fig. 6(a) shows the upper, lower edge, and middle line of the laser stripe. Because of the roughness of the binary laser stripe, the middle line curve has noise with high frequency, seen in the bottom of Fig. 6(b). (a) (b) (c) (d) Figure 6. The procedure of features extraction The middle line stored in an array with two dimensions is transformed via Ho- telling transformation, to make its feature direction same as the x-axis. Hotel- ling transformation is shortly described as follows. 726 Industrial Robotics: Theory, Modelling and Control First, the position vector of the average of all points on the middle line is com- puted. ¦ ==N id d imNm 1)(1 (23) where N is the point number on the middle line, and dm is the position vector of the average, []T d d d m m m )2( )1( = . )1,(imd is the coordinate x of the i-th point, and )2,(imd is the coordinate y. Second, the position vector of each point on the middle line after Hotelling transformation is calculated. T d dN iT d d d mm imimNC − =¦ =1)()(1 (24) ] )([ )(d d dh mimVim − = (25) where []T dh dh dh im im im )2,( )1,( )(= is the position vector of the i-th point on the middle line after Hotelling transformation. V is the eigenvector matrix of Cd, whose first row has large eigenvalue. To clear up the effect of high frequency noise, the middle line after Hotelling transformation should be filtered. In the condition to keep the x-coordinate in- variable, y-coordinate is filtered using Takagi-Sugeno fuzzy algorithm, given by equation (26) and (27). ¦ ¦ −= −=− =5 55 5)( )]()2, ( [)2,(~ h hdh dh h h hkm km μ μ (26) where )2,(~kmdh is the y-coordinate of the k-th point on the filtered middle line. μ(h) is the membership function. °¯°®­ >≤< −≤≤− = 5 05 33/ 23 3 1 )( hh hh hμ (27) A line gained by Hough transform, which is the closest to the x-axis direction converted by Hotelling transformation, is viewed as the main line. Locations of points on the middle line are mapped into the parameter space A(p,q) of the line function, shown in (28), and the ( p,q) with the maximum value of A is the Visual Control System for Robotic Welding 727 parameter of the main line. All points on the middle line satisfied with the main line function are feature points of the weld plane. °° ¯°° ®­ ¯®­ + −===¦¦ == otherskm kmp qqpBqpB qpA dh dhM kpMax pMinp 0)2,(~)1,(~1),(),( ),( 1 (28) The main line is rotated an angle in order to make it parallel to the x-axis direc- tion. )(~ cos sinsin cos)(~)(1 im imVimdh dh dr »¼º «¬ª −= =θ θθ θ (29) where θ=atan( p) is the inclination angle between the main line and x-axis, mdr(i) is the position vector of the i-th point on the rotated middle line, V1 is a rotation matrix formed with cos θ and sin θ. The point with the maximum of the local second derivative is the turning point of the middle line. After reverse transform as given in (30), the position of the welding seam feature point in the original image is obtained. d drm dm mi mVVi m + =− −)( )(1 11 (30) where mdrm(i) is the position vector of the i-th turning point on the middle line, and mdm(i) is the turning point position in the original image. The curve at the top of Fig. 6(b) shows the middle line after filtered and trans- formed. The second derivative of the middle line is seen in Fig. 6(c). Two fea-ture points of the welding seam on the original image can be read from Fig. 6(d). Feature extraction based on geometric centre 5.1 Algorithms for profiles extraction Fig. 7 shows two frames of laser images of a welding seam of type V groove, in which Fig. 7(a) is an original image before welding, and Fig. 7(b) is an image with reflection of laser on the surface of the welding seam after root pass weld- ing. It can be found that the two images are different in a very large degree. So they should be dealt with different strategies. The method proposed in Section 4 is difficult to deal with the image as given in Fig. 7(b). However, the two im-728 Industrial Robotics: Theory, Modelling and Control ages have a common property, that is, the area of the welding seam is just part of the image. So the welding seam area should be detected to reduce the com- putation cost (Li et al., 2005). Figure 7. Images of welding seams before and after root pass welding 5.1.1 Welding seam area detection In order to reduce the computational time required in image processing, only the image of welding seam area is processed. However, some disturbances such as reflection shown in Fig. 7(b) will be segmented in the object area with the method in Section 4, which increases the difficulty of features extraction later. Here, an intensity distribution method is presented to detect the object area. The laser stripes shown in Fig. 7, captured by another visual sensor, are horizontal; their range in column is almost from the first to end. So only the range in row needs to be detected. It can be determined by calculating the dis- tribution of intensity of pixels in row. Apparently, the main peak of intensity is nearby to the position of the main vector of laser stripe. So the range of seams inY-axis direction of the image plane can be detected reliably with (31). ¯®­ − =+ + = }0 {} { 12 ,m Y MaxY, nm h Y Min Y w ph w w p (31) where Yp is the Y-coordinate of main vector; hw is the height of welding groove; and mw is the margin remained. The target area consists of 0 ,nw,Y1 and Y2. 5.1.2 Column based processing Column based profiles extraction calculates the distribution of pixels’ intensity with columns to get the points of profile. Some algorithms such as multi-peak method and centre of gravity (Haug & Pristrchow, 1998), gradient detection and average of upper edges and the lower edges in Section 4 are all effective (a) (b) Visual Control System for Robotic Welding 729 for the task. In order to get high quality pro files of seams, a method that com- bines smoothing filter, maximum detection and neighbourhood criteria is pro- posed. (a) (b) Figure 8. Intensity extraction of four columns Firstly, a low pass filter is designed to smooth the intensity curve of column i. Usually, the pixels of profiles are in the area of main peak, and the peaks caused by disturbances are lower or thinner. After smoothing the intensity curve, the plateau is smoothed with one maximum in main peak, and the lower or thinner peaks are smoothed into hypo-peaks. Fig. 8 gives an example of intensity distribution of column 300, 350, 400, 450 of a welding seam image. Fig. 8(a) shows the original image and the positions of four example columns. Fig. 8(b) shows their intensity distribution. 730 Industrial Robotics: Theory, Modelling and Control Then according to the analysis of the image gray frequency, the self-adaptive thresholds of the images are calculated. Only the pixels whose intensity ex- ceeds the thresholds are regards as valid. Thus the intensity curve is frag- mented to several peaks. By calculating the area of peaks, the main peak can be gotten. In this way, there is only one point with maximum intensity remained on the main peak in the intensity distribution curve. In other words, one point on the profile for each column is detected. Thus an array of points indexed with col- umn is extracted through intensity distribution from the welding image. In order to extract points of profile more properly, the criterion of neighbour is applied. Since the profiles of grooves should be a continuous curve, the points that are apparently inconsistent to neighbour points should be rejected. When the pixels whose intensity value exceeds the thresholds cannot be found, there will be no record in the array for this column. In these situations, the data in the array will be not continuous. Then the linear interpolation algorithm is used to fill up the curve between broken points, and the discrete points array is transferred to continuous profile curve. 5.2 Features extraction for seam tracking In order to extract features of profiles for seam tracking, the first task is to se- lect features. Usually the corner points of profiles are brim points of the weld- ing groove, and they are often selected as features of welding seams in single pass welding (Kim et al., 1996; Wu et al., 1996). The corner detection method is only valid for images of single pass welding. But in multi-pass welding, there is distortion caused by weld bead in the bottom of groove. There are welding slag remained on the surface of welding work piece sometimes. As shown in Fig. 7(b), it is hard to judge the proper corner points by the second derivative because of the distortion. So the features extraction with corner point’s detect- ion is not reliable in this case. The centre of gravity of groove area is selected as features because of its good stabilization relative to corner points. Fig. 9(a) shows a profile of groove extracted with the method in Section 5.1 from a welding seam after welding root pass. Firstly, the profile is smoothed by a Hanning filter to eliminate high frequency noise, as shown in Fig. 9(b). In order to get the figure of groove area, the main vector of the profile is required. It can be extracted by Hough transform as described in Section 4. Because the main vector is the asymptote of the profile, the main vector and the profile can form a trapeziform figure approximately. In the first step, the bottom of groove area is detected by template matching. Then from the bottom of groove, the points on the profile are searched forward and backward re- spectively.Visual Control System for Robotic Welding 731 Figure 9. Profiles of the groove after root pass The two borders (b1, b2) of the figure are gotten when the distances between the points on the profile and the main vector are less than the thresholds (5 pixels here). The trapeziform figure is defined with the border points, as shown in Fig. 10. Finally, the gravity centre of the figure is extracted as fea- tures by (32). A perpendicular to the main vector is drawn through the gravity centre. The intersection is taken as the feature point of the welding seam. () ()[] () ()[] () ()[] () ()[]°° ¯°° ®­ − − =− − = ¦ ¦¦ ¦ = == = 2 12 12 22 12 1 5.0b biv pb biv p vb biv pb biv p u iyiy iy iy Fiyiy iyiyi F (32) where Fu,Fv are the coordinates of geometric centre; yp and yv are Y- coordinates of points on the profile and the main vector. 0 100 200 300 400 500 600200250300350400 Main vector Profile of grooveborder points trapeziform figure Figure 10. Main vector and border points on the groove profile (a) (b)0 100 200 300 400 500 600200250300350400Profile after low pass filter 0 100 200 300 400 500 600200250300350400Profile of groove 732 Industrial Robotics: Theory, Modelling and Control Hybrid visual control method for robotic welding 6.1 Jacobian matrix from the image space to the Cartesian space of the end- effector From (3) and (4), formula (33) is deduced (Xu et al., 2004b; 2005). []»» ¼º «« ¬ª ¸¸¸ ¹· ¨¨¨ ©§ »» ¼º «« ¬ª −=»» ¼º «« ¬ª− 1 1111 11 cc cc ccc yx yx cba zyx (33) Further more, the coordinates of a point P in Cartesian space are obtained as (34) in the end-effector frame. »»»» ¼º «««« ¬ª »¼º «¬ª= »»»» ¼º «««« ¬ª »»»» ¼º «««« ¬ª = »»»» ¼º «««« ¬ª = »»»» ¼º «««« ¬ª 11 0 1 1 0 0 0 1 1ccc ce ce ccc zce zce zce zceyce yce yce ycexce xce xce xce ccc ce eee zyx p R zyx p o n mp o n mp o n m zyx Mzyx (34) in which, eMc is the extrinsic parameter matrix of the camera relative to the end-effector of the robot. eRc is the rotation translation matrix, and epc is the position vector. The time derivative of (34) is as follows. »» ¼º «« ¬ª =»» ¼º «« ¬ª  »»»» ¼º «««« ¬ª »¼º «¬ª= »»»» ¼º «««« ¬ª ccc ce eee ccc ce ce eee zyx R zyx zyx p R zyx     01 0 0 (35) Submitting (5) into (33) and applying time derivative, then (Xu et al., 2005) 00 00 2 00 00 20 10 00 1cx y x x y cx y x y y cx y xy x xy xy xy yx b (v v )/(k k ) c / k b (u u )/(k k ) u y a(v v ) /(k k ) a(u u ) /(k k ) c / k vDza / k b / k b( v v ) /( k k ) c / k b(u u ) /( k k ) a (v v )/ (k k ) a ( u u )/ (k k ) c/kDaªº−− − − ªº ª º «» «» « »=− − − −«» «» « » «» «» « »¬¼ ¬ ¼ ¬¼ −− − − =− − − −   c xyuuJ(u,v)vv/k b/kªº ªºª º «»=«»« » «»¬¼¬ ¼«»¬¼  (36)Visual Control System for Robotic Welding 733 in which, ),(vuJc is the Jacobian matrix from image space to Cartesian space in the camera frame C.00 xy Da ( u u ) / k b ( vv ) / k c=− +− + , is a constraint of the laser plane. Submitting (36) to (35), the Jacobian matrix from image space to Cartesian space in the end-effector frame E is obtained, as given in (37). »¼º «¬ª=»» ¼º «« ¬ª vuvuJ zyx eee   ),(»¼º «¬ª=»» ¼º «« ¬ª dvduvuJ dzdydx eee ),( (37) where symbol d represents derivative. Formula (38) gives the Jacobian matrix from image space to Cartesian space in the end-effector frame, which describes the relation of the differential move- ments between a feature point on image plane and the end-effector. The pa- rameters in (38), such as [ kx, ky], [u0,v0],eRc,a,b and c, can be achieved through camera and laser plane calibration. 00 00 21xy x xy ee cc c x y xyy xyb( v v ) /( k k ) c / k b(u u ) /( k k ) J(u,v) R J (u,v) R a(v v ) /(k k ) a(u u ) /(k k ) c / kDa/k b/kªº−− − − «»== − − − −«» «»¬¼ (38) 6.2 Hybrid visual servoing control 6.2.1 The model of hybrid visual servoing control for robotic arc welding The scheme of hybrid visual servoing control method proposed in this chapter for robotic arc welding consists of four main parts, such as the control of mov- ing along welding seam, the control of tracking adjusting, the position control of the robot, and the image feature extraction. The block diagram is shown in Fig. 11. Position-based visual control in Cartesian space is employed in the process of moving along the welding seam. From the image of the structured light stripe at i-th sampling, the image coordinates ui' and vi' for feature point Pi on the stripe can be extracted. Then [ xei,yei,zei], the coordinates of point Pi in the end-effector frame, can be computed with (5), (33) and (34). In addition, the coordinates of point Pi-1 in the current end-effector frame, [ xei-1,yei-1,zei-1], can be obtained through transformation according to the movement Ʀi of the end- effector at last times. Then the direction of welding seam is determined with [xei-1,yei-1,zei-1] and [ xei,yei,zei]. For reducing the influence of random ingredi- ents, the coordinates of n+1 points Pi-n-Pi in the end-effector frame can be used to calculate the direction of the welding seam through fitting. The direction 734 Industrial Robotics: Theory, Modelling and Control vector of the welding seam is taken as movement Ʀli of the end-effector after multiplying with a proportion factor K. In the part of the control of moving along welding seam, the measured direction above is taken as the desired value to control the movement of the robot. It is inevitable that there exist ap- parent errors in the process of moving along the welding seam. Therefore the second part, that is, tracking adjusting with visual servoing control in image space, is introduced. According to the desired image coordinates [ u,v] and the actual ones [ ui',vi'] of the feature point Pi, the errors [ dui,dvi] of the image co- ordinates as well as the estimated Jacobian matrix ),(ˆvuJ are calculated. Then []e e e zdydxd ˆ,ˆ,ˆ is computed using (37), which is considered as the position errors of the end-effector. The differential movement Ʀsi of the end-effect-or is gener- ated with PID algorithm according to these errors. Ʀi, the sum of Ʀsi and Ʀli, is taken as the total movement of the end-effector. The third part, the position control of the robot, controls the motion of the robot according to Ʀi. In detail, the position and pose of the end-effector in next step, in the world frame, is calculated with the current one and Ʀi. The joint angle value for each joint of the robot is calculated using inverse kinematics from the position and pose of the end-effector in next step. Then the position controller for each joint controls its motion according to the joint angle. The position control of the robot is real- ized with the control device attached to the robot set. Figure 11. The block diagram of hybrid visual servoing control for robotic arc welding Visual Control System for Robotic Welding 735 The other parts such as the control of moving along welding seam, tracking ad- justing and image feature extraction are completed with an additional com- puter (Xu et al., 2005). 6.2.2 The model simplification In the hybrid visual servoing control system for robotic arc welding, as shown in Fig. 11, the control of moving along welding seam takes the direction of welding seam as the desired value to make the end-effector to move ahead. Its outputƦli can be considered as disturbance ξ(t) for the part of image-based visual servoing control. In the part of the position control of the robot, the mo- tions of the robot are merely controlled according to the desired movements of the end-effector and the stated velocity. In the condition that the movement velocity is low, the part of the position control for the movement of the end- effector can be considered as a one-order inertia object. Therefore, the model of the hybrid visual servoing control system can be simplified to the dynamic framework as shown in Fig. 12. Figure 12. The simplified block diagram of hybrid visual servoing control for robotic arc welding Although the laser stripe moves with the end-effector, the position [ xe, ye, ze], in the end-effector frame, of the feature point P on the stripe will vary with the movement of the end-effector. The relation between the movement of the end- effector and [ xe, ye, ze] is indicated as f(Ʀi’). The model for the camera and im- age capture card is described as MineMc-1.736 Industrial Robotics: Theory, Modelling and Control 6.2.3 The relation between the end-effector’s movement and the feature point position In the end-effector frame, the equation of the laser plane can be expressed as (39). °° ¯°° ®­ ⋅+⋅+⋅ =+ + =+ + =+ + ==−+ + + pocpnbpma dco bn amcco bn ambco bn amad zcybxa ez z z ey y y ex x x ee e e e KKKKKK0 1 (39) where []T z y x m m m m=K,[]T z y x n nnn=K, and []T z y x oooo=Kare the orien- tation vector of eMc as (34). Assume the equation of the welding seam, in the end-effector frame, at the i-th sampling is as given in (40). °¯°®­ + =+ =+ = tk z ztk y ytk x x z li liy li lix li li 000 (40) From (39) and (40), the coordinates of the feature point Pi on the stripe, in the end-effector frame, at the i-th sampling is deduced, seen in (41). °° ¯°° ®­ + +− − −−=+ =+ =+ = ze ye xelie lie lie e iiz li eiiy li eiix li ei kckbkazc yb xa dttk z ztk y ytk x x 0 0 0000 1 (41) After the movement of the end-effector Ʀi'=[Ʀ'ix,Ʀ'iy,Ʀ'iz]T, the equation of the welding seam in the end-effector frame is obtained. °¯°®­ +Δ′+ =+Δ′+ =+Δ′+ = +++ tk z ztk y ytk x x z iz li liy iy li lix ix li li 0 10 10 1 (42) Applying (42) to (39), the resolution obtained as (43) is the coordinates of the feature point Pi+1 on the stripe, in the end-effector frame, at the i+1-th sam- pling.Visual Control System for Robotic Welding 737 °° ¯°° ®­ + +Δ′+ −Δ′+ −Δ′+ −−=+Δ′+ =+Δ′+ =+Δ′+ = ++ ++ ++ + ze ye xeiz li e iy li e ix li e e iiz iz li eiiy iy li eiix ix li ei kckbkazc yb xa dttk z ztk y ytk x x ) ( ) ( ) ( 10 0 0 11 0 11 0 11 0 1 (43) By comparing (41) and (43), the relation of the coordinates between Pi+1 and Pi in the end-effector frame is derived. °° ¯°° ®­ + +Δ′ −Δ′ −Δ′ −=+Δ′+ =+Δ′+ =+Δ′+ = ++ ++ ++ + ze ye xeize iye ixe iiiiz iz ei eiiiy iy ei eiiix ix ei ei kckbkac b attk z ztk y ytk x x 11 11 11 1 (44) Formula (44) can be rewritten in the form of matrix as (45). »» ¼º «« ¬ª Δ′Δ′Δ′ =»» ¼º «« ¬ª Δ′Δ′Δ′ »» ¼º «« ¬ª − − −− − −− − − =»» ¼º «« ¬ª −−− =»» ¼º «« ¬ª +++ +++ iziyix iziyix e ze e ze e zee ye e ye e yee xe e xe e xe ei eiei eiei ei eieiei F Dkc Dkb DkaDkc Dkb DkaDkc Dkb Dka z zy yx x dzdydx / 1 / // / 1 // / / 1 111 111 (45) whereze ye xe e kckbka D + + = represents the constraint of the equation of the structured light plane in the end-effector frame. De is a constant for line shaped welding seams with the movement of robot. F is a transformation matrix, which describes the relation of the position variations between the end-effector and the feature point P on the stripe in the end-effector frame. 6.2.4 Stability analysis Suppose the error vector [] [ ]T Tvvuu dv due ′−′−= =K. The states variables are selected as e XK=1 , []T iz iy ix i X Δ Δ Δ=Δ=2 , and []T iz iy ix i X Δ′ Δ′ Δ′=Δ′=3 . It is easy to establish the state equation of the system as (46) reference from Fig. 12. °° ¯°° ®­ − =− + − =−= − −− 3 2 331 21 1 231 1 )/1( )/1(ˆ) /( ˆ)/1( ˆ XT XT XFXM MJKTK FXM MJKT XJK XFXM M X r rce in p r d ce in d r ice in  (46) A positive Lyapunov function V is configured as (47). Its time derivative is seen in (48). 738 Industrial Robotics: Theory, Modelling and Control 3 3 2 2 1 121 21ˆ)ˆ(21XX XX XJ XJ VT T T+ + = (47) )( ˆ)1(21) ˆ(21ˆ) ˆ()ˆ(211) ](1ˆ)1[() (21]1ˆ)1[(21]1ˆ)1[(21ˆ1 21) ˆ( ) ˆ(21ˆ )ˆ(21ˆ 21) ˆ( ˆ) ˆ(21ˆ ˆ)ˆ(211]1ˆ)1[(ˆ1ˆ ˆ)ˆ( 2 31 321 2 11 13 3 3 21 3 231 3 21 221 2 2 2 2 1 2 1 1 131 3 3 11 3 1 11 13 3 31 221 2 1 2 31 1 δo FXM MJKTKIXXKTIFM MJKX XJKFM MJ XJXXTX XTFM MJK KTX XXTFM MJK KTX XTFM MJK KTXFXM MJKXTXKX X XJK X XJ XJK XJFXM MJX X XJFM MJ X XJ XJFM MJ XJXXTXTFM MJK KTXFXM MJKXTXJKX FXM MJ XJ V ce in d rpTi rce in pT i ce inTT r rce in p d rTrce in p d rT rce in p d rTce in dT riT iT iTce inT ce inT ce inTT r rce in p d rTce in dT riT ce inT + − + −−− − − −≤− − + − − −+ − + + − +− + − − − +− − − + −=− + − +− + −= −− −−− −−− − −−− −  (48) where I is a unit matrix, and ) ˆ( ˆ) ˆ(21)(3 11 3 12X XJFM MJ X XJ oce inT− − =−δ is a two-order infinitely small quantity term that can be ignored. Obviously, if the condition (49) is satisfied, then 0<V . According to the stabil- ity theorem of Lyapunov, the system is asymptotic stable. °° ¯°° ®­ + <− << −− p r r drce in p ice in i KTIT KTIFM MJK KFM MJ K 11 ˆˆ (49) Discussion: (1) As the ideal case, the parameters of the camera and the laser plane are accurately calibrated, that is, JJ=ˆ . It is easy to validate that IFM MJce in =−1 ˆ is satisfied. It means that the system is degenerated as a linear system. (2) In the case that there exist errors in Jˆ, if FM MJce in1 ˆ− is positive definite, then the PID parameters that satisfy condition (49) can make the system be as- ymptotic stable. (3) If FM MJce in1 ˆ− is negative definite, then it is not ensured that the system is stable.Visual Control System for Robotic Welding 739 6.3 Experiment and results The experiment system consists of a master computer, a local controller of the robot, a robot Yaskawa UP6, a camera, a laser emitter, welding power source, a welding wire supplier, a welding gun and a CO 2 gas container. The master computer is for image features extraction, the control of moving along welding seam, and the control of tracking adjusting. It outputs the relative movement valueƦi of the end-effector to the local controller of the robot. The local con- troller controls the robot to move according to Ʀi. The camera, laser emitter and the welding gun are all fixed on the end-effector of the robot. The stripe formed by the laser plane projecting on the welding seam is ahead of the weld- ing gun tip about 25mm. Firstly, the camera and the laser plane were calibrated. The intrinsic parame- ters and extrinsic ones relative to the end-effector frame are as follows. Here, the image size was 768 ×576 in pixel. »»»» ¼º «««« ¬ª − −− − −− − − =»» ¼º «« ¬ª = 1 0 0 01279.39 1210.0 0562.0 9911.05896.87 6120.0 7903.0 0299.05258.54 7815.0 6102.0 1301.0 , 1 0 00.3219. 2655 07.445 0 8. 2663ce in M M The laser plane equation in the camera frame is: -0.000862 x+0.004382 y- 0.004470 z +1=0. It is a key factor of the visual control to select stable image features. Aiming at the structured light images as shown in Fig. 5, the points with local maximum slope variation in the stripe was selected as candidate feature points. The ob- vious advantage of our strategy was that the feature points selected above are on the centre line of the welding seam, such as a type V groove welding seam and a lap one. The image processing and feature extraction method in Section 4 was employed to compute the image coordinates of the feature points. The position and pose of the welding gun was adjusted adequately before welding. The images captured at this time were free from the arc light. The image coor- dinates of the feature point could be extracted more accurately. They were taken as the desired image coordinates [ u,v] for the part of tracking adjusting control. During welding, multiple candidate feature points may be obtained sometimes. In this case, the candidate feature point which image coordinates are nearest to [ u,v] is selected as feature point. In the experiment of tracking and welding, the moving velocity of the robot was set to 0.003m/s. The PID parameters in tracking adjusting control were given as: 740 Industrial Robotics: Theory, Modelling and Control »»» ¼º ««« ¬ª = = »»» ¼º ««« ¬ª = 02.0 0 00 01.0 00 0 05.0 ,0 , 5.00 005.000 05.0 i d p K K K The experimental welding seams were a type V groove welding seam and a lap one. The protection gas was CO 2. The transition mode of welding was short circuit. The welding experiments for a type V groove welding seam and a lap one were respectively conducted by using the methods proposed in this chapter. The results showed that the welding seam could be recognized and tracked well. And the shape of weld mark was good. Fig. 13 shows the results of welding experiment for a lap welding seam. The situation for pixel coordi- nate u' of feature point during tracking and welding is shown in Fig. 13(a), and v' in Fig. 13(b). Their horizontal coordinates are sample times. The pixel coordinates [ u',v'] of feature points during tracking and welding are shown in Fig. 13(c). The weld mark after welding is in Fig. 13(d). It can be found that there existed larger errors near by the end stage. It was because of a small piece of scrap on the welding seam, which resulted in the image coordinates of the feature point with large errors. Figure 13. The experimental results Conclusions A visual control system for robotic welding is introduced in this chapter. The calibration of a vision sensor, the processing algorithms for laser stripe images, and a hybrid visual control method are discussed in detail. Based on the robot’s movement, a method of the structured light vision sen- sor’s calibration is proposed. The laser plane can be calibrated from a group of rotation movements. The experimental results show its effectiveness. It is easy to be realized and provides the possibility to run hand-eye system calibration automatically. The image processing algorithms proposed in this chapter include two catego-                            (a) (b) (c) (d) Visual Control System for Robotic Welding 741 ries such as feature extraction methods based on second order difference and geometric centre. The former can recognize welding seam of type V groove and find feature points with precise in the case of strong reflection, arc light and splash disturbance. The latter can robustly provide feature points for the welding seam after root pass welding. A hybrid visual servoing method is proposed in this chapter, which consists of a position control inner-loop in Cartesian space and two outer-loops. One is position-based visual control in Cartesian space; another is image-based visual servoing control in image space. The former is employed for the control of moving along the direction of the welding seam. The latter is for the control of tracking adjusting. The Jacobian matrix from image space of the feature point on structured light stripe to Cartesian space is variable with the movement of the end-effector. But there exists not singular problem in the Jacobian matrix. So the target can be kept in the view field of the camera with the control method above. In the case that the errors between the estimated and real pa- rameters of the camera and the laser plane are not very large, the asymptotic stability of the control system can be ensured through the selection of adequate PID parameters. The experimental results show the effectiveness of the hybrid visual servoing control system for robotic arc welding. The current position and pose are not necessary for the hybrid visual servoing control system. So it can be applied to many kinds of robots, which can accept the commands of relative movement to the end-effector, to realize visual measurement and tracking. In addition, whether the work piece is clean or not has obvious influence on the visual measurement results. The unclean surface sometimes results in gross errors of the welding seam tracking. How to eliminate the influence of the gross errors in image space is our work in near future. And the automated adjustment of the position and pose of the welding gun in the start stage is an- other problem to deal with in future. Acknowledgement The authors would like to thank the National High Technology Research and Development Program of China for the support to this work under grant No.2002AA422160. We would also like to thank like to thank National Key Fundamental Research and Development Project of China (973, No.2002CB312200) for the support to this work.742 Industrial Robotics: Theory, Modelling and Control References Bakos, G. C.; Tsagas, N. F.; Lygouras, J. N.; Lucas J. (1993). Long distance non- contact high precision measurements. International Journal of Electronics , Vol. 75, No. 6, pp. 1269-1279, ISSN: 0020-7217. Bolmsjo, G.; Olsson, M. & Cederberg, P. (2002). Robotic arc welding—trends and developments for higher autonomy. The Industrial Robot , Vol. 29, No. 2, pp. 98-104, ISSN: 0143-991X. Cervera, E.; Berry, F. & Martinet, P. (2002). Image-based stereo visual servoing: 2D vs 3D features. 15th Triennial World Congress of the International Fed- eration of Automatic Control , pp. 1630-1635, ISBN: 0-08-044295-1, Barce- lona, Spain, July 2002, Elsevier Science Press. Chaumette, F. & Malis, E. (2000). 2 1/2 D visual servoing: a possible solution to improve image-based and position-based visual servoings. IEEE Interna- tional Conference on Robotics and Automation , pp. 630-635, ISBN: 0-7803- 5889-9, San Francisco, USA, Apr. 2000, Institute of Electrical and Elec- tronics Engineers Inc., Piscataway, USA Corke, P. I. & Good, M. C. (1993). Controller design for high-performance vis- ual servoing. Proceedings 12th World Congress International Federation of Automatic Control , Vol. 9, pp. 395-398, ISBN: 0-08-042211-X, Sydney, Australia, July 1993, Elsevier Science Press. Corke, P. I. & Good, M. C. (1996). Dynamic effects in visual closed-loop sys- tems. IEEE Transaction on Robotics and Automation , Vol. 12, No. 5, pp. 671-683, ISSN: 1042-296X. Faugeras, O. D. & Toscani, G. (1986). The calibration problem for stereo. IEEE Computer Society Conference on Computer Vision and Pattern Recognition , pp. 15-20, ISBN: 0-8186-0721-1, Miami Beach, USA, 1986, IEEE Press, New York, USA. Hager, G. D.; Hutchinson, S. & Corke, P. I. (1996). A tutorial on visual servo control. IEEE Transaction on Robotics and Automation , Vol. 12, No. 5, pp. 651-670, ISSN: 1042-296X. Haug, K. & Pristrchow, G. (1998). Robust laser stripe sensor for the automated welding seam tracking in the shipbuilding industry. Proceedings of the 24th Annual Confer-ence of the IEEE Industry Electronics Society , pp. 1236- 1241, Aachen, Germany, Sep. 1998, IEEE Comp Soc, Los Alamitos, USA. Kim, J. S.; Son, Y. T.; Cho, H. S.; Koh, K. I. (1996). A robust visual seam tracking system for robotic arc welding. Mechantronics , Vol. 6, No. 2, pp. 141-163, ISSN: 0957-4158. Li, Y.; Xu, D. & Tan, M. (2005). Robust features extraction for structured light images of welding seam in multi-pass submerged arc welding, 7th In- ternational Conference on Electronic Measurement & Instruments , Vol. 6, pp. 1559-1563, ISBN: 7-5062-7443-4, Beijing, China, Aug. 2005, International Academic Publishers, Beijing. Visual Control System for Robotic Welding 743 Ma, S. D. (1996). A self-calibration technique for active vision system. IEEE Transaction on Robotics and Automation , Vol. 12, No. 1, pp. 114-120, ISSN: 1042-296X. Malis, E.; Chaumette, F. & Boudet, S. (1999). 2D 1/2 visual servoing. IEEE Transaction on Robotics and Automation , Vol. 15, No. 2, pp. 234-246, ISSN: 1042-296X. Malis, E.; Chaumette, F. & Boudet, S. (1998). Positioning a coarse-calibrated camera with respect to an unknown object by 2D 1/2 visual servoing. IEEE International Conference on Robotics and Automation , Vol. 2, pp. 1352- 1359, ISSN: 1050-4729, Leuven, Belgium, May 1998, IEEE Press, Piscata- way, USA. Tsai, R. Y. (1987). A versatile camera calibration technique for high-accuracy 3D machine vision metrology using off-the-shelf cameras and lens. IEEE Transactions on Robotics and Automation , Vol. 3, No. 4, pp. 323-344, ISSN: 1042-296X. Wilson, M. (2002). The role of seam tracking in robotic welding and bonding. Industrial Robot , Vol. 29, No. 2, pp. 132-137, ISSN: 0143-991X. Wu, J.; Smith, J. S. & Lucas, J. (1996). Weld bead placement system for multi- pass welding. IEE Proceedings–Science, Measurement and Technology , Vol. 143, No. 2, pp. 85-90, ISSN: 1350-2344. Wu, L. & Chen, S. (2000). Intelligent technologies for welding, National De- fence Indus-trial Press of China, ISBN: 7-118-02299-3, Beijing. Xu, D.; Jiang, Z.; Wang, L. & Tan M. (2004a). Features extraction for structured light image of welding seam with arc and splash disturbance. Proceed- ings of 8th International Conference on Control, Automation, Robotics and Vi- sion, pp. 1559-1563, ISBN: 0-7803-8653-1, Kunming, China, Dec. 2004, In- stitute of Electrical and Electronics Engineers Inc., New York, United States. Xu, D.; Wang, L. & Tan, M. (2004b). Image processing and visual control method for arc welding robot, IEEE International Conference on Robotics and Biomimetics , pp. 727-732, ISBN: 0780386418, Shenyang, China, Aug. 2004, Institute of Electrical and Electronics Engineers Computer Society, Piscataway, United States. Xu, D. & Tan, M. (2004). A calibration method for hand-eye system of arc welding robot, 10th IEEE International Conference on Methods and Models in Automation and Robotics , pp. 903-908, ISBN: 83-88764-8, Miedzyzdroje, Poland, Aug. 2004, Institute of Control Engineering, Technical Univer-sity of Szczecin, Szczecin, Poland. Xu, D.; Wang, L.; Tu, Z. & Tan, M. (2005). Hybrid visual servoing control for robotic arc welding based on structured light vision, Acta Automatica Sinica , Vol. 31, No. 4, pp. 596-605, ISSN: 0254-4156. Yoshimi, B. H. & Allen, P. K. (1994). Active uncalibrated visual servoing. IEEE International Conference on Robotic & Automation , Vol. 4, pp.156-161, 744 Industrial Robotics: Theory, Modelling and Control ISBN: 0-8186-5332-9, San Diego, USA, May 1994, IEEE Press, Piscata- way, USA. Zhang, J. & Djordjevich, A. (1999). Study on laser stripe sensor. Sensors and Ac- tuators A: Physical , Vol. 72, No. 3, pp. 224-228, ISSN: 0924-4247. Zhang, Z. (2000) A flexible new technique for camera calibration. IEEE Transac- tions on Pattern Analysis and Machine Intelligence , Vol. 22, No. 11, pp. 1330-1334, ISSN 0162-8828. Zhu, S. & Qiang X. (2000). Analysis of 3-D coordinate vision measuring meth- ods with feature points on workpiece. Optics and Precision Engineering , Vol. 8, No. 2, pp. 192-197, ISSN: 1004-924X. Zou, D.; Ye, S. & Wang, C. (1995). Structured-lighting surface sensor and its calibration. Optical Engineering , Vol. 34, No. 10, pp. 3040-3043, ISSN: 0091-3286.745 27 Visual Conveyor tracking in High-speed Robotics Tasks Theodor Borangiu Introduction The chapter presents two methods and related motion control algorithms for robots which are required to pick "on-the-fly" objects randomly moving on conveyor belts; the instantaneous location of moving objects is computed by the vision system acquiring images from a stationary, down looking camera. The algorithms for visual tracking of conveyor belts for moving object access are partitioned in two stages: (i) visual planning of the instantaneous destina- tion of the robot, (ii) dynamic re-planning of the robot's destination while tracking the moving objects. In the first method one assumes that conveyors are configured as external axes of the robot, which allows their modelling by means of a special class of vari- ables called belt variables. A belt variable is here considered as a relative trans- formation (having a component variable in time) defining the location of a ref- erence frame attached to the moving belt conveyor. By composing this time variable transformation (it reflects the contents of the belt's encoder) with the time – invariant instantaneous object location (estimated by vision for each ob- ject and compensated by the encoder offset value), the motion control algo-rithm will operate with a periodically updated destination, hence the robot will track the object moving on the belt. In the second method the ensemble conveyor belt-actuator-sensor is config- ured as a 3≤m -axis Cartesian robot, leading thus to a problem of cooperation between multiple robot manipulators subject to the multitasking control of a computer. Conceptually, the problem is solved by defining a number of user tasks which attach two types of "robots": the n – d.o.f. manipulator responsible with grasping on-the-fly objects moving on the conveyor belt, and the 3≤m - axis robot emulating the conveyor belt under vision control. These user tasks run concurrently with the internal system tasks of a multitasking robot con- troller, mainly responsible for trajectory generation, axis servoing and system resources management. Both methods use the concept of Conveyor Belt Window to implement fast re-action routines in response to emergency situations. The tracking algorithms 746 Industrial Robotics: Theory, Modelling and Control also provide collision-free object grasping by modelling the gripper’s finger- prints and checking at run time whether their projections on the image plane cover only background pixels. Modelling conveyors with belt variables The problem of interest consists in building up a software environment allow- ing a robot controller to estimate the instantaneous position of the conveyor belt on which parts are travelling. The conveyor must be equipped with a dis- placement measuring device, in this case an encoder . There are no constraints with respect to the position and orientation of the conveyor relative to the working area of the robot; the only requirement is that the belt’s motion follows a straight line within the robot’s manipulability re-gion (Schilling, 1990). The encoder data will be interpreted by the controller as the current displacement of one of its external robot axes – in this case the tracked conveyor belt. 2.1 The special class of belt variables The mechanism which allows specifying robot motions relative to a conveyor belt consists into modelling the belt by defining a special type of location data, named belt variables . Definition 5.1 : A belt variable is a relative homogenous transformation (having a component variable in time) which defines the location of a conveniently cho- sen reference frame attached to the conveyor’s moving belt. The assignment of a belt variable is based on the software operation DEFBELT %belt_variable = nominal_trans,scale_factor, where: •%belt_variable is the name of the belt variable to be defined, expressed as a 6- component homogenous transformation in minimal representation of the frame’s orientation (e.g. by the Euler angles yaw, pitch and roll). •nominal_trans represents the value in 6R of the relative transformation defi- ning the position and the orientation of the conveyor belt. The Xaxis of no- minal_trans indicates the direction of motion of the belt, the XY plane defi- ned by this transformation is parallel to the conveyor's belt surface, and the position ( X,Y,Z ) specified by the transformation points to the approximate centre of the belt relative to the base frame of the robot. The origin of nomi- nal_trans is chosen in the middle of the robot's working displacement over the conveyor.Visual Conveyor tracking in High-speed Robotics Tasks 747 •scale_factor is the calibrating constant specifying the ratio between the ele- mentary displacement of the belt and one pulse of the encoder. Using such a belt variable, it becomes possible to describe the relationship be- tween a belt encoder and the location and speed of the reference frame (con- veniently chosen with respect to the manipulability domain of the robot ac- cessing the belt) which maintains a fixed position and orientation relative to the belt (Borangiu, 2004). The informational model of the conveyor belt is its assigned belt variable, to which additional modelling data must be specified for robot-vision compatibility: •window parameters , defining the working area of the robot over the conveyor belt; •encoder offset , used to adjust the origin of the belt’s reference frame (e.g. rela- tive to the moment when image acquisition is triggered). The current orientation data in a belt variable is invariant in time, equal to that expressed by nominal_trans . In order to evaluate the current location updated by the same belt variable, the following real-time computation has to be per- formed: multiplication of a unit vector in the direction of ans nominal_trX by belt_distance – a distance derived from the encoder's contents (periodically read by the system), and then addition of the result to the position vector of nominal_trans . The symbolic representation of this computation is given in equations (1) and (2): ) ( unit_vect _ans nominal_tr nominal ous instantane X cetandis belt XYZ XYZ ∗ + = (1) or scale_fact offset encoder count encoder cetandis belt ∗ − = ) _ _ ( _ (2) Here, encoder_count is the encoder's read contents and encoder_offset will be used to establish the instantaneous location of the belt's reference frame ),(i iyx relative to its nominal location ),(n nyx . In particular, the belt's offset can be used to nullify a displacement executed by the conveyor (by setting the value of the offset to the current value of the encoder's counter). The designed algorithm for visual robot tracking of the conveyor belt accounts for variable belt offsets which are frequently changed by software operations using mathematical expressions, like that included in the following V+ syntax: SETBELT %belt_variable = expression. When the conveyor belt position is computed by referring to its assigned belt variable, the previously defined encoder offset will be always subtracted from the current position of the belt, i.e. from the encoder’s current accumulated content. In the discussed method, setting a belt offset will use the real-valued 748 Industrial Robotics: Theory, Modelling and Control function BELT %belt_variable,mode to effectively reset the belt’s position [en- coder pulses]. Example 1 : A reaction routine continuously monitors a fast digital-input interrupt line which detects the occurrence of an external event of the type: "an object has completely entered the Conveyor Belt Window – and hence is completely visi- ble". This event is detected by a photocell, and will determine an image acqui- sition of the moving object. The very moment the detected object is recognised as an object of interest and successfully located, the position of the belt is reset and consequently the belt variable will encapsulate from now on the current displacement of the belt relative to the belt’s position in which the object has been successfully located. The V+ code is given below: trigger = SIG(1001) ;signal from photocell save = PRIORITY ;current priority of the robot-vision task snap = 0 ;reset event detection after image acquisition success = 0 ;reset indication of successful part location REACT –trigger,acquisition(snap,success,$name,belt_offset) TIMER 1 = 0 ;reset "timeout"-valued timer IF TIMER(1)>timeout AND NOT snap THEN GOTO l_end ;no incoming parts, exit the task ELSE LOCK PRIORITY + 2 ;raise priority to lock out any signals from the ;photocell until the current object is treated IF success == 1 THEN SETBELT %belt = belt_offset IF $name == "PART" THEN ;if the object is of interest Tracking the belt such that the robot picks on-the-fly the object (modelled with the name "part") which was successfully located by vision in vis.loc ... END LOCK save ;re activate the REACT mechanism to check for on-off ;for on-off signal #1001 transitions END The interruption routine, automatically called by the REACT mechanism, has the form: .PROGRAM acquisition(snap,success,$name,belt_offset) VPICTURE (cam) –1,1 ;image acquisition and recognition of one object snap = 1 ;Locate any type of recognised object, return its name in the string Visual Conveyor tracking in High-speed Robotics Tasks 749 ;var. $name and its location relative to the vision frame in vis_loc VLOCATE (cam,0) $name,vis.loc success = VFEATURE(1) ;evaluate the success of the locating op. belt_offset = VFEATURE(8) ;The real-valued function VFEATURE(8) returns the contents of the ;belt’s encoder when the strobe light for image acquisition was ;triggered. RETURN .END In what concerns the encoder’s scale factor represented by the constant pa- rameter scale_factor , it can be evaluated: •either theoretically, knowing the mechanical coupling belt-encoder, •or experimentally by reading the encoder’s contents twice, each time when the image acquisition is triggered for a circular disk the presence of which is detected by the belt’s photocell. The distance at which travel the two identi- cal disks on the conveyor belt has been upstream set at a convenient, known value (see Fig. 1). Figure 1. The experimental setup for conveyor belt calibration 2.2 The logical mechanism "Conveyor Belt Window" and emergency routines There has been designed a logical mechanism called Conveyor Belt Window (CBW) which allows the user to check the area of the belt in which the robot will operate. A CBW defines a segment of the belt delimitated by two planes perpendicular to the direction of motion of the belt (this window is restricted only in the direction of motion of the conveyor's belt) (Borangiu & Kopacek, 2004).750 Industrial Robotics: Theory, Modelling and Control Because the conveyor is modelled by a belt variable (e.g. %belt_var ), in order to define a CBW it is necessary to refer the same belt variable and to specify two composed transformations which, together with the direction of motion of the belt, restrict the motion of the robot along a desired area of the conveyor: WINDOW %belt_var = downstr_lim,upstr_lim,program_name,priority, where: •downstr_lim and upstr_lim are respectively the relative transformations de- fining the downstream and upstream edges of an invariant window posi-tioned along the belt within the working space of the robot and the image field of the camera (it is necessary that the robot tracks and picks parts within these two limits); •program_name indicates the reaction routine to be automatically called, whenever a window violation occurs while the robot tracks the conveyor belt; •priority is the level of priority granted to the reaction routine. Normally, it must be greater than that of the conveyor tracking program, so that the mo- tion of the robot can be immediately interrupted in case of window viola- tion. The CBW will be used not only in the stage of robot motion planning, but also at run time, during motion execution and tracking control, in order to check if the motion reference (the destination) is within the two imposed limits: •When a robot movement is planned , the destination of the movement is checked against the operating CBW; if a window violation is detected, the reaction program is ignored and an error message will be issued. •When a robot movement relative to the conveyor belt is executed , the destination is compared every 8 milliseconds with the window's limits; if a window violation is detected, the reaction program is automatically invoked accord- ing to its priority level and the robot will be instructed to stop tracking the belt. There have been designed two useful CBW functions which allow the dynamic reconfiguring of programs, decisions, branching and loops during the execu- tion of robot – vision conveyor tracking programs, function of the current value of the part-picking transformation relative to the belt, and of the current status of the belt tracking process. These functions are further introduced. The function WINTEST(robot_transformation,time,mode) returns a value in millimetres indicating where is situated the location specified by the belt- relative composed transformation robot_transformation , with respect to the fixed window limits downstr_lim and upstr_lim at time seconds in the future, computed according to its current position and belt speed.Visual Conveyor tracking in High-speed Robotics Tasks 751 Finally, the argument mode is a real-valued expression which specifies whether the result of the WINTEST function represents a distance inside or outside the predefined conveyor belt window. For example, if mode is positive, the value returned by WINTEST will be interpreted as: 0: the composed, belt-relative location is inside the CBW; <0: the location is upstream of upstr_lim of the CBW; >0, the location is downstream of the dwnstr_lim of the CBW. Hence, the returned value conforms to the WINDOW model shown in Fig. 2, for which the value returned by the function WINDOW increases as the belt- relative location moves downstream. WINDOW()Downstream limit Upstream limit Motion direction along the belt Figure 2. The WINDOW function for mode > 0 For robots tracking conveyor belts in order to pick moving objects recognised and located by vision, the belt-relative transformation is %belt_var :part.loc (variable in time), obtained by the composition of: •%belt_var , models the conveyor belt, •part.loc , is a composed, time invariant transformation expressing the gripper frame ),,(g g g zyx relative to the base frame of the robot ),,(0 0 0 zyx at the moment the object was identified and located by vision. 752 Industrial Robotics: Theory, Modelling and Control For example, the distance WINTEST(%belt:part.loc,4,1) is positive if, in 4 sec- onds from the time being, the belt-relative part picking location will be outside the window defined for the conveyor belt modelled by %belt . If the robot tries to move towards a belt-relative location that has not yet ap- peared inside the belt window (it is still upstream relative to the CBW), the motion control algorithm has been designed with two options: •temporarily stops the robot , delaying thus the motion planning, until the time-variable destination enters the belt window; •definitively stops the robot and generates immediately an error message. Also, the control algorithm generates a condition of window violation anytime the vision-based robot motion planner computes a destination which is down- stream the CBW, or will exit the CBW at the predicted time the robot will reach it. The function BELTSTATUS indicates the current status of the belt tracking process: robot tracking the belt ;destination upstream ;destination down- stream ;window violation , real-time information which can be used to dynami- cally reconfigure the robot – vision task. 2.3 Robot locations, frames and belt-relative movements planned by vision To command the belt-relative motion of a robot with linear interpolation in the Cartesian space, i.e. to define an end-tip transformation relative to an instanta- neous location of a moving frame ),(i iyx on the conveyor belt, the already de- fined belt variable (which models the conveyor belt as a relative transforma- tion having time variable components along the X (and possibly Y) Cartesian axes) will be composed with the time-invariant end-tip transformation relative to the base of the robot (which is computed at run time by the vision part of the system). The result will be a time-variable transformation updating the position refer- ence for the robot. This reference or target destination tracks an object moving on the belt, to be picked by the robot’s gripper. The target destination is: •planned once at runtime by vision, as soon as the object is perfectly visible to the camera, either inside the manipulability area of the robot or upstream this area; •updated every 8 milliseconds by the motion controller based on the current po- sition data read from the belt’s encoder, until the robot’s end-point com- pletes the necessary percentage of its motion segment towards the part's grasping location.Visual Conveyor tracking in High-speed Robotics Tasks 753 The research on Guidance Vision for Robots (GVR) accessing moving targets was directed to develop a convergent motion control algorithm for visually plan the motion of the robot as a result of object detection, recognition and lo- cating on a moving conveyor belt, and than track the object in order to grasp it inside a conveniently defined belt window. The main idea relies on dynami- cally changing the visually computed destination of the robot end point by composing it with a belt-related transformation updated every 8 milliseconds from the encoder data. If a stationary camera looks down at the conveyor belt, and supposing that its field of view covers completely a conveyor belt window defined inside the working area of the robot (after execution of a camera – robot calibration ses- sion), then the image plane can be referred by the time – invariant frame ),(vis visyx as represented in Fig. 3. It is also assumed that the X axes of the reference frame of the robot )(0x, of the conveyor's direction of motion )(nx and of the image plane )(visxare parallel. The conveyor belt is modelled by the belt variable %belt. Parts are circulating on the belt randomly; their succession (current part type entering the CBW), dis- tance from the central axis of the conveyor and orientation are unknown. The "Look-and-Move" interlaced operating principle of the image processing sec- tion and motion control section is used (Hutchinson, 1996), (Borangiu, 2001), (West, 2001), (Adept, 2001). According to this principle, while an image of the CBW is acquired and processed for object identification and locating, no mo- tion command is issued and reciprocally, the camera will not snap images while the robot tracks a previously located part in order to pick it "on-the-fly". cpz_offxg motion direction of belt upstream limit %belt:part.locy4 z4x4 y0 x0z0ptp part.loc nominal_trans of%beltinstant_trans of%beltto.cam[ cam] xvisxn xiyi(encoder_val -VFEATURE(8))* scale_factor *vers(+xn) xobjyg yobjgrip.trans AIM downstream limit yvisyn vis.locrz_off Figure 3. Robot-Vision and belt-relative transformations for conveyor tracking 754 Industrial Robotics: Theory, Modelling and Control The robot motion control algorithm for tracking the conveyor belt in order to pick "on-the-fly" one by one objects recognised and located by vision comput- ing consists of the following basic steps: 1.Triggering the strobe light (synch./asynch. relative to the read cycle of the video camera) when image acquisition is requested from a fast digital-input interrupt line connected to a photocell mounted at the upstream limit of the CBW. The interrupt line signals that an object has completely entered the belt window. 2.Recognizing a single object that just completely entered the belt window. Ob- ject recognition is exclusively based in this approach on the match with previously learned models of all objects of interest (Lindenbaum, 1997). 3.Locating the object which was recognised, by computing the coordinates of its centre of mass and the angle between its minimum inertia axis (MIA) andvisx. As can be seen in Fig. 3, the object-attached frame ) ,(obj objy x has the abscissa aligned with the minimum inertia axis (MIA), and the current loca- tion of the object in the image plane is computed by the vision section and returned in vis.loc . 4.Planning the instantaneous destination of the robot . Once the object is recognized as the instance of a model and located , the related grasping transformation grip.trans is called. Assuming that the grasping style is such that the projec- tion of the gripper's centre on the image plane coincides with the object's centre of mass, the gripper-attached frame ),(g gyx will be offset relative to the object-attached frame along 0z by z_off millimetres and turned with r_off degrees about0z. Now, using the relative transformation to.cam[ cam](as output of the camera-robot calibration session) relating the vision frame ),,(vis vis vis zyx to the base frame of the robot ),,(0 0 0 zyx , the cur- rent destination of the robot (for a frozen conveyor belt) is computed from the vision data as a composed transformation part.loc , expressing the grip- per frame relative to the robot base frame: part.loc = to.cam[cam]:vis.loc:grip.trans 5.Synchronising the encoder belt with the motion of the object recognized in the belt window. This operation consists into setting the offset of the conveyor belt at a correct value. The operation SETBELT %belt = encoder_val(strobe)Visual Conveyor tracking in High-speed Robotics Tasks 755 establishes the point of interest of the conveyor belt modelled with %belt as the point corresponding to the current value encoder_val (strobe ) of the en- coder counter at the time the strobe light was triggered. This value is avail- able immediately after object locating. Thus, as soon as one object is recog- nized and located, the current belt position, identified by ),(i iyx , will be reset since: n nn i xyz x or scale_factstrobeval encoder val encoder xyz xyz = ∗ ∗∗ − + = )( unit_vect)) ( _ _ ( (3) 6.Tracking and picking the object moving on the belt . This requires issuing a lin- ear motion command in the Cartesian space, relative to the belt. A com- posed relative transformation %belt:part.loc, expressing the current com- puted location of the gripper relative to the instantaneous moving frame ),(i iyx , is defined. Practically, the tracking procedure begins immediately after the instantaneous position of the belt – expressed by the frame ),(i iyx has been initialized by the SETBELT operation, and consists into periodi- cally updating the destination of the gripper by shifting it along the nx axis with encoder counts accumulated during successive sampling periods ,...,, ...,1 1 + − k k k ttt const1 =− =Δ+ k k t tt : )0,0, ) (. : % . : % 11 or scale_fact t tunt encoder_coloc part belt loc part belt k kt tk k ∗ −= ++ ...BY... SHIFT( (4) MOVES %belt:part.loc ;go towards the moving target CLOSEI ;grasp "on the fly" the object Once the robot commanded towards a destination relative to the belt, the gripper will continuously track the belt until a new command will be is- sued to approach a location which is not relative to the belt. For belt-relative motions, the destination changes continuously; depending on the magnitude and the variations of the conveyor speed it is possible that the robot will not be able to attain the final positions within the default error toler- ance. In such cases, the error tolerance must be augmented. In extreme cases it will be even necessary to totally deactivate the test of final error tolerance. Fig. 4 756 Industrial Robotics: Theory, Modelling and Control presents the designed robot motion control algorithm for tracking the con- veyor belt in order to pick "on-the-fly" an object recognized and located by vi- sion computation inside the a priori defined belt window. A REACT mecha- nism continuously monitors the fast digital-input interrupt line which signals that an object has completely entered the belt window. The robot motion rela- tive to the belt will be terminated: •when moving the robot towards a non belt-relative location or •when a window violation occurs. Example 2 : The following series of instructions will move the robot end-effector towards a belt-relative location part_2 (the belt is modelled as %belt[1]), open the grip- per, track the conveyor belt for 5 seconds (in fact the location part_2 on the belt), close the gripper and finally leave the belt to move towards a fixed loca- tion. MOVES %belt[1]:part_2 OPENIDELAY 5.0 CLOSEI MOVES fixed_location When defining the Conveyor Belt Window, a special high-priority routine can be specified, which will be automatically invoked to correct any window viola- tion during the process of tracking moving objects. In such situations the robot will be accelerated (if possible) and the downstream limit temporarily shifted in the direction of motion of the conveyor belt (within a timeout depending on the belt's speed) in which the error tolerance must be reached (Espiau, 1992), (Borangiu, 2002). Visual Conveyor tracking in High-speed Robotics Tasks 757 Setup of virtual camera cam Camera-Robot calibration defines: to.cam[ cam], XY_scale, pix.to.mm Modelling the conveyor belt by a %belt_variable Defining nominal_trans , encoder scale_factor , belt window CBW No event REACT to fast digital-input interrupt line from photocell: "object inside CBW" Timeout expired Event-driven interrupt Triggering the strobe light and image acquisition Failure or object of no interest Single object recognition by prototype match Instance of prototype "OBJ" "OBJ" is successfully located (x c,yc,AIM) and vis.loc is returned No Yes Setting the offset of the conveyor belt to encoder_val(strobe) xyz i = xyz n Calling the grasping transformation grip.trans for "OBJ" and planning the instantaneous picking transformation part.loc: part.loc=to.cam[ cam]:vis.loc: grip.trans Delaying motion tracking Destination inside the CBW Destination downstream CBW Destination upstream CBW Read encoder_count( ǻt) %belt:part.loc ←SHIFT (%belt:part.loc BY encoder_count( ǻt)*scale_factor,0,0) Robot moving towards time-variable destination: MOVES %belt:part.loc Error tolerance entered for target t = t + ǻtNo Pick part "on-the-fly" : CLOSEI and move to a non belt-relative destination Yes Figure 4. The robot motion algorithm for visual tracking of the conveyor belt 758 Industrial Robotics: Theory, Modelling and Control Tracking conveyors as m≤3 Cartesian axis robots According to the second tracking method, the ensemble conveyor belt + actua- tor + sensor is configured as an 3≤m -axis Cartesian robot , which leads to a problem of cooperation between multiple robots subject to multitasking com- puter control. The V+ structured programming environment is used for exem- plifying the multi tasking control of robots visually tracking moving objects on multiple belts. 3.1 Multitasking control for robot cooperation Conceptually, the problem is solved by defining a number of user tasks which attach two types of "robots": the n – d.o.f. manipulator responsible with grasp- ing on-the-fly objects moving on the conveyor belt, and the 3≤m -axis robot emulating the conveyor belt under vision control. These user tasks run concur- rently with the internal system tasks of a multitasking robot controller, mainly responsible for trajectory generation, axis servoing and system resource man- agement (Adept, 2001). In this respect, there are three tasks to be at least defined for the tracking prob- lem: Task 1: Dynamic re-planning the destination location (grasping the moving object) for the robot manipulator. Task 2: Continuously moving (driving) the 3≤m -axis vision belt. In the most general case, the belt moves along any 3D-direction relative to the robot base frame ),,(0 0 0 zyx . Task 3: Reading once the belt's location the very moment an object of interest has been recognised, located and its grasping estimated as col- lision-free, and then continuously until the object is effectively picked. 3.1.1 Specifying tasks, time slices and priorities A multitasking robot control system appears to execute all these program tasks at the same time. However, this is actually achieved by rapidly switching be-tween the tasks many times each second, each task receiving a fraction of the total time available. This is referred to as concurrent execution (Zhuang, 1992), (Borangiu, 2005). The amount of time a particular program task receives is caused by two pa- rameters: its assignment to the various time slices, and its priority within the time slice. One assumes that, in the multitasking operating system, each system cycle is divided into 16 time slices of one millisecond each, the slices being numbered 0 through 15. A single occurrence of all 16 time slices is referred to Visual Conveyor tracking in High-speed Robotics Tasks 759 as a major cycle . For a robot each of these cycles corresponds to one output from the trajectory generator to the servos. A number of seven user tasks, e.g. from 0 to 6, will be used and their configu- ration tailored to suit the needs of specific applications. Each program task configured for use requires dedicated memory, which is not available to user programs. Therefore, the number of tasks available should be made no larger than necessary, especially if memory space for user programs is critical. When application programs are executed, their program tasks are normally as- signed default time slices and priorities according to the current system con- figuration. The defaults can be overridden temporarily for any user program task, by specifying the desired time slice and priority parameters of the EXECUTE initiating command. Tasks are scheduled to run with a specified priority in one or more time slices. Tasks may have priorities from −1 to 64, and the priorities may be different in each time slice. The priority meanings are: −1 Do not run in this slice even if no other task is ready to run. 0 Do not run in this slice unless no other task from this slice is ready to run. 1-64 Run in this slice according to specified priority. Higher prior- ity tasks may lock lower ones. Priorities are broken into the following ranges: 1-31 Normal user task priorities; 32-62 Used by robot controller's device drivers and system tasks ; 63 Used by trajectory generator . Do not use 63 unless you have very short task execution times, because use of these priori- ties may cause jerks in the robot trajectories; 64 Used by the servo . Do not use 64 unless you have very short task execution times, because use of these priorities may cause jerks in the robot trajectories. The V+ operating system has a number of internal (system) tasks that compete with application (user) program tasks for time within each time slice: •On motion systems, the V+ trajectory generator runs (at the highest priority task) in slice #0 and continues through as many time slices as necessary to compute the next motion device set point. •On motion systems, the CPU running servo code runs the servo task (at in- terrupt level) every 1 or 2 milliseconds (according to the controller configu- ration utility). 760 Industrial Robotics: Theory, Modelling and Control The remaining time is allocated to user tasks, by using the controller configu- ration utility. For each time slice, you specify which tasks may run in the slice and what priority each task has in that slice. 3.1.2 Scheduling of program execution tasks Vision guided robot planning ("object recognition and locating"), and dynami- cal re-planning of robot destination ("robot tracking the belt") should always be configured on user tasks 0 or 1 in "Look-and-Move" interlaced robot motion control, due to the continuous, high priority assignment of these two tasks, over the first 13 time slices. However, vision guidance and motion re-planning programs complete their computation in less than the 13 time slices (0-12). Consequently, in order to give the chance to conveyor-associated tasks ("drive" the vision belt, "read" the current position of the vision belt") to provide the "robot tracking" programs with the necessary position update information ear- lier than the slice 13, and to the high-priority trajectory generation system task to effectively use this updates, a WAIT instruction should be inserted in the loop-type vision guidance and motion re-planning programs of tasks 0 and/or 1. A WAIT condition instruction with no argument will suspend then, once per loop execution, the motion re-planning program, executing on user task 1, un- til the start of the next major cycle (slice 0). At that time, the "vision processing and belt tracking" task becomes runnable and will execute, due to its high pri- ority assignment. Due to their reduced amount of computation, programs related to the man- agement of the conveyor belt should be always assigned to tasks 2, 3, 5 or 6 if the default priority scheme is maintained for user program tasks, leaving tasks 1 and 2 for the intensive computational vision and robot motion control. Whenever the current task becomes inactive, the multitasking OS searches for a new task to run. The search begins with the highest priority task in the cur- rent time slice and proceeds through in order of descending priority. If multi- ple programs wait to run in the task, they are run according to relative pro- gram priorities. If a runnable task is not found, the next higher slice is checked. All time slices are checked, wrapping around from slice 15 to slice 0 until the original slice is reached. Whenever a 1 ms interval expires, the system per- forms a similar search of the next time slice; if this one does not contain a run- nable task, the currently executing task continues. If more than one task in the same time slice has the same priority, they become part of a round-robin scheduling group . Whenever a member of a round-robin group is selected by the normal slice searching, the group is scanned to find the member of the group that run most recently. The member that follows the most recent is run instead of the one which was originally selected.Visual Conveyor tracking in High-speed Robotics Tasks 761 The V+ RELEASE program instruction may be used to bypass the normal scheduling process by explicitly passing control to another task. That task then goes to run in the current time slice until it is rescheduled by the 1 ms clock. A task may also RELEASE to anyone , which means that a normal scan is made of all other tasks to find one that is ready to run. During this scan, members of the original task's round-robin group (if any) are ignored. Therefore, a RELEASE to anyone cannot be used to pass control to a different member of the current group. Round-robin groups are treated as a single task. If any member of the group is selected during the scan, then the group is selected. The group is scanned to find the task in the group following the one which ran most recently, and that task is run. Within each time slice, the task with highest priority can be locked out only by a servo interrupt. Tasks with lower priority, defined for driving the conveyor belt and reading position data from its encoder, can run only if the higher-priority task, defined for vision guidance of the n–d.o.f. robot and for tracking the 1–d.o.f. robot-like conveyor belt, is inactive or waiting. A user task waits whenever: •The program issues an input or an output request that causes a wait. •The program executes a robot motion instruction while the robot is still moving in response to a previous motion instruction. •The program executes a WAIT or WAIT.EVENT program instruction. If a program is executing continuously without performing any of the above operations, it locks out any lower-priority tasks in its time slice. Thus, pro-grams that execute in continuous loops, like vision guidance and motion re- planning for belt tracking, should generally execute a WAIT (or WAIT.EVENT) instruction occasionally (for example, once each time through the loop). If a program potentially has a lot of critical processing to perform, its task should be in multiple slices , and the task should have the highest priority in these slices. This will guarantee the task's getting all the time needed in the multiple slices, plus (if needed) additional unused time in the major cycle. Fig. 5 shows the task scheduler algorithm which was designed for an n-d.o.f. ro- bot tracking a continuously updated object grasping location, and picking the object "on-the-fly" from a conveyor belt, when motion completes. The object is recognized and located by vision, and updating of its position is provided by encoder data reads from the conveyor belt modelled as a 1-d.o.f. robot. The priority analysis and round-robin member selection are also indicated. The problem of conveyor tracking with vision guiding for part identification and locating required definition of three user tasks, to which programs were associated:762 Industrial Robotics: Theory, Modelling and Control Task 1 : program " track " executes in this task, with robot 1 (4-d.o.f. SCARA) selected. This program has two main functions, carried out in a 2 – stage se- quence: STAGE 1: Continuous checking whether an object travelling on the vision belt entered the field of view of the camera and the reachable work- space of the SCARA robot. If such an event occurs, the vision is ac- tivated to identify whether the object is of interest and to locate it. Processing on this stage terminates with the computation of the end- effector's location which would move the robot in the object picking location evaluated once by vision, according to a predefined grasping style, if the belt were stopped. STAGE 2: Continuously re-planning the end-effector's location, computed once by vision, by consuming the belt position data produced by en- coder reads in program " read " which executes on task 3, and by dynamically altering the robot's target in the current motion segment. Task 2 : program " drive " executes in this task, with robot 2 (the 1-d.o.f. con- veyor belt) selected. This program moves the belt in linear displacement in- crements, at a sufficiently high rate to provide a jerk-free, continuous belt motion. This program executes in both stages of the application, previously defined. Task 3 : program "read" executes in this task, with robot 2 selected. This pro- gram executes differently in the two stages of the application: Visual Conveyor tracking in High-speed Robotics Tasks 763 Figure 5. Task scheduler for multitasking robot control and conveyor tracking STAGE 1: Executes a single time upon receiving an input signal from vision in task 1, confirming the recognition and locating of a part. In re- sponse, " drive "reads the instantaneous belt position , which from now on will be used as an offset for the position updates. slice =0 runnable task in sliceslice>15yes run servos? time left in slice? can cur- rent task run? time left in slice?task found? slice = slice + 1 run servos until complete or slice is up run task until task completes or slice is up make higher priority task or round robin group the cur- rent task run highest priority program in task un- til program com- pletes, waits, or time slice is up run null task un- til an "event" occurslook ahead for a runnable task in any other time slice yes yesyes yes yesyes yesno no no no no nono run round-robin member that follows the most recent one (switch between "drive" and "belt" tasks )(3)(1)(2) tasks 2 and 3 task 1 priority 19 or 21 of task 1 round-robin selection up to slice 13 and in slices 14 and 15, or task 2 in slice 13 run "drive" in task 2, or "read" in task 3 Run "track" in task 1 until issues WAIT764 Industrial Robotics: Theory, Modelling and Control STAGE 2: Continuously reads the belt position, upon a request issued by "track " in task 1, when it starts its dynamic target re planning proc- ess. From the three user tasks, the default priority assignment is maintained. This leads to the following priority analysis for a major cycle: •Task 1 has the highest priority in time slices 0 – 12 (inclusively), with val- ues of 19, 21, 9 and 11. •Task 2 has the highest priority (20) in a single time slice: 13. •Task 3 never detains explicitly a position of highest priority with respect to tasks 1 and 2. The three tasks become part of a round-robin group as follows: tasks 2 and 3 in slices 0 – 12 inclusively; tasks 1, 2 and 3 in slices 14 and 15. Because tasks 2 and 3 are in more than one round-robin group on different slices, then all three tasks in the corresponding pairs of different slices appear to be in a big group. As a result of the priority scan and scheduling, the programs in the three user tasks execute as follows: STAGE 1 – vision is processing, the robot is not moving and no WAIT is issued by task 1 (Fig. 6): − Task 1 runs: in slices 0 – 12 (it detains the highest priority), in slice 14 (it is member of the round-robin group following task 2 that run more re- cently – in slice 13) only before generating the request for task 3 to com- pute the instantaneous offset belt position when vision located the object, and in slice 15 only after generating this request (it is member of the round-robin group following task 3 that run more recently – in slice 14). − Task 2 runs in slice 13 (it detains the highest priority), and in slice 15 (it is member of the round-robin group following task 1 that run more re- cently – in slice 14) only before task 1 generates the request for task 3 to compute the instantaneous offset belt position when vision located the object. − Task 3 runs in slice 14 (it is member of the round-robin group following task 2 that run more recently – in slice 13) only after receiving the request from task 1 to compute the instantaneous offset belt position when vision located the object. Visual Conveyor tracking in High-speed Robotics Tasks 765 Figure 6. Priority assignment and tasks running in STAGE 1 of vision guidance for robot motion planning STAGE 2 – vision is not processing, the SCARA robot is moving and WAIT com- mands are issued in task 1 by the "track "program after each re-planning of the end-effector's target destination within one major cycle of 16 milliseconds (Fig. 7): − Task 1 runs in slices ,12 ,0, , ≤ ≥ ≤ − j ijiji (when it detains the highest pri- ority), i.e. starting with the moment when it is authorized to run by the highest-priority system tasks " trajectory generation " and " servo " (in slice i), and executing until it accesses the position update provided by task 3 from the most recent belt encoder read ,alters the last computed end-effector destination and issues a WAIT (in slice j), to give the trajec- tory generator a chance to execute. From this time moment, task 1 becomes inactive for the rest of the 16 milliseconds of the current ma- jor cycle, until slice 0 of the next system cycle when it waits to be se- lected by the scheduler and authorized to run. − Task 2 runs: in slices 12)1( −+j switching alternatively with task 3 whenever it is selected as the member of the round-robin group following task 3 that run most recently, in slice 13 (it detains the highest priority), and in slice 15 (it is member of the round-robin group following task 3 that run more recently – in slice 14). Task 2 runs always exactly for 10 10 1020 2020Program priority RRRRRRRRRRRR RR13 14 1512 01 2 One major system cycle = task waiting = task running = round-robin member selection 1 millisecond time slicestask 1 running "track", task priority >=9 task 2 running "drive", task priority =20 task 3 running "read", task priority =15before request for belt offset read after request for belt offset read before request after request before request after request 766 Industrial Robotics: Theory, Modelling and Control 1 millisecond whenever selected, so that the round-robin group scanning authorises task 3 to run always at the beginning of the next time slice. − Task 3 runs in slices 12)1 ( −+j switching alternatively with task 2 whenever it is selected as the member of the round-robin group following task 2 that run most recently, and in slice 14 (it is member of the round- robin group following task 2 that run more recently – in slice 13). The task 3 runs, whenever selected, for less than 1 millisecond and issues a RELEASE "to anyone" in the current slice, allowing selection of task 2 (in the same round-robin group) for running exactly at the begin- ning of the next time slice. Figure 7. Priority assignment and tasks running in STAGE 2 of robot motion re-plan 10 1020 102020Program priority RRRR 13 14 1512 0 1 2 One major system cycle1 millisecond time slicestask 1 running "track", task priority >=9 task 2 running "drive", task priority =20 task 3 running "read", task priority =15iftask 3 run most recentl y ixx xx xx xxxx jxxxx RR= task waiting = task running = round-robin member selection xx= task inactiveWAIT signal RR RRRRRR RRRR RRRR RR RR iftask 3 run most recentl yiftask 2 run most recentl y iftask 2 run most recentl yVisual Conveyor tracking in High-speed Robotics Tasks 767 3.2 Dynamically altering belt locations for collision-free object picking on-the-fly The three previously discussed user tasks, when runnable and selected by the system's task scheduler, attach respectively the robots: •Task 1: robot 1 – a SCARA-type robot Cobra 600TT was considered; •Task 2 and 3: robot 2 – the "vision conveyor belt" of a flexible feeding sys- tem. In multiple-robot systems like the one for conveyor tracking, SELECT robot operations select the robot with which the current task must communicate. The SELECT operation thus specifies which robot receives motion instructions (for example, DRIVE to move the vision belt in program " drive ", or MOVES to move the SCARA in program " track ") and returns robot-related information (for example, for the HERE function accessing the current vision belt location in program " read "). Program " track " executing in task 1 has two distinct timing aspects, which cor- respond to the partitioning of its related activities in STAGE 1 and STAGE 2. Thus, during STAGE 1, " track " waits first the occurrence of the on-off transi- tion of the input signal generated by a photocell, indicating that an object passed over the sensor and will enter the field of view of the camera. Then, af-ter waiting for a period of time (experimentally set up function of the belt's speed), " track " commands the vision system to acquire an image, identify an object of interest and locate it. During STAGE 2, " track " alters continuously, once each major 16 millisecond system cycle, the target location of the end-effector – part.loc (computed by vi- sion) by composing the following relative transformations: SET part.loc = to.cam[1]:vis.loc:grip.part where grip.part is the learned grasping transformation for the class of objects of interest. The updating of the end-effector target location for grasping one moving object uses the command ALTER()Dx,Dy,Dz,Rx,Ry,Rz, which specifies the magnitude of the real-time path modification that is to be applied to the robot path during the next trajectory computation. This operation is executed by "track " in task 1 that is controlling the SCARA robot in alter mode , enabled by the ALTON command. When alter mode is enabled, this instruction should be executed once during each trajectory cycle. If ALTER is executed more of- ten, only the last set of values defined during each cycle will be used. The ar- guments have the meaning: •Dx,Dy,Dz: optional real values, variables or expressions that define the translations respectively along the ZYX,, axes; 768 Industrial Robotics: Theory, Modelling and Control •Rx,Ry,Rz: optional real values, variables or expressions that define the rota- tions respectively about the ZYX,, axes. The ALTON mode operation enables real-time path-modification mode (alter mode), and specifies the way in which ALTER coordinate information will be interpreted. The value of the argument mode is interpreted as a sequence of two bit flags: Bit 1 (LSB): If this bit is set, coordinate values specified by subsequent ALTER instructions are interpreted as incremental and are accumu- lated. If this bit is clear , each set of coordinate values is interpreted as thetotal (non cumulative) correction to be applied . The program " read " executing in task 3 provides at each major cycle the updated position information y_off of the robot 2 – the vision belt along its (unique) Y motion axis, by subtracting from the current contents pos the belt's offset position offset at the time the object was located by vision: y_off =pos – offset . The SCARA's target location will be altered therefore, in non cumulative mode, with y_off. Bit 2 (MSB): If this bit is set , coordinate values specified by the subsequent ALTER instructions are interpreted to be in the World coordinate sys- tem, to be preferred for belt tracking problems. It is assumed that the axis of the vision belt is parallel to the 0Y robot axis in its base. Also, it is considered that, following the belt calibrating procedure de- scribed in Section 2.1, the coefficient pulse.to.mm , expressing the ratio between one belt encoder pulse and one millimetre, is known. The repeated updating of the end-effector location by altering the part.loc ob- ject-grasping location proceeds in task 1 by " track " execution, until motion stops at the (dynamically re-) planned grasping location, when the object will be picked-on-the-fly (Borangiu, 2006). This stopping decision is taken by "track " by using the STATE (select) function, which returns information about the state of the robot 1 selected by the task 1 executing the ALTER loop. The argument select defines the category of state information returned. For the pre- sent tracking software, the data interpreted is "Motion stopped at planned lo- cation", as in the example below: Example 3: The next example shows how the STATE function is used to stop the continu- ous updating of the end-effector's target location by altering every major cycle the position along the Y axis. The altering loop will be exit when motion stopped at planned location , i.e. when the robot's gripper is in the desired picking posi- tion relative to the moving part. Visual Conveyor tracking in High-speed Robotics Tasks 769 ALTON () 2 ;Enable altering mode MOVES part.loc ;Robot commanded to move in grasp location ;computed by vision (VLOCATE) WHILE STATE(2)<>2 DO ;While the robot is far from the moving ;target (motion not completed at planned ;location ALTER () ,-pulse.to.mm*y_off ;Continuously alter the ;target grasping location WAIT ;Wait for the next major time cycle to give the ;trajectory generator a chance to execute END ALTOFF ;Disable altering mode CLOSEI ;Robot picks the tracked object DEPARTS ;Robot exist the belt tracking mode MOVES place ;Robot moves towards the fixed object- placing loc After alter mode terminates, the robot is left at a final location that reflects both the destination of the last robot motion and the total ALTER correction that was applied. Program " drive " executing in task 2 has a unique timing aspect in both STAGES 1 and 2: when activated by the main program, it issues continuously motion commands DRIVE joint,change,speed, for the individual joint number 1 of robot 2 – the vision belt (changes in position are 100 mm; several speeds were tried). Program " read " executing in task 3 evaluates the current motion of robot 2 – the vision belt along its single axis, in two different timing modes. During STAGE 1, upon receiving from task 1 the info that an object was recognised, it computes the belt's offset, reads the current robot 2 location and extracts the component along the Y axis. This invariant offset component, read when the object was successfully located and the grasping authorized as collision-free, will be further used in STAGE 2 to estimate the non cumulative updates of the y_off motion, to alter the SCARA's target location along the Y axis. The cooperation between the tasks on which run the "track", "drive" and "read" programs is shown in Fig. 8. 770 Industrial Robotics: Theory, Modelling and Control Figure 8. Cooperation between the tasks of the belt tracking control problem Authorizing collision-free grasping by fingerprint models Random scene foregrounds, as the conveyor belt, may need to be faced in ro- botic tasks. Depending on the parts shape and on their dimension along +z, grasping models Gs_mare off line trained for prototypes representing object classes. However, if there is the slightest uncertainty about the risk of collision between the gripper and parts on the belt – touching or close one relative to the other –, then extended grasping models {} FGP_mGs_m, EG_m = must be created by the adding the gripper's fingerprint model FGP_m to effectively authorize part access only after clear grip tests at run time. Definition . Amultiple fingerprint model {} O)(G, FGP_mO)(G, FGP_mO) MFGP_m(G,k ,...,1 = for a p-fingered gripper G and a class of objects O describes the shape , location and interpretation of k sets of p projections of the gripper's fingerprints onto the image plane vis visyx, for the corresponding k grasping styles k i,...,1,=iGs_m of O-class instances. A O)(G, FGP_mi model has the following parameter structure: Visual Conveyor tracking in High-speed Robotics Tasks 771 p i size shape number shape fingeri i ,...,1, , , )( _ = =G , expresses the shape of the gripper in terms of its number p of fingers, the shape and dimensions of each finger. Rectangular -shaped fingers are considered; their size is given "width" and "height". {} p i rz y x location fingersi ci ci ,...,1,)( ),( ),( )( _ = = O O O OG, ,indicates the relative loca- tion of each finger with respect to the object's centre of mass and minimum in- ertia axis (MIA). At training time, this description is created for the object's model, and its updating will be performed at run time by the vision system for any recognized instance of the prototype. ),...1, _ ( _ p i context pose viewing fingersi= G, indicating the way how "invisi- ble" fingers are to be treated; fingers are "invisible" if they are outside the field of view. k grip ,...,1= are the k gripper-object )(OG,Gs_m distinct grasping models a priori trained, as possible alternatives to face at run time foreground context situations. Acollision-free grasping transformation ), ( O Gs_mCFi will be selected at run time from one of the kgrip parameters, after checking that all pixels belonging to i FGP_m (the projection of the grip per's fingerprints onto the image planevis visyx,, in the O-grasping location) cover only background-coloured pix- els. To provide a secure, collision-free access to objects, the following robot- vision sequence must be executed: 1.Training k sets of parameters of the multiple fingerprints model O) MFGP_m(G, for G and object class O, relative to the k learned grasping styles k i,...,1 ),( =OG, Gs_mi . 2.Installing the multiple fingerprint model O) MFGP_m(G, defining the shape, position and interpretation (viewing) of the robot gripper for clear-grip tests, by including the model parameters in a data base available at run time. This must be done at the start of application programs prior to any image acquisi- tion and object locating. 3.Automatically performing the clear-grip test whenever a prototype is recognized and located at run time, and grips k i,....1,=i FGP_m h a v e b e e n a p r i o r i d e - fined for it. On line call of the grasping parameters trained in the )(OG, Gs_mi model, which corresponds to the first grip i FGP_m found to be clear. The first step in this robot-vision sequence prepares off line the data allowing to position at run time two Windows Region of Interest (WROI) around the cur-rent object, invariant to its visually computed location, corresponding to the 772 Industrial Robotics: Theory, Modelling and Control two gripper fingerprints. This data refers to the size, position and orientation of the gripper's fingerprints, and is based on: •thenumber and dimensions of the gripper's fingers : 2-parallel fingered grippers were considered, each one having a rectangular shape of dimensions g ght wd,; •thegrasping location of the fingers relative to the class model of objects of interest. This last information is obtained by learning any grasping transformation for a class of objects (e.g. "LA"), and is described by help of Fig. 9. The following frames and relative transformations are considered: •Frames : ),(0 0yx : in the robot's base (world); ),(vis visyx : attached to the image plane; ),(g gyx : attached to the gripper in its end-point T; ),(loc locyx : default object-attached frame, MIA≡locx (the part's minimum inertia axis); ) ,(obj objyx : rotated object-attached frame, with G) dir(C,≡objx , ), C(c cyx being the object's centre of mass and T projG), (vis visyx = ; •Relative transformations : to.cam[cam]: describes, for the given camera, the lo- cation of the vision frame with respect to the robot's base frame; vis.loc: de-scribes the location of the object-attached frame with respect to the vision frame; vis.obj: describes the location of the object-attached frame with respect to the vision frame; pt.rob: describes the location of the gripper frame with re-spect to the robot frame; pt.vis: describes the location of the gripper frame with respect to the vision frame. As a result of this learning stage, which uses vision and the robot's joint encod- ers as measuring devices, a grasping model {} rz_off z_off alpha d.cg) ( , , , =LA""G, GP_m is derived, relative to the object's centre of mass C and minimum inertia axis MIA (C and MIA are also available at runtime): ))G dir(C,,( _ G), dist(T, _ G)), dir(C, MIA,( G), dist(C, .gx offrz offz alpha cgd ∠= = ∠= = A clear grip test is executed at run time to check the collision-free grasping of a recognized and located object, by projecting the gripper's fingerprints onto the image plane, ),(vis visyx , and verifying whether they "cover" only background pix- els, which means that no other object exists close to the area where the gripper's fingers will be positioned by the current robot motion command. A negative result of this test will not authorize the grasping of the object.For the test purpose, two WROIs are placed in the image plane, exactly over the areas occupied by the projections of the gripper's fingerprints in the image plane for the desired, object-relative grasping location computed from ) GP_m(G,LA""; the position (C) and orientation (MIA) of the recognized object must be available. From the invariant, part-related data:Visual Conveyor tracking in High-speed Robotics Tasks 773 cgdht wd wdoffrz alphag g .,, , ,.,LA , there will be first computed at run time the current coordinates G G,yx of the point G, and the current orientation angle grasp angle . of the gripper slide axis relative to the vision frame. Figure 9. Frames and relative transformations used to teach the ) GP_m(G,LA"" pa- rameters The part's orientation ) MIA,( .visx aim angle ∠= returned by vision is added to the learned alpha . alpha angle.aim x betavis + = ∠= ) G), (dir(C, (5) Once the part located, the coordinates C C,yx of its gravity centre C are avail- able from vision. Using them and beta, the coordinates G G,yx of the G are com- puted as follows: ) sin(. ), cos(.C G C G beta cgd y y beta cgd x x ⋅ − = ⋅ − = (6) 774 Industrial Robotics: Theory, Modelling and Control Now, the value of ),( .vis gxx grasp angle ∠= , for the object's current orientation and accounting for offrz. from the desired, learned grasping model, is obtained from offrz beta grasp angle . . + = . Two image areas, corresponding to the projections of the two fingerprints on the image plane, are next specified using two WROI operations. Using the ge- ometry data from Fig. 9, and denoting by dg the offset between the end-tip point projection G, and the fingerprints centres 2,1 , CW =∀ii , 2/ 2/LA gwd wd dg + = , the positions of the rectangle image areas "covered" by the fingerprints projected on the image plane in the desired part-relative grasp- ing location are computed at run time according to (7). Their common orienta- tion in the image plane is given by grasp angle . . ) . cos(G cw1 grasp angle dg x x ⋅ − = ; ) . cos(G cw2 grasp angle dg x x ⋅ + = (7) ) . sin(G cw1 grasp angle dg y y ⋅ − = ; ) . sin(G cw2 grasp angle dg y y ⋅ + = The type of image statistics is returned as the total number of non-zero (back- ground) pixels found in each one of the two windows, superposed onto the ar- eas covered by the fingerprints projections in the image plane, around the ob- ject. The clear grip test checks these values returned by the two WROI- generating operations, corresponding to the number of background pixels not occupied by other objects close to the current one (counted exactly in the grip- per's fingerprint projection areas), against the total number of pixels corre- sponding to the surfaces of the rectangle fingerprints. If the difference between the compared values is less than an imposed error err for both fingerprints – windows, the grasping is authorized: If [] err fngprtar ≤ −. 4ar1 AND [] err fngprtar ≤ −. 4ar2 , clear grip of object is authorized; proceed object tracking by continu- ously altering its target location on the vision belt, until robot motion is com- pleted. Else another objects is too close to the current one, grasping is not author- ized. Here, XY_scale] pix.to.mm)/[( .2 g ghtwd fngprtar = is the fingerprint's area [raw pixels], using the camera-robot calibration data: pix.to.mm (no. of image pix- els/1 mm), and XY_scale ( yx/ ratio of each pixel). Visual Conveyor tracking in High-speed Robotics Tasks 775 Conclusion The robot motion control algorithms with guidance vision for tracking and grasping objects moving on conveyor belts, modelled with belt variables and 1-d.o.f. robotic device, have been tested on a robot-vision system composed from a Cobra 600TT manipulator, a C40 robot controller equipped with EVI vi- sion processor from Adept Technology, a parallel two-fingered RIP6.2 gripper from CCMOP, a "large-format" stationary camera (1024x1024 pixels) down looking at the conveyor belt, and a GEL-209 magnetic encoder with 1024 pulses per revolution from Leonard Bauer. The encoder’s output is fed to one of the EJI cards of the robot controller, the belt conveyor being "seen" as an ex- ternal device. Image acquisition used strobe light in synchronous mode to avoid the acquisi- tion of blurred images for objects moving on the conveyor belt. The strobe light is triggered each time an image acquisition and processing operation is executed at runtime. Image acquisitions are synchronised with external events of the type: " a part has completely entered the belt window "; because these events generate on-off photocell signals, they trigger the fast digital-interrupt line of the robot controller to which the photocell is physically connected. Hence, the VPICTURE operations always wait on interrupt signals, which significantly improve the response time at external events. Because a fast line was used, the most unfavourable delay between the triggering of this line and the request for image acquisition is of only 0.2 milliseconds. The effects of this most unfavourable 0.2 milliseconds time delay upon the integrity of object images have been analysed and tested for two modes of strobe light triggering: •Asynchronous triggering with respect to the read cycle of the video camera, i.e. as soon as an image acquisition request appears. For a 51.2 cm width of the image field, and a line resolution of 512 pixels, the pixel width is of 1 mm. For a 2.5 m/sec high-speed motion of objects on the conveyor belt the most unfavourable delay of 0.2 milliseconds corresponds to a displacement of only one pixel (and hence one object-pixel might disappear during the dist travel above defined), as: (0.0002 sec) * (2500 mm/sec) / (1 mm/pixel) = 0.5 pixels. •Synchronous triggering with respect to the read cycle of the camera, induc- ing a variable time delay between the image acquisition request and the strobe light triggering. The most unfavourable delay was in this case 16.7 milliseconds, which may cause, for the same image field and belt speed a potential disappearance of 41.75 pixels from the camera's field of view (downstream the dwnstr_lim limit of the belt window). 776 Industrial Robotics: Theory, Modelling and Control Consequently, the bigger are the dimensions of the parts travelling on the con- veyor belt, the higher is the risk of disappearance of pixels situated in down- stream areas. Fig. 10 shows a statistics about the sum of: •visual locating errors : errors in object locating relative to the image frame ),(vis visyx ; consequently, the request for motion planning will then not be issued; •motion planning errors : errors in the robot's destinations evaluated during motion planning as being downstream downstr_lim , and hence not author- ised, function of the object's dimension (length long_max.obj along the minimal inertia axis) and of the belt speed (four high speed values have been considered: 0.5 m/sec, 1 m/sec, 2 m/sec and 3 m/sec). As can be observed, at the very high motion speed of 3 m/sec, for parts longer than 35 cm there was registered a percentage of more than 16% of unsuccessful object locating and of more than 7% of missed planning of robot destinations (which are outside the CBW) for visually located parts, from a total number of 250 experiments. The clear grip check method presented above was implemented in the V+ pro- gramming environment with AVI vision extension, and tested on the same ro-bot vision platform containing an Adept Cobra 600TT SCARA-type manipula- tor, a 3-belt flexible feeding system Adept FlexFeeder 250 and a stationary, down looking matrix camera Panasonic GP MF650 ins pecting the vision belt. The vision belt on which parts were travelling and presented to the camera was positioned for a convenient robot access within a window of 460 mm. Experiments for collision-free part access on randomly populated conveyor belt have been carried out at several speed values of the transportation belt, in the range from 5 to 180 mm/sec. Table 1 shows the correspondence between the belt speeds and the maximum time intervals from the visual detection of a part and its collision-free grasping upon checking [#] sets of pre taught grasping models #.,...,1 ),( =iOG, Gs_miVisual Conveyor tracking in High-speed Robotics Tasks 777 048121620 Object locating errors [%] 5 1 52 53 54 5 long_max.obj [cm] 0.5 m/sec 1m/sec 2m/sec 3m/sec 048121620 planning errors [%] 5 1 52 53 54 5 long_max.obj [cm] 0.5 m/sec 1m/sec 2m/sec 3m/sec Figure 10. Error statistics for visual object locating and robot motion planning Belt speed [mm/sec] 5 10 30 50 100 180 Grasping time (max) [sec] 1.4 1.6 1.9 2.0 2.3 2.5 Clear grips checked[#] 4 4 4 4 2 1 Table 1. Corespondance between belt speed and collision-free part grasping time 778 Industrial Robotics: Theory, Modelling and Control References Adept Technology Inc. (2001). AdeptVision User's Guide Version 14.0 , Technical Publi- cations, Part Number 00964-03300, Rev. B, San Jose, CA Borangiu, Th. & Dupas, M. (2001). Robot – Vision. Mise en œuvre en V+ , Romanian Academy Press & AGIR Press, Bucharest Borangiu, Th. (2002). Visual Conveyor Tracking for "Pick-On-The-Fly" Robot Motion Control, Proc. of the IEEE Conf. Advanced Motion Control AMC'02 , pp. 317-322, Maribor Borangiu, Th. (2004). Intelligent Image Processing in Robotics and Manufacturing , Roma- nian Academy Press, ISBN 973-27-1103-5, Bucarest Borangiu, Th. & Kopacek, P. (2004). Proceedings Volume from the IFAC Workshop Intelli- gent Assembly and Disassembly - IAD'03 Bucharest, October 9-11, 2003, Elsevier Science, Pergamon Press, Oxford, UK Borangiu, Th. (2005). Guidance Vision for Robots and Part Inspection, Proceedings vol- ume of the 14th Int. Conf. Robotics in Alpe-Adria-Danube Region RAAD'05 , pp. 27- 54, ISBN 973-718-241-3, May 2005, Bucharest Borangiu, Th.; Manu, M.; Anton, F.-D.; Tunaru, S. & Dogar, A. (2006). High-speed Ro- bot Motion Control under Visual Guidance, 12th International Power Electronics and Motion Control Conference - EPE-PEMC 2006 , August 2006, Portoroz, SLO. Espiau, B.; Chaumette, F. & Rives, P. (1992). A new approach to visual servoing in ro- botics, IEEE Trans. Robot. Automat., vol. 8 , pp. 313-326 Lindenbaum, M. (1997). An Integrated Model for Evaluating the Amount of Data Re- quired for Reliable Recognition, IEEE Trans. on Pattern Analysis & Machine In- tell. Hutchinson, S. A.; Hager, G.D. & Corke, P. (1996). A Tutorial on Visual Servo Control, IEEE Trans. on Robotics and Automation , vol. 12, pp. 1245-1266, October 1996 Schilling, R.J. (1990). Fundamentals of Robotics. Analysis and Control , Prentice-Hall, Englewood Cliffs, N.J. Zhuang, X.; Wang, T. & Zhang, P. (1992). A Highly Robust Estimator through Par- tially Likelihood Function Modelling and Its Application in Computer Vision, IEEE Trans. on Pattern Analysis and Machine Intelligence West, P. (2001). High Speed, Real-Time Machine Vision, CyberOptics – Imagenation , pp. 1-38 Portland, Oregon 77928 Visual Feedback Control of a Robot in an Unknown Environment (Learning Control Using Neural Networks) Xiao Nan-Feng and Saeid Nahavandi Introduction When a robot has no transcendental knowledge about an object to be traced and an operation environment, a vision sensor is needed to attach to the robot in order to recognize the object and the environment. On the other hand, it is also desirable that the robot has learning ability in order to improve effectively the trace operation in the unknown environment. Many methods(1)-(11) have been so far proposed to control a robot with a cam- era to trace an object so as to complete a non-contact operation in an unknown environment. e.g., in order to automate a sealing operation by a robot, Hosoda, K.(1) proposed a method to perform the sealing operation by the robot through off-line teaching beforehand. This method used a CCD camera and slit lasers to detect the sealing line taught beforehand and to correct on line the joint an-gles of the robot during the sealing operation. However, in those methods (1)-(3), only one or two image feature points of the sealing were searched per image processing period and the goal trajectory of the robot was generated using an interpolation. Moreover, those methods must perform the tedious CCD camera calibration and the complicated coor-dinate transformations. Furthermore, the synchronization problem between the image processing system and the robot control system, and the influences of the disturbances caused by the joint friction and the gravity of the robot need to be solved. In this chapter, a visual feedback control method is presented for a robot to trace a curved line in an unknown environment. Firstly, the necessary condi- tions are derived for one-to-one mapping from the image feature domain of the curved line to the joint angle domain of the robot, and a multilayer neural network which will be abbreviated to NN hereafter is introduced to learn the mapping. Secondly, a method is proposed to generate on line the goal trajec-tory through computing the image feature parameters of the curved line. Thirdly, a multilayer neural network-based on-line learning algorithm is de- veloped for the present visual feedback control. Lastly, the present approach is applied to trace a curved line using a 6 DOF industrial robot with a CCD cam-780 Industrial Robotics: Theory, Modelling and Control era installed in its end-effecter. The main advantage of the present approach is that it does not necessitate the tedious CCD camera calibration and the com- plicated coordinate transformations. Contact object Robot end-effectorWorkspace frameCCD camera Rigid tool Tangential directionxoyozo OȈ Goal position G Initial position ICurved line Figure 1. Vision-based trace operation Robot end-effectorWorkspace frame xoyozo OȈ xCyCCȈxBzB BȈyBRobot base frame zC Camera frame tcpcp FeatureImag feature domai n iıȟ Goal featureInitial featur eFeature of curved line Figure 2. Image features and mapping relation Learning-Based Visual Feedback Control of an Industrial Robot 781 A Trace Operation by a Robot When a robot traces an object in an unknown environment, visual feedback is necessary for controlling the position and orientation of the robot in the tan- gential and normal directions of the operation environment. Figure 1 shows a robot with a CCD camera installed in its end-effecter. The CCD camera guides the end-effecter to trace a curved line from the initial position I to the target position G. Since the CCD camera is being fixed at the end-effecter, the CCD camera and the end-effecter always move together. Mapping from Image Feature Domain to Joint Angle Domain 3.1 Visual feedback control For the visual feedback control shown in Fig. 1, the trace error of the robot in the image feature domain needs to be mapped to the joint angle domain of the robot. That is, the end-effecter should trace the curved line according to ja,1a+j in the image domain of the features jA,1A+j shown in Fig. 2. Letȟ,ȟd∈R6×1be the image feature parameter vectors of ja,1a+j in the image feature domain shown in Fig. 2, respectively. The visual feedback control shown in Fig. 1 can be expressed as e=||ȟd–ȟ||, (1) where || · || is a norm, and e should be made into a minimum. From the projection relation shown in Fig. 2, we know ȟ=ϕ(tcp), (2) where ϕ∈R6×1 is a nonlinear mapping function which realizes the projection transformation from the workspace coordinate frame Oto the image feature domain shown in Fig. 2. It is assumed that ptc∈R6×1is a position/orientation vector from the origin of the CCD camera coordinate frame C to the gravity center of jA. Linearizing Eq.(2) at a minute domain of tcp yields ȟǅ=Jf·tcpδ, (3) 782 Industrial Robotics: Theory, Modelling and Control whereȟǅand ptcǅ are minute increments of ȟ and ptc, respectively, and Jf= ptcǗ∂∂ ∈R6×6is a feature sensitivity matrix. Furthermore, let ș and șǅ∈R6×1are a joint angle vector of the robot and its minute increment in the robot base coordinate frame B. If we map șǅ from Btoptcǅ inOusing Jacobian matrix of the CCD camera Jc∈R6×6, we can get ptcǅ =Jc·șǅ. (4) From Eqs.(3) and (4), we have șǅ= (JfJc)-1 ·ȟǅ . (5) Therefore, the necessary condition for realizing the mapping expressed by Eq.(5) is that ( JfJc)-1 must exist. Moreover, the number of the independent im- age feature parameters in the image feature domain (or the element numbers ofȟ) must be equal to the degrees of freedom of the visual feedback control system. 3.2 Mapping relations between image features and joint angles Because Jfand Jc are respectively linearized in the minute domains of ptc and ș, the motion of the robot is restricted to a minute joint angle domain, and Eq.(5) is not correct for large șǅ. Simultaneously, the mapping is weak to the change of ( JfJc)-1. In addition, it is very difficult to calculate ( JfJc)-1 on line during the trace operation. Therefore, NN is introduced to learn such mapping. Firstly, we consider the mapping from ǻptc in O to ǻȟ in the image feature domain. ǻȟ and tcǻpare increments of ȟ and tcp for the end-effecter to move from A j to A j+1, respectively. As shown in Fig. 2, the mapping is depend on tcp, and the mapping can be expressed as ǻȟ=1ĳ(tcǻp,tcp), (6) where1ĳ( )∈R6×1 is a continuous nonlinear mapping function.We have from Eq.(6), tcǻp=2ĳ(ǻȟ,tcp), (7) where2ĳ( )∈R6×1 is a continuous nonlinear mapping function. When ȟ is uni- quely specified in the image feature domain, there is a one-to-one mapping re- lationship between tcp and ȟ. Therefore, Eq.(7) is expressed as Learning-Based Visual Feedback Control of an Industrial Robot 783 tcǻp=3ĳ(ǻȟ,ȟ), (8) where3ĳ( )∈R6×1 is a continuous nonlinear mapping function. Secondly, we consider the mapping from șǻ in Btocǻp in O. Let cp∈R6×1be a position/ orientation vector of the origin of Cwith respect to the origin of O,șǻ and cǻp be increments of ș and cp for the end-effecter to move from A j to A j+1, respectively. cǻp is dependent on ș as shown in Fig. 2, and we obtain from the forward kinematics of the CCD camera cǻp=' 3ĳ(șǻ,ș), (9) where' 3ĳ( )∈R6×1 is a continuous nonlinear mapping function. Since the relative position and orientation between the end-effecter and the CCD camera are fixed, the mapping from cǻp to tcǻp is also one-to-one. We get tcǻp=4ĳ(cǻp), (10) where4ĳ( )∈R6×1 is a continuous nonlinear mapping function. Combining Eq.(9) and Eq.(10) gives tcǻp=' 4ĳ(șǻ,ș), (11.a) and we have from Eq.(11.a) șǻ=5ĳ(tcǻp,ș), (11.b) where5ĳ( )∈R6×1 is a continuous nonlinear mapping function. It is known from Eq.(11.b) that if the CCD camera moves from A j to A j+1, the robot has an uni- queșǻ. Combing Eq.(8) and Eq.(11.b) yields șǻ=6ĳ(ǻȟ,ȟ,ș), (12) where6ĳ( )∈R6×1 is a continuous nonlinear mapping function. In this paper, NN is used to learn 6ĳ( ). 784 Industrial Robotics: Theory, Modelling and Control 3.2 Computation of image feature parameters For 6 DOF visual feedback control, 6 independent image feature parameters are chosen to correspond to the 6 joint angles of the robot. An image feature parameter vector )(jȟ=)( 1[jξ,)( 2jξ,···,Tj])( 6ξ is defined at the window j shown in Fig. 3.L and W are length and height of the window j, respectively. Defining)(j qrg at the window j by )(j qrg= °¯°®­ ᧥ pixel black᧤ 1᧥ pixel white᧤ 0, (13.a) the elements of )(jȟ are defined and calculated by the following equations: (1) The gravity center coordinates )( 1jξ =¦¦¦¦ ⋅ ==== L qW rj qrL qW rj qr gq g 11)(11)( , (13.b) Image feature domainuv jWindow )1(−jȟ WWL)1(+jȟImage feature j+1j1 W)(jȟ− Figure 3.Definition of image feature parameter vector )( 2jξ=¦¦¦¦ ⋅ ==== L qW rj qrL qW rj qr gr g 11)(11)( , (13.c) (2) The area )( 3jξ=¦¦ ==L qW rj qrg 11)( , (13.d) Learning-Based Visual Feedback Control of an Industrial Robot 785 (3) The lengths of the main and minor axes of the equivalent ellipse )( 4jξ= )( 32)( 112)( 02)( 20)( 02)( 20 2)(4) ( jj j j j j ξλ λ λ λ λ+ + − + + , (13.e) )( 5jξ =)( 32)( 112)( 02)( 20)( 02)( 20 2)(4) ( jj j j j j ξλ λ λ λ λ+ + − − + , (13.f) Where )( 11jλ= ] [] [)( 2 11)( 1)( jL qW rj j qr r q g ξ ξ− − ¦¦ −⋅ ==, (13.g) )( 20jλ=¦¦ −⋅ ==L qW rj j qrq g 11)( 1)(] [ ξ 2, (13.h) )( 02jλ=¦¦ −⋅ ==L qW rj j qrr g 11)( 2)(] [ξ 2, (13.i) (4) The orientation )( 6jξ = )( 02)( 20)( 11 1tan21 j jj λ λλ −−. (13.j) At time t=imT,ȟ and ǻȟ in Eq.(12) are given by ȟ= )()(imjȟ , (14.a) ǻȟ= )(imǻȟ , (14.b) where )()(imjȟ and )()1(imj+ȟ are image feature parameter vectors in the win- dow j and j+1 shown in Fig. 3. )()0(imȟ , )()1(imȟ and )()2(imȟ can be calculated forj=0,1,2 in Eq.(13.a)~(13.j). Goal Trajectory Generation Using Image Feature Parameters In this paper, a CCD camera is used to detect the image feature parameters of the curved line, which are used to generate on line the goal trajectory. The se-786 Industrial Robotics: Theory, Modelling and Control quences of trajectory generation are shown in Fig. 4. Firstly, the end-effecter is set to the central point of the window 0 in Fig. 4(a). At time t=0, the first image of the curved line is grasped and processed, and the image feature parameter vectors )0()0(ȟ , )0()1(ȟ and )0()2(ȟ in the windows 0,1,2 are computed respec- tively. From time t=mT to t=2mT, the end-effecter is only moved by )0(ǻȟ= )0()1(ȟ – )0()0(ȟ . At time t=mT, the second image of the curved line is grasped and processed, the image feature parameter vector )()2(mȟ shown in Fig. 4(b) is computed. From t=2mT to t=3mT, the end-effecter is only moved by )(mǻȟ = )0()2(ȟ )0()1(ȟ− . At time t=imT, (i+1)th image is grasped and processed, the image feature parameter vector )()2(imȟ shown in Fig. 4(c) is computed. From t=imT to t=(i+1)mT, the end-effecter is only moved by )(imǻȟ = ])1[( ])1[()0( )1(mi mi − − −ȟ ȟ . uv 12 )0()1(ȟ WWL )0()0(ȟ)0()2(ȟWindow W0uv 1Window )()2(mȟ WWL)()1(mȟ )()0(mȟ W2 0 (a) Image feature domain at t=0 b) Image feature domain at t=mT uv 1Window 2 )()2(imȟ WWL )()1(imȟ )()0(imȟ W0 c)Image feature domain t=imT Figure 4.Image trajectory generation sequences Learning-Based Visual Feedback Control of an Industrial Robot 787 Neural Network-Based Learning Control System 5.1 Off-line learning algorithm In this section, a multilayer NN is introduced to learn 6ĳ( ). Figure 5 shows the structure of NN which includes the input level A, the hidden level B, C and the output level D. Let M,P,U,Nbe the neuron number of the levels A, B, C, D, respectively, g=1,2,ƛƛƛ,M,l=1,2,ƛƛƛ,P,j=1,2,ƛƛƛ,U and i=1,2,ƛƛƛ,N. Therefore, NN can be expressed as Input layer AHidden layer BHidden layer COutput layer D.. ... . ... ... ...1 N1 Uj1 P1 g Ml iAB glwBC ljwCD jiw ... ...... Figure 5. Neural network (NN) structure )(kș )(knǻș )(krǻș)(kǻȟ )()(kjȟNN Training algorithm(k=0,1,2, S-1).. ST. Figure 6. Off-line learning of NN 788 Industrial Robotics: Theory, Modelling and Control °¿°¾½ = = = =+ ¦ ⋅ = ¦ +⋅ = ¦ +⋅ = = = = )( ),( ),( ,, , 1 1 1 D iD iC jC jB lB lA gA gD iU jC jCD jiD iP lC jB lBC ljC jM gB lA gAB glB l xf y xf y xf y xyzy w x zy w x zy w x , (15) whereR mx,R my and R mz (m=g ,l,j,i;R=A ,B,C,D) are the input, the output and the bias of a neuron, respectively. AB glw,BC ljw and CD ljw are the weights between A gy and B lx,B ly and C jx,C jy and D ix, respectively. The sigmoid function of NN is defined by )(xf =xx ee ββ −− +− 11, (16) whereǃ is a real number which specifies the characteristics of )(xf. The learn- ing method of NN is shown in Fig. 6, and its evaluation function is defined as ¦ − − =− =1 0)]( )( [)]( )( [21 S kn rT n r f k k k kSE ǻș ǻș ǻș ǻș, (17) where )(krǻș and )(knǻș ∈R6×1are the increments of the robot joint angle vec- tor and the output vector of the neural network, respectively. The positive in- teger S is the number of the learning samples )(kș, )(krǻș , )()(kjȟ , )(kǻȟ for the end-effecter to move along the curved line from the initial position I to the goal position G. )(kș, )(krǻș , )()(kjȟ and )(kǻȟ are off-line measured in advance, re- spectively. )(kș, )()(kjȟ and )(kǻȟ are divided by their maximums before input- ting to NN, respectively. CD jiw of NN is changed by CD jif fCD jiwEw∂∂−=η ǻ ,᧤j=1,2,ƛƛƛ,U;i=1,2,ƛƛƛ,N᧥, (18.a) whereCD jiwǻ is an increment of CD jiw,fη is a learning rate of NN. From Eqs.(15)~(17), we obtain =∂∂ CD jif wE )](ǻ)(ǻ[ k kni ri θ θ− − − f'C jD iyx)( , (j=1,2,ƛƛƛ,U;i=1,2,ƛƛƛ,N), (18.b) where )(ǻ kriθ and )(ǻ kniθ are the ith element of )(krǻș and )(knǻș , respec- tively.AB glw and BC ljw of NN are changed by the error back-propagation algo- rithm. Here, the detailed process of error back propagation is omitted. Learning-Based Visual Feedback Control of an Industrial Robot 789 The present learning control system based on NN is shown Fig. 7. The initial AB glw,BC ljw and CD jiw of NN are given by random real numbers between –0.5 and 0.5. When NN finishes learning, the reference joint angle )1(+knș of the robot is obtained by ¿¾½ −⋅⋅⋅ = = =+ =+ )1 ,,1,0 (, )0( ),0( )0(),( )( )1 ( S kk k k n nn n n d ǻșșșǻșș ș , (19) where d ∈R6×1is an output of NN when )0(ș, )0()0(ȟ and )0(ǻȟ are used as ini- tial inputs of NN. The PID controller )(zcG is used to control the joint an- gles of the robot. 5.2 On-line learning algorithm For the visual feedback control system, a multilayer neural network NN c is in- troduced to compensate the nonlinear dynamics of the robot. The structure and definition of NN c is the same as NN, and its evaluation function is defined as Ec(k) = eT(k)We(k) (20) where e(k)∈R6×1is an input vector of )(czG , and W∈R6×6 is a diagonal weighting matrix.CD jiw of NN cis changed by CD jic cCD jiwEw∂∂−=η ǻ ,᧤j=1,2,ƛƛƛ,U;i=1,2,ƛƛƛ,N᧥, (21.a) whereCD jiwǻ is an increment of CD jiw, and cη is a learning rate. From Eqs.(15)~(17), we have =∂∂ CD jic wE ie−wif'C jD iyx)( (j=1,2,ƛƛƛ,U;i=1,2,ƛƛƛ,N), (21.b) whereie is the ith element of e(k), and wiis the ith diagonal element of W.AB glw andBC ljw of NN c are changed by the error back-propagation algorithm, the pro- cess is omitted. The initial AB glw,BC ljw and CD jiw of NN c are given by random number between –0.5 and 0.5. )1(+knș , )(knǻș and )1(−knǻș are divided by their maximums before in- putting to NN c, respectively. K is a scalar constant which is specified by the experiments. While NN c is learning, the elements of e(k) will become smaller and smaller.790 Industrial Robotics: Theory, Modelling and Control Figure 7. Block diagram of learning control system for a robot with visual feedback Learning-Based Visual Feedback Control of an Industrial Robot 791 In Fig. 7, I is a 6×6 unity matrix. )]([kșȁ ∈R6×1and )]([krșJ = )(/)]([ k kșșȁ ∂ ∂ ∈R6×6 are the forward kinemics and Jacobian matrix of the end-effecter (or the rigid tool), respectively. Let )(ktp = ,[1tp ,2tp···T tp],6 be a position/orientation vector which is defined in Oand corresponds to the tip of the rigid tool, we have pt(k) = )]([kșȁ , (22.a) )(kt• p = )( )]([ k kr• ⋅șșJ . (22.b) The disturbance observer is used to compensate the disturbance torque vector )(kĲ ∈R6×1 produced by the joint friction and gravity of the robot. The PID controller )(zcG is given by )(zcG = PK+IKzz −1+ DK(11−−z), (23) wherePK,IK and DK∈R6×6are diagonal matrices which are empirically de- termined. 5.3 Work sequence of the image processing system The part circled by the dot line shown in Fig. 7 is an image processing system. The work sequence of the image processing system is shown in Fig. 8. At time t=imT, the CCD camera grasps a 256-grade gray image of the curved line, the image is binarizated, and the left and right terminals of the curved line are de- tected. Afterward, the image parameters )0()0(ȟ , )0()1(ȟ and )0()2(ȟ᧤or )()2(imȟ᧥are computed using Eqs. (13.a)~(13.j) in the windows 0,1,2 shown in Figs. 4(a)~(c). Furthermore, in order to synchronize the image processing system and the ro- bot joint control system, the 2nd-order holder )(2zhG in Section 5.4 is intro- duced. )()0(imȟ , )()1(imȟ and )(imǻȟ are processed by )(2zhG , and their discrete time values )()0(kȟ , )()1(kȟ and )(kǻȟ are solved at time t=kT. 5.4 Synchronization of image processing system and robot control system Generally, the sampling period of the image processing system is much longer than that of the robot control system. Because the sampling period of )()0(imȟ , )()1(imȟ and )(imǻȟ is m times of the sampling period of )(kș, it is difficult to synchronize )()0(imȟ , )()1(imȟ , )(imǻȟ and )(kș by zero-order holder or 1st-order hol- der. Otherwise, the robot will drastically accelerate or decelerate during the vi- sual feedback control. 792 Industrial Robotics: Theory, Modelling and Control In this section, )()0(imȟ and )()1(imȟ are processed by the 2nd-order holder )(2zhG . For instance, )(j lξ is the lth element of )(jȟ, and )(j lξ is compensated by the 2nd- order curved line from t=imT tot=(i+1)mT. At time t=kT, )()(kjȟ (j=0,1) is calcu- lated by )(jȟ(k)= +)()(imjȟ { − +−])1[() (2)( 22 mimimkjȟ })()(imjȟ , (0 k–im<m/2), (24.a) )(jȟ(k)= )()(imjȟ + { − + ¿¾½ ¯®­ +−−])1[(])1([21)( 22 mimmikjȟ })()(imjȟ , (m/2k–im<m). (24.b) Image grabbing ),0()0(ȟ ),0()1(ȟ )0()2(ȟBinarization Goal terminal detection Start terminal detection If iฺ1, compute image featur e parameters in the window 2 )()2(imȟ (i=1,2,···) ),( e synchroniz)()0( 2 im zh ȟ G kTt k im = timeat)(),()1(șȟ),()0(kȟ ),()1(kȟ ș(k) , (i=0,1,2,···)If i=0, compute image featur e parameters in the windows 0,1,2Start tracing Stop tracing Figure 8. Work sequence of image processing Learning-Based Visual Feedback Control of an Industrial Robot 793 6 DOF robot Motoman K3SImage processingRobot control I/O ports Switches 6 servo drivers CCD camera controller CCD camera Work tableRigid toolOperation enverimentHandHand controllerParallel communication Figure 9.Trace operation by a robot Experiments In order to verify the effectiveness of the present approach, the 6 DOF indus- trial robot is used to trace a curved line. In the experiment, the end-effecter (or the rigid tool) does not contact the curved line. Figure 9 shows the experimen-tal setup. The PC-9821 Xv21 computer realizes the joint control of the robot. The Dell XPS R400 computer processes the images from the CCD camera. The robot hand grasps the rigid tool, which is regarded as the end-effecter of the robot. The diagonal elements of PK,IK and DK are shown in Table 1, the con- trol parameters used in the experiments are listed in Table 2, and the weight- ing matrix W is set to be an unity matrix I. Figures 10 and 11 show the position responses (or the learning results of NN and NN c) )(1kpt, )(2kpt and )(3kpt in the directions of x,yand zaxes of O. )(1kpt, )(2kpt and )(3kpt shown in Fig. 10 are teaching data. Figure 11 show the trace responses after the learning of NN c. Figure 12 shows the learning processes of NN and NN c as well as the trace errors. Ef converges on 10-9 rad2, the learning error E* shown in Fig. 12(b) is given by E*= NkE kc /])( [1N 0¦− =, where N=1000. After the 10 tri- als (10000 iterations) using NN c, E*converges on 7.6×10-6 rad2, and the end-794 Industrial Robotics: Theory, Modelling and Control effecter can correctly trace the curved line. Figure 12(c) shows the trace errors of the end-effecter in x, y, z axis directions of O , and the maximum error is lower than 2 mm. Table 1. Diagonal ith element of PK,IK andDK Table 2. Parameters used in the experiment 0,630,640,650,660,670,68 012345 Time sPosition m -0,15-0,1-0,0500,05 012345 Time sPosition m (a)Position pt1inxdirection (b)Position pt2 in y direction iPK Nym/rad IK Nym/rad DK Nym/rad 1 25473 0 .000039 0 .0235 2 8748 0 .000114 0 .0296 3 11759 0 .000085 0 .0235 4 228 0 .004380 0 .0157 5 2664 0 .000250 0 .0112 6 795 0 .001260 0 .0107 Neuron numbers of NN and NN cM=18, P=36 U=72,N=6 Sampling period T=5 ms, mT=160 ms Control Parametersfη=0.9,cη=0.9,˟=1, K=100, S=732 Window size L=256, W=10Learning-Based Visual Feedback Control of an Industrial Robot 795 0,060,0650,070,0750,08 012345 Time sPosition m (c)Position pt3 in zdirection Figure 10. The teaching data for the learning of NN 0,630,640,650,660,670,68 012345 Time sPosition m-0,15-0,1-0,0500,05 012345 Time sPosition m (a)Response pt1inxdirection (b)Response pt2 in y direction 0,060,0650,070,0750,08 012345 Time sPosition m (c)Response pt3 in zdirection Figure 11. The trace responses after the learning of NN c(after 10th trials) 796 Industrial Robotics: Theory, Modelling and Control 00,0000010,0000020,0000030,000004 1 9968 19937 29905 No. of trialsError rad2Ef (f(×   00,000020,000040,000060,00008 1234567891 No. of trialsError rad2 0E (a)Learning of NN (b)Learning of NN c -0,003-0,002-0,00100,0010,002 012345 Time sTrace error m (c)Trace errors in x,y, z directions Figure 12. Learning processes and trace errors Conclusions In this chapter, a visual feedback control approach based on neural network is presented for a robot with a camera installed on its end-effecter to trace an ob-ject in an unknown environment. Firstly, the necessary conditions for mapping the image features of the object to be traced to the joint angles of the robot are derived. Secondly, a method is proposed to generate a goal trajectory of the robot by measuring the image feature parameters of the object to be traced. Thirdly, a multilayer neural network is used to learn off-line the mapping in order to produce on line the reference inputs for controlling the robot. Fourthly, a multilayer neural network-based learning controller is designed for the compensation the nonlinear robotic dynamics. Lastly, the effectiveness of Learning-Based Visual Feedback Control of an Industrial Robot 797 the present approach is verified by tracing a curved line using a 6 DOF indus- trial robot with a CCD camera installed on its end-effecter. Through the above research, the following conclusions are obtained: If the mapping relations between the image feature domain of the object and the joint angle domain of the robot are satisfied, NN can learn the mapping relations. By computing the image feature parameters of the object, the goal trajec- tory for the end-effecter to trace the object can be generated. The approach does not necessitate the tedious CCD camera calibration and the complicated coordinate transformation. Using the 2nd-order holder and the disturbance observer, the synchroni- zation problem and the influences of the disturbances can be solved. The above research is supported by the Natural Science Foundation of China (No. 60375031) and the Natural Science Foundation of Guangdong (No. 36552), the authors expresses their heartily thanks to the Foundations. References Hosoda, K. & Asada, M., (1996). Adaptive Visual Servoing Controller with Feed-forward Compensator without Knowledge of True Jacobian, Journal of Robot Society of Japan , (in Japanese), Vol. 14, No. 2, pp. 313-319. Hosoda, K., Igarashi, K. & Asada, M., (1997). Adaptive Hybrid Visual/Force Servoing Control in Unknown Environment, Journal of Robot Society of Ja- pan, (in Japanese), Vol. 15, No. 4, pp. 642-647. Weiss, L.E. & Sanderson, A.C., (1987). Dynamic Sensor-Based Control of Ro- bots with Visual Feedback, IEEE Journal of Robotics and Automation , Vol.3, No. 5, pp. 404-417. Nikolaos, P. & Pradeep, K., (1999). Visual Tracking of a Moving Target by a Camera Mounted on a Robot: A Combination of Control and Vision, IEEE Journal of Robotics and Automation , Vol. 9, No. 1, pp. 14-35. Bernardino, A. & Santos-Victor J, (1999). Binocular Tracking: Integrating Per- ception and Control, IEEE Journal Robotics and Automation , Vol. 15, No. 6, pp. 1080-1093. Malis, E., Chaumette, F. and Boudet, S., (1999). 2-1/2-D Visual Servoing, IEEE Journal of Robotics and Automation , Vol. 15, No. 2, pp. 238-250. Hashimoto, K., Ebine, T. & Kimura, H., (1996). Visual Servoing with Hand-Eye Manipulator-Optimal Control Approach, IEEE Journal of Robotics and Automation , Vol. 12, No. 5, pp. 766-774. 798 Industrial Robotics: Theory, Modelling and Control Wilson, J.W., Williams, H. & Bell, G.S., (1996). Relative End-Effecter Control Using Cartesian Position Based Visual Servoing, IEEE Trans. Robotics and Automation , Vol. 12, No. 5, pp. 684-696. Ishikawa, J., Kosuge, K. & Furuta, K., Intelligent Control of Assembling Robot Using Vision Sensor, 13-18 May 1990, Cincinnati, OH, USA, Proceedings 1990 IEEE International Conference on Robotics and Automation (Cat. No.90CH2876-1), Vol. 3, pp. 1904-1909. Yamada, T. & Yabuta, T., (1991). Some Remarks on Characteristics of Direct Neuro-Controller with Regard to Adaptive Control, Trans. Soc. Inst. Contr. Eng., (in Japanese), Vol. 27, No. 7, pp. 784-791. Verma, B., (1997). Fast Training of Multilayer Perceptrons, IEEE Trans. Neural Networks , Vol. 8, No. 6, pp. 1314-1319. 79929 Joystick Teaching System for Industrial Robots Using Fuzzy Compliance Control Fusaomi Nagata, Keigo Watanabe and Kazuo Kiguchi Introduction Industrial robots have been applied to several tasks, such as handling, assem- bling, painting, deburring and so on (Ferretti et al., 2000), (Her & Kazerooni, 1991), (Liu, 1995), (Takeuchi et al., 1993), so that they have been spread to vari- ous fields of manufacturing industries. However, as for the user interface of the robots, conventional teaching systems using a teaching pendant are only provided. For example, in the manufacturing industry of wooden furniture, the operator has to manually input a large mount of teaching points in the case where a workpiece with curved surface is sanded by a robot sander. This task is complicated and time-consuming. To efficiently obtain a desired trajectory along curved surface, we have already considered a novel teaching method as- sisted by a joystick (Nagata et al., 2000), (Nagata et al., 2001). In teaching mode, the operator can directly control the orientation of the sanding tool attached to the tip of the robot arm by using the joystick. In this case, since the contact force and translational trajectory are controlled automatically, the operator has only to instruct the orientation with no anxiety about overload and non- contact state. However, it is not practical to acquire sequential teaching points with normal directions, adjusting the tool's orientation only with operator's eyes. When handy air-driven tools are used in robotic sanding, keeping contact with the curved surface of the workpiece along the normal direction is very impor- tant to obtain a good surface quality. If the orientation of the sanding tool largely deviates from normal direction, then the kinetic friction force tends to become unstable. Consequently, smooth and uniform surface quality can’t be achieved. That is the reason why a novel teaching system that assists the op- erator is now being expected in the manufacturing field of furniture. In this paper, an impedance model following force control is first proposed for an industrial robot with an open architecture servo controller. The control law allows the robot to follow a desired contact force through an impedance model in Cartesian space. And, a fuzzy compliance control is also presented for an advanced joystick teaching system, which can provide the friction force acting 800 Industrial Robotics: Theory, Modelling and Control between the sanding tool and workpiece to the operator (Nagata et al., 2001). The joystick has a virtual spring-damper system, in which the component of stiffness is suitably varied according to the undesirable friction force, by using a simple fuzzy reasoning method. If an undesirable friction force occurs in teaching process, the joystick is controlled with low compliance. Thus, the op- erator can feel the friction force thorough the variation of joystick's compliance and recover the orientation of the sanding tool. We apply the joystick teaching using the fuzzy compliance control to a teaching task in which an industrial robot FS-20 with an open architecture servo controller profiles the curved sur- face of a wooden workpiece. Teaching experimental results demonstrate the effectiveness and promise of the proposed teaching system. Impedance Model Following Force Control More than two decades ago, two representative force control methods were proposed (Raibert, 1981), (Hogan, 1985) ; controllers using such methods have been advanced and further applied to various types of robots. However, in order to realize a satisfactory robotic sanding system based on an industrial robot, deeper considerations and novel designs are needed. Regarding the force control, we use the impedance model following force control that can be easily applied to industrial robots with an open architecture servo controller (Nagata et al., 2002). The desired impedance equation for Cartesian-based con- trol of a robot manipulator is designed by () () () ( ) ( )d f d d d d d d FFKSI SF xx SK xxB xx M − −+ = − + − + −  (1) where3ℜ∈x ,3ℜ∈x and 3ℜ∈x are the position, velocity and acceleration vectors, respectively. 33×ℜ∈dM ,33×ℜ∈dB and 33×ℜ∈dK called impedance parameters are the coefficient matrices of the desired mass, damping and stiff- ness, respectively. 3ℜ∈F is the force vector acting between the end-effector and its environment. 33×ℜ∈fK is the force feedback gain matrix. dx,dx,dx andT dF are the desired position, velocity, acceleration and force vector; S and I are the switch matrix diag(3 21 S,S,S ) and identity matrix. It is assumed that dM,dB,dK and fK are positive definite diagonal matrices. Note that if S=I, then Eq. (1) becomes an impedance control system in all directions; whereas if S is the zero matrix, it becomes a force control system in all direc- tions. If the force control is used in all direction, dxx X−= gives ()d f d d d FFK MXB M X − + −=− − 1 1 (2) Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 801 Figure 1. Block diagram of the impedance model following force control. In general, Eq. (2) is solved as () () ( ) {} () τ τ d t td f dt d d d d exp 0 exp1 01 1FFK M BM X BM X − − − + − =− − −³ (3) Here, we will consider the form in the discrete time kusing a sampling width tΔ. It is assumed that F is constant within () tk t kt Δ<≤− Δ 1 and diagonal components of dM,dB,dK and fK are given constant values. Defining () ( )tkt|t kΔ= =X X , it follows that () ( )() { } {}d f d d d d d k t k t k F FKBI BM X BM X − −Δ − −− Δ − =− − −)( ) exp( 1 exp1 1 1 (4) Remembering () () () k k kdx x X − = and setting () 0=kdx in the direction of force control, a recursive equation of velocity command in Cartesian space is de- rived by () ( )() { } {}d f d d d d d k t kt k F FKBI BM x BM x − −Δ − −− Δ − =− − −)( ) exp( 1 exp1 1 1  (5) where ()kx is composed of position vector () ()()[]Tkzkykx . The manipulated variable ()kx is given to the normal direction to a workpiece. Figure 1 shows the block diagram of the impedance model following force control in s- domain. Profiling control is the basic strategy for sanding or polishing, and it is per- formed by both force control and position/orientation control. However, it is very difficult to realize stable profiling control under such environments that have unknown dynamics or shape. Undesirable oscillations and non-contact state tend to occur. To reduce such undesirable influences, an integral action is added to Eq. (5), which yields 802 Industrial Robotics: Theory, Modelling and Control () () () { } {} {}11 fd d d d k1 df d i d n1v k exp M B t x k 1 exp( M B t ) I B K F(k ) F K F(n) FΔΔ−− − ==− − − − − −+ −¦ (6) where ()3 2 1 diagi i i i K,K,K =K is the integral gain. The manipulated variable ()kfv given by Eq. (6) is also substituted into the reference of the Cartesian based servo controller incorporated in an industrial robot, so that the contact force ()kF can track the reference dF through the impedance model. Figure 2. Relation among desired mass diM , damping diB and ) exp(1t BMdi di Δ −− From Eq. (6), the following characteristics are seen. Among the impedance pa- rameters, desired damping has much influence on force control response as well as the force feedback gain. The larger dB becomes, the smaller the effec- tiveness of force feedback becomes. Figure 2 shows the relation among diM, diB and diagonal elements of transition matrix ( )tBMdi di Δ −−1exp in the case that tΔ is set to 0.01 [s]. i denotes the i-th ( i=1, 2, 3) diagonal elementAs can be seen, for example, if diB is smaller than about 100, then appropriate diM is limited.diM over 15 leads ( )tBMdi di Δ −−1exp to almost 1. In selecting the imped- ance parameters, their combinations should be noted. Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 803 Fuzzy Compliance Control of a Joystick Device 3.1 Fuzzy Compliance Control In our proposed teaching system, the joystick is used to control the orientation of the sanding tool attached to the top of the robot arm. The rotational velocity of the orientation is generated based on the values of the encoder in x- and y- rotational directions as shown in Fig. 3. Also, the compliance of the joystick is varied according to the kinetic friction force acting between a sanding tool and workpiece. As the friction force becomes large, the joint of the joystick is con- trolled more stiffly. Therefore, the operator can perform teaching tasks having the change of the friction force with the joystick's compliance. The desired compliance equation for the joint-based control of a joystick is de- signed by JJ JJ J~șKșBĲ + = (7) where2ℜ∈JĲ is the joint driving torque vector of the joystick. 2ℜ∈Jș and 2ℜ∈Jș are the inclination angle and the angular velocity vectors, respec- tively. ( )Jy Jx J B,B diag=B and ()Jy Jx J K~,K~ ~diag=K are the virtual damper and stiffness matrices of the joystick joints. The subscripts x,y denotes x- and y- directional components in Fig. 3, respectively. Figure 3. Coordinate system of a joystick 804 Industrial Robotics: Theory, Modelling and Control Further, to adjust the compliance of the joystick according to the friction force, J~K is defined as ¸¸ ¹· ¨¨ ©§ ΔΔ +¸¸ ¹· ¨¨ ©§=¸¸ ¹· ¨¨ ©§ JyJx JyJx JyJx KK KK K~K~ 00 00 00 (8) where ( )Jy Jx J K,K diag=K is the base stiffness matrix, ( )Jy Jx J K,K Δ Δ = Δ diag K is the compensated stiffness matrix whose diagonal elements are suitably given from the following fuzzy reasoning part. 3.2 Generation of Compensated Stiffness Using Simple Fuzzy Reasoning In this section, we discuss how to suitably generate the compensated stiffness according to the undesirable friction force. The compensated stiffness is adju- sted by using a simple fuzzy reasoning method, so that the teaching operator can conduct the teaching task delicately feeling the friction force acting betwe- en the sanding tool and workpiece through the compliance of the joystick. In teaching, x- and y-directional frictions xF and yF in the base coordinate system are used as fuzzy inputs for the fuzzy reasoning, and they are used to estimate y- and x-rotational compliance of the joystick joints. The present fuzzy rules are described as follows: Rule 1: If |F|x is 1xA~ and |F|y is 1yA~, Then 1x Jx B K= Δ and 1y Jy B K= Δ Rule 2: If |F|x is 2xA~ and |F|y is 2yA~, Then 2x Jx B K= Δ and 2y Jy B K= Δ Rule 3: If |F|x is 3xA~ and |F|y is 3yA~, Then 3x Jx B K= Δ and 3y Jy B K= Δ # # Rule L: If |F|x is xLA~ and |F|y is yLA~, Then xL Jx B K= Δ and yL Jy B K= Δ WherexiA~ and yiA~ are i-th ( i=1,…, L) antecedent fuzzy sets for |F|x and |F|y, respectively. L is the number of the fuzzy rules. xiB and yiB are the conse- quent constant values which represent i-thx- and y-rotational compensated stiffness, respectively. In this case, the antecedent confidence calculated by i- th fuzzy rule is given by () ( )|F| |F|y Ayi x Axi i μ μ ω ∧ = (9) Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 805 where )(⋅Xμ is the Gaussian type membership function for a fuzzy set repre- sented by ()() °¿°¾½ °¯°®­ −=2log exp22βαμxxX (10) where α and β are the center of membership function and reciprocal value of standard deviation, respectively. Figure 4, Antecedent membership function for |F|x and Table 1. Constant values in the consequent part. In the sequal, the compensated stiffness matrix JKΔ is obtained from the weighted mean method given by °¿°¾½ °¯°®­ = Δ ¦¦ ¦¦ == == L iiL iiyi L iiL iixi JB ,B 11 11diag ωω ωω K (11) 806 Industrial Robotics: Theory, Modelling and Control Figure 4 shows the designed antecedent membership functions. On the other hand, the designed consequent constants, which represent the compensated values of the stiffness, are tabulated in Table 1. In teaching experiments, the friction force more than 3 kgf is regarded as an overload. If such an overload is detected, then the teaching task is automatically stopped and the polishing to- ol is immediately removed from the workpiece. Therefore, the support set of range [0, 3] in Fig. 3 is used for the antecedent part. Teaching Experiment 4.1 Sanding Robot System Throughout the remainder of this paper, the effectiveness of the proposed tea- ching method is proved by teaching experiments. Photo 3. Joystick system used in teaching experiments (Impulse Engine2000). Photo 1. Robotic sandin g system. Photo 2 Air-driven sandin g tool. Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 807 Impedance Model Following Force ControllerInverse JacobianServo ControllerIndustrial Robot FS-20Translational Path Generator Fuzzy Compliance ControllerForward KinematicsTrajectory Accumulator Fuzzy Feedforward Force ControllerJoystick (Impulse Engine 2000) -++ ++ + + Figure 5. Block diagram of the sanding robot in teaching mode. Photo 1 shows the overview of the sanding robot used in the teaching experi- ments. The base 6-DOF industrial robot with an open architecture servo controller is the model FS-20 provided by Kawasaki Heavy Industries, whose tip of the arm has an air-driven sanding tool as shown in Photo 2 via a 6-DOF force/torque sensor 67M25A provided by Nitta corporation. The permitted weight of workpieceis under 20 kgf. The size of the sanding tool is 60 × 100 mm2 and its paper roughness is #120. Since this type of tool tends to cause not only high frequency but also large magnitude vibrations, we use the force sen-sor's filter whose cutoff frequency is set to 30 Hz. Photo 3 shows the 2-DOF jo- ystick Impulse Engine2000 provided by Immersion corporation. This joystick can perform a maximum force of 8.9 N by controlling the joint torque with 2048 steps. In teaching experiments, we apply the fuzzy compliance control given by Eq. (7) to this joystick. Figure 5 shows the block diagram of the sanding robot in teaching mode. The proposed teaching process is as follows: in the direction of position control, the translational trajectory generator yields a base trajectory such as a zigzag path and whirl path with a velocity command ()kpv . In the direction of orientation control, a rotational velocity ()kov is generated using the compensated angle of inclination []T Jy Jx Jș~ș~ ~=ș with a valocity transformation gain vK.Jiș~(i = x, y) is obtained by (12) °¿°¾½ °¯°®­ −< +> −≤ ≤ − 500 if 500500 if 500500 500 if 0 = ș șș șș ș~ Ji JiJi JiJi Ji808 Industrial Robotics: Theory, Modelling and Control Note that []T Jy Jx Jșș=ș in Eqs. (12) and (7) are the same variable. In this case, the teaching operator can conduct the teaching task feeling the friction force acting between the sanding tool and workpiece with the compliance of the jo- ystick. In the direction of force control, the impedance model following force controller given by Eq. (6) yields ()kfv , in which ()kfv is added to the output from the already proposed fuzzy feedforward force controller (Nagata et al., 1999) to generate ()k~ fv . After switched by pS,oS and fS, each directional ve- locity command is summed up to compose a velocity vector ()kv.()kv is tran- sformed into a joint angle velocity ()kq with the inverse Jacobian to give to the servo controller. 4.2 Teaching Experiments In order to examine the effectiveness of the proposed teaching system, an e- xperiment as shown in Photo 1 was conducted using a workpiece machined by a 5-axis NC machine tool. Figure 6 shows the CAD model of the workpiece. The teaching was carried out under the following conditions: the air power of the sanding tool is switched off; the profiling velocity in the tangent direction is set to 20 mm/s; the desired contact force in the normal direction is set to 1 kgf; and the sanding tool moves from the point A to the point B in Photo 1. Figure 6. CAD Model of a workpiece Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 809 Photo 1. Teaching scene by using the proposed system Figure 7. X-directional friction force Figure 8. Y-rotational stiffnes generated by fuzzy resoning The base compliance of the joystick is set to JxK=JyK=0.167,JxB=JyB=0.5. Table 2 shows the control parameters given in the experiment. After these pre- parations, an experiment on the proposed joystick teaching was done. Photo 4 shows the teaching scene by using the proposed teaching system. Figures 7 and 8 show x-directional friction force xf and y-rotational component JyKΔ of the compensated stiffness matrix JKΔ , respectively. Table 2. Designed control parameters in teaching mode 810 Industrial Robotics: Theory, Modelling and Control Figure 9. Obtained tip position in the z-direction It is observed from the result that the compliance of the joystick changes ac- cording to the friction acting between the sanding tool and workpiece. Thus, the operator could execute the teaching task feeling the friction force with the compliance of the joystick. In teaching, the time series data of both the position and orientation were stored into the trajectory accumulator as shown in Fig. 5. Figure 9 shows the z-directional position obtained by this teaching. 4.3 Sanding Task Using the Acquired Trajectory Figure 10 shows the block diagram of the sandinging robot in playback mode. An experiment on polishing task was carried out using the acquired trajectory. In this case, although the tangent profiling velocity was set to 40 mm/s which was two times as fast as that in teaching mode, the polishing task could be stably practiced. The z-directional force control result is plotted in Fig. 11. Figure 10. Block diagram of sending robot in diagram in playback mode using joy- stick taught data. Fig. 9 Obtained position data in the z-direction.-475-470-465-460-455-450-445-440-435-430 0 10 20 30 40 50 60 70 80 Time [s]Z-directional tool position [mm]Joystick Teaching System for Industrial R obots Using Fuzzy Compliance Control 811 It has been observed that a desirable response is obtained in spite of tool's lar- ge vibrations. Furthermore, the surface accuracy of the workpiece was so good condition as well as polished by skilled workers. The measurements evaluated by arithmetical mean roughness method were less than 2 Ǎm. Figure 11. Force control result in playback mode Conclusion In this paper, a joystick teaching system using a fuzzy compliance control has been proposed for industrial robots. We have applied the proposed teaching system to a teaching task of a furniture sanding robot. Experimentally, it was demonstrated that the operator could safely carry out the teaching task feeling the friction force acting between a sanding tool and workpiece through the compliance of the joystick. The proposed teaching process is as follows: first, a zigzag path considered ac- cording to both sizes of each work and sanding tool is prepared; next, the sanding robot, in which an impedance model following force control method is incorporated, profiles the surface of the workpiece along the zigzag path. The operator has only to control the orientation of the sanding tool using the fuzzy compliance controlled joystick so that the tool and workpiece can be in contact each other keeping the desired relation of position and orientation. Since the force controller keeps the contact force a desired value, the operator has to give no attention to a sudden over-load or non-contact state. The de- sired trajectory is automatically obtained as the data including continuous in- formation of the position and orientation along the zigzag path on the work- piece surface. In playback mode, the robot can finally achieve the sanding task without any assists of the operator by referring the acquired trajectory. 812 Industrial Robotics: Theory, Modelling and Control References Ferretti, G.; Magnani, G. & Rocco, P. (2000). Triangular Force/Position Control with Application to Robotic Deburring, Machine Intelligence & Robotic Con- trol, Vol. 2, No. 2, pp. 83-91. Her, M. & Kazerooni, H. (1991). Automated Robotic Deburring of Parts Using Compliance Control, ASME Journal of Dynamic systems, Measurement, and Control , Vol. 113, pp. 60-66. Hogan, N. (1985). Impedance Control: An Approach to Manipulation, Trans. ASME, J. Dyn. Syst. Measure. Contr. , Vol. 107, pp. 1–24. Liu, M. H. (1995). Force-Controlled Fuzzy-Logic-Based Robotic Deburring, Control Engineering Practice , Vol. 3, No. 2, pp. 189-201. Nagata, F.; Watanabe, K. & Izumi, K. (1999). Position-Based Impedance Con- trol Using a Fuzzy Compensator, Procs. of the 3rd International Conference on Knowledge-Based Intelligent Information Engineering Systems (KES'99) , pp. 125-128. Nagata, F.; Watanabe, K.; Hashino, S.; Tanaka, H.; Matsuyama, T. & Hara, K. (2000). Polishing Robot Using a Joystick Controlled Teaching System, CD- ROM Procs. of the IEEE International Conference on Industrial Electronics, Control and Instrumentation (IECON-2000) , pp. 632-637. Nagata, F.; Watanabe, K.; Hashino, S.; Tanaka, H.; Matsuyama, T. & Hara, K. (2001). Polishing Robot Using Joystick Controlled Teaching, Journal of Ro- botics and Mechatronics , Vol. 13, No. 5, pp. 517-525. Nagata, F.; Watanabe, K.; Kiguchi, K.; Tsuda, K.; Kawaguchi, S.; Noda, Y. & Komino, M. (2001). Joystick Teaching System for Polishing Robots Using Fuzzy Compliance Control, Procs. of 2001 IEEE International Symposium on Computational Intelligence in Robotics and Automation , pp. 362-367. Nagata, F.; Watanabe, K.; Fujimoto, Y.; Kiguchi, K. & Murase, Y. (2002). 3D Machining and Finishing System for New Designed Furniture, Procs. of 2002 Japan-USA Symposium on Flexible Automation , pp. 1239-1245. Raibert, M. H. & Craig, J. J. (1981). Hybrid Position/Force Control of Manipu- lators, Trans. ASME, J. Dyn. Syst. Measure. Contr. , Vol. 102, pp. 126–133. Takeuchi, Y.; Ge, D. & Asakawa, N. (1993). Automated Polishing Process with a Human-like Dexterous Robot, Procs. of IEEE International Conference Ro- botics and Automation , pp. 950-956. 81330 Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms Satoru Goto Introduction Many industrial robot arms are operated in industry, and some robotic applications in the industry, such as a pulling-out of products made by die casting, require the flexible motion excited by an external force. Here, the flexible motion means that the robot arm moves passively according to the external force. Industrial robot arms, however, are difficult to be moved by the external force because the servo controller of the industrial robot arm controls the motion of the robot arm excited by an input signal responsible for the motion. The torque generated by the external force is a kind of disturbance for the robot control system and it can be compensated by the servo controller. Impedance control (Hogan 1985; Scivicco & Siciliano, 2000) and compliance control (Mason, 1981; Micheal et al., 1982) were proposed in order to achieve the flexible motion, and these methods have been applied to industrial robots (Ciro et al., 2000). Most of these control methods impose desired dynamic characteristics between an end-effector and an environment by setting inertia, friction and stiffness. Usually an elastic spring behavior is introduced in order to achieve the flexible motion of the robot arm. The potential force of the elastic spring behavior is a conservative force, and it is impossible to achieve the passive motion away from the environment caused by the external force is impossible to be achieved by using these control methods. In this research, the forcefree control, which achieves the passive motion of the robot arm according to the external force, is proposed. Moreover, the forcefree control is extended to the forcefree control with independent compensation, the forcefree control with assigned locus and the position information based forcefree control. The effectiveness of the proposed forcefree control is assured by comparing the experimental results with simulation results. Comparison between the forcefree control and other force control methods such as impedance control are also described. Finally, applications of the forcefree control of pull-out work, direct teaching and rehabilitation robot are demonstrated.814 Industrial Robotics: Theory, Modelling and Control Forcefree Control 2.1 Necessity of Forcefree Control Operations such as cutting and welding can be easily achieved by using industrial robot arms. These operations are carried out through contour control in that the tip of the robot arm moves along a given path, and point-to-point (PTP) control in that the tip moves between previously assigned points. These operations are tractable as the rigidity of the robot arm advances. Therefore, the industrial robot arms are designed with high rigidity. Recently, control of a contact force is required in order to carry out assembling, handling, inlaying, pull-out work and grinder operations. On the contrary, it is difficult to control the contact force if the robot arm possesses high rigidity. In view of this, the property of low rigidity for the industrial robot arms is required to control the contact force. On the other hand, flexible motion is also required for the safety operation such as contact between the robot and human operator. Generally, an emergency shutdown switch is built in to the servo controller. When the operator is sandwiched between the tip of the robot arm and the environment, the emergency halt becomes more dangerous. If the robot arm can be actuated with flexibility, the operator is released from the sandwiched situation. Some of the problems have been solved by particularly designed robots or by remodeling of robots. However, a number of industrial robot arms are manufactured for general purpose, and such robot arms have a lower cost compared with that of special purpose robots. In this view, flexible motion by general purpose industrial robot arms is required in industry. A servo controller of industrial robot arm includes a position loop and a velocity loop. Input to the industrial robot arm is usually the joint position of each link. Hence, the industrial robot arms should be considered as the combination of the mechanism of the robot arm and the servo controller. Recently, a study of force control of industrial robots has developed rapidly and the achievement of such force control has been the major concern. A number of force control methods for the change of rigidity of robot arms such as impedance control (Hogan 1985; Scivicco & Siciliano, 2000) and compliance control (Mason, 1981; Mecheal et al., 1982) have been proposed. These methods are apparently good enough to achieve the requirement of force control. However, to apply these methods in industry, there are difficult problems to be solved. For general purpose robots including the servo controller, these methods require changes in the control strategy in the servo controller. Modification of the servo controller is almost impossible from the user side, and modification by the maker is very expensive even upon request from the user side. Presently, available methods for the achievement of flexible contact Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 815 between the tip of the robot arm and the environment are almost achieved by attaching a flexible device on the tip of the robot arm. The forcefree control can achieve the flexible motion of the industrial robot arms under virtual circumstances of non-gravity and non-friction without any change of the built-in controller. By use of the forcefree control, the robot arm moves passively according to the external force directly as if it were under the circumstances of non-friction and non-gravity. The mathematical explanation of the forcefree control is described below. 2.2 Derivation of Forcefree Control Dynamics of an articulated robot arm is expressed by () () ( ) ()f s ȝ Ĳ+Ĳ=qg+qq,h+q NqD+qqH   sgn+ (1) where ()qH is the inertia matrix, ()q N+qDȝ  sgn is the friction term, ()qq,his the coupling nonlinear term, ()qg is the gravity term, q is the output of joint angle,sĲ is the torque input to the robot arm and fĲ is the joint torque corresponding to the external force f acting on the tip of the robot arm (Fu et al., 1987). Figure 1. Block diagram of forcefree control In industrial robot arms, the servo controller is adapted to control the motion of the robot arm. The control loop of the servo controller is shown on the right side of Fig. 1, where pK,vK and ĲK are position loop gain, velocity loop gain and torque constant, respectively (Nakamura et al., 2004; Kyura, 1996). The 816 Industrial Robotics: Theory, Modelling and Control servo controller adopts P and PI type cascade control, the P controller is used for the position loop control and the PI controller is used for the velocity loop control. The velocity control loop has the role of the derivative action. The servo controller generates the torque input to the robot arm as described by ()( ) ( )f g d d p vĲ s ĲĲ+Ĳ+qq qKKK=Ĳ − −− (2) wheredq is the input of joint angle, dĲ is the friction compensation torque and gĲ is the gravity compensation torque. As expressed in (2), the servo controller includes the friction compensation and the gravity compensation through integral action of PI control. The friction and the gravity are assumed to be exactly compensated by the servo controller as ()q N+qD=Ĳȝ d   sgn (3) ().qg=Ĳg (4) The torque caused by an external force fĲ is also compensated by the servo controller because the servo controller of an industrial robot arm is designed such that the stiffness of the robot arm is high enough and the robot arm will never be moved by the external force. The total dynamic equation of an industrial articulated robot arm including the servo controller is given by substituting (2), (3) and (4) for (1) as () ( ) ( ) ( ) ( ).qq qKKK=qq,h+qqHd p vĲ   −− (5) Forcefree control means that the influences of friction and gravity on the robot arm motion can be compensated. The entire dynamics of the industrial robot arms controlled by the forcefree control is described by () ( )fĲ=qq,h+qqH  (6) wherefĲ is obtained by substituting (2) for (5) as () ( )() ( ).qq,h+qqHĲĲĲ=Ĳg d s f  −−−− (7) Generally, the speed of the flexible motion of an industrial robot arm is relatively slow, usually less than 1/5 of the rated speed. Hence, the inertia and nonlinear terms of the robot arm is negligibly small () ( )() 0≈qq,h+qqH  , and the external torque is approximately given by Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 817 ( ).g d s f ĲĲĲ=Ĳ −−− (8) Finally, the control law of the forcefree control with independent compensation is obtained by substituting (6) and (8) for (5) and by solving for dqas () ( ).1 1 1q+q+Ĳ+Ĳ+Ĳ KKK=qg d s Ĳ v p d  −− − − (9) Here,sĲ is measured by the torque monitor which is usually attached to the servo controller of the industrial robot arm and is used to check the value of the torque. 2.2.1 Estimation of Friction Term Friction term dĲ consists of Viscous friction qD and Coulomb friction ()q Nȝ sgn as in (3). The friction effect to the motion of the robot arm is estimated by the torque output under constant velocity motion. The friction term is obtained through the following procedure; To cancel the effect of the gravity, the robot arm sets around its vertical po- sition; Various constant velocity inputs are applied to each link of the robot arm; Respective torque outputs corresponding to the applied velocities are mea- sured by using the torque monitor; The torque output vs. applied velocities are plotted; Viscous friction coefficient D and magnitude of Coulomb friction ȝN in (3) are estimated by using the least squares method from the collected da- ta. In order to smoothen the Coulomb friction effect, the Sigmoid function is intro- duced in the friction term as ()qfN+qD=Ĳdȝ d   (10) where () () () () () () (). 1/ 11/ 11/ 1 2 21 1 ¸¸¸¸¸¸¸ ¹· ¨¨¨¨¨¨¨ ©§ −−− − −− −− − nqnqq qq q d e+ ee+ ee+ e =qf     # γ γγ γγ γ (11) and the parameter γ is introduced for adjusting the effect of smoothness. 818 Industrial Robotics: Theory, Modelling and Control 2.2.2 Estimation of Gravity Term The gravity term is a function of the robot arm position q as (4). Here, the gravity term is modelled by () () () bqV+aqU=qg  (12) where the function ()() () ()¸¸¸¸¸¸¸¸¸ ¹· ¨¨¨¨¨¨¨¨¨ ©§ −−− 22 22 1 0 0000 0 nqȜqȜqȜ eee=qV  "% % ##%" (13) is introduced in order to smoothen the effect of static friction b. In (13), the parameter λ is introduced for adjusting the effect of smoothness. The parameters a and b are estimated by using the least squares method from the experimental data of the steady-state torque monitor outputs for various postures of the robot arm. For the estimation of the parameters a and b in (12), the steady-state torque monitor outputs are used because the torque monitor output contains a transient component, which is caused by the integral action of the servo controller. Hence, the gravity compensation torque can be represented by ( )()qgeI=ĲAt g − (14) where . 0 0000 0 /2/1/ ¸¸¸¸¸¸¸ ¹· ¨¨¨¨¨¨¨ ©§ −−− nTtTtTt At eee=e "%%##%" (15) and ),,1( n iTi"= are the time constants. Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 819 2.3 Alogrithm of Forcefree Control The algorithm of the forcefree control is explained here. Initial setting of the forcefree control is expressed in the following first 3 items. Servo parameters pK,vK and ĲK are obtained from the servo controller; Friction term (10) is estimated as explained in the above section; Gravity term (12) is estimated as explained in the above section. The execution of the forcefree control has summarized by the following 6 items. External force f is added to the robot arm; Torque monitor detects the external force f; The friction torque dĲ is estimated by (10); The gravity torque gĲ is estimated by (12); External torque fĲ is calculated by (8); The position input dq is generated by (9). Finally, the reference position input dq is given to the servo controller according to the above algorithm and the forcefree control is achieved. 2.4 Verification Robot arm motion by using the forcefree control was verified by a simulation study and experiments. The simulation study shows an ideal motion of the forcefree control. An industrial articulated robot arm (Performer-MK3S, YAHATA Electric Machinery Mfg., Co., Ltd) was used for the experiment on the forcefree control with independent compensation. Two links of Performer- MK3S were used for the experiment. The link lengths of the robot arm are 0.251=l [m], 0.2152=l [m], and masses of the links are 2.861=m [kg], 2.192=m [kg], respectively. The position loop gain was ()25,25 diag=Kp [1/s], the velocity loop gain was ()150,150 diag=Kv [1/s], and the torque constant was () .036952 0.017426,0 diag=KĲ [ ()2s/rad/Nm ]. Fig. 2 shows the experimental results of the estimation of friction term. The bold lines show the results of (10) for 120=γ and the dotted lines show the results of ()q N+qDȝ  sgn . The step change of the results of ()q N+qDȝ  sgn can be smoothened using the sigmoid function. 820 Industrial Robotics: Theory, Modelling and Control 02460246 02460246(a) Friction compensation torque of link1Torque [Nm] Time [s](b) Friction compensation torque of link2Torque [Nm] Time [s] Figure 2. Estimation of friction term Fig. 3 shows the experimental results of the estimation of gravity term. The bold lines show the results of (12) for 150=Ȝ and the dotted lines show the results of () b+aqU . The alternate long and short lines show the result of ()aqU . The estimated friction approximately gives the static friction effect. 02461015 0246–2024(a) Gravity compensation torque of link1Torque [Nm] Time [s](b) Gravity compensation torque of link2Torque [Nm] Time [s] Figure 3. Estimation of gravity term Fig. 4 shows the simulation results and the experimental results where the external force f is ()88.9,6.1− [N]. The dotted lines show the simulation results and the bold lines show the experimental results. As in Fig. 4, the experimental results and theoretical response are almost the same and thereby shows that the exact forcefree control can be achieved in practice. The result shows that the forcefree control was achieved with an actual industrial robot arm.Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 821 0240.40.50.6 0240.911.1024–1000 024–1000 (c) Position of link1Position [rad](d) Position of link2Position [rad](b) Force along Y–axisForce [N](a) Force along X–axisForce [N] simulation experimentsimulation experiment 0240102030 024010203002400.1 02400.1 (g)Torque of link1Torque [Nm] Time [s](h)Torque of link2Torque [Nm] Time [s](e) Velocity of link1Velocity [rad/s](f) Velocity of link2Velocity [rad/s]simulation experimentsimulation experiment 0.2 0.25 0.30.250.30.35(i) Locus of tip X–axis [m]Y–axis [m] simulation experiment Figure 4. Simulation and experimental results of forcefree control 822 Industrial Robotics: Theory, Modelling and Control Expansion of Forcefree Control 3.1 Forcefree Control with Independent Compensation The forcefree control is achieved in the non-friction and non-gravity condition. Nevertheless, in some operation of industrial robot arms, friction and/or gravity of the robot arm is useful. Moreover, a large force is required in order to achieve flexible motion of huge robot arms because of their huge inertia, even if the forcefree control is applied. The forcefree control is extended to realize flexible motion emulating the operational circumstances of arbitrary inertia, arbitrary friction and arbitrary gravity through independent compensation of inertia, friction and gravity. 3.1.1 Derivation of Forcefree Control with Independent Compensation Forcefree control with independent compensation means that the influences of inertia, friction and gravity to the robot arm motion can be assigned arbitrarily. The entire dynamics of an industrial robot arm working on the forcefree control with independent compensation is described by () ( )gg dd ff ĲCĲCĲC=qq,h+qqH − −  (16) wherefC,dC and gC are the coefficients of the inertia, friction and gravity terms, respectively. They can be tuned to adjust the effect of the inertia, friction and gravity, independently. For instance, E=Cf , 0=Cd and 0=Cg , corresponds to the forcefree control and ∞→fC , 0=C=Cg d corresponds to the perfect compensation of the inertia, friction and gravity. The block diagram of the forcefree control with independent compensation is shown in Fig. 5. The inputs of joint angle dq for the forcefree control with independent compensation is obtained by substituting (14) for (5) and by solving for dq as () ( ).1 1 1q+q+ĲCĲCĲCKKK=qgg dd ffĲ v p d  − −− − − (17) Finally, the control law of the forcefree control with independent compensation is obtained by substituting (8) for (17) as () () () ( )q+q+ĲC C+ĲC C+ĲC KKK=qg g f d d f sf Ĳ v p d  − − −− − − 1 1 1 (18) Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 823 Figure 5. Block diagram of forcefree control with independent compensation 3.1.2 Verification Step input of 10[N] to X-axis direction was applied to the tip of the robot arm. A force sensor was used to measure the value of external force. The initial end- effector position of the robot arm was at (0.3, 0.3)[m]. Experimental results of the forcefree control with independent compensation are shown in Fig. 6, where the coefficients of compensation are E=cf2, E=Cd, 0=Cg. In Fig. 6, the dotted lines show the theoretical responses obtained through simulation and the bold lines show the experimental results. As in Fig. 6, the experimental results and theoretical response are almost the same and thereby shows that the exact forcefree control with independent compensation can be achieved in practice. The result shows that the forcefree control with independent compensation was realized with an actual industrial robot arm.824 Industrial Robotics: Theory, Modelling and Control 0.3 0.310.290.30.30.4 0240.80.9010 010 simulation experiment(e) Locus of tip X–axis [m]Y–axis [m]simulation experiment(c) Position of link 1Position q [rad]1 Time [s]simulation experiment(d) Position of link 2 Time [s]Position q [rad]2(a) Force along X–axisForce fx [N](b) Force along Y–axisForce f [N]y Figure 6. Simulation and experimental results of forcefree control with independent compensation 3.2 Forcefree Control with Assigned Locus 3.2.1 Necessity of Forcefree Control with Assigned Locus By use of the forcefree control, the robot arm moves according to the external force. The direction of the motion depends on the direction of the external force. When the motion of the robot arm was restricted, the original forcefree control can not be applied. In such a case, the flexible motion with assigned locus is required. In this section, the forcefree control with assigned locus is introduced. The forcefree control with assigned locus makes the tip of the robot arm to follow the assigned locus, and the tip velocity depends on the external force.Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 825 3.2.2 Derivation of Forcef ree Control with Assigned Locus The forcefree control with assigned locus is based on mass point type forcefree control. Mass point type forcefree control is constructed from a mass point which is assumed to be the tip of the robot arm. Therefore, the motion of the mass point and the tip of the robot arm are the same. The mass point moves according to the velocity v caused by the external force f, when an external force f is applied on the mass point. The direction of the motion is the same as the external force f. Besides, the absolute value of the velocity v depends on the external force f. Therefore, the mass point could not follow the assigned locus. In order to follow the assigned locus, the direction of the generated velocity v has to be changed to the tangential direction of the assigned locus. By continuing the above processes, the direction of the velocity v of the mass point is always the same as the tangential direction on the assigned locus. Hence, the tip of the robot arm follows the assigned locus with the velocity which is determined by the external force f. Fig. 7 shows the block diagram of the forcefree control with assigned locus. Under the non-gravity condition, the equation of the motion of the mass point by the external force f f=rd+rm (19) where ris the position of the mass point, m is the mass of the mass point and d is the friction coefficient. In order to realize the flexible motion with assigned locus according to the external force f, the mass point obeys the equation (19) only for the component in ( x,y,z) which gives the maximal amplitude of the external force f . Figure 7. Block diagram of the forcefree control with assigned locus 826 Industrial Robotics: Theory, Modelling and Control The other components of the position of the mass point are determined by the assigned locus () 0=rhd . As a result, the position of the tip of the robot arm dr under the forcefree control with assigned locus is determined by ()||.f =i, =rhf=rd+rmj zy,x,j= di i di d argmax 0°¯°®­ (20) The algorithm of forcefree control can be described as follows. The external force f is measured by a force sensor. The component having the maximum amplitude of the external force ||j zy,x,j= f =iargmax is determined. The ith component of the position of the tip of the robot arm i dr is deter- mined by using the equation of motion. The other components of the position of the tip of robot arm is determined by the assigned locus () 0=rhd . The input of the servo controller dqis calculated from the tip position dr by using inverse kinematics. 3.2.3 Verification Verification of the forcefree control with assigned locus was carried out by simulation and experiment. Besides, simulation and experiment were carried out under non-friction conditions which mean the coefficient of friction d was zero. Simulation and experimental results are shown in Fig. 8. In Fig. 8, (a) and (b) illustrate the components of the external force f along the direction of X-axis and Y-axis, respectively, (c) and (d) show the joint trajectories of link1 and link2, respectively, (e) and (f) show the velocity v of X-axis and Y-axis, respectively, and (g) shows the locus of the tip of the robot arm. In Fig. 8, the dotted line denotes the simulation result and the bold line denotes the experimental results. In Fig. 8(g), dash line shows the assigned locus. It can be verified that simulation and experimental results are comparable, and both results have realized the exact assigned locus. This phenomenon illustrates the realization of the proposed forcefree control with assigned locus. Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 827 Figure 8. Simulation and experimental results of forcefree control with assigned locus 828 Industrial Robotics: Theory, Modelling and Control 3.3 Position Information Based Forcefree Control 3.3.1 Necessity of Position Informa tion Based Forcefree Control The above explained forcefree control requires a force sensor or a torque monitor for the detection of the external force. In order to apply more general industrial robot arms, the forcefree control is extended, where the external force is estimated only by the position information. In the servo controller of the industrial robot arms, a PI controller is used for the velocity loop and the torque disturbance is compensated by the integral action of the PI controller so that the robot arm is not moved by the external force. On the other hand, the torque information required for the forcefree control must be estimated by the change of position caused by the external force. Hence, the P controller must be used for the velocity loop. By changing the velocity controller from PI controller to P controller, the compensation of the torque disturbance vanishes and the torque information can be estimated from the change of position caused by the external force. 3.3.2 Derivation of Position Informatio n Based Forcefree Control Fig. 9 shows the block diagram of the position information based forcefree control. As in Fig. 9, the velocity loop in the servo controller is the P controller and the friction compensation dĲ, the gravity compensation gĲ and the external torque compensation fĲ are not included in the servo controller compared with the servo controller in Fig. 1. Figure 9. Block diagram of position information based forcefree controlForcefree Control for Flexible Motion of Industrial Articulated Robot Arms 829 The control input dq is calculated by () ( )q+q+Ĳ+Ĳ+ĲKKK=qg d fĲ v p d 1 1 1 − − − (21) where the friction compensation torque dĲand the gravity compensation torquegĲ are calculated by (8) and (12), respectively. The external force compensation torque fĲ can be estimated by using the position information q and the velocity information q as () ( ) .qq,h+qqH=Ĳf  (22) 3.3.3 Verification Verification of the position information based forcefree control was carried out by a simulation study and an experiment. Simulation and experimental results are shown in Fig. 10. In Fig. 10, (a) and (b) illustrate the components of the external force f in the directions of X-axis and Y-axis, respectively, (c) and (d) show the joint trajectories of link1 and link2, respectively, (e) and (f) show the velocity v of X-axis and Y-axis, respectively, (g) and (h) show the estimated torque by using the torque observer and the torque calculated by the force sensor, respectively, and (i) shows the locus of the tip of the robot arm. In Fig. 10, the dotted line denotes the simulation result and the bold line shows the experimental result. In (g) and (h), the estimated torque coincides with the actual torque. It can be verified that the simulation and experimental results are comparable, and the forcefree control can be achieved only by the usage of the position information.830 Industrial Robotics: Theory, Modelling and Control 024611.20246–1000 0246–1000 02460.40.60.8(d) Position of link2Position [rad]simulation experiment(b) Force along Y–axisForce [N](a) Force along X–axisForce [N] (c) Position of link1Position [rad]simulation experiment 024602040 024602040024600.1 024600.1 (h) Torque of link2Torque [Nm]observer force sensor Time [s](g) Torque of link1Torque [Nm]observer force sensor Time [s](e) Velocity of link1Velocity [rad/s]simulation experiment(f) Velocity of link2Velocity [rad/s]simulation experiment 0.1 0.2 0.30.20.30.4(i) Locus of tip X–axis [m]Y–axis [m]simulation experiment Figure 10. Simulation and experimental results of position information based forcefree controlForcefree Control for Flexible Motion of Industrial Articulated Robot Arms 831 Comparison between Forcefree Control and Force Control 4.1 Comparison between Forcefree Control with Independent Control and Inpedance Control In order to illustrate the feature of the forcefree control, the forccefree control with independent compensation is compared with the impedance control (Hogan 1985; Scivicco & Siciliano, 2000). The impedance control is the typical force control, which enables the contact force between the tip of the robot arm and the object as assigned inertia, friction and stiffness. The impedance characteristics are expressed by ()() F=rrK+rrD+rMd d d d d − − (23) where F is the assigned force between the tip of the robot arm and the object, dM , dD and dK are the assigned inertia, friction and stiffness, respectively, anddr,dr are the objective position and the objective velocity in working coordinates, respectively. The dynamics of the robot arm in joint coordinates is expressed by () ( ) () () FJ+Ĳ=qg+q N+qD+qq,h+qqHT ȝ  sgn (24) and the dynamics in working coordinates is expressed by () ( ) () () () . sgn1F+Ĳ J=qg+r N+rD+qq,h+rqHT r ȝr r r r−  (25) By substituting (23) for (25), the torque input for the impedance control is obtained by () ( ) ( ) {} [ () ( ) () () () ]. sgn11 qg+r N+rD+FI MqH+qq,h+rrK rrD MqHJ=Ĳ r ȝr r d r rd d d d d rT    −− − − − −− (26) The torque input of the forcefree control with independent compensation is derived as the same format of the impedance control. The dynamics of the forcefree control with independent compensation in joint coordinates (16) is transformed into working coordinates as () ( ) () () (). sgn qgCr N+rDCFC=qq,h+rqHrg ȝr rd f r r − −    (27) 832 Industrial Robotics: Theory, Modelling and Control By substituting (27) for (24), the torque input for the forcefree control with independent compensation is obtained by ( )( ) () () ( )() [ ]. sgn qgCI+r N+rDCI+FI CJ=Ĳrg ȝr rd f T− − −   (28) By comparing the torque input of the impedance control (26) and that of the forcefree control with independent compensation (28), the following relationship is fulfilled. ( ) ()() {} ( ) 01=qq,h+rrK rrD MqHr d d d d d r   − − − −− (29) () ()qH C=Mrf d1− (30) O=Dd (31) O=Kd (32) () 0=qq,hr (33) O=C=Cg d (34) The difference between the forcefree control with independent compensation and the impedance control is as follows; In impedance control, the objective trajectory dr is defined whereas no ob- jective trajectory exists in the forcefree control with independent compen- sation. The forcefree control with independent compensation can tune the effects of the friction and the gravity whereas the impedance compensation do perfect compensation. As a result, the forcefree control with independent compensation is completely different control strategy from the impedance control. 4.2 Comparison between Forcefree Control with Assigned Locus and Impedance Control In the case of forcefree control with assigned locus and the impedance control, the tip of the robot arm is related to joint motion, but actually, joint coordinate is not necessary to consider because generalized coordinates are defined in working coordinate. Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 833 In case of impedance control, inertia is compensated by adjusting a compliance matrix. On the contrary to the forcefree control with assigned locus, inertia can be adjusted through independent setting of the value of the mass point. Moreover, in case of impedance control, identification of coefficients of viscous friction and calculation of gravity term must be done a priori for the friction compensation and the gravity compensation. On the contrary to the forcefree control with assigned locus, these compensations are not required because a dynamic equation of the mass point is defined in non-friction and non-gravity space. Although forcefree control with assigned locus is capable of following the assigned locus, impedance control is not thus capable. Therefore, forcefree control with assigned locus has the many advantages over impedance control counterparts. Other general force control methods have same problems as impedance control. The impedance control is expressed by ()() f=rrK+rrD+rMd d d d d − − (35) where f is the assigned force between the tip of the robot arm and the object, dM , dD and dK are the assigned inertia, friction and stiffness, and dr,dr are the objective position and the objective velocity in working coordinates, respectively. The mass point type forcefree control is expressed by f=rm (36) where m is the assigned mass of the mass point. By comparing (35) and (36), the mass point type forcefree control is achieved by Md=m (37) 0=Dd (38) 0=Kd (39) After achieving the mass point type forcefree control by the impedance control, the forcefree control with assigned locus is accomplished in exactly the same way explained in section 3.2.2. Table 1 summarized the comparison of the forcefree control with independent compensation, the forcefree control with assigned locus and the impedance control.834 Industrial Robotics: Theory, Modelling and Control Forcefree control with independent compensationForcefree control with assigned locus Impedance control Objective Free motion b y external force Free motion by external force with assigned locusDesirable mechanical impedance Model Dynamics of indu- strial articulated robot arm Dynamics of industrial articulated robot arm Mechanical impedance between tip arm and object Motion Passive motion aga- inst external force Passive motion against external force Active motion to rea- lize assigned force Rigidity Zero Zero Settin g b y virtual spring Inertia Settin g by coefficient of inertia Setting by virtual mass Settin g b y virtual mass Friction Settin g by coefficient of friction Setting by virtual frictionSettin g b y virtual damper Gravity Settin g b y the coefficient of gravity Zero Compensation Target Industrial articu- lated robot arm Industrial articulated robot arm Articulated robot arm Coordinates Joint coordinates Cartesian coordinates Cartesian coordinates Locus followingImpossible Possible Impossible Command Position Position Torque, Position Table 1. Comparison among forcefree control with independent compensation, forcefree control with assigned locus and impedance control Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 835 Applications of Forcefree Control 5.1 Pull-Out Work Pull-out work means that the workpiece is pulled out by the push-rod, where the workpiece is held by the robot arm, and it is usually used in aluminum casting in industry. The operation follows the sequence, a) the hand of the robot arm grasps the workpiece, b) the workpiece is pushed out by the push- rod, and c) the workpiece is released by the force from the push-rod. The motion of the robot arm requires flexibility in order to follow the pushed workpiece. Experimental results of pull-out work by the force-free control is shown in Fig. Fig. 11(a) and (b) show the torque monitor outputs of link 1 and link 2 caused by the push-rod, respectively, (c) and (d) show the position of link 1 and link 2, respectively, and Fig. 11(e) shows the locus of the tip of the robot arm. It guarantees the realization of pull-out work with industrial articulated robot arm based on the forcefree control. 5.2 Direct Teaching In general, the industrial robot arms carry out operations based on teaching- playback method. The teaching-playback method is separated into two parts, i.e., teaching part and playback part. In the teaching part, the robot arm is taught the data of operational positions and velocities. In the playback part, the robot arm carries out the operation according to the taught data. The teaching of industrial articulated robot arms is categorized into two methods, i.e., on-line teaching and off-line teaching. Off-line teaching requires another space for teaching. Therefore, on-line teaching is used for industrial articulated robot arms. On-line teaching is also categorized into remote teaching and direct teaching. Here, the remote teaching means that the teaching is carried out by use of a teach-pendant, i.e., a special equipment for teaching, and direct teaching means that the robot arm is moved by human direct force. Usually, the teaching of industrial articulated robot arms is carried out by remote teaching. Remote teaching by use of teach-pendant, however, requires human skill because there exists a difference between operator coordinates and robot arm coordinates. Besides, the operation method of teach-pendant is not unique, thus depends on the robot arm manufacturer. Direct teaching is useful for industrial articulated robot arms against remote teaching. The process of direct teaching is as follows; 1) the operator grasps the 836 Industrial Robotics: Theory, Modelling and Control tip of the robot arm, 2) the operator brings the tip of the robot arm to the teaching points by his hands, directly, and 3) teaching points are stored in memory. Operational velocities between teaching points are set after the position teaching process. In other words, anyone can easily carry out teaching. In direct teaching, operational positions of the industrial articulated robot arm are taught by human hands directly. The proposed forcefree control can be applied to realize the direct teaching of the industrial articulated robot arm. Forcefree control can realize non-gravity and non-friction motion of the industrial articulated robot arm under the given external force. In other words, an industrial articulated robot arm is actuated by human hands, directly. Here, position control of the tip of the robot arm is the important factor in direct teaching. Position control of the tip of the robot arm is carried out by the operator in direct teaching. Direct-teaching for teaching-playback type robot arms is an application of the forcefree control with independent compensation, where the robot arm is manually moved by the human operator's hand. Usually, teaching of industrial articulated robot arms is carried out by using operational equipment and smooth teaching can be achieved if direct-teaching is realized. Fig. 12 shows the experimental result of direct-teaching where the compensation coefficients are E =Cf0.5 , E=Cd , 0=Cg . As shown in Fig. 12, teaching was successfully done by the direct use of human hand. The forcefree control with independent compensation does not use the force sensors and any part of the robot arm can be used for motion of the robot arm. Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 837 05 1 000.20.40.6 05 1 01.21.41.61.8–0.200.2 –0.200.2 (c) Position of link 1Position [rad] Time [s](d) Position of link 2 Time [s]Position [rad](a) Torque of link 1Torque [Nm](b) Torque of link 2Torque [Nm] 0.36 0.4 0.440.240.280.32(e) Locus tip X–axis [m]Y–axis [m] Figure 11. Experimental result of pull-out work by using the forcefree control with independent compensation ( E =Cf0.2 , 0=C=Cg d )838 Industrial Robotics: Theory, Modelling and Control 0 5 10 15–0.500.5 0 5 10 1511.50 5 10 15–2024 0 5 10 15–4–2024 (c) Position of link 1Position [rad] Time [s](d) Position of link 2Position [rad] Time [s](a) Torque of link1Torque [Nm](b) Torque of link 2Torque [Nm] 0.2 0.3 0.40.10.20.3 Tip locus Objective(e) Locus of tip X–axis [m]Y–axis [m] Figure 12. Experimental result of direct teaching by using the forcefree control with independent compensation ( E =Cf0.5 , E=Cd , 0=Cg )Forcefree Control for Flexible Motion of Industrial Articulated Robot Arms 839 5.3 Rehabilitation Robot The forcefree control with independent compensation uses the torque monitor in order to detect the external force. Hence, each joint can be monitored for unexpected torque deviation from the desired torque profile as a result of unplanned circumstances such as accidental contact with an object or human being. As a result, the forcefree control with independent compensation can also improve the safety of work with human operator. To utilize this feature, the forcefree control with independent compensation is applied to rehabilitation robots. The forcefree control with independent compensation is applied to the control of a meal assistance orthosis for disabled persons both of direct-teaching of plate position and mouth position and safety operation against unexpected human motion. If the forcefree control with independent compensation is installed in such systems, the safety will be improved because when the unexpected contact between the operator and the robot occurs, the escape motion of the robot arm can be invoked by the forcefree control method. Conclusions The proposed forcefree control realizes the passive motion of the robot arm according to the external force. Moreover, the forcefree control is extended to the forcefree control with independent compensation, the forcefree control with assigned locus and the position information based forcefree control. Experiments on an actual industrial robot arm were successfully carried out by the proposed methods. The comparison between the forcefree control and other force control is expressed and the features of the forcefree control are clarified. The proposed method requires no change in hardware of the robot arm and therefore is easily acceptable to many industrial applications. 840 Industrial Robotics: Theory, Modelling and Control References Ciro, N., R. Koeppe, and G. Hirzinger, (2000). A Systematic Design Procedure of Force Controllers for Industrial Robots, IEEE/ASME Trans. Mechatronics, 5-21, 122-133. Fu, K. S., R. C. Sonzalez and C. S. G. Lee, (1987). Robotics Control, Sensing, Vision, and Intelligence, pp. 82-144, McGraw-Hill, Inc., Singapore. Hogan, N. (1985). Impedance Control; An Approach to Manipulation: Part I-III, Trans. of the ASME Journal of Dynamic System, Measurement, and Control, 107, 1-24. Kyura, N., (1996). The Development of a Controller for Mechatronics Equipment, IEEE Trans. on Industrial Electronics, 43, 30-37. Mason, M. T. (1981). Compliance and Force Control for Computer Controlled Manipulators, IEEE Trans. on Systems, Man, and Cybernetics, 11, 418-432. Michael, B., M. H. John, L. J. Timothy, L. P. Tomas and T. M. Matthew, (1982). Robot Motion: Planning and Control, The MIT Press, Cambridge. Nakamura, M., S. Goto, N. Kyura, (2004). Mechatronic Servo System Control, Springer-Verlag Berlin Heidelberg. Sciavicco, L. and B. Siciliano, (2000). Modelling and Control of Robot Manipulators, pp. 271-280, Springer, London. 84131 Predictive Force Control of Robot Manipulators in Nonrigid Environments L.F. Baptista, J.M.C. Sousa and J.M.G. Sa da Costa Introduction The application of robot manipulators in industry is in general related to tasks such as manipulation or painting that requires only position control of the arm. Nonetheless, there are other robotic tasks like pushing, polishing and grinding that require interaction between the manipulator and a contact sur- face or environment. This fact leads to the desire of controlling the interaction between the robot and the environment. Although a lot of different control schemes has been proposed in the literature, as surveyed by (Zeng & Hemami, 1997 ; De Schutter et al., 1997), the major force control approaches can be clas-sified as hybrid control (Raibert & Craig, 1981) or impedance control (Hogan, 1985). The hybrid control separates a robotic force task into two subspaces: a force controlled subspace and a position controlled subspace. Two independ- ent controllers are then designed for each subspace. In contrast, impedance control does not attempt to control force explicitly but rather to control the re-lationship between force and position of the end-effector in contact with the environment. Furthermore, when the environment is rigid with known charac- teristics it is possible to plan a virtual trajectory, such that a desired force pro- file is obtained (Singh & Popa, 1995). However, the same does not hold in the presence of nonrigid environments, which disables a reliable application of the classical impedance controller. This problem has motivated the development and design of more sophisticated force control methodologies which usually take into consideration the dynamics of the environment. In (Love & Book, 1995) it is shown that the performance of an impedance controlled manipula- tor increases when the desired impedance includes some modeling of the envi-ronment. Another possible solution to tackle this problem is to use a model- based control scheme like predictive control, which incorporates the manipula- tor and environment models in a force optimization-based strategy (Wada et al., 1993). Recently, a force control strategy for robotic manipulators in the presence of nonrigid environments combining impedance control and a model predictive control (MPC) algorithm in a force control scheme has been pro- posed (Baptista et al., 2000b). In this force control methodology, the predictive 842 Industrial Robotics: Theory, Modelling and Control controller generate the position and velocity references in the constrained di- rection, to obtain a desired force profile acting on the environment. The main advantage of this control strategy is to provide an easy inclusion of the envi-ronment model in the controller design and thus to improve the global per- formance of the control system. Usually, impedance and environmental models are linear, mainly because the solution of an unconstrained optimization procedure can be analytically ob- tained with moderate computational burden. However, a nonrigid environ-ment has in general a nonlinear behavior, and a nonlinear model for the con- tact surface must be considered. Therefore, in this paper the linear spring/damper parallel combination, often used as a model of the environ- ment, is replaced by a nonlinear one, where the damping effect depends on the penetration depth (Marhefka & Orin, 1996). Unfortunately, when a nonlinear model of the environment is used, the resulting optimization problem to be solved in the MPC scheme is nonconvex. This problem can be solved using discrete search techniques, such as the branch-and-bound algorithm (Sousa et al., 1997). This discretization, however, introduces a tradeoff between the number of discrete actions and the performance. Moreover, the discrete ap-proximation can introduce oscillations around non-varying references, usually know as the chattering effect, and slow step responses depending on the se- lected set of discrete solutions. These effects are highly undesirable, especially in force control applications. A possible solution to this problem is a fuzzy scaling machine, which is proposed in this paper. Fuzzy logic has been used in several applications in robotics. In the specific field of robot force control, some relevant references, such as (Liu, 1995 ; Corbet et al., 1996 ; Lin & Huang, 1997), can be mentioned. However, these papers use fuzzy logic in the classic low level form, while in this paper fuzzy logic is applied in a higher level. Here, the fuzzy scaling machine alleviates the effects due to the discretization of the nonconvex optimization problem to be solved in the model predictive algo- rithm, which derives the virtual reference for the impedance controller consid- ering a nonlinear environment. The fuzzy scaling machine proposed in this paper uses an adaptive set of discrete alternatives, based on the fulfillment of fuzzy criteria applied to force control. This approach has been used in predic-tive control (Sousa & Setnes, 1999), and is generalized here for model predic- tive algorithms. The adaptation is performed by a scaling factor multiplied by a set of alternatives. By using this approach, the number of alternatives is kept low, while performance is increased. Hence, the problems introduced by the discretization of the control actions are highly diminished.For the purpose of performance analysis, the proposed predictive force control strategy with fuzzy scaling is compared with the impedance controller with force tracking by simulation with a two-degree-of-freedom (2-DOF) manipula- tor, considering a nonlinear model of the environment. The robustness of the predictive control scheme is tested considering unmodeled friction and Corio-Predictive force control of ro bot manipulators in nonrigid e nvironments 843 lis effects, as well as geometric and stiffness uncertainties on the contact sur- face. The implementation and validation of advanced control algorithms, like the one presented above, require a flexible structure in terms of hardware and software. However, one of the major difficulties in testing advanced force/position control algorithms relies in the lack of available commercial open robot controllers. In fact, industrial robots are equipped with digital con- trollers having fixed control laws, generally of PID type with no possibility of modifying the control algorithms to improve their performance. Generally, ro- bot controllers are programmed with specific languages with fixed pro- grammed commands having internally defined path planners, trajectory inter- polators and filters, among other functions. Moreover, in general those controllers only deal with position and velocity control, which is insufficient when it is necessary to obtain an accurate force/position tracking performance (Baptista et al., 2001b). Considering these difficulties, in the last years several open control architectures for robotic applications have been proposed. Gener- ally, these solutions rely on digital signal processor techniques (Mandal & Payandeh, 1995 ; Jaritz & Spong, 1996) or in expensive VME hardware running under the VxWorks operating system (Kieffer & Yu, 1999). This fact has moti- vated the development of an open PC-based software kernel for management, supervision and control. The real-time software tool for the experimentation of the algorithms proposed in this paper was developed considering require- ments such as low cost, high flexibility and possibility of incorporating new hardware devices and software tools (Baptista, 2000a). This article is organized as follows. Section 2 summarizes the manipulator and the environment dynamic models. The impedance controller with force track- ing is presented in section 3. Section 4 presents the model predictive algorithm with fuzzy scaling applied to force control. The simulation results for a 2-DOF robot manipulator are discussed in section 5. The experimental setup and the force control algorithms implemented in real-time are presented in section 6. The experimental results with a 2-DOF planar robot manipulator are presented in section 7. Finally, some conclusions are drawn in section 8. Manipulator and environment modeling Consider an n-link rigid-link manipulator constrained by contact with the en- vironment, as shown in fig.1. The complete dynamic model is described by (Si- ciliano & Villani, 2000) () (,) () () e M qq Cqqq gq dq ττ ++ + = −    (1) 844 Industrial Robotics: Theory, Modelling and Control where1,,×∈ nqqq R correspond to the joint, position, velocity and acceleration vectors, respectively, ()×∈nnMq R is the symmetric positive definite inertia ma- trix, (,)×∈nnCqq R is the centripetal and Coriolis matrix, 1()×∈ngq R contains the gravitational terms and 1()×∈ndqq R accounts for the frictional terms. The vec- tor1×∈nRτ is the joint input torque vector and 1×∈n eR τ denote the generalized vector of joint torques exerted by the environment on the end-effector. From (1) it is possible to derive the robot dynamic model in the Cartesian space: () (,) () ()x xx x e Mx xCx x xgx dx f f ++ + = −    (2) where x is the n-dimensional vector of the position and orientation of the ma- nipulator's end-effector, 1()−×=∈TnfJq R τ is the robot’s driving force, 1×∈n efRis the contact force vector and Jrepresents the Jacobian matrix. The interaction force vector [ ]T en tf ff= is composed by the normal contact force fn and the tangential contact forces ft caused by friction contact between the end-effector and the surface. An accurate modeling of the contact between the manipulator and the environment is usually difficult to obtain due to the complexity of the robot's end-effector interaction with the environment. In this paper, the normal contact force f nis modeled as a nonlinear spring-damper mechanical system according (Marhefka & Orin, 1996): ()nefke x x xδ ρδ =+  (3) where the terms ke and ǒe are the environment stiffness and damping coeffi- cients, respectively, e xxx δ=− is the penetration depth, where xe stands for the distance between the surface and the base Cartesian frame. Notice that the damping effect depends non-linearly on the penetration depth ǅx. The tangen- tial contact force vector ft due to surface friction is assumed to be given as proposed by (Yao & Tomizuka, 1995): sgn( )tnpf fxμ=  (4) wherepxis the unconstrained or sliding velocity and Ǎ is the dry friction coef- ficient between the end-effector and the contact surface. Predictive force control of ro bot manipulators in nonrigid e nvironments 845 Figure 1. Robot manipulator applying a desired force on the environment. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media). Impedance control The impedance controller proposed by (Hogan, 1985) aims at controlling the dynamic relation between the manipulator and the environment. The force ex- erted by the manipulator on the environment depends on the end-effector po- sition and the correspondent impedance. The impedance of the robot is di-vided in the following terms: one that is physically intrinsic to the manipulator and the other that is given to the robot by the controller. The impedance con- trol goal is to oblige the manipulator to follow the reference or target imped- ance. As shown by (Volpe & Khosla, 1995) a good impedance relation is achieved with a linear model of second order. The complete form of a second order type impedance control model, which is valid for free or constrained motion, is given by: () () dd d d d eMx B x x K x x f −− − − = −   (5) where ,ddxx are the desired velocity and position defined in the Cartesian space, respectively, and ,xx are the end-effector velocity and position in Car- tesian space, respectively. The matrices ,,dd dMB K are the desired inertia, damping and stiffness for the manipulator. The reference or target end-effector acceleration ux≡ is then given by: 1()dd d e uM B e K ef−=+ −  (6) 846 Industrial Robotics: Theory, Modelling and Control where ,dd ex x ex x=− =−  are the velocity and position errors, respectively. Thus, u can be used as the command signal to an inner position control loop in order to drive the robot accordingly to the desired trajectory. 3.1 Virtual trajectory for force tracking The major drawback of the impedance control scheme presented above is re- lated to its poor force tracking capability, especially in the presence of nonrigid environments (Baptista et al., 2000b). However, from the conventional imped- ance control scheme it is possible to obtain a force control scheme in a steady- state contact condition with the surface. Considering the impedance control scheme (6) in the constrained direction, the following holds: 1(( ) ( ) )f dd v d v n um b x x k x xf−=− + − −  (7) where , and vv fxxu are the virtual position, velocity and target acceleration, re- spectively, while ,,dddmbk are appropriate elements of ,,dd dMBK matrices de- fined in (5) in the constrained direction. The contact force fn during steady- state contact with the surface is given by: ()nd vfkx x=− (8) Considering for simplicity the environment modeled by a linear spring with stiffness ke the contact force is given by: nefkxδ= (9) This leads to the following steady-state position and contact force (Singh & Popa, 1995): dv ee ss dekx kxxkk+=+ (10) () ssde nv e dekkf xxkk=−+ (11) It is possible to apply a desired force fd on the system while simultaneously achieving the desired impedance by estimating the desired virtual position xv as:Predictive force control of ro bot manipulators in nonrigid e nvironments 847 ed ve d edkkxxfkk§·+=+¨¸ ©¹ (12) Moreover, when the environment stiffness is unknown, it is also possible to obtain the virtual position from fd,fn and ǅx (Jung & Hsia, 1995). In this case, by substitution of ke in (12) the following virtual position xv is obtained: if 0 if 0d en d v dn ed n dnfxfk x kxfxf fkfδ­+=°°=®§· + °+≠¨¸°©¹¯ (13) which is valid for contact and non-contact condition. This approach enables the classical impedance controller, given by (6), with force tracking capability without explicit knowledge of the environment stiffness. Notice that vx is usu- ally assumed to be zero due to the noise always present in the force sensor measurements. 3.2 Impedance control with force tracking The impedance control with force tracking (ICFT) block diagram is presented in fig.2. efddx, x qq, vxu τ xx,Inverse dynamics controller Impedance controller Force sensor/ environment Robot Reference trajectory algorithmdfForward kinematics Figure 2. Impedance control with force tracking (ICFT) block diagram. In this scheme, the virtual position xv given by (13), is computed in the Refer- ence trajectory algorithm block, while the target acceleration vector 848 Industrial Robotics: Theory, Modelling and Control T fp uuuªº=¬¼with up is obtained from (6) and uf from (7), is computed in the Impedance controller block. Moreover, the unconstrained target acceleration vec- torup is further compensated by a proportional-derivative (PD) controller, which is given by: pc p P Duu K e K e=+ +  (14) where KP and KD are proportional and derivative gain matrices, respectively. The target acceleration vector T cf p cuu uªº=¬¼is then used as the driving signal to the inverse dynamics controller, in order to track the desired force profile. Since robot controllers are usually implemented in the joint space, it is useful to obtain the correspondent target joint acceleration uq for the inverse dynam- ics controller. Then, using the appropriate kinematics transformations, uq is given by: ()1()qcuJ u J q q−=−  (15) Then, applying an inverse dynamics controller in the inner control loop, the joint torques are given by: ˆ ˆ () () ()T qe Mq u gq Jq fτ=+ + (16) where ˆ ˆ () , ()Mq gq are estimates of () , ()Mq gq in the robot dynamic model (1). Notice that Coroilis and friction effects are neglected. The impedance control- ler with force tracking (ICFT) presented above is a good control approach for rigid environments since the end-effector velocity in the constrained direction is close to zero, which leads to a virtual position with an acceptable precision. However, for nonrigid environments the constrained velocity can hardly be zero, which limits the accuracy of the control system to track the desired force profile (Baptista et al, 2001a). To overcome the drawbacks of the scheme pre- sented above, this paper proposes an alternative force control methodology based on a model predictive algorithm (MPA) which is presented in the next section.Predictive force control of ro bot manipulators in nonrigid e nvironments 849 Model predictive algorithms applied to force control Predictive algorithms consist of a broad range of methods, which are used to predict a desired variable in an optimal way. The most common predictive al- gorithms are model predictive controllers (Maciejowski, 2002), which have one common feature; the controller is based on the prediction of the future system behavior by using a process model. In a more general way, predictive algo- rithms are based on the following basic concepts: Use of a (nonlinear) model to predict the process outputs at future time periods over a prediction horizon; Computation of a sequence of future inputs using the model of the sys- tem by minimizing a certain objective function; Receding horizon principle; at each sampling period the optimization process is repeated with new measurements, and only the first input ob- tained is applied to the system. In this paper, an MPA is used to predict the target position x v to the impedance control law in (7), such that a desired force profile is obtained. In general, a predictive algorithm minimizes a cost function over a specified prediction ho- rizon Hp. In order to reduce model-plant mismatch and disturbances in an ef- fective way, the predictive algorithm is combined with an internal model con- trol (IMC) structure (Economou et al., 1986) which increases the force tracking performance. A filter is included in the feedback loop of the predictive struc- ture to reduce the noise present in the force sensor data. This filter stabilizes the loop by decreasing the gain, increasing the robustness of the force control loop. The sequence of future target positions ( )..... ( 1)vv pxk xk H +− over a speci- fied prediction horizon, produced by the MPA, results in a new target accel- eration by the impedance control law (6), which determines the force to apply on the surface. Predictive algorithms need a prediction model to compute the optimal input. In this paper, the model must predict the contact force f m based on the measured position x and velocity x. This model must consider the dy- namics of the environment given by (3). In order to minimize the number of calculations during the nonlinear optimization procedure, only the virtual tra- jectory is computed in an optimal way, and thus vx is assumed to be zero. Therefore, the nonlinear prediction model in the constrained direction is given by: ()df d d v mmu bx k x x f +− − = − (17) Note that a discrete version of this model is required, predicting the future val- ues fm(k+i) based on the measured position x(k) and the measured velocity 850 Industrial Robotics: Theory, Modelling and Control ()xk at time instant k. The predictive scheme is combined with an internal model control scheme, and the model-plant mismatch is given by () () ()mn mek fk fk =− (18) The desired force profile fd is compensated by the filtered modeling error emf, as shown in fig.4, resulting in the modified force reference fdcdefined as: () () ()dc d mffkf k e k=− (19) The cost function considered for the force control scheme is then given by: ()2 1() ( ) ( )pH vd c m iJx f k i f k i ==+ − +¦ (20) The process inputs and outputs, as well as state variables, can be subjected to constraints, which must be incorporated in the optimization problem. kfdHcHp fm xvfm k-1 k+1... k+Hc... k+Hp^ Figure 3. Basic principle of MPA applied to robot force control. The performance of the MPA depends largely on the accuracy of the process model. The model must be able to accurately predict the future process out-Predictive force control of ro bot manipulators in nonrigid e nvironments 851 puts, and at the same time be computationally attractive to meet real-time de- mands. When both nonlinear models and constraints are present, the optimi- zation problem is nonconvex. Efficient optimization methods for nonconvex optimization problems can be used when the solution space is discretized, and techniques such as Branch-and-Bound - B&B (Sousa et al., 1997) can be ap- plied. The B&B method can be used in a recursive way, demanding less com- putation effort than other methods, and is used in this paper to solve the non- convex optimization problem. Figure 3 presents the basic principle of a predictive strategy applied to robot force control. 4.1 Branch-and Bound Optimization Branch-and-Bound algorithms solve optimization problems by partitioning the solution space. In this paper, B&B is used for the optimization problem that must be solved at each time instant k in the model predictive algorithm. A B&B algorithm can be characterized by two rules: Branching rule - defines how to divide a problem into sub-problems; and Bounding rule - establishes lower and upper bounds in the optimal solution of a sub-problem, allowing for the elimi- nation of sub-problems that do not contain an optimal solution. The model predicts the future outputs of the system, which are the forces ( 1),...., ( )mm pfkf k H++ and can be given by (3) when the stiffness coefficient is considered to be constant. Let M be the possible discrete inputs of the system, which are denoted as wj. Thus, at each step the desired positions (1 )vxk i+− ∈ Ω , are given by { 1, 2,..., }jj M ω Ω= = . In the considered predictive scheme, the problem to be solved is represented by the objective function (20) minimizing the predicted force error. This opti-mization problem is successively decomposed by the branching rule into smaller sub-problems. At time instant k+i the cumulative cost of a certain path followed so far, and leading to the output f m(k+i) is given by ()2 () 1() ()i i dc m lJf k l f k l ==+ − +¦ (21) where i = 1,…, Hp, denotes the level corresponding to the time step k+i. A par- ticular branch j at level i is created when the cumulative cost ()()iJu plus a lower bound on the cost from the level i to the terminal level Hp for the branch j, denoted jLJ, is lower than an upper bound of the total cost, denoted JU: () ji LU JJJ+< (22) 852 Industrial Robotics: Theory, Modelling and Control Let the total number of branches verifying this rule at level i be given by N. In order to increase the efficiency of the B&B method, it is required that this num- ber should be as low as possible, i.e. NM  . The major advantages of the B&B algorithm applied to MPA over other non- convex optimization methods are the following: the global discrete minimum containing the optimal solution is always found, guaranteeing good perform- ance; and the B&B method implicitly deals with constraints. In fact, the pres- ence of constraints improve the efficiency of bounding, restricting the search space by eliminating non-feasible sub-problems. The most serious drawbacks of B&B are the exponential increase of the compu- tational time with the prediction horizon and the number of alternatives, and the discretization of the possible inputs, which are the position references x v in this paper. A solution to these problems is proposed in the next section. 4.2 Fuzzy scaling machine Fuzzy predictive filters, as proposed in (Sousa & Setnes, 1999), select discrete control actions by using an adaptive set of control alternatives multiplied by a gain factor. This approach diminishes the problems introduced by the discreti- zation of control actions in MPA. The predictive rules consider an error in or-der to infer a scaling factor, or gain, () [ 0 , 1 ]kγ ∈ for the discrete incremental in- puts. For the robotic application considered in this paper this error is given by em, as defined in (18). The gain ()kγ goes to the zero value when the system tends to a steady-state situation, i.e., the force error and the change in this error are both small. On the other hand, the gain increases when the force error or the change in this error is high. When the gain ()kγ is small, the possible inputs are made close to each other, diminishing to a great extent, or even nullifying, oscillations of the output. When the system needs to change rapidly the gain is increased and the interval of variation of the inputs is much larger, allowing for a fast response of the system. The fuzzy scaling machine reduces thus the main problem introduced by the discretization of the inputs, i.e. a possible limit cycle due to the discrete inputs, maintaining also the number of necessary input alternatives low, which increases significantly the speed of the optimiza-tion algorithm. The design of the fuzzy scaling machine consists of three parts: the choice of the discrete inputs, the construction of the fuzzy rules for the gain filter, and the application of the B&B optimization. The first two parts are ex- plained in the following. Let the virtual position (1 )vxkX−∈ , which was described in (17), represent the input reference at time instant 1k−, where [,]X XX−+= is the domain of this reference position. Upper and lower bounds must be defined for the pos- sible changes in this reference signal at time k, which are respectively kx+ and Predictive force control of ro bot manipulators in nonrigid e nvironments 853 kx−: (1 )kvxXx k++=− − , (1 )kvxXx k−−=− − . These values are then defined as the maximum changes allowed for the virtual reference when it is increased or decreased, respectively. The adaptive set of incremental input alternatives can now be defined as { }*0, , ^ 1, ,kl k l k x xl N λλ+−Ω= =  (23) The distribution lλ must be chosen taking into account that 01lλ≤≤ . In this way, the choice of lλ sets the maximum change allowed at each time instant by scaling the maximum variations kx+ and kx−. The parameter l is important to define the number of possible inputs. From (23) it follows that the cardinality ofkΩ, i.e., the number of discrete alternatives, is given by 21 Ml=+ . The fuzzy scaling machine applies a scaling factor, () [ 0 , 1 ]kγ ∈ to the adaptive set of inputs * kΩ in order to obtain the scaled inputs kΩ of the optimization routine, the B&B in this case: *()kk kγ Ω= ⋅ Ω (24) The scaling factor ()kγ must be chosen based on the predicted error between the reference and the system's output, which is defined as () () () ,pd c p n p ek H f k H f k H+= +−+ (25) where ()dc pfkH+ is the reference to be followed at time pH, as in (19). Added to the error, the change in the error gives usually important indications on the evolution of the system behavior. This information can also be considered in the derivation of ()kγ . The change in error is given by () () ( 1 ) .ek ek ekΔ= − − (26) The fuzzy rules to be constructed have as antecedents the predicted error and the change in the error, and as consequent a value for the scaling factor. Simple heuristic rules can be constructed noticing the following. The system is close to a steady-state situation when the error and the change in the error are both small. In this situation, the discrete virtual references must be scaled down, al- lowing smaller changes in the reference vx, which yield smaller variations in the impedance controller, and ()kγ should tend to zero. On the other hand, when the predicted error or the change in error are high, larger discrete refer-854 Industrial Robotics: Theory, Modelling and Control ences must be considered, and ()kγ should tend to its maximum value, i.e. 1. The trapezoidal and triangular membership functions (( ) )epek Hμ + and (( ) )eek μΔΔ define the two following fuzzy criteria: “ small predicted error ” and “small change in error ”, respectively. The two criteria are aggregated using a fuzzy intersection; the minimum operator (Klir, 1995). In this way, the mem- bership degree of these criteria using the min operator is given by: (( ) , () ) m i n ( , ) ,pe e ek H ekγμμ μΔ +Δ= (27) The scaling factor ()kγ must be the fuzzy complement of a certain member- ship degree γμ: () 1 .kγγ γμ μ == − (28) Summarizing, the set of inputs * kΩ at time instant k, which are virtual refer- ences in this paper, is defined in (23). These inputs are within the available in- put space at time k. Further, the inputs are scaled by the factor () [ 0 , 1 ]kγ ∈ to create a set of adaptive alternatives kΩ, which are passed on to the optimiza- tion routine. At a certain time k, the value of ()kγ is determined by simple fuzzy criteria, regarding the predicted error of the system. Note that the pro- posed fuzzy scaling machine has only the following design parameters: lλ, and the membership functions eμ and eμΔ. Moreover, the tuning of these pa- rameters is not a hard task, allowing the use of some heuristics to derive them. Possible constraints on the input signal, which is the virtual trajectory in this paper, are implemented by selecting properly the parameters lλ. Fuzzy scaling machinefd xv FilterModelfm em- ++ fdc emfInternal controller and robotInternal controller and robotEnvironment fnx, x. Figure 4. Block diagram of proposed predictive force control algorithm with fuzzy scaling machine. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media).Predictive force control of ro bot manipulators in nonrigid e nvironments 855 Figure 4 depicts the proposed predictive force control algorithm with fuzzy scaling. The block Fuzzy scaling machine contains the model predictive algo- rithm, the B&B optimization and the fuzzy scaling strategy. The block Internal controller and robot implement the impedance and the inverse dynamics control algorithms. The robot dynamic model equations are also computed in this block. The block Environment contains the nonlinear model of the environ- ment. In order to cope with disturbances and model-plant mismatches, an in- ternal model controller is included in the control scheme. The block Filter be- longs to the IMC structure (Baptista et al., 2001a). Simulation results The force control scheme introduced in this paper is applied to a robot through computer simulation for an end-effector force/position task in the presence of robot model uncertainties and inaccuracy in the environment location and the correspondent stiffness characteristics. The robot model represents the links 2 and 3 of the PUMA 560 robot. In all the simulations, a constant time step of 1 ms is used. The overall force control scheme including the dynamic model of the PUMA robot is simulated in the Matlab/Simulink environment. A nonri- gid friction contact surface is placed in the vertical plane of the robot work-space where it is assumed that the end-effector always maintain contact with the surface during the complete task execution. In order to analyze the force control scheme robustness to environment model- ing uncertainties, a non rigid time-varying stiffness profile k e(t) is considered, given by: (0 . 2 5 ( 2 ) )1000 sin( / 2) 0 2()1000 2 3e tttktetπ −−+< <­=®≤< ¯ (29) The damping coefficient and the coefficient of dry friction are settled to ǒe=45 Ns/m2 and Ǎ=0.2, respectively. Notice that the stiffness coefficient is consid- ered to be constant ( ke=1000 N/m) in the environment model used for predict the contact force fm. The matrices in the impedance model (6) are defined as Md =diag[2.5 2.5] and Kd= diag[250 2500] to obtain an accurate force tracking in thex-axis direction and an accurate position tracking performance in the y-axis direction. The matrix Bd is computed to obtain a critically damped system behavior. The control scheme was tested considering a smooth step force profile of 10 N and a desired position trajectory from p1= [0.5 -0.2] m to p2= [0.5 0.6] m. Uncertainties in the location of the contact surface given by the final real posi- tion of p2r=[0.512 0.6] m are considered in the simulations, as shown in fig.5. 856 Industrial Robotics: Theory, Modelling and Control Figure 5. 2-DOF planar robot in contact with the environment. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media). The parameters of the predictive controller are Hp=Hc = 2 and the fuzzy scal- ing machine is applied only during the constant path of the reference force tra- jectory. This means that during the reference force transition periods, the fuzzy scaling inference is switched off. The discrete alternatives vxΔfor the fuzzy scaling machine are given by: [ ]*0.050 0 0.050kΩ= − (30) In the inner loop controller (16), only the elements of the inertia matrix and the gravitational terms with parameters 20% smaller than their exact values are considered. The Coriolis and friction terms were neglected in the implementa- tion of the algorithm but considered in the simulation of the robot dynamic model. The proportional and derivative gains in (14) are settled to K P= diag[5000 5000] and KD= diag[500 500]. Simulations using the impedance controller with force tracking (ICFT) and the control algorithm proposed in this paper are compared. The conventional im- pedance controller uses the reference trajectory algorithm presented in (13) considering the environment modeled as a linear spring with k e=1000 N/m. The simulation results obtained with the ICFT are presented in fig.6, which exhibit poor force tracking performance with relatively large force tracking er-rors. However, the ICFT follows the desired position trajectory with high accu- racy; in fact, it is not possible to distinguish the reference from the actual y-axis position in fig.6. The force control scheme uses the model predictive algorithm to compute the virtual trajectory vx, the fuzzy scaling machine and the nonlinear environment model, which furnish the normal force described by (3). The force and position Predictive force control of ro bot manipulators in nonrigid e nvironments 857 results from the application of this controller are presented in fig.7. Comparing this figure with fig.6, it becomes clear that the proposed force controller pre- sents a remarkable performance improvement in terms of force tracking capa-bility. In fact, it is not possible to distinguish the reference force from the actual contact force. In terms of position control, similar performance is achieved. The results for both controllers can be compared in Table 1, where the error norm . for position and force errors, as well as the absolute maximum values for these errors are presented. The table shows that the force control perform- ance is clearly superior for the MPA with fuzzy scaling machine. Force control algorithms pe [m]Max( ep) [mm]fe [N]Max( ef) [N] Impedance control with force track- ing0.041 0.836 60.426 4.420 MPA with fuzzy scaling machine 0.041 0.801 0.8021 0.064 Table 1. Euclidian norm of position, force errors and absolute maximum errors. 0 0.5 1 1.5 2 2.5 3024681012fd ; fn ; ft [N] 0 0.5 1 1.5 2 2.5 3−0.4−0.200.20.40.6 time [s]yd ; y [m] Figure 6. Impedance control with force tracking: desired force (dashdot), normal force (solid) and friction force (dashed) – top view; desired y-axis trajectory (dashdot) and actual position trajectory (solid) – bottom view. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media).858 Industrial Robotics: Theory, Modelling and Control 0 0.5 1 1.5 2 2.5 3024681012fd ; fn ; ft [N] 0 0.5 1 1.5 2 2.5 3−0.4−0.200.20.40.6 time [s]yd ; y [m] Figure 7. MPA with fuzzy scaling: desired force (dashdot), normal force (solid) and friction force (dashed) – top view; desired y-axis trajectory (dashdot) and actual posi- tion trajectory (solid) – bottom view. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media). 0 0.5 1 1.5 2 2.5 3−0.08−0.06−0.04−0.0200.02ef [N] 0 0.5 1 1.5 2 2.5 300.20.40.60.81 time [s]γ(k) Figure 8. MPA with fuzzy scaling: contact force errors (top view) and fuzzy scaling factorǄ(k) (bottom view). (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media).Predictive force control of ro bot manipulators in nonrigid e nvironments 859 0 0.5 1 1.5 2 2.5 3405060708090τ1 [Nm] 0 0.5 1 1.5 2 2.5 3405060708090 time [s]τ1 [Nm] Figure 9. MPA with fuzzy scaling: joint torque Ǖ1 without (top view) and with fuzzy scaling machine (bottom view). (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a) with kind permission of Springer Science and Business Media). In order to study in more detail the proposed force approach, fig. 8 presents the contact force error and the fuzzy scaling factor Ǆ(k)for the same trajectory. The factor Ǆ(k) exhibits a fast convergence to values around zero during the constant reference force path, which reduces the chattering present on the tar- get trajectory and in the joint torques. The joint torque Ǖ1 using the predictive approach with and without the fuzzy scaling machine is shown in fig. 9. The strategy without fuzzy scaling produce undesirable oscillations on the virtual trajectory xv, which has the same effect on the joint torques Ǖ. This effect is significantly reduced by the fuzzy scaling machine, as shown in fig.9 for the joint torque Ǖ1. Experimental setup In order to validate the proposed force control scheme presented in previous sections, real-time experiments were carried out with a 2-DOF planar manipu- lator and a nonrigid mechanical environment built at the Robotics Laboratory of Technical University of Lisbon/Instituto Superior Técnico (IST). A low cost open PC-based control architecture using a commercial servo-axis interface board was developed to control the robotic setup in an effective and reliable way.860 Industrial Robotics: Theory, Modelling and Control .mI22, l1 .l2 mI11,lc1lc2 q1q2 Xshaft Force sensorY fzfxspring spring yefnshaft Rigid plate Figure 10. Top view schematic representation of the robotic setup. (Note: The arrows represent the fx, fz components and indicate the negative directions of the contact forces measured by the force sensor.). (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). The planar robot has two revolute joints driven by HARMONIC DRIVE actua- tors (HDSH-14). Each actuator has an electric d.c. motor, a harmonic drive, an encoder and a tachogenerator. The robot links parameters are given in Table 2 where lci is the distance to the mass center of the link i, Izzi is the inertia mo- ment related to the z-axis and Imiis the actuator's inertia moment related to the output shaft. The contact surface used for force control experiments is based on a steel plate with two springs in parallel guided by shafts with ball bearings (Baptista, 2000a). The top view of the planar robot and the nonrigid mechani- cal contact surface are shown in fig.10 and a picture of the robot and mechani-cal environment is depicted in fig.11. Link Ili [m]mi [Kg]lci [m]Izzi [Kg.m2]Imi [Kg.m2] 1 0.320 5.00 0.163 0.120 0.081 2 0.330 1.47 0.137 0.018 0.021 Table 2. Parameters of the planar 2-DOF robot. (Note: link length l2 includes the force sensor length and the end-effector device length.) Predictive force control of ro bot manipulators in nonrigid e nvironments 861 Figure 11. Top view of the 2-DOF robot and the nonrigid mechanical environment. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). 6.1 Control hardware and software tools The control hardware is based on a PC Pentium 200 MHz, a servo-axis I/O card, linear power amplifiers and a 6-axis force/torque sensor. The power am- plifiers are configured to operate as current amplifiers. In this functioning mode, the input control signal is a voltage in the range ±10 V with current rat- ings in the interval [-2; 2] A. The signals are processed through a low cost ISA- bus servo I/O card from ServoToGo, Inc. The contact forces are measured by a JR3 6-axis force/torque sensor mounted at the end-effector of the arm. The force and torque signals are computed by a ISA-bus DSP card with a frequency rate of 8 KHz. Note that in order to reduce the surface friction during motion, a ball bearing is mounted at the end-effector contact device. The simplified con- trol hardware architecture is shown in fig.12. The real-time software tool used to implement the force control experiments was developed in the C++ language for the MS-DOS operating system. Real- time performance is guaranteed by reprogramming the Programmable Interval Timer (PIT) of the computer system (Baptista, 2000a). The periodic interrupt generated by the servo-axis I/O board PIT is configured to the Interrupt Re- quest 5 (IRQ 5), which activates the Interrupt Service Routine 13 (ISR 13). This ISR is reserved for the control algorithm implementation at a sampling fre- quency F s=1 KHz. The software uses also the ISR 8 which is activated by the computer's IRQ 0.862 Industrial Robotics: Theory, Modelling and Control Amplifier Joint 2 ServoToGo axis board JR3DSP sensor boardComputer Pentium 200MHz ISA BUS Channel 0 Channel 1 Amplifier Joint 1 q qJR3 sensor Figure 12. Simplified hardware control architecture of the 2-DOF robot. This ISR is redefined to execute the safety routine at a frequency that is the double of the sampling frequency. In order to avoid the accumulation of inter- rupt requests, the ISR 13 increments a flag at the beginning of the execution of the selected control routine. This flag is decremented at the end of the execu- tion of the procedure and is checked by the safety routine, which aborts the real-time procedure if its content is superior to the unit value. In this situation, the failure is reported to the operator by the interface program. 6.2 Real-time force control algorithms For real-time implementation of the force control algorithms presented in pre- vious sections, some simplifications were considered due to the higher number of calculations that must be performed in real-time. Let's first consider the Predictive force control of ro bot manipulators in nonrigid e nvironments 863 classical model-based impedance controller, derived from (2) and (5), repre- sented by the following equation: ()1(( ) ) ( , ) ( )T x dd d e x x e J M u M Be Ke f C xxx g x fτ−=+ + − + + +   (31) It is possible to obtain an important simplification considering that Md=M x. Moreover, it is also possible to consider `` quasi-static " conditions, which means that velocities x≈0 and q≈0. This is a reasonable approximation since force control tasks are generally executed at low speeds. Thus, the following simpli- fied impedance control law is obtained: ()() ()T dd Jq B e Ke gqτ=+ +  (32) This control scheme is equivalent to a proportional-derivative cartesian posi- tion control law with gravity compensation. It is possible to demonstrate that for a constant reference x d and without contact with the environment, asymp- totic stability of xd is obtained (de Witt et al, 1997). This control law can be used to apply a desired contact force on the environment considering the virtual references given by the target vector [ ]T tv dx xx= . The application of this vec- tor in the control law (32), allows a force tracking capability without explicit knowledge of the environment stiffness coefficient. In order to improve the force tracking accuracy, an integral control action can be included in (32), which leads to: ()() ()T ddi f Jq B e Ke K ed t gqτ=+ + + ³ (33) wheret ex x=− andt ex x=− are redefined as virtual position and velocity er- rors and f de eff=− are the force errors. Taking the previous assumptions in consideration, the impedance control algorithm with force tracking imple- mented in real-time is given by (33) where the gravitational terms g(q) are null since the robot is of planar type. The main steps of the controller implementa-tion for each sampling period T s are (Baptista et al., 2001b): Step 1: calculation of cartesian positions and velocities, x(k) and x(k) , respectively. Step 2: calculation of the normal contact force fn(k)from JR3 sensor data. Step 3: calculation of xv(k)in the constrained direction ( y-axis):864 Industrial Robotics: Theory, Modelling and Control 1i f 0 1i f 0d vn d v df f vn ef( k )x(k ) f (k)k x( k)f (k) e (k)x(k ) f (k)ˆkδ δκ­−− ≥°°=®+°−− <°¯ (34) where 1dd df(k) f (k) f (k )δ =− − (35) fd ne (k) f (k) f (k) =− (36) Step 4: definition of the virtual vector -axis direction -axis directiond v vx( k ) xx( k)x( k) y­=®⊥ ¯  (37) Step 5: calculation of the control actions in the Cartesian space: () dd i s p f(k) B x (k) K e (k) K TI (k)=− + + (38) where 1 2pe( k ) e( k )I( k )+−= (39) Step 6: calculation of the joint control actions T(k) J(q (k) ) f(k)τ = (40) Notice that in (35) the minus signals follow the convention of signals used by the force/torque sensor. In this algorithm, an estimate of the environment stiffnesseˆkis used to compute xv(k). The term ffe( k )κ is used to compensate geometric and stiffness uncertainties and other non-modeled terms of the envi- ronment. For purposes of performance analysis, the classical hybrid position/force con- trol algorithm was also implemented in real-time. This algorithm has been pro- posed by (Raibert & Craig, 1981) and uses a selection matrix diag with 1j S ( s ) j ,...,m== , to separate the position and force subspaces, by the attribution of ``1" to the force subspace and ``0" to the position subspace. The matrix S is used to represent the force controlled direction and the matrix I-S to represent the remaining position controlled directions, where I is the iden-Predictive force control of ro bot manipulators in nonrigid e nvironments 865 tity matrix. In this algorithm, the control forces are given by: [ ] 1fp f(k) S f (k) S f (k)=+ − (41) The real-time implementation of the control laws for unconstrained space and constrained space, are respectively given by: Force subspace Position subspacedP f s f I fD f Ps I pDf (k) K e (k) TK I (k) K x f(k)K e (k) TK I (k) K x++ −­=®+−¯  (42) where efis defined in (37) and Ip follows the definition in (39) for the uncon- strained direction. The coefficients KP,KI and KD are the parameters of the PID position controller and KPf, KIf and KDfare the parameters of the PID force con- troller. Notice that velocity damping is included in the control law for the con- strained direction (Mandal & Payandeh, 1995). Unfortunately, the control scheme presented in fig.4 is not possible to imple- ment directly in real-time due to the high sampling rate used in the force con-trol loop ( F s=1 KHz). Thus, one possible solution is to use more powerful hardware and software tools to implement the control scheme in a straight- forward way. Due to computer hardware limitations, an alternative strategy was used to implement the proposed force control algorithm in real-time. The optimized virtual trajectory xv for the impedance controller is computed off- line in Matlab/Simulink using a realist simulator of the experimental robotic setup. The optimized virtual trajectory calculated off-line with an additional term for compensation of uncertainties and modeling errors is then furnished as a reference signal ( xvopt) to the impedance controller described in Section 3. The virtual reference used in the simplified version of the MPA with fuzzy scaling implemented in real-time is then given by: f vv o p t f ee( k )x(k) x (k)ˆkκ =+ (43) where and f eˆk κ are terms as defined in (34). 866 Industrial Robotics: Theory, Modelling and Control Experimental results In this section, experimental results obtained with the predictive force algo- rithm with fuzzy scaling proposed in this paper are presented. These results are compared with the classical force control algorithms, namely the classical impedance controller and the hybrid position/force controller. Note that the predictive control algorithm uses a nonlinear model of the nonrigid environ-ment where the stiffness coefficient is varying with the penetration depth ǅx. It is necessary to obtain an estimate of the environment stiffness in the con- strained direction eˆk, which is used in (34) and (43). This estimate is obtained experimentally by measuring the linear surface displacement when a force profile is applied by the end-effector. The collected pairs of nf xδ− data are then used to estimate the global stiffness coefficient eˆk=1636 N/m, using the least-squares method. The obtained results presented in fig.13, exhibit a large deformation of the surface when a 10 N smooth step force profile is applied on the surface. From the plot is possible to observe that the environment has a nonlinear behavior of hysteresis type (Baptista et al., 2001b). The control algorithms are implemented in the cartesian space with a sampling period of T s= 1 ms. The implemented force/position task is a linear trajectory with 100 mm length between xi= 229.5 mm and xf= 329.5 mm along x-axis, with simultaneous application of a smooth 10 N step force profile along the y- axis, during 8 seconds. It is assumed that the arm is initially in contact with the environment. Moreover, geometric uncertainty in the contact surface of 5 mm at the end of the trajectory is intentionally imposed to the environment. The fil- tered force data components ( fx, fz) are obtained from the JR3 DSP board con- sidering a first order low-pass digital filter with 500 Hz cut-off frequency in order to attenuate the force sensor noise. The predictive force control algo- rithm, which derives the virtual position to the impedance controller, use the parameters H c= H p= 2. As refereed in Section 4, the fuzzy scaling machine is applied only during the constant path of the reference force profile. Predictive force control of ro bot manipulators in nonrigid e nvironments 867 0 1 2 3 4 5 6−5051015 δx [mm]fn [N] 0 1 2 3 4 5 6 7 8−15−10−505 time [s]fn ; f* n [N] Figure 13. Estimated environment stiffness and contact forces. (Note: dashdot - esti- mated contact force neˆˆfkxδ= ; solid - actual force fn). (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). The maximum allowed increments Ʀxv at each time step are the following (in mm): 2207 5 1 0 0 07 5 1 0*.. Ω−−ªº=− × ×¬¼ (44) The impedance control algorithm use the parameters presented in Table 3 for the real-time control experiments. The force compensation gain is set to fκ=0.025, and was selected from experimental trials. Axis Kd K i B d x-axis 3000 4000 6 y-axis 2000 3000 2 Table 3. Impedance control parameters. Figure 14 presents the end-effector’s position in the x-y axis coordinates using the real-time implementation of the predictive force control algorithm with fuzzy scaling. For the same controller, the optimized virtual position given by (43) and the actual contact force are presented in fig.15. Figure 16 presents the obtained position and force errors. The experimental results obtained with the classical impedance controller are presented in fig. 17, where the position and 868 Industrial Robotics: Theory, Modelling and Control force errors are depicted. The parameters for the hybrid position/force control- ler used in the real-time tests are presented in Table 4 and the position and force errors are depicted in fig.18. Axis KP K I K D x-axis 3000 4000 6 y-axis 570 2500 2 Table 4. Parameters of the hybrid position/force controller. The results presented for the predictive force control algorithm reveal an accu- rate force tracking accuracy when compared to the equivalent results obtained with the impedance and hybrid control algorithms. The proposed controller exhibit significantly better results, especially during the time-varying force ref- erence trajectory. The impedance controller with force tracking reveal some difficulties in following the force reference path when this is not constant. The force control performance of the hybrid controller drops significantly during the final part of the trajectory due to the geometric uncertainty, which is not ef- ficiently compensated by the algorithm. 0 1 2 3 4 5 6 7 8220240260280300320340xd ; x [mm ] 0 1 2 3 4 5 6 7 8440442444446448450 time [s]y [mm] Figure 14. Predictive force control algorithm with fuzzy scaling: X-axis position coor- dinate, Y-axis constrained position coordinate. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). Predictive force control of ro bot manipulators in nonrigid e nvironments 869 0 1 2 3 4 5 6 7 8440442444446448450xv [mm] 0 1 2 3 4 5 6 7 8−15−10−505 time [s]fd ; fn [N] Figure 15. Predictive force control algorithm with fuzzy scaling: Y-axis virtual trajec- tory, desired and actual contact force (Note: solid-actual; dashdot-desired). (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). 0 1 2 3 4 5 6 7 8−0.500.5ep [mm] 0 1 2 3 4 5 6 7 8−4−2024 time [s]ef [N] Figure 16. Predictive force control algorithm with fuzzy scaling: x-axis position errors and y-axis contact force errors. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). 870 Industrial Robotics: Theory, Modelling and Control 0 1 2 3 4 5 6 7 8−0.500.5ep [mm] 0 1 2 3 4 5 6 7 8−4−2024 time [s]ef [N] Figure 17. Impedance control with force tracking: x-axis position errors and y-axis contact force errors. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). In order to compare the performance of the controllers, the Euclidian norm (.) of position and force errors and the absolute maximum error values for the given task are presented in Table 5. Force controllers pe [m]Max( ep) [mm]fe [N]Max( ef) [N] Hybrid position/force control 8.1 0.43 63.89 2.76 Impedance control with force tracking 8.5 0.49 50.63 2.33 Predictive force control with fuzzy scaling8.1 0.42 37.40 1.73 Table 5. Euclidian norm of position, force errors and absolute maximum errors. From Table 4 results, is possible to conclude that predictive force control algo- rithm proposed in this paper reduces the norm of the force error in 26% when compared to the impedance controller with force tracking, which is a quite significant value. The reduction in the norm of the force error is even more significant when compared to the hybrid position/force controller results (41%). The experimental results reveal the successful implementation of the proposed predictive force control strategy in real-time, in the presence of non- rigid environments with uncertainties. Predictive force control of ro bot manipulators in nonrigid e nvironments 871 0 1 2 3 4 5 6 7 8−0.500.5ep [mm] 0 1 2 3 4 5 6 7 8−4−2024 time [s]ef [N] Figure 18. Hybrid position/force control: x-axis position errors and y-axis contact force errors. (Reprinted from Baptista, L.; Sousa, J. & Sá da Costa, J. (2001b) with permission of Elsevier). Conclusion In this article, a force control scheme integrating a model predictive algorithm and an impedance controller in the presence of nonrigid environments is pro- posed. The force controller uses a MPA with a fuzzy scaling machine to allevi-ate the problems introduced by the discretization of inputs required by the B&B algorithm. The optimization procedure is nonconvex since a nonlinear model of the environment is considered. Simulation results were carried out considering a 2-DOF robot model interacting with a nonrigid environment with nonlinear characteristics. A real-time implementation of the fuzzy predic- tive algorithm is derived, which uses an optimal virtual trajectory computed off-line. The experimental results are compared to other classical force control techniques, which are the impedance control with force tracking and the hy- brid position/force control. Simulation and experimental results reveal that the proposed MPA with fuzzy scaling force controller presents a significant better force tracking performance when compared to the conventional force controllers.Future research will concentrate on the on-line implementation of the full ver- sion of the fuzzy predictive force control algorithm and the extension of the control scheme to a robot with more than two joints.872 Industrial Robotics: Theory, Modelling and Control AKNOWLEDGMENTS Part of the material in this chapter appeared in various journal and conference publications. These publications are referred to in the relevant paragraphs, and they are listed in the bibliography. The material, including figures and tables, is reproduced with the kind permission of the respective copyright holders. The list of the copyright holders is as follows: Springer Science and Business Media: Baptista, L.; Sousa, J. & Sá da Costa, J. (2001a). Elsevier Science: Bap- tista, L.; Sousa, J. & Sá da Costa, J. (2001b). References Baptista, L.; (2000a). Adaptive force and position control of robot manipulators, PhD Thesis, Technical University of Lisbon, Mechanical Engineering De- partment, Lisbon (in portuguese) Baptista,L; Ayala Botto, M. & Sá da Costa, J. (2000b). A predictive force control approach of robot manipulators in nonrigid environments. International Journal of Robotics and Automation, 15(2) pp.94-102, ISSN 0826-8185 Baptista,L; Sousa, J. & Sá da Costa, J. (2001a). Force control of robot manipula- tors using a fuzzy predictive approach. Journal of Intelligent and Robotic Systems, 30(4), April 2001, pp.359-376, ISSN 0921-0296 Baptista,L; Sousa, J. & Sá da Costa, J. (2001b). Force predictive algorithms ap- plied to real-time force control. Control Engineering Practice, 9(4), pp.411- 423, ISSN 0967-0661 Corbet, T. ; Sepehri, N. & Lawrence, P. (1996). Fuzzy control of a class of hy- draulically actuated industrial robots. IEEE Transactions Control Systems Technology, 4(4), pp.419-426 De Witt, C. ; Siciliano, B. & Bastin, G. (1997). Theory of robot control. Springer- Verlag, ISBN 3-540-76054-7, London, UK De Schutter, J. ; Bruyninckx, H. & Spong, M. (1997). Force control: a bird’s eye. Proceedings of IEEE CSS/RAS International Workshop on Control Problems in Robotics and Automation: Future directions. San Diego, December 1997, USA Economou, C. ; Morari, M. & Palsson, B. (1986). Internal model control. 5. Exten- sion to nonlinear systems. Industrial Engineering Chemical Process De- sign and Development, 25, American Chemical Society, pp.404-411 Hogan, N. (1985). Impedance control: An approach to manipulation: Part I-II- III.Journal of Dynamic Systems, Measurement and Control, 107(1), pp.1-24 Jaritz, A. & Spong, M. (1996). An experimental comparison of robust control algorithms on a direct drive manipulator. IEEE Transactions on Control Systems Technology, 4, pp.614-626 Predictive force control of ro bot manipulators in nonrigid e nvironments 873 Jung, S. & Hsia, T. (1995). On neural network application to robust impedance control of robot manipulators. Proceedings of the IEEE International Con- ference on Robotics and Automation , pp. 869-874 Lin, S. & Huang, A. (1997). Position-based fuzzy force control for dual indus- trial robots. Journal of Intelligent and Robotic Systems , 19, pp.393-409 Liu, M. (1995). Force-controlled-fuzzy-logic-based robotic deburring. Control Engineering Practice, 3(2), pp.189-201, ISSN 0967-0661 Love, L. & Book, W. (1995). Environment estimation for enhanced impedance control. Proceedings of the IEEE International Conference on Robotics and Automation , pp. 1854-1859 Kieffer, J. & Yu, K. (1999). Robotic force/velocity control for following un- known contours of granular materials. Control Engineering Practice, 7(10), October 1999, pp.1249-1256, ISSN 0967-0661 Klir, G. & Yuan, B. (1995). Fuzzy set and fuzzy logic: theory and applications, Englewood Cliffs, Prentice Hall, ISBN 0792377338, NJ Maciejowski, J. (2002). Predictive control with constraints, Prentice Hall Inc., New York, USA, ISBN 0201398230 Marhefka, D. & Orin, D. (1996). Simulation of contact using a nonlinear damp- ing model. Proceedings of the IEEE International Conference on Robotics and Automation , pp.1662-1668 Mandal, N. & Payandeh, S. (1995). Control strategies for robotic control tasks: an experimental study. Journal of Robotic Systems, 12(1), pp.67-92 Raibert, M & Craig, J. (1981). Hybrid position/force control of manipulators. Journal of Dynamic Systems, Measurement and Control, 102(2), pp.126-133 Siciliano, B. & Villani, L. (2000). Robot force control, Springer-Verlag, New York, ISBN 0792377338 Singh, S, & Popa, D. (1995). An analysis of some fundamental problems in adaptive control of force and impedance behavior: theory and experi-ments. IEEE Transactions on Robotics and Automation, 11, pp.912-921 Sousa, J. ; Babuska, R. & Verbruggen, H. (1997). Branch-and-bound optimiza- tion in fuzzy predictive control: an application to an air conditioning system. Control Engineering Practice, 5(10), October 1997, pp.1395-1406, ISSN 0967-0661 Sousa, J. & Setnes, M. (1999). Fuzzy predictive filters in model predictive con- trol. IEEE Transactions on Industrial Electronics, 46(6), December 1999, pp.1225-1232 Volpe, R. & Khosla, P. (1995). On the equivalence of second order impedance control and proportional gain explicit force control. International Journal of Robotics Research , 14(6), pp.574-589 Yao, B. & Tomizuka, M. (1995). Adaptive control of robot manipulators in con- strained motion – controller design. Journal of Dynamic Systems, Meas- urement and Control , 117, pp.320-328 874 Industrial Robotics: Theory, Modelling and Control Wada, H. ; Fukuda, T. ; Kosuge, K. ; Arai, F. & Watanabe, K. (1993). Damping control with consideration of dynamics of the environment. Proceedings of the International Conference on Intelligent Robots and Systems, 1, pp.1516- 1520 Zeng, G. & Hemami, A. (1997). An overview of robot force control. Robotica , 15(5), pp.473-482 87532 Friction Compensation in Hybrid Force/Velocity Control for Contour Tracking Tasks Antonio Visioli, Giacomo Ziliani and Giovanni Legnani Introduction Nowadays robots in industrial settings are mainly used for repetitive tasks where they act as programmable devices reproducing previously recorded motions in a highly structured environment so that decision and initiative ca- pability is rarely exploited. Contour tracking is, on the contrary, an example of a complex task that requires the manipulator to continuously and autono- mously modify its path, coping with the uncertainties typical of unstructured environments (Siciliano & Villani, 1999). In many applications a robot is re- quired to follow a contour while applying a normal force; these tasks include grinding (Thomessen & Lien, 2000), deburring (Ferretti et al., 2000; Ziliani et al., 2005), shape recovery (Ahmad & Lee, 1990), polishing and kinematic cali- bration (Legnani et al., 2001). The problem of tracking (known and) unknown contours has been studied by many researchers in the last two decades. Hybrid force/velocity control (Raibert & Craig, 1981) appears to be suitable to be adopted in this context, because it explicitly controls the end-effector force in a selected direction and the end-effector velocity in the other complemen- tary directions. Actually, two kinds of hybrid force/velocity control can be implemented (Roy & Whitcomb, 2002): 1) explicit hybrid force/velocity control , where the robot end-effector is controlled by directly imposing the joint torques based on the measured force and position/velocity errors, and 2) im- plicit hybrid force/velocity control , where the end-effector is controlled indirectly by suitably modifying the reference trajectories of the joint position/velocity inner control loops based on the measured force errors. A theoretical compari- son (with experimental results) between these two approaches has been devel- oped in (Volpe & Khosla, 1993), although the contour tracking task has not been considered. Indeed, it is a matter of fact that these methodologies are not widely employed in industrial settings. This might be due to the fact that there is a lack of a characterisation of these techniques from an industrial point of view where the cost/benefit ratio has to be always taken into account. In order to (partially) address this fact, the implementation of an implicit and an explicit hybrid 876 Industrial Robotics: Theory, Modelling and Control force/velocity control law for contour tracking of objects of unknown shape performed by an industrial SCARA manipulator is discussed in this chapter. In particular, the problem of compensating joint friction effects, which have to be taken into account in the controller design in order to achieve reasonable performance in terms of normal force and tangential velocity errors, is investi- gated. Two model-based friction compensation methods are considered: a static method, based on a previously identified model and an adaptive method, where joint friction parameters are recursively updated. Experimental Setup The experimental set-up adopted for the experiments described in the follow- ing sections is available in the Applied Mechanics Laboratory of the University of Brescia and it consists of an industrial robot manipulator manufactured by ICOMATIC (Gussago, Italy) with a standard SCARA architecture where the vertical z axis has been blocked since a planar task is addressed. A detailed dynamic model is described in (Visioli & Legnani, 2002). Both links have the same length of 0.33 m. The two joints are actuated by means of two DC motors that are driven by conventional PWM amplifiers and position measurements are available by means of two incremental encoders with 2000 pulses/rev. resolution. Harmonic Drive speed reducers are present and the reduction rate is 1/100 for both joints. Velocity is estimated through numerical differentiation whose output is then processed by a low-pass 2- order Butterworth filter with a 100 Hz cut-off frequency and a 1.0 damping ra- tio. Figure 1. The SCARA robot during the contour tracking of a complex shape Friction compensation in hybrid force/velocity control for contour tracking tasks 877 An ATI 65/5 force/torque sensor capable of measuring forces in a range of ±65 N and with a resolution of 0.05 N is mounted at the manipulator's wrist. The corresponding signals are processed at 7.8 kHz frequency by an ISA DSP based board. The contact is achieved by means of a proper plastic probe endowed with a ball bearing with an 8 mm diameter whose aim is reducing tangential friction forces that may arise from the contact with the piece (see Figure 1). The overall control law is implemented (in C/C++ language) by means of a PC-based controller based on a QNX4 real time operating system. Acquisition and control are performed at a 1 kHz frequency. Hybrid Force/Velocity Control 3.1 Problem formulation A sketch of the SCARA robot is shown in Figure 2. Frame (0) refers to the robot base, while task frame (T) has its origin on the robot end-effector with its n and t axes that are directed respectively along the normal and tangential direction of the contour of the piece, whose geometry is assumed to be unknown; ϑ de- notes the angle between n axis and x axis of frame (0). LetTqq Q ],[= 21 be the vector of the joint positions and Q its first time deriva- tive. Since a suitable belt transmission keeps the end-effector with constant orientation with respect to the absolute frame, force measurements are directly available in frame (0). Let T y xFF F ],[=(0) ,T nt T FF F ],[=)( be the vector of the contact force in frame (0) and (T) respectively. They are related to each other by the equation )( 0 (0) )( =T T F M F ϑ denoting with ijM the rotation matrix from frame j to frame i. Note that .sin coscos sin=)(0 »¼º «¬ª − ϑ ϑϑ ϑϑTM (1) VectorT nt T VV V ],[=)( representing the Cartesian velocity in frame (T) can be obtained from the relation QQJ M V M VT T T)()( = )( =0 (0) 0 )( ϑ ϑ (2) where )(QJ is the robot Jacobian. The aim of the contour tracking task is to control the normal force and the tangential velocity of the robot probe along n and t directions of task frame (T) respectively. 878 Industrial Robotics: Theory, Modelling and Control These directions can be easily estimated, assuming that the contact friction force on the tangent direction is negligible with respect to the normal contact force (note that this is achieved by adopting a suitable probe endowed with a ball bearing, as described in Section 2), by on-line estimating the angle ϑ as: . arctan=),( atan2= π ϑ ±¸¸ ¹· ¨¨ ©§ xy xyFF FF (3) (0)q2(T) q1tn xyϑ Figure 2. Sketch of a SCARA robot following a contour 3.2 Explicit hybrid force/velocity control It is well known that the manipulator dynamics can be expressed as: (0))( =)( )( ),( )( FQJ QG Qf QQQCQQBT− + + + τ   (4) where )(QB is the inertia matrix, ),(QQC is the matrix of centrifugal and Cori- olis terms, Tqfqf f )](),([=21 11 is the vector of joint friction forces, )(QG is the gravity forces term (null for the SCARA robot adopted because it works in a horizontal plane), T],[=21τττ is the joint torques vector, and (0)F was defined earlier as the vector of forces exerted from the robot on the environment. A thorough theoretical and experimental investigation of the robot identified its dynamics (Visioli & Legnani, 2002; Indri et al. 2002). It was found that, because of the low velocities and accelerations involved in conventional contour track- ing tasks, the effects of the inertial and Coriolis forces can be neglected with respect to contact forces and friction terms. As a consequence of this, equation Friction compensation in hybrid force/velocity control for contour tracking tasks 879 (4) can be reduced to . )( )((0)FQJ QfT+ ≅ τ (5) In an explicit hybrid force/velocity control law the robot end-effector is con- trolled by directly imposing the joint torques based on the measured force and position/velocity errors ( i.e., no joint position/velocity inner loops are pre- sent). Based on the robot dynamic equation (5), the control scheme shown in Figure 3 can be adopted. The joint torques 1τ and 2τ for the first and the sec- ond joint respectively are calculated as: f RK U MQJR T TT ˆ) ( )( =)( 0 + + τ (6) whereT ntfv R ],[= is the vector of the tangential velocity and normal force ref- erence values, ] , [ =, , ffF ffV R k k diag K is the diagonal matrix of feedforward gains,Tqfqf f )](ˆ),(ˆ[=ˆ21 11 is an available estimate of the joint friction torques (see Section 4) and T n nfbv FPI V PID T tvtv k u u U ))]( )(( , [=, , , )( − + (7) where V PIDu , is the tangential velocity PID output, FPIu, is the normal force PI output, 0=)(tvn , )(tvn is the velocity of the end-effector in the normal di- rection and fbvk, is a proportional gain. Figure 3. The explicit hybrid force/velocity control scheme 880 Industrial Robotics: Theory, Modelling and Control Note that the use of a normal force derivative term has been avoided in (6) (in- deed, only the proportional and the integral actions have been employed) as the derivation of such a signal is ill-conditioned (Craig, 1989). Conversely, the adoption of a normal force velocity feedback loop has been proven to be effec- tive to compensate for the large force oscillations due to the effects of link masses (and joint elasticities) in a large portion of the workspace (Jatta et al., 2006). Further, a gain scheduling approach has been adopted in order to take into account the configuration dependent dynamics of the manipulator during a constrained motion (Ziliani et al., 2006). 3.3 Implicit hybrid force/velocity control In the considered implicit hybrid force/velocity control strategy, a hybrid force/velocity controller determines the reference input for an inner position control loop. The latter is shown in Figure 4, where Tyx S ],[= is the end- effector reference position in the Cartesian space and 1q and 2q are the corre- sponding joint reference position (which are determined by applying the in- verse kinematics). In other words, a standard decentralized position control law (with friction compensation) is applied. The (outer) hybrid force/velocity controller is very similar to that of the explicit hybrid control law and it is de-picted in Figure 5. It is worth stressing at this point that it is claimed in the literature (De Schutter, 1986) that the use of an inner position control loop provides in general several advantages. In particular, the effects of the disturbances in the actuation sys- tem are reduced and the force control functionality can be simply added to the existing control architecture devoted to free motion control. Conversely, it is also claimed that the presence of an inner position loop causes a limitation of the bandwidth of the force loop. Figure 4. The inner position control loop in the implicit hybrid force/velocity control schemeFriction compensation in hybrid force/velocity control for contour tracking tasks 881 Figure 5. The implicit hybrid force/velocity control scheme Joint Friction Compensation 4.1 Generalities It is well known that friction compensation is in general very useful to im- prove the tracking performances of servosystems and this is indeed more sig- nificant when the task is dominated by low velocities, as in contour tracking. Actually, friction is a very complex phenomenon and different models to de- scribe it have been proposed in the literature. Basically, they can be classified as static or dynamic models (Olsson et al., 1998). In general, when a static model is adopted, the friction force is described as a (nonlinear) function of the relative velocity of the two surfaces that are in contact. Based on these consid- erations, the friction terms )(iiqf mentioned in equations (4) and (5) can be approximated by polynomial functions of degree h (Bona et al., 2003). Positive and negative velocities might be considered separately to obtain better results in case the actual friction function is not symmetrical as might occur in indus- trial robots (Daemi & Heimann, 1996). Defining ( 1,2=i ): [ ] []°¯°®­ + + +− − − 0> if0< if=] [:= 101010 i ih i ii ih i iih i i iq p ppq p ppp pp P  " "" (8) and Th i ii i q qq ] [1:=2" Ω (9) 882 Industrial Robotics: Theory, Modelling and Control the friction term can be modelled for the ith axis as ii ii P qf Ω=)( . If iPˆ is an available estimate of vector iP the joint friction torque can be estimated as irefi irefi P qf , ,ˆ=) (ˆ Ω  (10) Where T h iref irefiref iref q q q ] [1:=,2 , , , " Ω (11) andirefq, is the ith joint velocity reference. Note that, iref, Ω was used instead ofiΩ because better experimental performance was achieved (Whitcomb et al., 1997). Since reference velocities are not directly available they have to be reconstructed from workspace references as .,0][ )( =] , [01 ,2 ,1T t TT ref ref v MQJ q q− (12) Two methods for the determination of iPˆ are considered hereafter. They will be referred as Static model-based Friction Compensation (SFC) and Adaptive Friction Compensation (AFC). 4.2 Static Friction Compensation The first method that has been considered consists of performing suitable ex- periments on the robot and then of applying an off-line estimation procedure based on a recursive least squares algorithm in order to estimate all the robot parameters including friction torques ( h=3 was used) (Indri et al., 2002). Once the (static) friction model is estimated, it can be employed in the control law both for the explicit and the implicit hybrid force/velocity control law during the contour tracking tasks. However, this technique is time consuming (as ad hoc experiments have to be performed) and not always appropriate as it is known that friction torques may change over time and might not be always re- liably predicted (Daemi & Heimann, 1996). Thus, control performance may de- crease during the robot operation and therefore it is useful to compensate for the joint friction effect using an adaptive procedure. 4.3 Adaptive Friction Compensation The second method considered for the evaluation of Pˆ is to employ a simple gradient descent based algorithm for each joint (Visioli et al., 1999). For this purpose, a friction error signal can be defined asFriction compensation in hybrid force/velocity cont rol for contour tracking tasks 883 f Qf qeqeeT ˆ)(=)](),([=22 11 −  (13) The friction error signal can be determined suitably both for the explicit and the implicit hybrid control law. In the first case, if the model expressed by (5) represents a perfect prediction, then the output of the PID controllers in (6) would be equal to zero. Consequently the PID output can be regarded as a joint friction prediction error signal. In other words, adopting 0=,ffVk and 1=,ffFk equations (5) and (6) result in: (0) (0)*)( )(= )( )(ˆ FQJ Qf FQJ u QfT T PID + + +  (14) where )( 0*)( =T TT PID UMQJ u (15) is the workspace output of PID regulators transformed into the joint space. By following a similar reasoning, in case the implicit control law is employed, it is (0)*)( )(= )(ˆ FQJ Qf u QfT PID + +  (16) where ],[=21*uu uPID (17) is the vector of the outputs of the joint position control loops. The friction error signal (12) can therefore be set equal to * PIDu , namely, * PIDue= (18) where equation (15) or (17) has to be considered if the explicit or the implicit controller is adopted respectively. Based on the value of the error signal (13), the polynomial coefficients of the friction function can be updated every control step k with the following AFC algorithm ( i=1,2): )(ˆ 1)(ˆ=)(ˆ1)(ˆ )()( =)(ˆ kP kP kPkP k ke kP i i ii i i i Δ+−− Δ+ Ω Δ α η (19) 884 Industrial Robotics: Theory, Modelling and Control representing a standard least-mean-square algorithm (see (Haykin, 1999) for details and for an analysis of the convergence). The updated vector )(ˆkPi can then be used in model (10). Note that parameter η determines the velocity of the descent to the minimum and therefore the adaptation velocity. However, a high value of η might produce undesirable oscillations in the values of the polynomial coefficients. In any case, an appropriate value of η can be easily selected starting from a small value and increasing it until these oscillations begin to appear. Parameter α is the momentum coefficient, that helps to pre- vent large oscillations of the weight values and to accelerate the descent when the gradient is small. For the experiments presented in Section 5, the values 0.005=η , 0.9=α and 1=h have been selected. Actually, choosing 1=h means that a local linearization of the friction function is employed for each value of the joint velocity. The capability of modelling a complex nonlinear function, i.e. the friction phenomena is therefore due to the changing of the polynomial coefficients in order to always have an appropriate local approxi-mation (see Figure 6). Indeed, the aim of the AFC technique is not to provide a correct global model of the friction effect, but to compensate for it. Thus, it is sufficient that the friction effect is accurately predicted just in the neighbor- hood of the joint velocity value in the considered time instant, since the adap- tation procedure is always active to compensate for variations. Figure 6. Local linearisation of the friction function Friction compensation in hybrid force/velocity cont rol for contour tracking tasks 885 Experimental Results Experimental results, aiming at verifying the effects of the joint friction com- pensation, have been obtained by considering an iron disk with a diameter of 180 mm placed in two different positions (called `A’ and `B’) of the manipula- tor workspace, as shown in Figure 7. It is worth stressing again that the contour tracking task is performed by the control algorithm without any knowledge of the geometry of the workpiece. In both cases, a large set of different normal force set-points [20, 25, 30, 35, 40] N, each at different tangential velocities [10, 20, 30, 40, 50] mm/s, has been se- lected and the RMS force and velocity error has been calculated for both the explicit and implicit hybrid force/velocity control law, where the use of the SFC method and of the AFC method has evaluated together with the absence of joint friction compensation. The control system parameters, namely the pa- rameters of the PID controllers in the explicit and implicit control schemes, have been selected after a careful trial-and-error procedure. -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8-0.6-0.4-0.200.20.40.6 X [m]Y [m]AB Figure 7. Positions of the workpiece in the manipulator workspace It is worth noting that the implicit hybrid force/velocity control scheme re- quires a more significant tuning effort than the explicit one because of the presence of the additional position inner loop. Results are shown in Figures 8-11. In order to understand the results better, the plots of the obtained normal force and tangential velocity signals for the con- sidered control schemes applied to disk A when the normal force set-point is 30 N and the tangential velocity set-point is 10 mm/s are shown in Figures 12- 13.886 Industrial Robotics: Theory, Modelling and Control a) b) Figure 8. Force RMS error with no friction compensation and with SFC and AFC for the disk in the A position. a) implicit control; b) explicit control. Friction compensation in hybrid force/velocity cont rol for contour tracking tasks 887 a) b) Figure 9. Force RMS error with no friction compensation and with SFC and AFC for the disk in the B position. a) implicit control; b) explicit control. 888 Industrial Robotics: Theory, Modelling and Control a) b) Figure 10. Velocity RMS error with no friction compensation and with SFC and AFC for the disk in the A position. a) implicit control; b) explicit control. Friction compensation in hybrid force/velocity cont rol for contour tracking tasks 889 (a) b) Figure 11. Velocity RMS error with no friction compensation and with SFC and AFC for the disk in the B position. A) implicit control; b) explicit control. 890 Industrial Robotics: Theory, Modelling and Control a) b) Figure 12. Normal force signals with no friction compensation and with SFC and AFC for the disk in the A position. a) implicit control; b) explicit control. Friction compensation in hybrid force/velocity cont rol for contour tracking tasks 891 a) b) Figure 13. Tangential velocity signals with no friction compensation and with SFC and AFC for the disk in the A position. a) implicit control; b) explicit control. The mean value of the normal force and tangent velocity RMS error for the dif- ferent experiments is then reported in Table 1. From the results presented it can be deduced that a friction compensation strategy is indeed necessary especially for the explicit control law. This is mo- tivated by the fact that the inner joint position control loops in the implicit con- trol law are somehow able to cope with the friction effects. However, it has to be noted again that the implicit control law requires a greater tuning effort than the explicit one (although, from another point of view, it has the advan- tage that it can be applied to a pre-existing motion control architecture). The Adaptive Friction Compensation strategy provides definitely the best re- sults for the explicit control scheme both in terms of normal force and tangen- tial velocity, while for the implicit control law the performance obtained by the Adaptive Friction Compensation scheme and by the Static Friction Compensa- tion scheme are similar. In any case, the great advantage for the AFC of being a model-free scheme ( i.e., no preliminary experiment is required to derive a fric- tion model and robustness to variation of the friction parameters is assured) makes it more appealing to be applied in a practical context. It is worth stressing that the AFC strategy is effective in reducing the normal force and tangential velocity errors especially when the joint velocity sign changes. This fact can be evaluated by considering the resulting two joint ve-locities that would be necessary in order to achieve the required tangential ve- locity of 10 mm/s (for disk A). They are reported in Figure 14 (compare with Figures 12 and 13, for example at time t=3.9 s when the velocity of the first joint changes its sign it appears that the normal force and tangential velocity errors increase significantly when no friction compensation is applied, espe- cially for the explicit control). 892 Industrial Robotics: Theory, Modelling and Control Further, the explicit hybrid force/velocity controller (with AFC) provides basi- cally the same performance (in terms of both normal force and tangential ve- locity errors) disregarding the different normal force and tangential velocity set-points and the different position of the workpiece in the manipulator workspace. This is indeed a remarkable issue that is due to the higher band- width provided by the explicit control than the implicit one. Normal force [N] Tangential velocity [mm/s] Position A Position B Position A Position B Implicit Explicit Implicit Explicit Implicit Explicit Implicit Explicit AFC 3.74 2.97 4.70 2.83 1.8 0.89 2.5 1.3 SFC 3.65 5.16 4.50 4.80 1.5 2.7 2.1 5.1 no-FC 5.26 12.32 6.27 16.05 2.0 5.5 2.9 8.7 Table 1. Mean value of the normal force and tangent velocity RMS error for the different ex- periments Figure 14. Required joint velocities for tracking disk A with the tangential velocity of 10 mm/s Friction compensation in hybrid force/velocity cont rol for contour tracking tasks 893 Conclusions Tasks based on force control are seldom performed by robot manipulators in industrial settings. This might be due to the lack of a thorough characterisation of the methodologies developed theoretically from an industrial point of view. Indeed, it has to be demonstrated that a proposed control strategy can be ap- plied effectively in all the possible situations that might arise in an industrial context and, in general, the cost/benefit ratio should be clearly outlined. In this chapter the use of hybrid force/velocity control for the contour tracking of an object of unknown shape performed by an industrial robot SCARA ma- nipulator has been discussed. In particular, both the implicit and explicit con- trol laws have been considered and the compensation of the joint friction effect has been addressed. The pros and cons of the use of an inner joint position control loop have been outlined and it has been shown that the application of a friction compensation strategy is essential if the explicit control law is selected. In this context, the use of the devised Adaptive Friction Compensation strategy is advisable as it pro- vides basically the same (high) performance in the different considered task and its application does not require any previous knowledge of the friction model, that is, no ad hoc experiments have to be performed. References Ahmad, S. & Lee C. N. (1990). Shape recovery from robot contour-tracking with force feedback, Proceedings of IEEE International Conference on Robot- ics and Automation, pp. 447-452, Cincinnati (OH), May 1990 Bona, B.; Indri, M. & Smaldone N. (2003). Nonlinear friction estimation for digital control of direct-drive manipulators. Proceedings of European Con- trol Conference, Cambridge (UK), September 2003 Craig, J. J. (1989). Introduction to Robotics: Mechanics and Control, Prentice-Hall, 0131236296 Daemi M. & Heimann B. (1996). Identification and compensation of gear fric- tion for modelling of robots. Proceedings of CISM-IFToMM Symposium on Theory and Practice of Robots and Manipulators, pp. 89-99, Udine (I) De Schutter J. (1986). Compliant robot motion: task formulation and control. PhD thesis , Katholieke Universiteit Leuven Ferretti, G.; Magnani, G. & Rocco, P. (2000). Triangular force/position control with application to robotic deburring. Machine Intelligence and Robotic Control, pp. 83-91 Haykin, S. (1999). Neural Networks – A Comprehensive Foundation , Prentice-Hall, 0132733501 Indri, M.; Calafiore, G.; Legnani, G.; Jatta, F. & Visioli, A. (2002). Optimized 894 Industrial Robotics: Theory, Modelling and Control dynamic calibration of a SCARA robot. Preprints of 15th IFAC World Con- gress on Automatic Control, Barcelona (E), July 2002 Jatta, F.; Legnani, G.; Visioli, A. & Zilia ni, G. (2006). On the use of velocity feedback in hybrid force/velocity control of industrial manipulators. Control Engineering Practice , Vol. 14, pp. 1045-1055. Legnani G.; Adamini R. & Jatta F. (2001). Calibration of a SCARA robot by con- tour tracking of an object of known geometry, Proceedings of International Symposium on Robotics, pp. 510-515, Seoul (ROK), April 2001 Olsson, H.; Åström, K. J.; Canudas de Wit, C.; Gafvert, M. & Lischinsky P. (1998). Friction models and friction compensation. European Journal of Control , Vol. 4, pp. 176-195 Raibert, M. H. & Craig, J. J. (1981). Hybrid position/force control of manipula- tors. ASME Journal of Dynamic Systems, Measurements, and Control, Vol. 102, pp. 126-133 Roy, J. & Whitcomb, L. L. (2002). Adaptive force control of position/velocity controlled robots: theory and experiments. IEEE Transactions on Robotics and Automation, Vol. 18, pp. 121-137 Siciliano, B. & Villani, L. (1999). Robot Force Control, Kluwer Academic Pub- lisher, 0792377338 Thomessen, T. & Lien T. K. (2000). Robot control system for safe and rapid programming of grinding applications, Proceedings of International Sym- posium on Robotics, pp. 18-30, Montreal (C), May 2000 Visioli, A. & Legnani, G. (2002). On the trajectory tracking control of industrial SCARA robot manipulators. IEEE Transactions on Industrial Electronics, Vol. 49, pp. 224-232 Visioli, A.; Adamini, R. & Legnani, G. (1999). Adaptive friction compensation for industrial robot control. Proceedings of ASME/IEEE International Con- ference on Advanced Intelligent Mechatronics, pp. 577-582, Como (I), July 1999 Volpe, R. & Khosla, P. (1993). A theoretical and experimental investigation of explicit force control strategies for manipulators. IEEE Transactions on Automatic Control, Vol. 38, pp. 1634-1650 Whitcomb L. L.; Arimoto, S.; Naniwa, T. & Ozaki, F. (1997). Adaptive model- based hybrid control of geometrically constrained robot arms. IEEE Transactions on Robotics and Automation, Vol. 13, pp. 105-116 Ziliani, G.; Legnani, G. & Visioli, A. (2005). A mechatronic design for robotic deburring, Proceedings of IEEE International Symposium on Industrial Elec- tronics, pp. 1575-1580, Dubrovnik (HR), June 2005 Ziliani, G.; Visioli, A. & Legnani, G. (2006). Gain scheduling for hybrid force/velocity control in contour tracking task. International Journal of Advanced Robotic Systems Vol. 3, pp. 367-374. 895 33 Industrial Robot Control System Parametric Design on the Base of Methods for Uncertain Systems Robustness Alla A. Nesenchuk and Victor A. Nesenchuk Introduction Industrial robots often operate in conditions of their parameters substantial variation that causes variation of their control systems characteristic equations coefficients values, thus generating the equations families. Analysis of the dy- namic systems characteristic polynomial families stability, the stable polyno- mials and polynomial families synthesis represent complicated and important task (Polyak, 2002, a). Within the parametric approach to the problem the se- ries of the effective methods for analysis have been developed (Bhattaharyya et al., 1995; Polyak, 2002, a). In this way, V. L. Kharitonov (Kharitonov, 1978) proved that for the interval uncertain polynomials family asymptotic stability verification it is necessary and enough to verify only four polynomials of the family with the definite constant coefficients. In the works of Y. Z. Tsypkin and B. T. Polyak the frequency approach to the polynomially described systems robustness was offered (Polyak & Tsypkin, 1990; Polyak & Scherbakov, 2002; Tsypkin & Polyak, 1990; Tsypkin, 1995). This approach comprises the robust stability criteria for linear continuous systems, the methods for calculating the maximal disturbance swing for the nominal stable system on the base of the Tsypkin – Polyak hodograph. These results were generalized to the linear dis- crete systems (Tsypkin & Polyak, 1990). The robust stability criterion for the re- lay control systems with the interval linear part was obtained (Tsypkin, 1995). The super-stable linear systems were considered (Polyak & Scherbakov, 2002). The problem for calculating the polynomial instability radius on the base of the frequency approach is investigated (Kraev & Fursov, 2004). The technique for composing the stability domain in the space of a single parameter or two parameters of the system with the D-decomposition approach application is developed (Gryazina & Polyak. 2006). The method for definition of the nominal polynomial coefficients deviations limit values, ensuring the hurwitz stability, has been offered (Barmish, 1984). The task here is reduced to the single-parameter optimization problem. The similar tasks are solved by A. Bartlett (Bartlett et al., 1987) and C. Soh (Soh et 896 Industrial Robotics: Theory, Modelling and Control al., 1985). Conditions for the generalized stability of polynomials with the line- arly dependent coefficients (polytopes) have been obtained (Bartlett et al., 1987; Rantzer, 1992). One of the most important stages, while calculating dynamic systems with un- certain parameters, is ensuring robust quality. The control process qualitative characteristics are defined by the characteristic equations roots location in the complex plane (the plane of system fundamental frequencies). In this connec- tion, three main groups of tasks being solved can be distinguished: determin- ing the assured roots location domain (region) for the given system, finding conditions of whether roots get into the given region or not (determination of theΛ-stability conditions) and locating roots in the given domain (ensuring Λ- stability).The frequency stability criteria for the linear systems families and also the method for finding the largest disturbance range of their characteristic equa-tions coefficients, which guarantees the system asymptotic stability, are con- sidered by B. T. Polyak and Y. Z. Tsypkin (Polyak & Tsypkin, 1990). The as- sured domain of the interval polynomial roots location is found in (Soh et al., 1985). The root locus theory is used in (Gaivoronsky, 2006) for this task solu- tion. Conditions (Vicino, 1989; Shaw & Jayasuriya, 1993) for the interval poly- nomial roots getting into the given domain of some convex shape are defined. The parametric approach to robustness, based on the root locus theory (Rim- sky, 1972; Rimsky & Taborovetz, 1978; Nesenchuk, 2002; Nesenchuk, 2005), is considered in this chapter in application to the industrial anthropomorphous robot control system parametric design. The developed techniques allow to set up the values of the parameter variation intervals limits for the cases when the stability verification showed, that the given system was unstable, and to en- sure the system robust quality by locating the characteristic equations family roots within the given quality domain. Industrial robot and its control system description Most industrial robots are used for transportation of various items (parts), e. g. for installing parts and machine tools in the cutting machines adjustments, for moving parts and units, etc. During the robot operation due to some internal or external reasons its parameters vary, causing variation of the system charac- teristic equation coefficients. This variation can be rather substantial. In such conditions the system is considered, as the uncertain system. 2.1 General description of the anthropomorphous industrial robot The industrial robot considered here is used for operation as an integrated part of the flexible industrial modules including those for stamping, mechanical as-Industrial robot control system parametric design on the base of methods for uncertain… 897 sembly, welding, machine cutting, casting production, etc. The industrial robot is shown in fig. 1. It comprises manipulator 1 of anthropomorphous structure, control block 2 including periphery equipment and connecting cables 3. Ma- nipulator has six units (1–8 in fig. 1) and correspondingly is of six degrees of freedom (see fig. 1): column 4 turn, shoulder 5 swing, arm 6 swing, hand 7 swing, turn and rotation. The arm is connected with the joining element 8. Controlling robots of such a type, belonging to the third generation, is based on the hierarchical principle and features the distributed data processing. It is based on application of special control processors for autonomous control by every degree of freedom (lower executive control level) and central processor coordinating their operation (higher tactical control level). 2.2 Industrial robot manipulator unit control system, its structure and mathematical model Executive control of every manipulator unit is usually executed in coordinates of this unit (Nof, 1989) and is of the positional type. It is the closed-loop servo- control system not depending on the other control levels. Although real unit control is executed by a digital device (microprocessor, controller) in a discrete way, the effect of digitization is usually neglected, as the digitization fre- quency is high enough to consider the unit and the controller as the analog (continuous) systems. As for the structure, the unit control loops are almost similar and differ only in the parameter values. Therefore, any unit of the in- dustrial robot can be considered for investigating the dynamic properties. Figure 1. Anthropomorphous industrial robot 898 Industrial Robotics: Theory, Modelling and Control The structure of the manipulator unit subordinate control is shown in fig. 2. The simplified version of the structure is presented in fig 3. In fig. 2 the plant is represented by elements 1–4 (a DC motor); 5 is the sensor transforming the analog speed signal into the speed code (photo-pulse sensor), 6 is the element combining the speed PI regulator, code-pulse width trans- former and capacity amplifier, 7 is the transformer of analog position signal into the position code (photo-pulse sensor), 8 is the proportional regulator of the manipulator shoulder position, 9 is the transfer mechanism (reducer). In fig. 3 the transfer function ssWsWp p )( )('= where )(sWp is the plant transfer function. Substitute corresponding parameters and express the plant transfer function as follows: sC sCRj j sCLj jUsW e ɆA l m ɆA l mgp + + + +=ϕ= 2 3) ( ) (1)( , (1) wheregU is the input voltage, ϕis the object shaft angle of rotation. Figure 2. Control system for the industrial robot manipulator shoulder unit On the basis of (1) write the manipulator unit control system characteristic equationIndustrial robot control system parametric design on the base of methods for uncertain… 899 02 1 2 3 4= + + + +TLjKKKC sTLjKKCsLjCCsLRs Ams p M Ams Ɇ AmɆe AA or as 04 32 23 14 0 = + + + + asa sa sa sa , (2) where 10=a ; AALRa=1 ; A l’ mMe Lj jCCa) (2+= ; TLj jKKCa A l ms Ɇ ) (1 3+= ;TLj jKKKC a A l msp M ) (2 4+= ; -AR is the motor anchor resistance; -AL is the anchor inductance; -lj is the load inertia moment; -mj is the anchor inertia moment; -eC is the electric-mechanical ratio of the motor; -MCis the constructive constant of the motor; -T is the time constant of the PI regulator; -1K and 2K are photo-electric sensor coefficients; -sK and pK are gains of regulators by speed and position correspon- dingly. Suppose the robot unit has the following nominal parameters: -AR= 0,63 Ω; -AL= 0,0014 henry; -lj= 2,04 ⋅5210kg/m− -mj= 40,8 ⋅5210kg/m−; -eC= 0,16radsV⋅; -MC=eC; -T= 0,23 s; -1K= 66,7, 2K= 250; .5,2 ,078,0 = =p s K K900 Industrial Robotics: Theory, Modelling and Control Figure 3. Structure of the position control system loop for the manipulator shoulder unit After substitution of the nominal values into (2) rewrite the unit characteristic equation as 0 1056,0 106,0 10 427,0 105,08 7 25 33 4= ⋅ + ⋅ + ⋅ + ⋅ + s s s s (3) The coefficients of (3) are the nominal ones and while robot operation they of- ten vary within the enough wide intervals. For this reason when calculating the robot control system it is necessary to consider the parameters uncertainty and ensure the control system robustness. The techniques for robust stability of systems with parametric uncertainty The method is described for synthesis of the interval dynamic system (IDS) stable characteristic polynomials family from the given unstable one, based on the system model in the form of the free root locus portrait. This method al- lows to set up the given interval polynomial for ensuring its stability in cases, when it was found, that this polynomial was unstable. The distance, measured along the root locus portrait trajectories, is defined as the setting up criterion, in particular, the new polynomial can be selected as the nearest to the given one with consideration of the system quality requirements. The synthesis is carried on by calculating new boundaries of the polynomial constant term variation interval (stability interval), that allows to ensure stability without the system root locus portrait configuration modification 3.1 The task description While investigating uncertain control systems for getting more complete rep- resentation of the processes, which occur in them, it seems substantial to dis- cover correlation between algebraic, frequency and root locus methods of in-Industrial robot control system parametric design on the base of methods for uncertain… 901 vestigation. Such correlation exists and can be applied for finding dependence between the system characteristic equation coefficients values (parameters) and its dynamic properties to determine how and what coefficients should be changed for ensuring stability. One of the ways for establishing the above mentioned correlation can be investigation of the systems root locus portraits and Kharitonov's polynomials root loci (Kharitonov, 1978). Consider the IDS, described by the family of characteristic polynomials P(s) = ¦ =−=n jjn jsa 00, (4) where aj∈ [ja,ja],0a > 0, j = 0, …, n;ja and ja are correspondingly the lower and upper boundaries of the closed interval of uncertainty, [ja,ja]; s = σ + iω. The coefficients of polynomial (4) are in fact the uncertain parameters. The task consists in synthesis of the stable interval family of polynomials (4) on the basis of the initial (given) unstable one, i. e., when the initial system stabil- ity verification by application of Kharitonov's polynomials gave the negative result. Calculation of new parameter variation intervals boundaries is made on the base of the initial boundaries in correspondence with the required dynamic characteristics of the system. The new boundaries values definition criteria can be different, in particular they can be selected the nearest to the given ones. In this case the distance, measured along the system roots trajectories, is accepted to be the criterion of such proximity. 3.2 The interval system model in the form of the root locus portrait Introduce the series of definitions. Definition 1. Name the root locus of the dynamic system characteristic equation (polynomial), as the dynamic system root locus . Definition 2. Name the family (the set) of the interval dynamic system root loci, as the root locus portrait of the interval dynamic system . Definition 3. The algebraic equation coefficient or the parameter of the dy- namic system, described by this equation, being varied in a definite way for generating the root locus, when it is assumed, that all the rest coefficients (parameters) are constant, name as the algebraic equation root locus free parameter or simply the root locus parameter. Definition 4. The root locus, which parameter is the coefficient ka, name as the algebraic equation root locus relative to the coefficient ka.902 Industrial Robotics: Theory, Modelling and Control Definition 5. The root locus relative to the dynamic system characteristic equation constant term name as the free root locus of the dynamic system . Definition 6. The points, where the root locus branches begin and the root locus parameter is equal to zero, name as the root locus initial points. Remark 1. One of the free root locus initial points is always located at the origin of the roots complex plane. The above remark correctness follows from the form of equa- tion (4). Remark 2. The free root locus positive real branch portion, adjacent to the initial point, located at the origin, is directed along the negative real half-branch σ of the complex plane to the left half-plane. Remark 2 is correct due to the root loci properties (Uderman, 1972) and because real roots of equations with positive coefficients are always negative (see fig. 4). The peculiarity of the free root loci, which distinguishes them from another types of root loci, consists in the fact, that all their branches strive to infinity, approaching to the corresponding asymptotes. For carrying on investigation apply the Teodorchik – Evans free root loci (TEFRL) (Rimsky, 1972), i. e. the term "root locus" within this section will mean the TEFRL, which parameter is the system characteristic equation constant term. To generate the IDS root locus portrait apply the family of the mapping func- tions sn+a 1sn–1+a 2sn–2+…+ a n–2s2 + an–1s = u(σ,ω) + iv(σ,ω) = – an, (5) where u(σ,ω) and v(σ,ω) are harmonic functions of two independent variables σ and ǚ;an is the root locus parameter; s=σ+iω. Analytical and graphical root loci are formed using mapping function (5). The root locus equation is as follows: iv(σ,ω) = 0 (6) and the parameter equation (Rimsky, 1972) as follows: u(σ,ω) = – an. (7) Industrial robot control system parametric design on the base of methods for uncertain… 903 The fragmentary root locus portrait for the IDS of the forth order, which is made up of four Kharitonov's polynomials free root loci, is shown in fig. 4. The Kharitonov's polynomials h1,h2,h3and h4 in this figure are represented by points (roots), marked with circles, triangles, squares and painted over squares correspondingly. There are the following designations: ihσ,i = 1, 2, 3, 4, – the cross centers of asymptotes for the root loci of every polynomial hi,tl,l = 1, 2, 3, – cross points of the root loci branches with the system asymptotic sta- bility boundary, axis iǚ. The root loci initial points, which represent zeroes of mapping function (5), are depicted by X-s. Because in fig. 4 all roots of the Kharitonov's polynomials are completely located in the left half-plane, the given interval system is asymptotically stable (Kharitonov, 1978). 904 Industrial Robotics: Theory, Modelling and Control Figure 4. Root loci of the Kharitonov's polynomials for the system of class [4;0] Industrial robot control system parametric design on the base of methods for uncertain… 905 3.3 Investigation of the characteristic polynomial family root loci branches behavior at the asymptotic stability boundary of the system The branches of the IDS root locus portrait, when crossing the stability bound- ary, generate on it the region (set) of cross points. Name this region, as the cross region and designate it as Rω. According to the theory of the complex variable (Lavrentyev & Shabat, 1987) and due to the complex mapping function (5) continuity property, this region is the many-sheeted one and is composed of the separate sheets with every sheet (continuous subregion), formed by the separate branch while it moves in the complex plane following the parameters variation. The cross region portion, generated by only positive branches of the system root locus portrait, name as the positive cross region and designate it as Rω+. Rω+⊂Rω. (8) Define also the subregion rω+ (either continuous or discrete one) of the cross region Rω+ (8) generated by the root loci branches of any arbitrary subfamily f of the interval system polynomials family (4), and name it as the(positive ) cross subregion , thus, rω+⊂ Rω+. (9) Introduce the following sets: Wr+ = {}riǚ+ (10) Ar+ = {}ria+ (11) where Wr+ is the set (family) of the cross subregion rω+ (9) points coordinates ir+ω;Ar+ is the set (family) of values ria+ of the root locus parameter Ȏn at the setWr+points. Define the minimal positive value min+ ra of the root locus parameter within the cross subregion rω+: min+ ra = inf Ar+. (12) 906 Industrial Robotics: Theory, Modelling and Control Peculiarities of the IDS root loci initial points location make it possible to draw a conclusion about existence of its characteristic equation coefficients variation intervals, ensuring asymptotic stability of the given system. Statement . If the initial points of the IDS characteristic polynomials arbitrary subfamily f free root loci, excluding points always situated at the origin, are lo- cated in the left complex half-plane s, there exists the interval d of the root loci parameter an values, ensuring asymptotic stability of the subfamily f. d = (0,min+ ra ), (13) Proof. The subfamily f free root loci generate at the system stability boundary the cross subregion rω+ (9) of cross points, which is formed by the set (10) of the cross points coordinates and corresponding set (11) of the parameters values. If the initial points are located, as it is defined by the statement, on every i-th branch of every polynomial root loci there exist an interval ri = (ilσ,0) of roots values (starting from the branch initial point with coordinate ilσ until the point, where it crosses the stability boundary, axis iω of the complex plane), which is completely located in the left half-plane. Therefore, there exists also the appropriate maximum possible common interval d m (which is common for all the branches) of the root loci parameter an values (beginning from zero up to the definite maximum possible value an = mra+), corresponding to the values of roots within some interval rk = (klσ,0), which ensures the system stability. Name this interval dm the dominating interval and define it as dm = (0,mra+). Des- ignate the roots iσ coordinates values interval, located on every positive i-th branch of the family and corresponding to the dominating interval, as rd = (ilσ,irσ). It is evident, that mra+ will be maximum possible at the stability boundary, i. e. at irσ= 0. Then, ∀irσ[mra+ = min+ ra →irσ≤ 0], i. e. the dominat- ing one is the interval dm = (0,min+ ra ), which represents itself the interval d (13). Hence, the statement is correct. Definition 7. The interval of polynomial (4) root loci parameter values name the polynomial stability interva l by this parameter or simply the polynomial stability interval , if the polynomial asymptotic stabil- ity property holds within this interval. In case, if some initial points are located at the stability boundary (excluding the point, which is always located at the origin), and on the assumption, that all the rest points are located in the left half-plane, the additional analysis is required for finding the stability interval existence. For this purpose it is neces- sary to define the root loci branches direction at their outcome from the initial Industrial robot control system parametric design on the base of methods for uncertain… 907 points, located at the stability boundary, i. e. just to determine what half-plane they are directed to: left one or right one. Obviously, such stability interval ex- ists in the following cases: a) all the root loci branches with initial points, located at the stability boundary, are directed from these points to the left half-plane; b) all positive root loci branches with initial points, located at the stability boundary, are directed from these points to the left half-plane. To determine the above indicated branches direction at the initial points, it is enough to define the root locus sensitivity vector (Nesenchuk, 2005) direction at them. As a result of the IDS root locus portraits analysis several general regularities have been discovered, being inherent in Kharitonov’s polynomials free root loci: paired convergence of the root loci branches at the complex plane imagi- nary axis (points t1,t2,t3,t4 in fig. 4); paired convergence of the corresponding asymptotes at the real axis of the complex plane (points 1hσ,2hσ,3hσ,4hσ in fig. 4); the tendency for the system robust properties variation while varying its characteristic polynomial coefficients values. It gives the possibility to fix the fact of existence of the system characteristic equation coefficients variation intervals, ensuring its robust stability and also to determine how the coeffi- cients values should be changed for the system dynamic characteristics correc- tion, if it is unstable. The IDS root locus portraits investigation, which has been carried out, con- firms that they can be successfully applied for the in-depth studying robust properties of these systems. 3.4 Parametric synthesis of stable uncertain systems The conditions for existence of the polynomials (4) family coefficients stability intervals were formulated in the previous section. Here we define what these intervals values should be. For this purpose consider the polynomials (4) sub- family f, consisting of the system Kharitonov’s polynomials, and develop the procedure for synthesis of the stable Kharitonov’s polynomials on the base of the unstable ones, which depends on the root loci initial points location in rela- tion to the asymptotic stability boundary. For the synthesis procedure devel- opment apply the Kharitonov’s polynomials free root loci. Consider the case, when initial points are located in the left half-plane. In this case the algorithm of synthesis can be divided into the following stages. 908 Industrial Robotics: Theory, Modelling and Control Stage 1. Obtaining the Teodorchik – Evans free root loci equation (6) for each one of the IDS four Kharitonov’s polynomials. As the Kharitonov’s polynomials represent the subfamily of the IDS polyno- mials family, they generate the above described cross subregion rω+ (9) on the stability boundary, which is formed by the set (10) of the cross points coordi- nates. Stage 2. Calculating coordinates ir+ω of the set (10) by solution of the TEFRL equations, obtained in stage 1, relative to ω in condition, that σ= 0. In this way the set Wr+ (10) is formed. For every obtained value of ir+ω from Wr+ the corresponding value of the vari- able coefficient an is calculated by formula (7), thus, forming the set Ar+ (11). Stage 3 . Definition of the stability interval by the coefficient an. For this purpose, using (12), define the minimal one, min+ ra , of the parameter values at points of the set Ar+. Thus obtain the interval d (13) of the parameter an variation, which ensures stability of the Kharitonov’s polynomials and, therefore, the system in whole. Before describing the next stage of synthesis formulate the following theorem. Theorem . For robust stability of the polynomial family (4) it is necessary and enough to ensure the upper limit of the constant term an variation interval to satisfy the inequality na < min+ ra , (14) if the family is stable at an = 0. Proof . Let the coefficient an to be the polynomial (4) root locus parameter. Un- der the theorem condition family of (4) is stable at an = 0, i.e. the root loci initial points are located in the left half-plane. Therefore, in view of statement 1 the theorem is valid. Stage 4 . Comparing the obtained stability interval (13) with the given interval an∈ [na,na] of the parameter an variation in correspondence with inequality (14). In case, if condition (14) is not satisfied, the upper limit na of the parameter variation interval is set up in correspondence with this inequality. When the power n of the polynomial is less or equal than 3, n ≤ 3, the above given theorem is applied without any conditions, i. e. it is not required to sat-Industrial robot control system parametric design on the base of methods for uncertain… 909 isfy condition of the Kharitonov’s polynomials roots real parts negativity at an = 0, because in this case the coefficients positivity always guarantees nega- tivity of the roots real parts. The above described algorithm allows to carry on the parametric synthesis of the stable interval system without modification of its root locus portrait con- figuration, by simple procedure of setting up the characteristic polynomial constant term variation interval limits. The numerical example , demonstrating the results obtained, is given below Consider the interval system, described by the initial characteristic polynomial s4 + 10 s3 + 35 s2 + 50 s + 24 = 0, (15) where the real coefficients are: Ȏ0 = 1; 8,4 ≤Ȏ1≤ 11,6; 24 ≤Ȏ2≤ 48; 26,5 ≤Ȏ3≤ 83,1; 8,99 ≤Ȏ4≤50,3. Let the coefficient a4 to be the root locus parameter. Then, define the mapping function: . 2 33 4 6 4 3 32 2 22 23 12 12 13 14 03 022 03 04 0 4 ω +σ+ω−σδ +σ+ω−δσ −−ωσ +σ+ω+ωσ −ωσ −ωσ +σ= − ia a aia a ia aia a a ia a i a a a Write correspondingly the TEFRL and the parameter equations:: . 3 6;0) 2 3 4 4( 4 22 22 13 14 022 04 03 22 12 12 03 0 a a a a a a a aa a a a a a −=σ−σ+ σω −σ+ω+ωσ −σ= +σ +ω−σ + σω −σ ω Define the Kharitonov’s polynomials for the interval system with the initial characteristic polynomial (15): .3,505,26 24 6,11 )(;99,81,83 48 4,8 )(;99,85,26 48 6,11 )(;3,501,83 24 4,8 )( 2 3 4 12 3 4 12 3 4 12 3 4 1 + + + +=+ + + +=+ + + +=+ + + += s s s sshs s s sshs s s sshs s s ssh The root loci of these polynomials are represented in fig. 4, described above. Number of asymptotes na (in fig. 4 they are indicated as s1,s2, …, s6) is constant for every one of Kharitonov’s polynomials and is equal to na =n – m = 4 – 0 = 4, where m is the number of poles for function (5). 910 Industrial Robotics: Theory, Modelling and Control The centers of asymptotes are located on the axis σ and have coordinates: 1hσ = 2,10; 2hσ = 2,90; 3hσ = 2,10; 4hσ = 2,90 (see fig. 4). The asymptotes cen- ters coordinates coincide in pairs: for the pair )(1sh and )(3sh , and also for the pair )(2sh and )(4sh . The inclination angles of asymptotes for the given root loci are correspond- ingly the following: .180 ;45;135 ;0 0 40 20 30 1 = == = ϕ ϕϕ ϕ According to fig. 4, every pair of the root loci strives to the same asymptotes, i.e. the pairs are formed by those root loci, which asymptotes centers coincide, as it was indicated above. For definition of equation (15) coefficients intervals, ensuring the system stabil- ity, stability condition (14) is applied. Thus, the following values ira+ of the set Ar+ have been defined: 1+ ra = 139,67 for the polynomial h1; 2+ ra = 116,33 for the polynomial h2; 3+ ra = 377,75 for the polynomial h3; 4+ ra = 54,89 for the polynomial h4. The minimal value is min+ ra = 4+ ra = 54,89. Because 4a < 54,89, in correspondence with (14) the given interval system is asymptotically stable. The method for ensuring uncertain systems quality In this section the task is solved for locating the uncertain system roots within the trapezoidal domain. The method allows to locate roots of the uncertain system characteristic equations family within the given quality domain, thus ensuring the required system quality (generalized stability). The task is solved by inscribing the system circular root locus field into the given quality domain. The trapezoidal domain, bounded by the arbitrary algebraic curve, is consid- ered. Peculiarity of the method consists in the root locus fields application. Industrial robot control system parametric design on the base of methods for uncertain… 911 The systems with parametric uncertainty are considered, described by the fam- ily of characteristic polynomials p(s) = sn + a1sn–1 + … + an–1s + an (16) where a1, ..., an are coefficients, which depend linearly of some uncertain pa- rameter k, and can be either real or complex ones. For selection of the uncertain parameter k, transform equation (16) and rewrite it in the following form: φ(s) + kψ(s) = 0 (17) where φ(s) and ψ(s) are some polynomials of the complex variable s;k is the system uncertain parameter. Based on (17), derive the expression for k in the form Ǘ(s)kf ( s ) u ( ǔ,ǚ)i v (ǔ,ǚ)Ǚ(s)== −= + (18) where u(σ,ω),v(σ,ω) are harmonic functions of two independent real vari- ables σandω. Consider some provisions about the root locus fields. Definition 8 . The root locus field of the control system is the field with the com- plex potential ),( ),()( ωσν+ωσ= ϕ i us , that is defined in every point of the extended free parameter complex plane by setting the root locus image existence over the whole plane (Rimsky & Ta- borovetz, 1978). Then, set the root locus image by the real function ),,,( tuhh ν = where tis the constant value for every image. Name t, as the image parameter . Suppose the image is defined over the whole free parameter plane by setting the corre- sponding boundaries of the parameter t. Thus, using mapping function (18), define in the general form the scalar root locus field function f*=f*(σ,ω) (19) 912 Industrial Robotics: Theory, Modelling and Control and the root locus field level lines equation f*(σ,ω)=L, (20) where L = const = tj, tj is the parameter of the j-th image, – ∞≤ tj≤+∞, j = 1, 2, 3,… 4.1 The task formulation Define the quality domain Q (fig. 5) in the left complex half-plane of the system fundamental frequencies (roots plane), bounding the equation (16) roots location by the lines Lη' and Lη'' of the equal degree of stability (stabil- ity margin) and the lines L+β and L–β of constant damping, that is equivalent to setting permissible limits for the following system quality indicators: de- gree of the system stability η and oscillation β. In fig. 5 the quality domain Q has the shape of a trapezoid. The task consists in locating the characteristic equation (16) roots within the domain Q, i. e. in determination of such a domain D of the uncertain parame- terk values, which ensure location of this equation roots (e. g., p1,p2, p3, p4 in fig. 5) within the given domain Q, when the system qualitative characteristics do not get beyond the preset limits for η and β, ensuring thus the system Q- stability and fulfillment of the condition. bounded by the lines of equal degree of stability and constant damping k∈D→si∈Q, (21) where i = 1, 2, 3, …, n.Industrial robot control system parametric design on the base of methods for uncertain… 913 Figure 5. The domain Q of the desired characteristic equation roots location, bounded by the lines of equal degree of stability and constant damping. For solving the task, apply the root locus fields of the circular image (circular root locus fields – CRLF) (Rimsky, 1972; Nesenchuk, 2005). The field function (19) and the level lines equation (20) for the CRLF in the general form: f* = f* (σ,ω,a,b) (22) 914 Industrial Robotics: Theory, Modelling and Control f*(σ,ω,a,b)=ρ2. (23) where a and b are the image center coordinates by axes u and υ correspond- ingly, a = const and b= const; ρ is the circular image radius. The circular root locus fields for the systems of class [3;0] are represented in fig. 6 and 7. The CRLF location in the complex plane to the great extent is defined by the given circular image center location, which is mapped onto the complex plane by the field localization centers (see definition 2.4 in (Nesenchuk, 2005)). Localization centers of the field, described by the level lines L1(L1',L1'', L1'''), L2, L3,L4, are located in the points ǿ1,ǿ2,ǿ3 (fig. 6, b). The level lines bound the corresponding domains ( W1,W2,W3,W4 in fig. 6, b) in the plane s. Every such many-sheeted domain W represents the mapping of the root locus level line disk-image of the certain radius. 4.2 Locating roots in the given domain The given task is solved by inscribing the level line of the CRLF, previously oriented in a special way in the complex plane, into the given quality domain of the system. This level line image in the free parameter plane k, that repre- sents some circle of the radius r, will be the boundary of the required domain D (the required disk). Then, in case, if the circular image center is located in the origin, the following condition should be satisfied: .rk≤ The field orientation For realization of the above indicated task solution algorithm, at first it is necessary to set orientation (locatio n) of the scalar CRLF in relation to the system quality domain in such a way to ensure the possibility of the field level lines inscription into this domain. Assume the circular image center is located on the positive real axis u, including the origin. The desired location of the circular field is attained, when all its localization centers (i. e. the points, which represent mappings of the circular image center onto the complex plane s) are located inside the qual ity domain. The enough condi- tion for ensuring such orientation of the field localization centers is loca- tion of function (18) zeroes within this domain. As it was initially assumed, that the circular image center was located on the real axis, the localization centers can be set in two ways: -in zeroes of function (18), i. e. in poles of the open-loop system transfer function; -on the branches of the investigated control system Teodorchik – Evans root locus (TERL). Industrial robot control system parametric design on the base of methods for uncertain… 915 (Ȏ) b) (b) b) Figure 6. Circular root locus field when setting the image center in the origin of the variable parameter plane k (Ȏ) b) (b) b) Figure 7. Circular root locus field when shifting the image center in relation to the origin of the variable parameter plane k916 Industrial Robotics: Theory, Modelling and Control In the first case the circular image center will be located in point C, where k = 0 (fig. 6, Ȏ). In the second case the field localization centers should be located on the TERL positive branches segments being completely located within the given quality domain. Coordinates u = a and υ = b (fig. 7, Ȏ) of the corresponding image center are determined from formula (18). The level lines inscription After setting the field localization centers it is possible to start inscription of its level lines into the given quality domain. The inscription procedure consists in finding such a level line, which completely belongs to the given quality do- main and which represents itself the mapping of the circular image with the maximal possible radius, that evidently will guarantee the required Q-stability of the family (16). Conditionally divide the task into two subtasks of the level line inscription into the domain, bounded only by: -the vertical lines of equal degree of stability; -the inclined lines of constant damping. Consider the first subtask. For its solution find the extreme points of contact of the CRLF level line and the lines Lη',Lη'' of equal degree of stability (fig. 5). Apply the formula for the gradient of the root locus field: ,jfifgradfGG ω∂∂+σ∂∂=∗ ∗ ∗ (24) where f *(σ,ω) is the field function; jiGG , are projections of the identity vector, di- rected along the normal to the field level line, onto the axes σ and ω correspond- ingly. Because in the desired points of contact the gradient (24) projections onto the axis iω are equal to zero, determine these points coordinates by composing two systems of equations: ; '0),(* °¿°¾½ σ=σ=ω∂ωσ ∂ ηf (25) , ''0),(* °¿°¾½ σ=σ=ω∂ωσ ∂ ηf (26) Industrial robot control system parametric design on the base of methods for uncertain… 917 where the first equation of every system represents projection of the gra- dient onto the axis ω;ση' and ση'' are coordinates of cross points of the axis σ and the lines Lη' and Lη' correspondingly. From the first system of equa- tions the coordinate ω of the extreme contact point of the line Lη', bound- ing the quality domain from the right side, and the CRLF level line is de- termined. The second system allows to determine the coordinate ω of the extreme contact point (e. g., point t3 in fig. 8) of the line Lη'', bounding the domain Q on the left side, and the CRLF level line. Turn to the second subtask consideration. For its solution it is necessary to find the extreme contact point (points) of the CRLF level line and the line L+β or L–β (fig. 5) of constant damping. The only one line, L+β or L–β, is chosen because when the image center is set on the axis u of the free parameter plane, the CRLF is symmetric in relation to the axis iω. The line L+β will be considered as a tangent to the CRLF level line. Figure 8. The domain of roots location, inscribed into the given quality domain 918 Industrial Robotics: Theory, Modelling and Control Write the equation of a tangent to the scalar CRLF level line (a tangent to the curve) in the general form: ,0) (),(*) (),(*=ω−Ω∂ωωσ ∂+σ−Δ∂σωσ ∂ f f (27) where Δ,Ω are current coordinates of a point on the tangent; σ,ωare the point of contact coordinates. As in this case the tangent to the level line passes through the origin, set coor- dinates Δand Ω to zero and rewrite (27) in the following form: 0)(),(*)(),(*=ω−∂ωωσ ∂+σ−∂σωσ ∂ f f. (28) On the other hand, the equation of the level line L+β is ω = μσ, where μ is the real constant, μ= tg β (fig. 5), β is the angle between the constant damping line and the axis ω. By composing on the basis of the last two equa- tions the system °¿°¾½ μσ=ω=ω−∂ωωσ ∂+δ−∂δωσ ∂0)(),(*)(),(* f f (29) and solving (29), obtain coordinates σ and ω of the desired contact point. It is necessary to note, that when solving both the first and the second sub- tasks, several points of contact to every quality domain boundary can be found. It is explained by the fact, that contact points are determined for both global and every local field level line. In this case the level line corresponding to the circular image of the minimal radius is always chosen. Thus, from three points t1, t2 and t3(fig. 8), found by the above described method, the point t1lo- cated on the level line L1, corresponding to the circular image of the minimal radius, is chosen. This line represents itself the boundary of the desired do- main D of the uncertain parameter k values, ensuring the required system op- erational quality indicators. Consider the numerical example . The system quality domain Q (see fig. 5) is bounded by the lines of equal degree of stability, described by equations σ = – 1.2, σ = – 4.7, Industrial robot control system parametric design on the base of methods for uncertain… 919 and the lines of constant damping with equations σ = ω,σ = –ω. Set the characteristic equation, describing the dynamic system of class [3;0] and select polynomials φ(s) and ψ(s) (see (17)): φ(s) = s3 + 7,5 s2 + 17,8 s + 13,1; (30) ψ(s) = 1. (31) Suppose, that the polynomial constant term an is the uncertain parameter. It is required to determine the domain of the perturbed coefficient an values, be- longing to the given quality domain Q. Evidently, the poles p1 = – 1.5, p2 = – 2.5 and p3 = – 3.5 (in fig. 8 are marked by X-s) of the open loop transfer function are located inside the quality domain Q. Define the circular root locus field by setting the root locus image existence re- gion over the whole plane of the free parameter an. For this purpose set the cir- cular field location by defining circular image center in the point C with coor- dinates a = 5, b = 0 (fig. 7, Ȏ) in the free parameter plane an. Then, its localization centers are located in points C1,C2 and C3 on the branches of the system Teodorchik – Evans root locus, as shown in fig. 7, b. Calculations were carried on with application of the computer program for en- suring the required quality of control systems with parametric uncertainty, developed for the above described method realization. Polynomials (30), (31) and the domain Q boundaries equations were entered as the input data. The following results have been obtained. The circular image root locus equation for the given system: +σω +σω +σω+σω+ω + σω+ωσ+ω2 22 32 42 4 4 42 6158 113 30 3 8,20 15 3 .0 304 643 587 303 8,91 15 32,42 3 5 6 2= +σ +σ +σ +σ +σ+σ+ω + The CRLF function, applied for the system investigation: +σω +σω+ω+ω +σω+σω+ω=ωσ22 32 2 4 4 24 6113 30 3 7,20 15 3 ),(*f .328 644 588 303 9,91 2,15 3,45 1582 3 4 5 6 2 2+σ +σ +σ +σ +σ +σ+ω +σω + For determination of the CRLF level line, inscribed into the quality domain, the fol- lowing systems of equations (25), (26) and (29) were solved: 920 Industrial Robotics: Theory, Modelling and Control ¿¾½ −=σ= +σ +σ +σ+σ+ω +σω+σω+ω 28,106,90 316 226 60 6 8,82 60 12 62 3 4 2 2 22 4 ; ¿¾½ −=σ= +σ +σ +σ+σ+ω +σω+σω+ω 68,406,90 316 226 60 6 8,82 60 12 62 3 4 2 2 22 4 ; . 0) )(6,90 316 226 60 6 8,8260 12 6())(644 1180 909 36875 6 158 226 90 12 15 6( 2 3 4 22 22 4 2 34 5 2 2 22 32 4 4 °° ¿°° ¾½ σ=ω=ω− +σ +σ +σ+σ+ω ++σω+σω+ω+σ− +σ +σ +σ ++σ+σ+ω +σω +σω+σω+ω+σω The first equation of the first and the second system represents the CRLF gra- dient value in the contact points of the field level line and the lines, bounding the quality domain from the left and right (the lines of equal degree of stabil- ity), the second equation represents the equation of the lines of equal degree of stability. The first equation of the third system represents the equation of a tangent to the CRLF level line, which passes through the origin. As a result of these equations three points of contact of the CRLF level lines and the lines Lη', Lη'' and L+β, bounding the quality domain, are defined. In fig. 8 these points are t1,t2 for contact of level lines L1'', L1' correspondingly and the constant damp- ing line L+β and point t3 for contact of the level line L2'' and the line Lη'' of equal degree of stability. It has been found, that the point t2 belongs to the level line, inscribed into the domain Q, and the lines L2',L2'', which correspond to the contact point t3, and the level line L2''' get beyond this domain (the lines L2',L2'' and L2''' represent mappings of a single circular image). Thus, three simply connected closed regions (in fig. 8 they are cross-hatched) are formed, bounded correspondingly by three level lines L1',L1'' and L1'', representing three sheets of the three-sheeted domain, defined by mapping of the image disc onto the plane s using three branches of the three-valued mapping func- tion. This three-sheeted domain represents the domain of the characteristic equation roots, satisfying the required quality. The image of this domain boundary onto the plane an is the circle of radius r= 2, bounding the desired closed domain D of the free parameter an values, which comply with the given conditions of the system stability. The developed method for parametric synthesis of the dynamic systems, meet- ing the robust quality requirements, is based on the circular root locus fields application. It allows to select some regions of the system characteristic equa- tion roots location, belonging to the given quality domain, which defines the required quality indicators values (degree of stability and oscillation), and also to define the corresponding regions of the variable parameters values, ensur-ing the status when the system quality characteristics do not get beyond the boundaries set. The main advantage of the method is, that it allows to deter- mine the system parameters values, which ensure the required quality indica-Industrial robot control system parametric design on the base of methods for uncertain… 921 tors for cases when the given system does not comply with the requirements, i.e. to carry on the dynamic systems parametric synthesis. The method can be generalized to the tasks of roots location within the domains of other shapes. Parametric design of the industrial robot robust control systemon the base of the method for interval control systems synthesis Operation of the industrial robot (see section 2) in conditions of uncertainty is considered, when its parameters are subject to substantial variation. The above described technique is applied for solving the task of the anthropomorphous robot manipulator units control system parametric synthesis. It allows to find analytically the manipulator parameters values variation ranges, which will ensure maintaining the system stability property and the required operational quality within their limits, i. e. to ensure the system robustness. 5.1 Control system model for the case of operation in conditions of uncertainty Robots loads change with variation of the weights of the items they carry, that causes variation of the load inertia moment j l, which is linearly included into the characteristic equation coefficients (see (1) and (2)), generating their varia- tion intervals. Currently during the design procedure robots parameters val- ues in the cases of substantial parameters variation are obtained by the tech- nique of tests and mistakes. Conduct parametric synthesis of the manipulator shoulder control system in conditions of its parameters uncertainty using the analytical method described in 3. Let coefficients of the characteristic equation (3) for the manipulator shoulder unit vary within the following limits: .1056,0 10 488,0;106,0 1052,0;10 427,0 10 373,0;105,0 104,0;1 9 497 37 3 23 3 13 0 ⋅ ≤ ≤ ⋅⋅ ≤ ≤ ⋅ ⋅ ≤ ≤ ⋅ ⋅ ≤ ≤ ⋅ = aa a a a Suppose any of the coefficients, e. g. a4, varies continuously along the real axis in the plane of system fundamental frequencies. Taking into account expres- sion (1), the complex mapping function (5), that determines root loci of the in- terval system relative to a4, is defined as ) ()()()(32 23 14sa sa sa ssssf + + + −=ψφ−= . (32) The control system characteristic equation is 922 Industrial Robotics: Theory, Modelling and Control .0 )( )(4 32 23 14 4 = + + + + = ψ+ φ asa sa sa ss as (33) The limit values of equation (33) coefficients variation intervals are entered to the input of the package ANALRL for computer-aided investigation of control systems with variable parameters. During the package functioning the Khari- tonov's polynomials of the system characteristic equation are formed: .0 1056,0 1052,0 10 373,0 105,0 )(,0 10 488,0 106,0 10 427,0 104,0 )(,0 10 488,0 1052,0 10 427,0 105,0 )(,0 1056,0 106,0 10 373,0 104,0 )( 9 7 25 33 4 49 7 25 33 4 39 7 25 33 4 29 7 25 33 4 1 = ⋅ + ⋅ + ⋅ + ⋅ + == ⋅ + ⋅ + ⋅ + ⋅ + == ⋅ + ⋅ + ⋅ + ⋅ + == ⋅ + ⋅ + ⋅ + ⋅ + = s s s sshs s s sshs s s sshs s s ssh These four equations form the basis for generation of the mathematical model for the robot interval control system in the form of the Kharotiniv’s polynomi- als root loci. Considering presence of the load inertia moment jl substantial variations, it is required to find the coefficients variation intervals, ensuring stability of the characteristic equations family. 5.2 Procedure of the control system parametric synthesis For the task solution apply the method, described in section 3, which allows to calculate the characteristic equations family coefficients intervals, ensuring the system robust stability. First, zeroes of functions (32) (the poles of the open loop transfer function) are calculated for the above Kharitonov's polynomials and, if they are located in the left-half plane of the plane s (see statement given in subsection 3.3) or on the stability bound iω, the root loci of Kharitonov's polynomials are generated on the basis of these functions. As for our example one of zeroes of function (32) is located on the stability bound (in the point s= 0), the direction of the corresponding root locus is veri- fied. It is stated that the positive branch is directed from this zero to the left half plane that, according to the above given statement (see 3.3), means the ex- istence of positive stability intervals of the system investigated. After constructing the parameter functions according to the technique sug- gested above (see section 3.4), the variable coefficient values from the set Ar+ (11)) in the cross points of the Kharitonov's polynomials root loci branches with the system stability bound iω are determined. For the given case the fol- lowing values have been obtained: Industrial robot control system parametric design on the base of methods for uncertain… 923 1+ ra=0,334 ⋅910 (polynomial 1h); 2+ ra=0,336 ⋅910 (polynomial 2h); 3+ ra=0,414 ⋅910 (polynomial 3h); 4+ ra= 0,280 ⋅910( polynomial 4h). According to the corresponding task algorithm and the obtained values, the minimal positive value min+ ra = 0.280 ⋅109 is determined. The interval (13) of 4a values variation is calculated that ensures system asymptotic stability: d = (0; 0.280 ⋅109)). On the basis of the theorem, formulated in 3.4, the following stabil- ity condition of the interval system is formed: 0 < a4 < 0.280 ⋅109. As the root locus parameter varies within the limits 4a= 0.56 ⋅109, and 4a=0.488 ⋅109, the upper one doesn’t comply with the stability condition. For ensuring stability of the considered interval control system the upper limit should be set to 4a= 0.280 ⋅109. The limits of the acceptable interval of the coef- ficient4avariation are the following: 4a= 0.280 ⋅109,4a= 0. From the above described calculations it is evident that the developed method can be applied not only for investigating the interval system stability, but also for calculating intervals of its variable parameters in case the initial system is not stable. It is worth to pinpoint that the method allows to ensure the system asymptotic stability by setting up only one coefficient of its characteristic equa- tion.924 Industrial Robotics: Theory, Modelling and Control Conclusion Industrial robots represent devices, which usually operate in conditions of substantial uncertainty. Therefore, in this chapter the problem of uncertain control systems stability and quality is considered in application to the indus- trial robot analysis and synthesis tasks solution. The task for synthesis of the interval control systems stable polynomials has been solved. For its solution the investigation of the system root locus portrait behavior at the asymptotic stability boundary has been carried out. On this basis the system robust stabil- ity condition was formulated. The method has been developed for setting up the interval polynomial for ensuring its stability in cases, when the stability verification showed, that the initial polynomial was unstable. If the system or- dern > 3, this method is applicable when the Kharitonov’s polynomials free root loci initial points are located in the left complex half-plane, because in this case the root locus portrait configuration ensures existence of the stability in- terval on every branch of the root loci. When n 3, the method is applied without any conditions (limitations). The algorithm considered allows to carry on parametric synthesis of the stable interval system without its root locus por- trait modification by setting up the limit values of the characteristic polyno- mial coefficients variation intervals. Thus, the stability interval for the initially unstable polynomial is defined. The obtained stable polynomial can be se- lected to be the nearest to the initial (given) one in the sense of the distance, measured along its root trajectories with consideration of the appropriate sys- tem quality requirements. The root locus method has also been developed for ensuring the required quality ( Q-stability) of the uncertain control system. It is based on inscription of the circular root locus field level line into the given quality domain. Currently during the industrial robots design procedure in the cases of sub- stantial parameters variation the robots control systems parametric synthesis is often conducted by the method of tests and mistakes. The techniques, consid- ered here, allow to carry on the analysis and parametric synthesis of the robot control system, operating in conditions of parametric uncertainty, using ana- lytical procedures. Industrial robot control system parametric design on the base of methods for uncertain… 925 References Barmish, B. (1984). Invariance of the strict hurwitz property for polynomials with perturbed coefficients. IEEE Trans. Automat. Control , Vol. 29, N Ȝ. 10, (October 1984) 935–936, ISSN 0018-9286. Bartlett, A.; Hollot, C. & Lin, H. (1987). Root Location of an entire polytope of polynomials in suffices to check the edges. Math. Contr., Vol. 1, N Ȝ. 1, (1987) 61–71, ISSN 0932-4194. Bhattacharyya, S.; Chapellat, H. & Keel, L. (1995). Robust Control: the Parametric Approach , Prentice Hall, ISBN 013781576X, New York. Gaivoronsky, S. (2006). Vertex analysis for the interval polynomial roots local- ization in the given sector [in Russian], Theses of the Third International Conference on Control Problems , p. 95, ISBN 5-201-14987-1, Moscow, June 20–22, 2006, Institute of Control Sciences of the Russian Academy of Sci- ences, Moscow. Gryazina, E. & Polyak, B. (2006). Stability regions in the parameter space: D-decomposition revisited. Automatica , Vol. 42, No. 1, (January 2006) 13–26, ISSN 0005-1098. Handbook of Industrial Robotics (1989). Edited by Nof, S. John Wiley and Sons, ISBN 04711778, New York. Kharitonov, V. (1978). About asymptotic stability of the linear differential equations family equilibrium [in Russian]. Differentsyal'nye Uravneniya , Vol. XIV, No. 11, (November 1978) 2086–2088, ISSN 0374-0641. Kraev, A. & Fursov, Ǯ. (2004). Estimating the instability radii for polynomials of arbitrary power [in Russian]. Nonlinear Dynamics and Control . Issue 4: Collection of Papers / Eds. Emelyanov, S. & Korovin, S. FIZMATLIT, ISBN 5-9221-0557-4, Moscow, pp. 127–134. Lavrentyev, M. & Shabat, B. (1987). Methods of the Complex Variable Functions Theory , Nauka, Moscow. Nesenchuk, A. (2002). Parametric synthesis of qualitative robust control sys- tems using root locus fields. Proceedings of the 15th Triennial World Con- gress of IFAC , vol. E, pp. 331–335, ISBN 0-08-044220-X, Barcelona, Spain, July 21–26, 2002, Elsevier Science, Oxford. Nesenchuk, A. (2005). Analysis and Synthesis of Robust Dynamic Systems on the Basis of the Root Locus Approach [in Russian], United Institute of Informat- ics Problems of the Belarusian National Academy of Sciences, ISBN 985- 6744-18-0, Minsk. Polyak, B. & Tsypkin, Y. (1990). Frequency criteria for robust stability and aperiodicity [in Russian]. Avtomatika i Telemekhanika , No. 9, (September 1990) 45–54, ISSN 005-2310. Polyak, B. & Scherbakov, P. (2002), a. Robust Stability and Control [in Russian], Nauka, ISBN 5-02-002561-5, Moscow. 926 Industrial Robotics: Theory, Modelling and Control Polyak, B. & Scherbakov, P. (2002), b. Superstable linear control systems I, II ([n Russian]. Avtomatika i Telemekhanika , No. 8, (2002) 37– 53, ISSN 005-2310. Rantzer, A. (1992). Stability conditions for polytopes of polynomials. IEEE Trans. Automat. Control , Vol. 37, N Ȝ. 1, (January 1992) 79–89, ISSN 0018- Rimsky, G. (1972). Basics of the General Root Locus Theory for Control Systems [in Russian], Nauka i Tekhnika, Minsk. Rimsky, G & Taborovetz, V (1978). Computer-Aided Investigation of the Automatic Systems , Nauka I Tekhnika, Minsk. Shaw, J. & Jayasuriya, S. (1993). Robust stability of an interval plant with re- spect to a convex region in the complex plane. IEEE Trans. Automat. Con- trol, Vol. 38, N Ȝ. 2, (February 1993) 284-287, ISSN 0018-9286. Soh, C.; Berger, C. & Dabke, K. (1985). On the stability properties of polynomi- als with perturbed coefficients. IEEE Trans. Automat. Control , Vol. 30, N Ȝ. 10, (October 1985) 1033–1036, ISSN 0018-9286. Soh, Y. (1989). Strict hurwitz property of polynomials under coefficient pertur- bations. IEEE Trans. Automat. Control , Vol. 34, N Ȝ. 6, (June 1989) 629– 632, ISSN 0018-9286. Tsypkin, Y. & Polyak, B. (1990). Frequency criteria of robust modality for the linear discrete systems [in Russian]. Avtomatika i Teeamekhanika , No. 4, (April 1990) 3–9, ISSN 005-2310. Tsypkin, Y. (1995). Robust stability of the relay control systems [in Russian]. Doklady RAN , Vol. 340, No. 6, (February 1995) 751–753, ISSN 0869-5652. Uderman, E. (1972). The Root Locus Method in the Control Systems Theory [in Russian], Nauka, Moscow. Vicino, A. (1989). Robustness of pole location in perturbed systems. Auto- matica , Vol. 25, No. 1, (January 1989) 109-113, ISSN 0005-1098. 92734 Stochastic Analysis of a System Containing One Robot and (n-1) Standby Safety Units with an Imperfect Switch B.S.Dhillon and S.Cheng Introduction Robots are increasingly being used in industry to perform various types of tasks. These tasks include material handling, spot welding, arc welding and routing. The word ‘Robot’ is derived from the Czechoslovakian language, in which it means ‘worker’. In 1959, the first commercial robot was manufactured by the Planet Corporation and today there around on million robots in use worldwide [1-4]. Although robots are used to replace humans performing various types of complex and hazardous tasks, unfortunately over the years a number of acci- dents involving robots have occurred. In fact, many people have been killed or injured [5-7]. In using robots, particularly in the industrial sector, often safety units are included with robots. A robot has to be safe and reliable. An unreli-able robot may become the cause of unsafe conditions, high maintenance costs, inconvenient, etc. As robots contain parts such as electrical, electronic, mechanical, pneumatic and hydraulic their reliability problem become a challenging task because of many different sources of failures. Thus, this paper presents a mathematical model for performing reliability and availability analyses of a system contain- ing one robot and (n-1) standby safety units with a switch in mechanism that can fail. More specifically, the robot system is composed of one robot, n identi- cal safety units and a switch to replace a failed safety unit. The block diagram of the robot system is shown in Figure1 and its correspond- ing state space diagram is presented in Figure2. The numerals and letter n in the boxes of Figure2 denote system state. At time t =0, robot, one safety unit and the switch to replace a failed safety unit start operating and n-1 safety units are on standby. The overall robot-safety system can fail the following two ways: 928 Industrial Robotics: Theory, Modelling and Control R : Robot SU : n identical safety units ( one operating and n-1 on standby) S : Switch for replacing a failed safety unit and it can also fail. Figure 1. The block diagram of the robot-safety system •The robot fails with a normally working safety unit and the switch. In addi- tion zero or more safety units are on standby. •The robot fails with one or more safety units failed or considered failed and the switch is either working or failed. •The following assumptions are associated with this model: •The robot-safety system is composed of one robot, n identical safety units ( only one operates and the rest remain on standby) and a switch. •Robot, switch and one safety unit start operating simultaneously. •The completely failed robot-safety system and its individually failed units ( i.e. robot, switch and safety unit) can be repaired. Failure and repair rates of robot, switch and safety units are constant. •The failure robot-safety system repair rates can be constant or non-constant. •All failures are statistically independent. •A repaired safety unit, robot, switch or the total robot-safety system is as good as new. R 1 2 n 3 SSUStochastic Analysis of a System containing One Robot and…. 929 Figure 2. The state space diagram of the robot-safety system 1.1 Notation The following symbols are associated with the model: iith state of the robot-safety system. fori = 0, means the robot, the switch and one safety unit are working normally; fori = 1, means the robot, the switch, one safety unit are working normally and one safety unit has failed; for i = k, means the robot, the switch, one safety unit are working normally and k safety units have failed; ( i.e., k = 2,3……n-1); for i = n, means the robot work, the switch are working normally and all safety units have failed; for i = h, means the robot, one safety unit still work normally and h-n safety units and the switch have failed; ( i.e., h = n+1, n+2,…… 2n) for i = 2n+1, means the robot work normally and all the safety units and the switch have failed; 930 Industrial Robotics: Theory, Modelling and Control j jth state of the robot–safety system: for j = 2n+2, means the total robot-safety system has failed ( i.e. the robot , one or more safety units have failed or considered failed and the switch is either working or failed); for j = 2n+ 3, means the robot-safety system has failed ( i.e. the robot has failed while a safety unit and the switch are working normally. In addition, zero or more safety units are on standby); t time. sǌ Constant failure rate of a safety unit. Ǆǌ Constant failure rate of the robot. wǌ Constant failure rate of the switch. sǍ Constant repair rate of a safety unit. wǍ Constant repair rate of the switch. xƦ: Finite repair time interval. jǍ(x) Time dependent repair rate when the failed robot-safety system is in state j:and has an elapsed repair time of x; for j = 2n+2, 2n+3. ()j x Px . tƦ The probability that at time t, the failed robot-safety system is in state j and the elapsed repair time lies in the interval [x, x+ Δx]; for j = 2n+2, 2n+3 . pdf Probability density function. wj(x) Pdf of repair time when the failed robot-safety system is in state j and has an elapsed time of x; for j = 2n+2, 2n+3 . Pj(t) Probability that the robot safety system is in state j at time t; for j = 2n+2, 2n+3. Pi(t) Probability that the robot-safety system is in state i at time t; for i = 0,1,2…2n+1. Pi Steady state probability that the robot-safety system is in state i; for i=0,1,..2n+1. jP Steady state probability that robot-safety system is in state j; for j = 2n+2, 2n+3. s Laplace transform variable. ()iPs Laplace transform of the probability that the robot-safety system is in state i; for i = 0,1,2…2n+1. ()jPs Laplace transform of the probability that the robot-safety system is in state j; for j = 2n+2, 2n+3. Stochastic Analysis of a System containing One Robot and…. 931 AVrs(s) Laplace transform of the robot-safety system availability with one normally working safety unit, the switch and the robot. AVr(s) Laplace transform of the robot-safety system availability with or without a normally safety unit. AVrs (t) Robot-safety system time dependent availability with one nor- mally working safety unit, the switch and the robot. AVr(t) Robot-safety system time dependent availability with or without a normally working safety unit. SSAVrs Robot-safety system steady state availability with one normally working safety unit, the switch and the robot. SSAVr Robot-safety system steady state availability with or without a normally working safety unit. Rrs(s) Laplace transform of the robot-safety system reliability with one normally working safety unit, the switch and the robot. Rr(s) Laplace transform of the robot safety system reliability with or without a normally working safety unit. MTTFrs Robot-safety system mean time to failure when the robot working normally with one normally working safety unit. MTTFr Robot-safety system mean time to failure with or without a nor- mally working safety unit. Generalized robot-safety system analysis Using the supplementary method [8,9],the equations of the system associated with Fig.2 can be expressed as follows: dttdP )(0 + a0P0(t) = sμP1(t) + wμP1+n (t) + ¦+ +=32 22)(),(n njj j dxx txP μ (1) dttdPi)(+aiPi(t)=sλP1−i(t) + sμP1+i(t) + wμP1++ni(t) (2) ( for i = 1,2,……..,n-1) dttdPn)(+anPn(t)=sλP1−n(t)+wμP12+n(t) (3) dttdPi)( + aiPi (t) = wλP1−−ni (t) ( for i = n+1,n+2,……..,2n) (4) dtt dPn)(12++a12+nP12+n(t)=sλ¦ +=n niitP2 1)(+wλPn(t) (5) 932 Industrial Robotics: Theory, Modelling and Control where a0 = sλ + wλ + rλ ai =sλ + wλ + rλ + sμ ( for i = 1,2,……..,n-1) an =wλ + rλ + sμ ai =sλ + rλ +wμ ( for i = n+1,n+2,……..,2n) a12+n =rλ +wμ ttxPj ∂∂ ),(+ xtxPj ∂∂ ),( + jμ(x) Pj(x,t) = 0 ( for j = 2n+2,2n+3) (6) The associated boundary conditions are as follows: P22+n(0,t)=rλ¦+ =12 )(n niitP (7) P32+n(0,t)=rλ¦− =1 0)(n iitP (8) At time t = 0, P0(0) = 1, and all other initial state probabilities are equal to zero. Generalized Robot-Safety System Laplace Transforms of State Probabilities By solving Equations (1)-(8) with the Laplace transform method, we get the following Laplace transforms of state probabilities: P0(s) = [ s(1 + ¦ =n iisY 1)( + 1++nw asλ + ¦+ +=12 2)(n niisV + ¦+ +=−32 22)( 1)(n njj jssWsa )]1− = )(1 sG (9) Pi(s) = Yi(s) P0(s) (for i = 1,2,……..,n) (10) Pi(s) = Vi(s) P0(s) (for i = n+2,n+2,……..,2n+1) (11) P1+n (s) = 1++nw asλ P0(s) (12) Stochastic Analysis of a System containing One Robot and…. 933 Pj(s) = aj(s)ssWj)( 1− P0(s) (for j= 2n+2, 2n+3) (13) where Li(s) = ( s + ai ) - 1+++niw w asμλ ( for i = 1,2,……..,n) D1(s) = L1(s) Di(s) = Li(s) - )(1s Diss −μλ ( for i = 2,……..,n) Ai(s) = ∏ =i hhi s sD 1)(λ ( for i = 1,2,……..,n-1) Bi(s) = )(sDisμ ( for i = 1,2,……..,n-1) Yi(s) = ∏¦− =− =1 1 )( )(h ikkn ihh sB sA + )()(1 sYsBnn ihh∏− = ( for i = 1,2,……..,n-1) Vi (s) = iw as+λY1−−ni(s) ( for i = n+2,……..,2n) V12+n (s) = ) )( (12 1 + + + +n nws as asλλ + 12+ +ns asλ¦− = +++1 1 1n i niw asλ Yi(s) + 12+ +nw asλYn(s) Yn(s) = ¦ ∏¦¦ ∏ − =− = ++ +−− =− =− = ++ + + +− + +− −+ +++ ++ 1 11 1 1211 11 1 1 12 12 11 )( )( )()]( )([) )( ()( n in ihh niw nws ns nn in ihh ikk h niw nws n nw ws ns sBas ass B sLsB sAas as as ass A λ μλλλ μλ μλλλ a22+n (s) = rλ[ Yn(s) + 1++nw asλ +¦+ +=12 2)(n niisV ]934 Industrial Robotics: Theory, Modelling and Control a32+n(s) = rλ[1+¦− =1 1)(n iisY ] G(s) = s(1 + ¦ =n iisY 1)( + 1++nw asλ + ¦+ +=12 2)(n niisV + ¦+ +=−32 22)( 1)(n njj jssWsa ) (14) Wj(s) = ³∞ − 0esxwj(x)dx for j= 2n+2, 2n+3) (15) wj(x) = exp[-³x jd 0)(δδμ ] )(xjμ where wj(x) is the failed robot safety system repair time probability density function The Laplace transform of the robot-safety system availability with one nor- mally working safety unit, the switch and the robot is given by: AVrs(s)=¦− =1 0)(n iisP +¦ +=n niisP2 1)(=)()( )( 11 12 2 1 sGsVassYn in nii nw i¦¦− =+ = ++++ +λ (16) The Laplace transform of the robot-safety system availability with or without a normally working safety unit: AVr(s) = ¦+ =12 0)(n iisP = )()( )( 112 2 1 1 sGsV sYasn niin ii nw¦¦+ += = ++ +++λ (17) Taking the inverse Laplace transforms of the above equations, we can obtain the time dependent state probabilities, Pi(t)and Pj(t), and robot-safety system availabilities, AVrs(t) and AVr(t). 3.1 Robot Safety System Time Dependent Analysis For A Special Case For two safety units ( i.e., one working, other one on standby) Substituting n=2 into Equations (9)-(16), we get Stochastic Analysis of a System containing One Robot and…. 935 P0(s) = ¦¦ ¦ == =−+ +++ +2 17 65 4 3])( 1)( )( )( 1[1 ijj j iiw issWsa sVassY sλ = )(1 sG (18) Pi (s) = Yi(s) P0(s) (for i = 1,2) (19) P3(s)= 3asw +λP0(s) (20) Pi(s) = Vi(s)P0(s) (for i = 4,5) (21) Pj(s)=aj(s)ssWj)( 1−P0(s) (22) where Y2(s) = )() )( ()()()() )( () )( ()( 1 5 4 121 5 4 5 3 1 sLasas sLsLsLasas asas sL s w ws s ss w ws w ws s s μ μλλ μλμ μλλ μλλ λλ + +− −+ +++ ++ Y1(s) = )(1sLsλ + )(1sLsμY2(s) V5(s) = ) )( (5 3 asasws + +λλ + 5ass +λ 4asw +λY1(s) + 5asw +λY2(s) V4(s) = 4asw +λ Y1(s) a6(s) = rλ[ Y2(s) + 3asw +λ + ¦ =5 4)( iisV ] a7(s) = rλ[ 1+ Y1(s)] L1(s) = (s+a1) - 4asw w +μλ L2 (s) = (s+a2) - 5asw w +μλ936 Industrial Robotics: Theory, Modelling and Control G(s) = s[1+¦ =2 1)( iisY + 3asw +λ + ¦ =5 4)( iisV + ¦ =−7 6)( 1)( jj jssWsa ] (23) The Laplace transform of the robot-safety system availability with one nor- mally working safety unit, the switch and the robot is given by: AVrs(s =¦ =1 0)( iisP +¦ =4 3)( iisP =)()( )( 14 31 sGsVassYw+++ +λ (24) The Laplace transform of the robot-safety system availability with or without a normally working safety unit is given by: AVr(s)=¦ =5 0)( iisP =)()( )( 12 15 4 3 sGsVassY iiiw i¦¦ ==+++ +λ (25) Taking the inverse Laplace transforms of the above equations, we can obtain the time dependent state probabilities, Pi(t)and Pj(t), and robot-safety system availabilities, AVrs(t) and AVr(t). Thus, for the failed robot-safety system repair time x is exponentially distrib- uted repair times, the probability function is expressed by w j(x) = jμexjμ− (jμ > 0, j = 6,7) (26) where x is the repair time variable andjμ is the constant repair rate of state j. Substituting equation (26) into equation (15), we can get Wj(s) = jj sμμ + (jμ > 0, j = 6,7) (27) By inserting Equation (27) into Equations (9)-(13), settingsλ=0.002,sμ= 0.00015,wλ=0.001,wμ= 0.0003, rλ= 0.00009, 6μ = 0.0001, 7μ= 0.00015; and us- ing Matlab computer program [10], the Figure 3 plots were obtained. These plots show that state probabilities decrease and increase with varying time t. Stochastic Analysis of a System containing One Robot and…. 937 sλ=0.002, sμ= 0.00015, wλ=0.001, wμ= 0.0003, rλ= 0.00009, 6μ = 0.0001, 7μ= 0.00015 Figure 3. Time-dependent probability plots for a robot safety system with exponential distributed failed system repair time. Generalized Robot Safety System Steady State Analysis As time approaches infinity, all state probabilities reach the steady state. Thus, from Equations (1)-(8) get: a0P0=sμP1+wμPn+¦+ +=32 22)()(n njj j dxx xP μ (28) aiPi=sλP1−i+sμP1+i+wμP1++ni (29) ( for i = 1,2,……..,n-1) anPn=sλP1−n+wμP12+n (30) aiPi=wλP1−−ni (31) ( for i = n+1,n+2,……..,2n-k-1) 938 Industrial Robotics: Theory, Modelling and Control a12+nP12+n=sλ¦ +=n niiP2 1+wλPn (32) where a0 = sλ + wλ + rλ ai =sλ + wλ + rλ + sμ ( for i = 1,2,……..,n-1) an =wλ + rλ + sμ ai =sλ + rλ +wμ ( for i = n+1,n+2,……..,2n) a12+n =rλ +wμ dxxdPj)( + jμ(x)Pj(x) = 0 ( for j = 2n+2,2n+3) (33) The associated boundary conditions are as follows: P22+n(0)=rλ¦+ =12n niiP (34) P32+n(0)=rλ¦− =1 0n iiP (35) Solving Equations (28) - (33), and together with ¦+ =12 0n iiP+¦+ +=32 22n njjP=1 (36) We get: P0 = ( 1 + ¦ =n iiY 1 + 1+nw aλ + ¦ +=n niiV2 2 + ¦+ +=32 22][n njjjxEa )1− = G1 (37) Pi = Yi P0 ( for i = 1,2,……..,n) (38) Pi = Vi P0 ( for i = n+2,……..,2n+1) (39) P1+n = nw aλ P0 (40) Pj = ajEj[x] P0Stochastic Analysis of a System containing One Robot and…. 939 (for j= 2n+2, 2n+3) (41) where Li = 0lim →sLi(s) ( for i = 1,2,……..,n) D1 = L1 Di = Li - 1−iss Dμλ ( for i = 2,……..,n) Ai = ∏ =i hhi s D 1λ ( for i = 1,2,……..,n-1) Bi = is Dμ ( for i = 1,2,……..,n-1) Yi = ∏¦− =− =1 1 h ikkn ihhB A + nn ihhYB∏− =1 ( for i = 1,2,……..,n-1) Vi = iw aλY1−−ni ( for i = n+2,……..,2n) V12+n = 121 + + n nws aaλλ + 12+ns aλ¦− = ++1 1 1n i niw aλ Yi + 12+nw aλYkn− Yn = ¦ ∏¦¦ ∏ − =− = ++ +−− =− =− = ++ + +− − −+ + 1 11 1 1211 11 1 1 12 121 n in ihh niw nws ns nn in ihh ikk h niw nws n nw ws ns Ba aB LB Aa a aaA λ μλλλ μλ μλλλ a22+n = rλ(Yn+¦+ +=12 2n niiV + 1+nw aλ) a32+n = rλ(1+¦− =1 1n iiY)940 Industrial Robotics: Theory, Modelling and Control G =1 + ¦− =1 1n iiY + 1+nw aλ + ¦+ +=12 2n niiV + ¦+ +=32 22][n njjjxEa (42) Ej[x] = ³³∞− 00])( exp[x j dxdδδμ (43) =³∞ 0)(dxx xwj ( for j = 2n+2,2n+3) where wj(x) is the failed robot safety system repair time probability density function Ej[x] is the mean time to robot safety system repair when the failed robot safety system is in state j and has an elapsed repair time x. The generalized steady state availability of the robot safety system with one normally working normally safety unit, the switch and the robot is given by SSAVrs=¦− =1 0n iiP+¦ +=n niiP2 1=GVaYn in nii nw i¦¦− =+ = ++ + +1 12 2 11λ (44) Similarly, the generalized steady state availability of the robot safety system with or without a working safety units is SSAVr=¦+ =12 0n iiP=GVaYn in nii nw i¦¦ =+ += ++ + + 112 2 11λ (45) For different failed robot-safety system repair time distributions, we get differ- ent expressions for G as follows: 1) For the failed robot-safety system Gamma distributed repair time x, the probability density function is expressed by wj(x) = )(1 βμμ ββ Γ− − x jjex (β> 0, j= 2n+2,2n+3) (46) whereStochastic Analysis of a System containing One Robot and…. 941 x is the repair time variable, )(βΓ is the gamma function, jμ is the scale pa- rameter and β is the shape parameter. Thus, the mean time to robot-safety system repair is given by Ej(x) = ³∞ 0)(dxx xwj = jμβ ( β> 0, j= 2n+2,2n+3) (47) Substituting equation (47) into equation (42), we get G =1+¦− =1 1n iiY+ 1+nw aλ+¦+ +=12 2n niiV + ¦+ +=32 22][n njj jj xE aμβ (48) 2) For the failed robot-safety system Weibull distributed repair time x, the probability density function is expressed by wj(x) = βμ ββμ)( 1 x jjex− − ( β > 0, j= 2n+2, 2n+3) (49) where x is the repair time variabl,jμ is the scale parameter and β is the shape pa- rameter . Thus, the mean time to robot-safety system repair is given by Ej[x] = ³∞ 0)(dxx xWj = ( jμ1)β/1 β1)1(βΓ (β > 0, j= 2n+2,2n+3) (50) Substituting (50) into equation (42), we can get G =1+ ¦− =1 1n iiY + 1+nw aλ + ¦+ +=12 2n niiV + )1(1)1(/132 22 β β μβΓ ¦+ +=n nj jja (51) 3) For the failed robot-safety system Rayleigh distributed repair time x, the probability density function is expressed by wj(x) = 2/2x jjxeμμ− (jμ > 0, j = 2n+2,2n+3) (52) where942 Industrial Robotics: Theory, Modelling and Control x is the repair time varable,jμ is the scale parameter. Thus, the mean time to robot-safety system repair is given by Ej(x) = ³∞ 0)(dxx xWj = jμπ 2 (jμ > 0, j = 2n+2,2n+3) (53) Substituting (53) into equation (42), we can get G =1 +¦− =1 1n iiY+ 1+nw aλ + ¦+ +=12 2n niiV + ¦+ +=32 22 2n nj jjaμπ (54) 4) For the failed robot system Lognormal distributed repair time x, the prob- ability density function is expressed by wj(x) = jyxσπ21ejyjy Inx 22 2) ( [ σμ− − (for j = 2n+2,2n+3) (55) where x is the repair time variable, Inx is the natural logarithm of x with a mean μand variance2σ. The conditions μ and 2σon parameters are: jyσ = In2) (1 jj xx μσ + (56) jyμ = In2 24 j jj x xx σ μμ + (57) Thus, the mean time to robot-safety system repair is given by Ej(x) = ejy jy ) 2(2σ μ+ (for j = 2n+2, 2n+3) (58) Substituting (58) into equation (42), we can get Stochastic Analysis of a System containing One Robot and…. 943 G = 1 + ¦− =1 1n iiY + 1+nw aλ + ¦+ +=12 2n niiV + ¦+ +=+32 22) 2(2n njjejy jyaσ μ (for j = 2n+2,2n+3) (59) 5) For the failed robot system exponentially distributed repair time x, the probability density function is expressed by wj(x) = jμexjμ− (jμ > 0, j = 2n+2,2n+3) (60) where x is the repair time variable andjμ is the constant repair rate of state j. Thus, the mean time to robot-safety system repair is given by Ej(x) = ³∞ 0)(dxx xwj = jμ1 ( β> 0, j= 2n+2, 2n+3) (61) Substituting equation (61) into equation (42), we can get G =1+¦− =1 1n iiY+ 1+nw aλ+¦+ +=12 2n niiV + ¦+ +=32 221n nj jjaμ (62) 4.1 The Robot-Safety System Steady State Analysis For A Special Case For n = 2, from Equations (37)-(45), we get P0= ¦¦¦ == =+ + + +2 17 65 4 3][ 11 ijjj iiw i xEa VaYλ (63) Pi = Yi P0 (for i = 1,2) (64) P3= 3awλP0 (65) Pi = ViP0 (for i = 4,5) (66) 944 Industrial Robotics: Theory, Modelling and Control Pj=ajEj[x]P0 (67) where Y2(s) = 1 54 121 54 53 1 L aa LLL aa aa L s w ws s ss w ws w ws s s μμλλ μλμμλλ μλλ λλ − −+ + Y1 = 1Lsλ + 1LsμY2 V5 = 53aawsλλ + 54aawsλλY1 + 5awλY2 V4 = 4awλ Y1 a6 = rλ[ Y2 + 3awλ + ¦ =5 4iiV] a7 = rλ[ 1+ Y1] L1 = a1 - 4aw wμλ L2 = a2 - 5aw wμλ G = 1 + ¦ =2 1iiY + 3awλ + ¦ =5 4iiV+ ajEj[x] (68) SSAVrs=¦ =1 0iiP+¦ =4 3iiP= GaaYw 4 311 + ++λ (69) SSAVr=¦ =5 0iiP= GVaY iiiw i¦¦ ==+ + +2 15 4 31λ (70) Stochastic Analysis of a System containing One Robot and…. 945 For exponentially distributed failed robot-safety system repair Equation (61) into Equations (69) and (70), setting: sλ=0.0002,wλ=0.001,wμ= 0.0003,rλ= 0.00009, 6μ = 0.0001, 7μ= 0.00015; and using matlab computer program [10], the Figure 4 plot were obtained. The plot shows, as expected, that SSAVr is greater than SSAVrs and both of them increase slightly with the increasing values of the safety unit repair rate. Robot-Safety System Reliability and MTTF Analysis Settingjμ= 0, (for j = 2n+2, 2n+3 ), in Figure 2 and using the Markov me- thod[11], we write the following equations for the modified figure: dttdP )(0+a0P0(t)=sμP1(t)+wμP1+n(t) (71) dttdPi)(+aiPi(t =sλP1−i(t)+sμP1+i(t) + wμP1++ni (t) (72) ( for i = 1,2,……..,n-1) sλ=0.0002, wλ=0.001,wμ= 0.0003, rλ= 0.00009, 6μ = 0.0001, 7μ= 0.00015 Figure 4. Robot system steady state availability versus safety unit repair rate (sμ) plots with exponentially distributed failed system repair time 946 Industrial Robotics: Theory, Modelling and Control dttdPn)(+anPn(t)=sλP1−n(t)+wμP12+n(t) (73) dttdPi)(+aiPi (t) = wλP1−−ni(t) ( for i = n+1,n+2,……..,2n) (74) dtt dPn)(12++a12+nP12+n(t)=sλ¦ +=n niitP2 1)(+wλPn(t) (75) dtt dPn)(22+=rλ¦+ =12 )(n niitP (76) dtt dPn)(32+=rλ¦− =1 0)(n iitP (77) where a0 = sλ + wλ + rλ ai =sλ + wλ + rλ + sμ ( for i = 1,2,……..,n-1) an =wλ + rλ + sμ ai =sλ + rλ +wμ ( for i = n+1,n+2,……..,2n) a12+n =rλ +wμ At time t = 0, P0(0) =1 and all other initial conditions state probabilities are equal to zero. By solving Equations (71) – (77) with the aid of Laplace transforms, we get: P0(s) = P0(s) = [ s(1 + ¦ =n iisY 1)(+ 1++nw asλ+¦+ +=12 2)(n niisV +¦+ +=32 22)(n njj ssa)]1−=)(1 sG (78) Pi(s) = Yi(s) P0(s) ( for i = 1,2,……..,n) (79) Pi(s) = Vi(s) P0(s) ( for i = n+2,n+2,……..,2n+1) (80) P1+n(s)= 1++nw asλP0(s) (81) Stochastic Analysis of a System containing One Robot and…. 947 Pj(s) = ssaj)( P0(s) (for j= 2n+2, 2n+3) (82) G(s)=s[1+¦ =n iisY 1)(+ 1++nw asλ + ¦+ +=12 2)(n niisV + ¦+ +=32 22)(n njj ssa] (83) The Laplace transform of the robot-safety system reliability with one normally working safety unit, the switch and the robot is given by: Rrs(s)=¦− =1 0)(n iisP +¦ +=n niisP2 1)(=)()( )( 11 12 2 1 sGsVassYn in nii nw i¦¦− =+ = ++++ +λ (84) Similarly, the Laplace transform of the robot safety system reliability with or without a working safety unit is Rr(s)=¦+ =12 0)(n iisP =)()( )( 112 2 1 1 sGsV sYasn niin ii nw¦¦+ += = ++ +++λ (85) Using Equation (83) and Reference [11], the robot-safety system mean time to failure with one normally working safety unit, the switch and the robot is given by MTTFrs=lim 0→sRrs(s)= ¦¦¦ + +=− =+ = ++ + + 32 221 12 2 11 n njjn in nii nw i aVaYλ (86) Similarly, using Equation (84) and Reference [11], the robot safety system mean time to failure with or without a working safety unit isMTTFr=lim 0→sRr(s)= rλ1 (87) 948 Industrial Robotics: Theory, Modelling and Control 5.1 Robot-Safety System MTTF Analysis for a Special Case Substituting n = 2 into Equation (86) and (87), we get MTTFrs= ¦ =+ ++ 7 64 311 jjw aVaYλ (88) MTTFr= rλ1 (89) where Y2 = 1 54 121 54 53 1 L aa LLL aa aa L s w ws s ss w ws w ws s s μμλλ μλμμλλ μλλ λλ − −+ + Y1 = 1Lsλ + 1LsμY2 V5 = 53aawsλλ + 54aawsλλY1 + 5awλY2 V4 = 4awλ Y1 a6 = rλ[Y2+ 3awλ + ¦ =5 4iiV] a7 = rλ[1+ Y1] L1 = a1 - 4aw wμλ L2 = a2 - 5aw wμλStochastic Analysis of a System containing One Robot and…. 949 Forsλ=0.0002, wλ=0.001,wμ= 0.0003, rλ= 0.00009,and using Equa tions (88)-(89) and Matlab computer program [10], in Figure 5 MTTFrs and MTTFr plots were obtained.sλ=0.0002, wλ=0.001, wμ= 0.0003, rλ= 0.00009 Figure 5. The robot-safety system mean time to failure plots for the increasing value of the safety unit repair rate (sμ). These plots demonstrate that MTTF r is greater than MTTFrs, but just MTTFrs increases with the increasing value ofsμ.950 Industrial Robotics: Theory, Modelling and Control 6. References Zeldman, M.I., What Every Engineer Should Know About Robots , Marcel Dekker, New York, 1984 Ruldall, B.H., Automation and Robotics Worldwide: Reports and Survey , Robotica, Vol.14, 1996, pp. 243-251. Dhillon, B.S., Fashandi, A.R.M., Safety and Reliability Assessment Techniques in Robotics , Robotica, Vol.15, 1997, pp. 701-708. Dhillon, B.S., Fashandi, A.R.M., Liu, K.L., Robot Systems Reliability and safety: A Review , Journal of Quality in Maintenance Engineering, Vol. 8, No,3, 2002, pp. 170-212. Nicolaisen, P., Safety Problems Related to Robots , Robotics, Vol.3, 1987, pp. 205- Nagamachi, M., Ten Fatal Accidents Due Robots in Japan, in Ergonomics of Hybrid Automated Systems , edited by H.R. Korwooski, M.R., Parsaei, M.R., Slsevier, Amsterdam, 1998, pp. 391-396. Dhillon, B.S., Robot Reliability and Safety , springer, NewYork, 1991. Gaver, D.P., Time to failure and availability of paralleled system with repair , IEEE Trans. Reliab. Vol.12, 1963, pp.30-38. Grag, R.C., Dependability of a complex system having two types of components , IEEE Trans Reliab. Vol. 12, 1963, pp.11-15. Hahn, Brian D., Essential MATLAB for Scientists and Engineers , Oxford: Butterworth-Heinemann, 2002. Dhillion, B.S., Design Reliability: Fundamentals and Applications , CRC, Boca Raton, Florida, 1999. 951 Corresponding Author List Kazuhiko Kawamura Center for Intelligent Systems Vanderbilt University USAXin-Jun Liu Institute of Manufacturing Engineering Tsinghua University P. R.China I-Ming Chen School of Mechanical and Aerospace Engineering Nanyang Technological University SingaporeSpyros G. Tzafestas Intelligent Robotics and Automation Laboratory National Technical University of Athens Greece Peter Mitrouchev Integrated Design Centre Domaine Universitaire FranceMasatoshi Nakamura Saga University Japan Serdar Kucuk Kocaeli University TurkeySamir Lahouar Laboratoire de Mécanique des Solides France Tuna Balkan Mechanical Engineering Department Middle East Technical University TurkeyYung Ting Chung Yuan Christian University Taiwan, R.O.C. Ibrahim A. Sultan School of Science and EngineeringUniversity of Ballarat AustraliaLuis T. Aguilar Centro de Investigación y Desarrollo de Tecnología Digital (IPN) México Saeed Behzadipour University of Alberta CanadaMuhammad Suzuri Hitam University College of Science and Technology Malaysia Scott Nokleby University of Ontario Institute of Technology CanadaRecep Burkan Erciyes University Turkey952 Abdessemed Foudil University of Batna AlgeriaDe Xu Institute of AutomationChinese Academy of Sciences P. R. China MirosÙaw Galicki Institute of Medical Statistics Friedrich Schiller University Jena GermanyTheodor Borangiu University Politehnica of Bucharest Romania Houssem Abdellatif Institute of Robotics Hannover Center of Mechatronics GermanyXiao Nan-Feng Intelligent Systems Research Lab. Deakin University Australia Raffaele Di Gregorio Department of Engineering University of Ferrara ItalyFusaomi Nagata Tokyo University of Science Japan Hongliang Cui Stevens Institute of Technology USASatoru Goto Saga University Japan Mehrdad Moallem Department of Electrical & Computer Engineering University of Western Ontario CanadaLuis Filipe Baptista Department of Marine Engineering/IDMEC Escola Náutica Infante D. Henrique Portugal Dan Zhang University of Ontario Institute of Technology CanadaAntonio Visioli Dipartimento di Elettronica per l’Automazione University of Brescia Italy Haruki Ueno National Institute of Informatics JapanAlla A. Nesenchuk & Victor A. Nesenchuk United Institute of Informatics Problems of the Belarusian National Academy of Sciences Belarus Friedrich Lange Deutsches Zentrum für Luft- und Raumfahrt (DLR) GermanyBalbir S. Dhillon Department of Mechanical Engineering University of Ottawa Canada